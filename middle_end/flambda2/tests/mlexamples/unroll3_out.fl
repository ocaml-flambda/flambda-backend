let code odd_1 deleted and code even_0 deleted in
let code rec loopify(never) size(18) newer_version_of(even_0)
      even_0_1 (n : imm tagged)
        my_closure my_region my_depth
        -> k * k1
        : imm tagged =
  let prim = %phys_eq (n, 0) in
  switch prim
    | 0 -> k2
    | 1 -> k (1)
    where k2 =
      let Psubint = n - 1 in
      apply direct(odd_1_1)
        ($camlUnroll3__odd_3 ~ depth my_depth -> succ my_depth
         : _ -> imm tagged)
          (Psubint)
          &my_region
          -> k * k1
and code rec loopify(never) size(18) newer_version_of(odd_1)
      odd_1_1 (n : imm tagged)
        my_closure my_region my_depth
        -> k * k1
        : imm tagged =
  let prim = %phys_eq (n, 0) in
  switch prim
    | 0 -> k2
    | 1 -> k (0)
    where k2 =
      let Psubint = n - 1 in
      apply direct(even_0_1)
        ($camlUnroll3__even_2 ~ depth my_depth -> succ my_depth
         : _ -> imm tagged)
          (Psubint)
          &my_region
          -> k * k1
and $camlUnroll3__even_2 =
  closure even_0_1 @even
and $camlUnroll3__odd_3 =
  closure odd_1_1 @odd
in
apply direct(odd_1_1) inlining_state(depth(20))
  ($camlUnroll3__odd_3 ~ depth unroll 1 1 -> unroll 0 2 : _ -> imm tagged)
    (2)
    &toplevel
    -> k * error
  where k (four_is_odd : imm tagged) =
    let $camlUnroll3 =
      Block 0 ($camlUnroll3__even_2, $camlUnroll3__odd_3, 0, four_is_odd)
    in
    cont done ($camlUnroll3)
