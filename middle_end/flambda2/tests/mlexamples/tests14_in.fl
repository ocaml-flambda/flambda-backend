let $camlTests14__first_const55 = Block 0 () in
let code size(5)
      set_0 (t) my_closure my_region my_depth -> k * k1 : imm tagged =
  let Psetfield = %block_set imm t.(0) <- 42 in
  cont k (Psetfield)
in
let code size(6)
      nth_char_1 (s, n : imm tagged)
        my_closure my_region my_depth
        -> k * k1
        : imm tagged =
  let prim = %string_load 8 (s, n) in
  let Pstringrefu = %Tag_imm prim in
  cont k (Pstringrefu)
in
let code size(30)
      needs_try_region_2 (param : imm tagged)
        my_closure my_region my_depth
        -> k * k1
        : imm tagged =
  (let try_region = %begin_try_region my_region in
   cont k4 push(k3)
     where k4 =
       let Popaque = %Opaque 42 in
       (cont k4 pop(k3)
          where k4 =
            cont k2 (Popaque))
     where k3 exn (`exn`) =
       let `unit` = %end_region try_region in
       let prim = %phys_eq (`exn`, $`*predef*`.caml_exn_Not_found) in
       let Pintcomp = %Tag_imm prim in
       ((let untagged = %untag_imm Pintcomp in
         switch untagged
           | 0 -> k3
           | 1 -> k (0))
          where k3 =
            cont k1 pop(reraise k1) (`exn`)))
    where k2 (n : imm tagged) =
      cont k (1)
in
let code size(26)
      gadt_match_3 (x : [ 0 |1 | 0 of imm tagged ], n)
        my_closure my_region my_depth
        -> k * k1 =
  (let prim = %is_int x in
   let is_scrutinee_int = %Tag_imm prim in
   let untagged = %untag_imm is_scrutinee_int in
   switch untagged
     | 0 -> k3
     | 1 -> k4)
    where k4 =
      let untagged = %untag_imm x in
      switch untagged
        | 0 -> k (n)
        | 1 -> k2
    where k3 =
      invalid "Zero_switch_arms"
    where k2 =
      let Popaque = %Opaque n in
      cont k (Popaque)
in
(let set = closure set_0 @set in
 let nth_char = closure nth_char_1 @nth_char in
 let needs_try_region = closure needs_try_region_2 @needs_try_region in
 let gadt_match = closure gadt_match_3 @gadt_match in
 let Pmakeblock = %Block 0 (set, nth_char, needs_try_region, gadt_match) in
 cont k (Pmakeblock))
  where k define_root_symbol (module_block) =
    let field_0 = %block_load tag(0) size(4) (module_block, 0) in
    let field_1 = %block_load tag(0) size(4) (module_block, 1) in
    let field_2 = %block_load tag(0) size(4) (module_block, 2) in
    let field_3 = %block_load tag(0) size(4) (module_block, 3) in
    let $camlTests14 = Block 0 (field_0, field_1, field_2, field_3) in
    cont done ($camlTests14)
