let $camlTests15__empty_array12 = Empty_array in
let $camlTests15__immstring16 = "tests15.ml" in
let $camlTests15__const_block18 = Block 0 ($camlTests15__immstring16, 2, 52)
in
let $camlTests15__Pmakeblock21 =
  Block 0 ($`*predef*`.caml_exn_Assert_failure, $camlTests15__const_block18)
in
let $camlTests15__immstring67 = " \\ \n " in
let code size(18)
      list_to_array_0 (param : [ 0 | 0 of val * [ 0 | 0 of val * val ] ])
        my_closure my_region my_depth
        -> k * k1
        : any array =
  let prim = %is_int param in
  let Pisint = %Tag_imm prim in
  (let untagged = %untag_imm Pisint in
   switch untagged
     | 0 -> k2
     | 1 -> k3)
    where k3 =
      cont k ($camlTests15__empty_array12)
    where k2 =
      cont k1 pop(regular k1) ($camlTests15__Pmakeblock21)
in
let code size(18)
      is_c_1
        (x,
         param :
           [ 0 of imm tagged |1 of imm tagged |2 of imm tagged
           |3 of imm tagged ])
        my_closure my_region my_depth
        -> k * k1
        : imm tagged =
  (let prim = %get_tag param in
   let scrutinee_tag = %Tag_imm prim in
   let untagged = %untag_imm scrutinee_tag in
   let eq = %int_comp imm untagged = 2i in
   switch eq
     | 0 -> k2
     | 1 -> k (1))
    where k2 =
      cont k (0)
in
let code size(5)
      set_to_x_2 (b, i : imm tagged)
        my_closure my_region my_depth
        -> k * k1
        : imm tagged =
  let prim = %untag_imm 120 in
  let Pbytessetu = %bytes_set 8 b.(i) prim in
  cont k (Pbytessetu)
in
let code size(3)
      classical_id_3 (b : imm tagged)
        my_closure my_region my_depth
        -> k * k1
        : imm tagged =
  let Pnot = %not b in
  let Pnot_1 = %not Pnot in
  cont k (Pnot_1)
in
let code size(9)
      swapped_4 (param : imm tagged)
        my_closure my_region my_depth
        -> k * k1
        : imm tagged =
  let prim = %untag_imm 287454020 in
  let prim_1 = %int_arith imm bswap prim in
  let Pbswap16 = %Tag_imm prim_1 in
  cont k (Pbswap16)
in
let code size(2)
      negate_5 (x : imm tagged)
        my_closure my_region my_depth
        -> k * k1
        : imm tagged =
  let Pnegint = %int_arith ~- x in
  cont k (Pnegint)
in
let code size(2)
      foo_6 (x : imm tagged)
        my_closure my_region my_depth
        -> k * k1
        : imm tagged =
  let Porint = x lor 42 in
  cont k (Porint)
in
(let list_to_array = closure list_to_array_0 @list_to_array in
 let is_c = closure is_c_1 @is_c in
 let set_to_x = closure set_to_x_2 @set_to_x in
 let classical_id = closure classical_id_3 @classical_id in
 let swapped = closure swapped_4 @swapped in
 let negate = closure negate_5 @negate in
 let foo = closure foo_6 @foo in
 let Pmakeblock =
   %Block 0
     (list_to_array,
      is_c,
      set_to_x,
      classical_id,
      swapped,
      negate,
      $camlTests15__immstring67,
      foo)
 in
 cont k (Pmakeblock))
  where k define_root_symbol (module_block) =
    let field_0 = %block_load tag(0) size(8) (module_block, 0) in
    let field_1 = %block_load tag(0) size(8) (module_block, 1) in
    let field_2 = %block_load tag(0) size(8) (module_block, 2) in
    let field_3 = %block_load tag(0) size(8) (module_block, 3) in
    let field_4 = %block_load tag(0) size(8) (module_block, 4) in
    let field_5 = %block_load tag(0) size(8) (module_block, 5) in
    let field_6 = $camlTests15__immstring67 in
    let field_7 = %block_load tag(0) size(8) (module_block, 7) in
    let $camlTests15 =
      Block 0 (field_0,
               field_1,
               field_2,
               field_3,
               field_4,
               field_5,
               field_6,
               field_7)
    in
    cont done ($camlTests15)
===>
let $camlTests15__empty_array12 = Empty_array in
let $camlTests15__immstring16 = "tests15.ml" in
let $camlTests15__const_block18 = Block 0 ($camlTests15__immstring16, 2, 52)
in
let $camlTests15__Pmakeblock21 =
  Block 0 ($`*predef*`.caml_exn_Assert_failure, $camlTests15__const_block18)
in
let $camlTests15__immstring67 = " \\ \n " in
let code list_to_array_0 deleted in
let code is_c_1 deleted in
let code set_to_x_2 deleted in
let code classical_id_3 deleted in
let code swapped_4 deleted in
let code negate_5 deleted in
let code foo_6 deleted in
let code loopify(never) size(11) newer_version_of(list_to_array_0)
      list_to_array_0_1 (param : [ 0 | 0 of val * [ 0 | 0 of val * val ] ])
        my_closure my_region my_depth
        -> k * k1
        : any array =
  let prim = %is_int param in
  switch prim
    | 0 -> k1 pop(regular k1) ($camlTests15__Pmakeblock21)
    | 1 -> k ($camlTests15__empty_array12)
in
let $camlTests15__list_to_array_7 = closure list_to_array_0_1 @list_to_array
in
let code loopify(never) size(14) newer_version_of(is_c_1)
      is_c_1_1
        (x,
         param :
           [ 0 of imm tagged |1 of imm tagged |2 of imm tagged
           |3 of imm tagged ])
        my_closure my_region my_depth
        -> k * k1
        : imm tagged =
  let prim = %get_tag param in
  let eq = %int_comp imm prim = 2i in
  switch eq
    | 0 -> k (0)
    | 1 -> k (1)
in
let $camlTests15__is_c_8 = closure is_c_1_1 @is_c in
let code loopify(never) size(4) newer_version_of(set_to_x_2)
      set_to_x_2_1 (b, i : imm tagged)
        my_closure my_region my_depth
        -> k * k1
        : imm tagged =
  let Pbytessetu = %bytes_set 8 b.(i) 120i in
  cont k (0)
in
let $camlTests15__set_to_x_9 = closure set_to_x_2_1 @set_to_x in
let code loopify(never) size(3) newer_version_of(classical_id_3)
      classical_id_3_1 (b : imm tagged)
        my_closure my_region my_depth
        -> k * k1
        : imm tagged =
  let Pnot = %not b in
  let Pnot_1 = %not Pnot in
  cont k (Pnot_1)
in
let $camlTests15__classical_id_10 = closure classical_id_3_1 @classical_id in
let code loopify(never) size(1) newer_version_of(swapped_4)
      swapped_4_1 (param : imm tagged)
        my_closure my_region my_depth
        -> k * k1
        : imm tagged =
  cont k (17459)
in
let $camlTests15__swapped_11 = closure swapped_4_1 @swapped in
let code loopify(never) size(2) newer_version_of(negate_5)
      negate_5_1 (x : imm tagged)
        my_closure my_region my_depth
        -> k * k1
        : imm tagged =
  let Pnegint = %int_arith ~- x in
  cont k (Pnegint)
in
let $camlTests15__negate_12 = closure negate_5_1 @negate in
let code loopify(never) size(2) newer_version_of(foo_6)
      foo_6_1 (x : imm tagged)
        my_closure my_region my_depth
        -> k * k1
        : imm tagged =
  let Porint = x lor 42 in
  cont k (Porint)
in
let $camlTests15__foo_13 = closure foo_6_1 @foo in
let $camlTests15 =
  Block 0 ($camlTests15__list_to_array_7,
           $camlTests15__is_c_8,
           $camlTests15__set_to_x_9,
           $camlTests15__classical_id_10,
           $camlTests15__swapped_11,
           $camlTests15__negate_12,
           $camlTests15__immstring67,
           $camlTests15__foo_13)
in
cont done ($camlTests15)
