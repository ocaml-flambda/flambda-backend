let $camlUnroll5__first_const39 = Block 0 () in
let code rec loopify(never) size(23)
      foo_0 (x : imm tagged) my_closure my_region my_depth -> k * k1 =
  let next_depth = rec_info (succ my_depth) in
  let Popaque = %Opaque 1 in
  (let untagged = %untag_imm Popaque in
   switch untagged
     | 0 -> k2
     | 1 -> k3)
    where k3 =
      let Paddint = x + 1 in
      apply direct(foo_0) unroll(2)
        my_closure ~ depth my_depth -> next_depth (Paddint) -> k * k1
    where k2 =
      let Psubint = x - 1 in
      apply direct(foo_0)
        my_closure ~ depth my_depth -> next_depth (Psubint) -> k * k1
in
let code size(5)
      test1_1 (x : imm tagged) my_closure my_region my_depth -> k * k1 =
  let foo = %project_value_slot test1.foo my_closure in
  apply direct(foo_0) foo (x) -> k * k1
in
let code size(5)
      test2_2 (x : imm tagged) my_closure my_region my_depth -> k * k1 =
  let foo = %project_value_slot test2.foo_1 my_closure in
  apply direct(foo_0) unroll(1) foo (x) -> k * k1
in
let code size(5)
      test3_3 (x : imm tagged) my_closure my_region my_depth -> k * k1 =
  let foo = %project_value_slot test3.foo_2 my_closure in
  apply direct(foo_0) unroll(3) foo (x) -> k * k1
in
(let foo = closure foo_0 @foo in
 let test1 = closure test1_1 @test1 with { foo = foo } in
 let test2 = closure test2_2 @test2 with { foo_1 = foo } in
 let test3 = closure test3_3 @test3 with { foo_2 = foo } in
 let Pmakeblock = %Block 0 (foo, test1, test2, test3) in
 cont k (Pmakeblock))
  where k define_root_symbol (module_block) =
    let field_0 = %block_load tag(0) size(4) (module_block, 0) in
    let field_1 = %block_load tag(0) size(4) (module_block, 1) in
    let field_2 = %block_load tag(0) size(4) (module_block, 2) in
    let field_3 = %block_load tag(0) size(4) (module_block, 3) in
    let $camlUnroll5 = Block 0 (field_0, field_1, field_2, field_3) in
    cont done ($camlUnroll5)
