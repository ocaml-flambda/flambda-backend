let $camlInlined_rec__first_const31 = Block 0 () in
let code inline(always) size(6)
      apply_0 (f, i) my_closure my_region my_ghost_region my_depth -> k * k1 =
  apply inlined(hint) f (i) -> k * k1
in
let code rec size(27)
      fact_1 (n : imm tagged)
        my_closure my_region my_ghost_region my_depth
        -> k * k1
        : imm tagged =
  let next_depth = rec_info (succ my_depth) in
  let `apply` = %project_value_slot fact.`apply` my_closure in
  let prim = %phys_ne (n, 0) in
  let Pintcomp = %Tag_imm prim in
  (let untagged = %untag_imm Pintcomp in
   switch untagged
     | 0 -> k (1)
     | 1 -> k2)
    where k2 =
      ((let Psubint = n - 1 in
        apply direct(apply_0)
          (`apply` : _ -> imm tagged)
            (my_closure ~ depth my_depth -> next_depth, Psubint)
            -> k2 * k1)
         where k2 (apply_result : imm tagged) =
           let Pmulint = n * apply_result in
           cont k (Pmulint))
in
(let `apply` = closure apply_0 @`apply` in
 let fact = closure fact_1 @fact with { `apply` = `apply` } in
 apply direct(fact_1) (fact : _ -> imm tagged) (1000000) -> k1 * error
   where k1 (i : imm tagged) =
     let Pmakeblock = %Block 0 (`apply`, fact, i) in
     cont k (Pmakeblock))
  where k define_root_symbol (module_block) =
    let field_0 = %block_load tag(0) size(3) (0) module_block in
    let field_1 = %block_load tag(0) size(3) (1) module_block in
    let field_2 = %block_load tag(0) size(3) (2) module_block in
    let $camlInlined_rec = Block 0 (field_0, field_1, field_2) in
    cont done ($camlInlined_rec)
