let $camlUnroll2__first_const23 = Block 0 () in
let code rec loopify(never) size(23)
      foo_0 (x : imm tagged) my_closure my_region my_depth -> k * k1 =
  let next_depth = rec_info (succ my_depth) in
  let Popaque = %Opaque 1 in
  (let untagged = %untag_imm Popaque in
   switch untagged
     | 0 -> k2
     | 1 -> k3)
    where k3 =
      let Paddint = x + 1 in
      apply direct(foo_0)
        my_closure ~ depth my_depth -> next_depth
          (Paddint)
          &my_region
          -> k * k1
    where k2 =
      let Psubint = x - 1 in
      apply direct(foo_0)
        my_closure ~ depth my_depth -> next_depth
          (Psubint)
          &my_region
          -> k * k1
in
let code size(5)
      bar_1 (x : imm tagged) my_closure my_region my_depth -> k * k1 =
  let foo = %project_value_slot bar.foo my_closure in
  apply direct(foo_0) unroll(2) foo (x) &my_region -> k * k1
in
(let foo = closure foo_0 @foo in
 let bar = closure bar_1 @bar with { foo = foo } in
 let Pmakeblock = %Block 0 (foo, bar) in
 cont k (Pmakeblock))
  where k define_root_symbol (module_block) =
    let field_0 = %block_load tag(0) size(2) (module_block, 0) in
    let field_1 = %block_load tag(0) size(2) (module_block, 1) in
    let $camlUnroll2 = Block 0 (field_0, field_1) in
    cont done ($camlUnroll2)
