let $camlUnroll4__first_const49 = Block 0 () in
let code rec size(29)
      even_1 (n : imm tagged) my_closure my_region my_depth -> k * k1 =
  let next_depth = rec_info (succ my_depth) in
  let k = %project_value_slot even.k my_closure in
  let odd = %project_function_slot (even -> odd) my_closure in
  let prim = %phys_eq (n, 0) in
  let Pintcomp = %Tag_imm prim in
  (let untagged = %untag_imm Pintcomp in
   switch untagged
     | 0 -> k2
     | 1 -> k3)
    where k3 =
      apply inlined(hint) k (1) &my_region -> k * k1
    where k2 =
      let Psubint = n - 1 in
      apply direct(odd_2)
        odd ~ depth my_depth -> next_depth (Psubint) &my_region -> k * k1
and code rec size(29)
      odd_2 (n : imm tagged) my_closure my_region my_depth -> k * k1 =
  let next_depth = rec_info (succ my_depth) in
  let k = %project_value_slot odd.k my_closure in
  let even = %project_function_slot (odd -> even) my_closure in
  let prim = %phys_eq (n, 0) in
  let Pintcomp = %Tag_imm prim in
  (let untagged = %untag_imm Pintcomp in
   switch untagged
     | 0 -> k2
     | 1 -> k3)
    where k3 =
      apply inlined(hint) k (0) &my_region -> k * k1
    where k2 =
      let Psubint = n - 1 in
      apply direct(even_1)
        even ~ depth my_depth -> next_depth (Psubint) &my_region -> k * k1
in
let code inline(always) size(87)
      parity_is_0 (p : imm tagged, n : imm tagged, k)
        my_closure my_region my_depth
        -> k * k1 =
  let even = closure even_1 @even
  and odd = closure odd_2 @odd
  with { k = k }
  in
  (let untagged = %untag_imm p in
   switch untagged
     | 0 -> k2
     | 1 -> k3)
    where k3 =
      apply direct(odd_2) unroll(4) odd (n) &my_region -> k * k1
    where k2 =
      apply direct(even_1) unroll(3) even (n) &my_region -> k * k1
in
let code inline(always) size(1)
      k_3 (b) my_closure my_region my_depth -> k * k1 =
  cont k (b)
in
(let parity_is = closure parity_is_0 @parity_is in
 let k = closure k_3 @k in
 apply direct(parity_is_0)
   (parity_is : _ -> imm tagged) (0, 1, k) &toplevel -> k1 * error
   where k1 (one_is_even : imm tagged) =
     (apply direct(parity_is_0)
        (parity_is : _ -> imm tagged) (1, 4, k) &toplevel -> k1 * error
        where k1 (four_is_odd : imm tagged) =
          let Pmakeblock = %Block 0 (parity_is, k, one_is_even, four_is_odd)
          in
          cont k (Pmakeblock)))
  where k define_root_symbol (module_block) =
    let field_0 = %block_load tag(0) size(4) (module_block, 0) in
    let field_1 = %block_load tag(0) size(4) (module_block, 1) in
    let field_2 = %block_load tag(0) size(4) (module_block, 2) in
    let field_3 = %block_load tag(0) size(4) (module_block, 3) in
    let $camlUnroll4 = Block 0 (field_0, field_1, field_2, field_3) in
    cont done ($camlUnroll4)
