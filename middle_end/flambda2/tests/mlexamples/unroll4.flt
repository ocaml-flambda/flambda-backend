let $camlUnroll4__first_const49 = Block 0 () in
let code rec size(29)
      even_1 (n : imm tagged) my_closure my_region my_depth -> k * k1 =
  let next_depth = rec_info (succ my_depth) in
  let k = %project_value_slot even.k my_closure in
  let odd = %project_function_slot (even -> odd) my_closure in
  let prim = %phys_eq (n, 0) in
  let Pintcomp = %Tag_imm prim in
  (let untagged = %untag_imm Pintcomp in
   switch untagged
     | 0 -> k2
     | 1 -> k3)
    where k3 =
      apply inlined(hint) k (1) -> k * k1
    where k2 =
      let Psubint = n - 1 in
      apply direct(odd_2)
        odd ~ depth my_depth -> next_depth (Psubint) -> k * k1
and code rec size(29)
      odd_2 (n : imm tagged) my_closure my_region my_depth -> k * k1 =
  let next_depth = rec_info (succ my_depth) in
  let k = %project_value_slot odd.k my_closure in
  let even = %project_function_slot (odd -> even) my_closure in
  let prim = %phys_eq (n, 0) in
  let Pintcomp = %Tag_imm prim in
  (let untagged = %untag_imm Pintcomp in
   switch untagged
     | 0 -> k2
     | 1 -> k3)
    where k3 =
      apply inlined(hint) k (0) -> k * k1
    where k2 =
      let Psubint = n - 1 in
      apply direct(even_1)
        even ~ depth my_depth -> next_depth (Psubint) -> k * k1
in
let code inline(always) size(87)
      parity_is_0 (p : imm tagged, n : imm tagged, k)
        my_closure my_region my_depth
        -> k * k1 =
  let even = closure even_1 @even
  and odd = closure odd_2 @odd
  with { k = k }
  in
  (let untagged = %untag_imm p in
   switch untagged
     | 0 -> k2
     | 1 -> k3)
    where k3 =
      apply direct(odd_2) unroll(4) odd (n) -> k * k1
    where k2 =
      apply direct(even_1) unroll(3) even (n) -> k * k1
in
let code inline(always) size(1)
      k_3 (b) my_closure my_region my_depth -> k * k1 =
  cont k (b)
in
(let parity_is = closure parity_is_0 @parity_is in
 let k = closure k_3 @k in
 apply direct(parity_is_0)
   (parity_is : _ -> imm tagged) (0, 1, k) -> k1 * error
   where k1 (one_is_even : imm tagged) =
     (apply direct(parity_is_0)
        (parity_is : _ -> imm tagged) (1, 4, k) -> k1 * error
        where k1 (four_is_odd : imm tagged) =
          let Pmakeblock = %Block 0 (parity_is, k, one_is_even, four_is_odd)
          in
          cont k (Pmakeblock)))
  where k define_root_symbol (module_block) =
    let field_0 = %block_load tag(0) size(4) (module_block, 0) in
    let field_1 = %block_load tag(0) size(4) (module_block, 1) in
    let field_2 = %block_load tag(0) size(4) (module_block, 2) in
    let field_3 = %block_load tag(0) size(4) (module_block, 3) in
    let $camlUnroll4 = Block 0 (field_0, field_1, field_2, field_3) in
    cont done ($camlUnroll4)
===>
let code odd_2 deleted and code even_1 deleted in
let code parity_is_0 deleted in
let code k_3 deleted in
let code rec loopify(never) size(26) newer_version_of(even_1)
      even_1_1 (n : imm tagged) my_closure my_region my_depth -> k * k1 =
  let k = %project_value_slot even.k my_closure in
  let odd = %project_function_slot (even -> odd) my_closure in
  let prim = %phys_eq (n, 0) in
  switch prim
    | 0 -> k2
    | 1 -> k3
    where k3 =
      apply inlined(hint) k (1) -> k * k1
    where k2 =
      let Psubint = n - 1 in
      apply direct(odd_2_1)
        odd ~ depth my_depth -> succ my_depth (Psubint) -> k * k1
and code rec loopify(never) size(26) newer_version_of(odd_2)
      odd_2_1 (n : imm tagged) my_closure my_region my_depth -> k * k1 =
  let k = %project_value_slot odd.k my_closure in
  let even = %project_function_slot (odd -> even) my_closure in
  let prim = %phys_eq (n, 0) in
  switch prim
    | 0 -> k2
    | 1 -> k3
    where k3 =
      apply inlined(hint) k (0) -> k * k1
    where k2 =
      let Psubint = n - 1 in
      apply direct(even_1_1)
        even ~ depth my_depth -> succ my_depth (Psubint) -> k * k1
in
let code inline(always) loopify(never) size(221) newer_version_of(parity_is_0)
      parity_is_0_1 (p : imm tagged, n : imm tagged, k)
        my_closure my_region my_depth
        -> k * k1 =
  let even = closure even_1_1 @even
  and odd = closure odd_2_1 @odd
  with { k = k }
  in
  (let untagged = %untag_imm p in
   switch untagged
     | 0 -> k2
     | 1 -> k3)
    where k3 =
      let prim = %phys_eq (n, 0) in
      (switch prim
         | 0 -> k3
         | 1 -> k4
         where k4 =
           apply inlined(hint) inlining_state(depth(10)) k (0) -> k * k1
         where k3 =
           let Psubint = n - 1 in
           let prim_1 = %phys_eq (Psubint, 0) in
           (switch prim_1
              | 0 -> k3
              | 1 -> k4
              where k4 =
                apply inlined(hint) inlining_state(depth(20)) k (1) -> k * k1
              where k3 =
                let Psubint_1 = Psubint - 1 in
                let prim_2 = %phys_eq (Psubint_1, 0) in
                (switch prim_2
                   | 0 -> k3
                   | 1 -> k4
                   where k4 =
                     apply inlined(hint) inlining_state(depth(30))
                       k (0) -> k * k1
                   where k3 =
                     let Psubint_2 = Psubint_1 - 1 in
                     let prim_3 = %phys_eq (Psubint_2, 0) in
                     (switch prim_3
                        | 0 -> k3
                        | 1 -> k4
                        where k4 =
                          apply inlined(hint) inlining_state(depth(40))
                            k (1) -> k * k1
                        where k3 =
                          let Psubint_3 = Psubint_2 - 1 in
                          apply direct(odd_2_1) inlining_state(depth(40))
                            odd ~ depth 0 -> unroll 0 4 (Psubint_3) -> k * k1))))
    where k2 =
      let prim = %phys_eq (n, 0) in
      (switch prim
         | 0 -> k2
         | 1 -> k3
         where k3 =
           apply inlined(hint) inlining_state(depth(10)) k (1) -> k * k1
         where k2 =
           let Psubint = n - 1 in
           let prim_1 = %phys_eq (Psubint, 0) in
           (switch prim_1
              | 0 -> k2
              | 1 -> k3
              where k3 =
                apply inlined(hint) inlining_state(depth(20)) k (0) -> k * k1
              where k2 =
                let Psubint_1 = Psubint - 1 in
                let prim_2 = %phys_eq (Psubint_1, 0) in
                (switch prim_2
                   | 0 -> k2
                   | 1 -> k3
                   where k3 =
                     apply inlined(hint) inlining_state(depth(30))
                       k (1) -> k * k1
                   where k2 =
                     let Psubint_2 = Psubint_1 - 1 in
                     apply direct(odd_2_1) inlining_state(depth(30))
                       odd ~ depth 0 -> unroll 0 3 (Psubint_2) -> k * k1)))
in
let $camlUnroll4__parity_is_4 = closure parity_is_0_1 @parity_is in
let code inline(always) loopify(never) size(1) newer_version_of(k_3)
      k_3_1 (b) my_closure my_region my_depth -> k * k1 =
  cont k (b)
in
let $camlUnroll4__k_5 = closure k_3_1 @k in
apply direct(k_3_1) inlined(hint) inlining_state(depth(21))
  $camlUnroll4__k_5 (0) -> k * error
  where k (one_is_even : imm tagged) =
    ((let code rec loopify(never) size(18) newer_version_of(even_1_1)
            even_1_2 (n : imm tagged)
              my_closure my_region my_depth
              -> k1 * k2 =
        let prim = %phys_eq (n, 0) in
        switch prim
          | 0 -> k3
          | 1 -> k1 (1)
          where k3 =
            let Psubint = n - 1 in
            apply direct(odd_2_2) inlining_state(depth(1))
              $camlUnroll4__odd_9 ~ depth my_depth -> succ my_depth
                (Psubint)
                -> k1 * k2
      and code rec loopify(never) size(18) newer_version_of(odd_2_1)
            odd_2_2 (n : imm tagged) my_closure my_region my_depth -> k1 * k2 =
        let prim = %phys_eq (n, 0) in
        switch prim
          | 0 -> k3
          | 1 -> k1 (0)
          where k3 =
            let Psubint = n - 1 in
            apply direct(even_1_2) inlining_state(depth(1))
              $camlUnroll4__even_8 ~ depth my_depth -> succ my_depth
                (Psubint)
                -> k1 * k2
      and $camlUnroll4__even_8 =
        closure even_1_2 @even
      and $camlUnroll4__odd_9 =
        closure odd_2_2 @odd
        with { k = $camlUnroll4__k_5 }
      in
      apply direct(odd_2_2) inlining_state(depth(41))
        $camlUnroll4__odd_9 ~ depth 0 -> unroll 0 4 (0) -> k * error)
       where k (four_is_odd : imm tagged) =
         let $camlUnroll4 =
           Block 0 ($camlUnroll4__parity_is_4,
                    $camlUnroll4__k_5,
                    one_is_even,
                    four_is_odd)
         in
         cont done ($camlUnroll4))
