(* Generated by tools/simdgen/simdgen.ml *)

open Amd64_simd_defs

type id = 
  | Pmovmskb_r64_X
  | Addsubps
  | Psraw_X
  | Movq_Xm64_X
  | Sqrtpd
  | Pmaxub_X_Xm128
  | Movaps_Xm128_X
  | Addsd
  | Rcpps
  | Maxsd
  | Subps
  | Movd_X_r32m32
  | Divss
  | Punpckhqdq
  | Shrx_r32_r32m32_r32
  | Pextrw_r64_X
  | Pcmpeqb
  | Pminud
  | Movmskpd
  | Psllq_X_Xm128
  | Pinsrb
  | Bzhi_r64_r64m64_r64
  | Psllq_X
  | Unpckhps
  | Mulpd
  | Phaddsw_M_Mm64
  | Cvtsi2sd_X_r64m64
  | Minps
  | Pavgw_X_Xm128
  | Movups_Xm128_X
  | Movss_Xm32_X
  | Blendps
  | Cvttsd2si_r64_Xm64
  | Movntpd
  | Crc32_r64_r8m8
  | Pcmpeqd
  | Pmulhrsw_M_Mm64
  | Pmuludq_X_Xm128
  | Addps
  | Sqrtps
  | Pcmpgtb
  | Sqrtsd
  | Movntdqa
  | Psubsb
  | Roundss
  | Pext_r32_r32_r32m32
  | Pinsrd
  | Subpd
  | Pmulhw
  | Pminsw_M_Mm64
  | Paddusw
  | Cvtsi2ss_X_r32m32
  | Blendvpd
  | Movsd_X_m64
  | Movsd_X_X
  | Ptest
  | Pext_r64_r64_r64m64
  | Rcpss
  | Movhpd_X_m64
  | Psignw_X_Xm128
  | Pmulld
  | Phaddsw_X_Xm128
  | Pshufd
  | Pdep_r32_r32_r32m32
  | Pmovsxbw
  | Movupd_Xm128_X
  | Movntdq
  | Crc32_r32_r32m32
  | Crc32_r32_r16m16
  | Psrldq
  | Pabsb_M_Mm64
  | Pcmpeqq
  | Paddusb
  | Cvtpd2ps
  | Psraw_X_Xm128
  | Shlx_r64_r64m64_r64
  | Phsubsw_X_Xm128
  | Psubb
  | Paddd
  | Movmskps
  | Psrld_X
  | Movdqu_X_Xm128
  | Subsd
  | Extractps
  | Crc32_r32_r8m8
  | Psubq_X_Xm128
  | Movapd_Xm128_X
  | Pmaxsd
  | Paddw
  | Cvttss2si_r32_Xm32
  | Movlhps
  | Cvtsd2si_r64_Xm64
  | Pmovsxbq
  | Pslldq
  | Pmaddwd
  | Pmovsxbd
  | Pmulhuw_X_Xm128
  | Psrlq_X
  | Cvtsd2si_r32_Xm64
  | Roundsd
  | Por
  | Punpckhbw
  | Pmaxud
  | Psllw_X
  | Movsldup
  | Psubd
  | Movq_X_r64m64
  | Xorpd
  | Pmaddubsw_M_Mm64
  | Pmaxuw
  | Cvtsi2ss_X_r64m64
  | Psrad_X
  | Pextrd
  | Pcmpestrm
  | Rsqrtss
  | Psignd_X_Xm128
  | Pmullw
  | Pabsd_X_Xm128
  | Phaddd_M_Mm64
  | Cvtps2pd
  | Andnps
  | Sqrtss
  | Phaddw_X_Xm128
  | Addpd
  | Pmovzxdq
  | Shufpd
  | Pinsrw_X_r32m16
  | Psignw_M_Mm64
  | Phsubd_X_Xm128
  | Shlx_r32_r32m32_r32
  | Punpcklbw
  | Paddb
  | Pminsw_X_Xm128
  | Cvtpd2dq
  | Psadbw_X_Xm128
  | Pmovsxdq
  | Haddpd
  | Mulss
  | Cmpsd
  | Movddup
  | Cvtsi2sd_X_r32m32
  | Cvtss2sd
  | Andpd
  | Pminuw
  | Psrad_X_Xm128
  | Packusdw
  | Phsubw_X_Xm128
  | Rorx_r32_r32m32
  | Pclmulqdq
  | Pshufb_M_Mm64
  | Phaddw_M_Mm64
  | Paddsw
  | Phminposuw
  | Pminsb
  | Rorx_r64_r64m64
  | Pblendw
  | Andnpd
  | Pextrb
  | Mulsd
  | Psubusb
  | Pminsd
  | Pmaxub_M_Mm64
  | Psrld_X_Xm128
  | Movntps
  | Palignr_M_Mm64
  | Cvtdq2pd
  | Pcmpistrm
  | Addss
  | Comiss
  | Shufps
  | Rsqrtps
  | Movlpd_X_m64
  | Psrlw_X_Xm128
  | Minsd
  | Cvtss2si_r32_Xm32
  | Pslld_X_Xm128
  | Movapd_X_Xm128
  | Hsubps
  | Andps
  | Dpps
  | Pextrw_r64_M
  | Cvtdq2ps
  | Pcmpeqw
  | Psignb_M_Mm64
  | Psllw_X_Xm128
  | Punpckhdq
  | Phsubd_M_Mm64
  | Movlps_m64_X
  | Pxor
  | Maxpd
  | Pmovsxwq
  | Phsubsw_M_Mm64
  | Pmulhuw_M_Mm64
  | Maskmovdqu
  | Movlps_X_m64
  | Pinsrw_M_r32m16
  | Cvtss2si_r64_Xm32
  | Hsubpd
  | Movq_X_Xm64
  | Movaps_X_Xm128
  | Punpcklwd
  | Blendvps
  | Mpsadbw
  | Pavgb_X_Xm128
  | Movdqa_X_Xm128
  | Pblendvb
  | Pmovzxwq
  | Unpcklps
  | Bzhi_r32_r32m32_r32
  | Pminub_X_Xm128
  | Psubsw
  | Ucomisd
  | Pmovzxbq
  | Movlpd_m64_X
  | Pmovzxwd
  | Pavgw_M_Mm64
  | Xorps
  | Cvttps2dq
  | Unpckhpd
  | Paddq
  | Cmppd
  | Sarx_r32_r32m32_r32
  | Movsd_Xm64_X
  | Pavgb_M_Mm64
  | Cvttss2si_r64_Xm32
  | Psubusw
  | Unpcklpd
  | Pmuldq
  | Cmpps
  | Pcmpgtd
  | Pand
  | Pcmpgtq
  | Pabsd_M_Mm64
  | Crc32_r64_r64m64
  | Movupd_X_Xm128
  | Pslld_X
  | Pmaxsw_X_Xm128
  | Palignr_X_Xm128
  | Psignb_X_Xm128
  | Pandn
  | Psubw
  | Packuswb
  | Haddps
  | Movdqa_Xm128_X
  | Orpd
  | Paddsb
  | Packsswb
  | Movss_X_m32
  | Movss_X_X
  | Minpd
  | Movhlps
  | Psrlq_X_Xm128
  | Blendpd
  | Pextrw_r64m16_X
  | Cvttpd2dq
  | Packssdw
  | Divpd
  | Pmuludq_M_Mm64
  | Pabsb_X_Xm128
  | Pmaxsb
  | Insertps
  | Pshuflw
  | Cvtsd2ss
  | Pminub_M_Mm64
  | Pabsw_M_Mm64
  | Punpcklqdq
  | Subss
  | Punpckldq
  | Ucomiss
  | Movhpd_m64_X
  | Addsubpd
  | Pmaxsw_M_Mm64
  | Minss
  | Psadbw_M_Mm64
  | Cmpss
  | Maxps
  | Pmovzxbw
  | Movshdup
  | Pinsrq
  | Cvttsd2si_r32_Xm64
  | Shrx_r64_r64m64_r64
  | Divps
  | Pabsw_X_Xm128
  | Psubq_M_Mm64
  | Pshufb_X_Xm128
  | Pmovmskb_r64_M
  | Movhps_X_m64
  | Pmulhrsw_X_Xm128
  | Mulps
  | Pcmpestri
  | Maxss
  | Movhps_m64_X
  | Psrlw_X
  | Roundpd
  | Dppd
  | Pextrq
  | Ldmxcsr
  | Pmovzxbd
  | Pshufhw
  | Divsd
  | Psignd_M_Mm64
  | Comisd
  | Cvtps2dq
  | Orps
  | Movups_X_Xm128
  | Punpckhwd
  | Pcmpistri
  | Pmovsxwd
  | Pmaddubsw_X_Xm128
  | Pcmpgtw
  | Roundps
  | Phsubw_M_Mm64
  | Sarx_r64_r64m64_r64
  | Pdep_r64_r64_r64m64
  | Stmxcsr
  | Phaddd_X_Xm128

type nonrec instr = id instr

let pmovmskb_r64_X = {
    id = Pmovmskb_r64_X
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|R64|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "pmovmskb"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 215 }
}
let addsubps = {
    id = Addsubps
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "addsubps"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 208 }
}
let psraw_X = {
    id = Psraw_X
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "psraw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Spec 4; opcode = 113 }
}
let movq_Xm64_X = {
    id = Movq_Xm64_X
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r }|]
  ; res = Res { loc = Temp [|XMM;M64|]; enc = RM_rm }
  ; imm = false
  ; mnemonic = "movq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 214 }
}
let sqrtpd = {
    id = Sqrtpd
  ; args = [|{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "sqrtpd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 81 }
}
let pmaxub_X_Xm128 = {
    id = Pmaxub_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pmaxub"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 222 }
}
let movaps_Xm128_X = {
    id = Movaps_Xm128_X
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r }|]
  ; res = Res { loc = Temp [|XMM;M128|]; enc = RM_rm }
  ; imm = false
  ; mnemonic = "movaps"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 41 }
}
let addsd = {
    id = Addsd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "addsd"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 88 }
}
let rcpps = {
    id = Rcpps
  ; args = [|{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "rcpps"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 83 }
}
let maxsd = {
    id = Maxsd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "maxsd"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 95 }
}
let subps = {
    id = Subps
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "subps"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 92 }
}
let movd_X_r32m32 = {
    id = Movd_X_r32m32
  ; args = [|{ loc = Temp [|R32;M32|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "movd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 110 }
}
let divss = {
    id = Divss
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M32|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "divss"
  ; enc = { prefix = Legacy { prefix = Prx_F3; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 94 }
}
let punpckhqdq = {
    id = Punpckhqdq
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "punpckhqdq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 109 }
}
let shrx_r32_r32m32_r32 = {
    id = Shrx_r32_r32m32_r32
  ; args = [|{ loc = Temp [|R32;M32|]; enc = RM_rm };{ loc = Temp [|R32|]; enc = Vex_v }|]
  ; res = Res { loc = Temp [|R32|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "shrx"
  ; enc = { prefix = Vex { vex_m = Vexm_0F38; vex_w = false; vex_l = false; vex_p = Prx_F2 }; rm_reg = Reg; opcode = 247 }
}
let pextrw_r64_X = {
    id = Pextrw_r64_X
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|R64|]; enc = RM_r }
  ; imm = true
  ; mnemonic = "pextrw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 197 }
}
let pcmpeqb = {
    id = Pcmpeqb
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pcmpeqb"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 116 }
}
let pminud = {
    id = Pminud
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pminud"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 59 }
}
let movmskpd = {
    id = Movmskpd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|R64|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "movmskpd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 80 }
}
let psllq_X_Xm128 = {
    id = Psllq_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "psllq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 243 }
}
let movd_X_r32m32 = {
    id = Movd_X_r32m32
  ; args = [|{ loc = Temp [|R32;M32|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "movd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 126 }
}
let pinsrb = {
    id = Pinsrb
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|R32;M8|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "pinsrb"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F3A }; rm_reg = Reg; opcode = 32 }
}
let bzhi_r64_r64m64_r64 = {
    id = Bzhi_r64_r64m64_r64
  ; args = [|{ loc = Temp [|R64;M64|]; enc = RM_rm };{ loc = Temp [|R64|]; enc = Vex_v }|]
  ; res = Res { loc = Temp [|R64|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "bzhi"
  ; enc = { prefix = Vex { vex_m = Vexm_0F38; vex_w = true; vex_l = false; vex_p = Prx_none }; rm_reg = Reg; opcode = 245 }
}
let psllq_X = {
    id = Psllq_X
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "psllq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Spec 6; opcode = 115 }
}
let unpckhps = {
    id = Unpckhps
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "unpckhps"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 21 }
}
let mulpd = {
    id = Mulpd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "mulpd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 89 }
}
let phaddsw_M_Mm64 = {
    id = Phaddsw_M_Mm64
  ; args = [|{ loc = Temp [|MM|]; enc = RM_r };{ loc = Temp [|MM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "phaddsw"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 3 }
}
let cvtsi2sd_X_r64m64 = {
    id = Cvtsi2sd_X_r64m64
  ; args = [|{ loc = Temp [|R64;M64|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "cvtsi2sd"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex_w; escape = Esc_0F }; rm_reg = Reg; opcode = 42 }
}
let minps = {
    id = Minps
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "minps"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 93 }
}
let pavgw_X_Xm128 = {
    id = Pavgw_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pavgw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 227 }
}
let movups_Xm128_X = {
    id = Movups_Xm128_X
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r }|]
  ; res = Res { loc = Temp [|XMM;M128|]; enc = RM_rm }
  ; imm = false
  ; mnemonic = "movups"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 17 }
}
let movss_Xm32_X = {
    id = Movss_Xm32_X
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r }|]
  ; res = Res { loc = Temp [|XMM;M32|]; enc = RM_rm }
  ; imm = false
  ; mnemonic = "movss"
  ; enc = { prefix = Legacy { prefix = Prx_F3; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 17 }
}
let blendps = {
    id = Blendps
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "blendps"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F3A }; rm_reg = Reg; opcode = 12 }
}
let cvttsd2si_r64_Xm64 = {
    id = Cvttsd2si_r64_Xm64
  ; args = [|{ loc = Temp [|XMM;M64|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|R64|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "cvttsd2si"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex_w; escape = Esc_0F }; rm_reg = Reg; opcode = 44 }
}
let movntpd = {
    id = Movntpd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r }|]
  ; res = Res { loc = Temp [|M128|]; enc = RM_rm }
  ; imm = false
  ; mnemonic = "movntpd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 43 }
}
let crc32_r64_r8m8 = {
    id = Crc32_r64_r8m8
  ; args = [|{ loc = Temp [|R64|]; enc = RM_r };{ loc = Temp [|R8;M8|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "crc32"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex_w; escape = Esc_0F38 }; rm_reg = Reg; opcode = 240 }
}
let pcmpeqd = {
    id = Pcmpeqd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pcmpeqd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 118 }
}
let pmulhrsw_M_Mm64 = {
    id = Pmulhrsw_M_Mm64
  ; args = [|{ loc = Temp [|MM|]; enc = RM_r };{ loc = Temp [|MM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pmulhrsw"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 11 }
}
let pmuludq_X_Xm128 = {
    id = Pmuludq_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pmuludq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 244 }
}
let addps = {
    id = Addps
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "addps"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 88 }
}
let sqrtps = {
    id = Sqrtps
  ; args = [|{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "sqrtps"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 81 }
}
let pcmpgtb = {
    id = Pcmpgtb
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pcmpgtb"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 100 }
}
let sqrtsd = {
    id = Sqrtsd
  ; args = [|{ loc = Temp [|XMM;M64|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "sqrtsd"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 81 }
}
let movntdqa = {
    id = Movntdqa
  ; args = [|{ loc = Temp [|M128|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "movntdqa"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 42 }
}
let psubsb = {
    id = Psubsb
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "psubsb"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 232 }
}
let roundss = {
    id = Roundss
  ; args = [|{ loc = Temp [|XMM;M32|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = true
  ; mnemonic = "roundss"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F3A }; rm_reg = Reg; opcode = 10 }
}
let pext_r32_r32_r32m32 = {
    id = Pext_r32_r32_r32m32
  ; args = [|{ loc = Temp [|R32|]; enc = Vex_v };{ loc = Temp [|R32;M32|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|R32|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "pext"
  ; enc = { prefix = Vex { vex_m = Vexm_0F38; vex_w = false; vex_l = false; vex_p = Prx_F3 }; rm_reg = Reg; opcode = 245 }
}
let pinsrd = {
    id = Pinsrd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|R32;M32|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "pinsrd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F3A }; rm_reg = Reg; opcode = 34 }
}
let subpd = {
    id = Subpd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "subpd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 92 }
}
let pmulhw = {
    id = Pmulhw
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pmulhw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 229 }
}
let pminsw_M_Mm64 = {
    id = Pminsw_M_Mm64
  ; args = [|{ loc = Temp [|MM|]; enc = RM_r };{ loc = Temp [|MM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pminsw"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 234 }
}
let paddusw = {
    id = Paddusw
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "paddusw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 221 }
}
let cvtsi2ss_X_r32m32 = {
    id = Cvtsi2ss_X_r32m32
  ; args = [|{ loc = Temp [|R32;M32|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "cvtsi2ss"
  ; enc = { prefix = Legacy { prefix = Prx_F3; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 42 }
}
let blendvpd = {
    id = Blendvpd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm };{ loc = Pin XMM0; enc = Implicit }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "blendvpd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 21 }
}
let movsd_X_m64 = {
    id = Movsd_X_m64
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "movsd"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 16 }
}
let movsd_X_X = {
    id = Movsd_X_X
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "movsd"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 16 }
}
let ptest = {
    id = Ptest
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "ptest"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 23 }
}
let pext_r64_r64_r64m64 = {
    id = Pext_r64_r64_r64m64
  ; args = [|{ loc = Temp [|R64|]; enc = Vex_v };{ loc = Temp [|R64;M64|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|R64|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "pext"
  ; enc = { prefix = Vex { vex_m = Vexm_0F38; vex_w = true; vex_l = false; vex_p = Prx_F3 }; rm_reg = Reg; opcode = 245 }
}
let rcpss = {
    id = Rcpss
  ; args = [|{ loc = Temp [|XMM;M32|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "rcpss"
  ; enc = { prefix = Legacy { prefix = Prx_F3; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 83 }
}
let movhpd_X_m64 = {
    id = Movhpd_X_m64
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "movhpd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 22 }
}
let psignw_X_Xm128 = {
    id = Psignw_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "psignw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 9 }
}
let pmulld = {
    id = Pmulld
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pmulld"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 64 }
}
let phaddsw_X_Xm128 = {
    id = Phaddsw_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "phaddsw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 3 }
}
let pshufd = {
    id = Pshufd
  ; args = [|{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = true
  ; mnemonic = "pshufd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 112 }
}
let pdep_r32_r32_r32m32 = {
    id = Pdep_r32_r32_r32m32
  ; args = [|{ loc = Temp [|R32|]; enc = Vex_v };{ loc = Temp [|R32;M32|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|R32|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "pdep"
  ; enc = { prefix = Vex { vex_m = Vexm_0F38; vex_w = false; vex_l = false; vex_p = Prx_F2 }; rm_reg = Reg; opcode = 245 }
}
let pmovsxbw = {
    id = Pmovsxbw
  ; args = [|{ loc = Temp [|XMM;M64|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "pmovsxbw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 32 }
}
let movupd_Xm128_X = {
    id = Movupd_Xm128_X
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r }|]
  ; res = Res { loc = Temp [|XMM;M128|]; enc = RM_rm }
  ; imm = false
  ; mnemonic = "movupd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 17 }
}
let movntdq = {
    id = Movntdq
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r }|]
  ; res = Res { loc = Temp [|M128|]; enc = RM_rm }
  ; imm = false
  ; mnemonic = "movntdq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 231 }
}
let crc32_r32_r32m32 = {
    id = Crc32_r32_r32m32
  ; args = [|{ loc = Temp [|R32|]; enc = RM_r };{ loc = Temp [|R32;M32|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "crc32"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 241 }
}
let crc32_r32_r16m16 = {
    id = Crc32_r32_r16m16
  ; args = [|{ loc = Temp [|R32|]; enc = RM_r };{ loc = Temp [|R16;M16|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "crc32"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 241 }
}
let psrldq = {
    id = Psrldq
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "psrldq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Spec 3; opcode = 115 }
}
let pabsb_M_Mm64 = {
    id = Pabsb_M_Mm64
  ; args = [|{ loc = Temp [|MM;M64|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|MM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "pabsb"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 28 }
}
let pcmpeqq = {
    id = Pcmpeqq
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pcmpeqq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 41 }
}
let paddusb = {
    id = Paddusb
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "paddusb"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 220 }
}
let cvtpd2ps = {
    id = Cvtpd2ps
  ; args = [|{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "cvtpd2ps"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 90 }
}
let psraw_X_Xm128 = {
    id = Psraw_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "psraw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 225 }
}
let shlx_r64_r64m64_r64 = {
    id = Shlx_r64_r64m64_r64
  ; args = [|{ loc = Temp [|R64;M64|]; enc = RM_rm };{ loc = Temp [|R64|]; enc = Vex_v }|]
  ; res = Res { loc = Temp [|R64|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "shlx"
  ; enc = { prefix = Vex { vex_m = Vexm_0F38; vex_w = true; vex_l = false; vex_p = Prx_66 }; rm_reg = Reg; opcode = 247 }
}
let phsubsw_X_Xm128 = {
    id = Phsubsw_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "phsubsw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 7 }
}
let psubb = {
    id = Psubb
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "psubb"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 248 }
}
let paddd = {
    id = Paddd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "paddd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 254 }
}
let movmskps = {
    id = Movmskps
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|R64|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "movmskps"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 80 }
}
let psrld_X = {
    id = Psrld_X
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "psrld"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Spec 2; opcode = 114 }
}
let movdqu_X_Xm128 = {
    id = Movdqu_X_Xm128
  ; args = [|{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "movdqu"
  ; enc = { prefix = Legacy { prefix = Prx_F3; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 111 }
}
let subsd = {
    id = Subsd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "subsd"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 92 }
}
let extractps = {
    id = Extractps
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r }|]
  ; res = Res { loc = Temp [|R64;M32|]; enc = RM_rm }
  ; imm = true
  ; mnemonic = "extractps"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F3A }; rm_reg = Reg; opcode = 23 }
}
let crc32_r32_r8m8 = {
    id = Crc32_r32_r8m8
  ; args = [|{ loc = Temp [|R32|]; enc = RM_r };{ loc = Temp [|R8;M8|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "crc32"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 240 }
}
let psubq_X_Xm128 = {
    id = Psubq_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "psubq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 251 }
}
let movapd_Xm128_X = {
    id = Movapd_Xm128_X
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r }|]
  ; res = Res { loc = Temp [|XMM;M128|]; enc = RM_rm }
  ; imm = false
  ; mnemonic = "movapd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 41 }
}
let pmaxsd = {
    id = Pmaxsd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pmaxsd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 61 }
}
let paddw = {
    id = Paddw
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "paddw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 253 }
}
let cvttss2si_r32_Xm32 = {
    id = Cvttss2si_r32_Xm32
  ; args = [|{ loc = Temp [|XMM;M32|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|R32|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "cvttss2si"
  ; enc = { prefix = Legacy { prefix = Prx_F3; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 44 }
}
let movlhps = {
    id = Movlhps
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "movlhps"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 22 }
}
let cvtsd2si_r64_Xm64 = {
    id = Cvtsd2si_r64_Xm64
  ; args = [|{ loc = Temp [|XMM;M64|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|R64|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "cvtsd2si"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex_w; escape = Esc_0F }; rm_reg = Reg; opcode = 45 }
}
let pmovsxbq = {
    id = Pmovsxbq
  ; args = [|{ loc = Temp [|XMM;M16|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "pmovsxbq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 34 }
}
let pslldq = {
    id = Pslldq
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "pslldq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Spec 7; opcode = 115 }
}
let pmaddwd = {
    id = Pmaddwd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pmaddwd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 245 }
}
let pmovsxbd = {
    id = Pmovsxbd
  ; args = [|{ loc = Temp [|XMM;M32|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "pmovsxbd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 33 }
}
let pmulhuw_X_Xm128 = {
    id = Pmulhuw_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pmulhuw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 228 }
}
let psrlq_X = {
    id = Psrlq_X
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "psrlq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Spec 2; opcode = 115 }
}
let cvtsd2si_r32_Xm64 = {
    id = Cvtsd2si_r32_Xm64
  ; args = [|{ loc = Temp [|XMM;M64|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|R32|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "cvtsd2si"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 45 }
}
let roundsd = {
    id = Roundsd
  ; args = [|{ loc = Temp [|XMM;M64|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = true
  ; mnemonic = "roundsd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F3A }; rm_reg = Reg; opcode = 11 }
}
let por = {
    id = Por
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "por"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 235 }
}
let punpckhbw = {
    id = Punpckhbw
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "punpckhbw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 104 }
}
let pmaxud = {
    id = Pmaxud
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pmaxud"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 63 }
}
let psllw_X = {
    id = Psllw_X
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "psllw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Spec 6; opcode = 113 }
}
let movsldup = {
    id = Movsldup
  ; args = [|{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "movsldup"
  ; enc = { prefix = Legacy { prefix = Prx_F3; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 18 }
}
let psubd = {
    id = Psubd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "psubd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 250 }
}
let movq_X_r64m64 = {
    id = Movq_X_r64m64
  ; args = [|{ loc = Temp [|R64;M64|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "movq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_w; escape = Esc_0F }; rm_reg = Reg; opcode = 110 }
}
let xorpd = {
    id = Xorpd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "xorpd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 87 }
}
let pmaddubsw_M_Mm64 = {
    id = Pmaddubsw_M_Mm64
  ; args = [|{ loc = Temp [|MM|]; enc = RM_r };{ loc = Temp [|MM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pmaddubsw"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 4 }
}
let pmaxuw = {
    id = Pmaxuw
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pmaxuw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 62 }
}
let cvtsi2ss_X_r64m64 = {
    id = Cvtsi2ss_X_r64m64
  ; args = [|{ loc = Temp [|R64;M64|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "cvtsi2ss"
  ; enc = { prefix = Legacy { prefix = Prx_F3; rex = Rex_w; escape = Esc_0F }; rm_reg = Reg; opcode = 42 }
}
let psrad_X = {
    id = Psrad_X
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "psrad"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Spec 4; opcode = 114 }
}
let pextrd = {
    id = Pextrd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r }|]
  ; res = Res { loc = Temp [|R32;M32|]; enc = RM_rm }
  ; imm = true
  ; mnemonic = "pextrd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F3A }; rm_reg = Reg; opcode = 22 }
}
let pcmpestrm = {
    id = Pcmpestrm
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm };{ loc = Pin RAX; enc = Implicit };{ loc = Pin RDX; enc = Implicit }|]
  ; res = Res { loc = Pin XMM0; enc = Implicit }
  ; imm = true
  ; mnemonic = "pcmpestrm"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F3A }; rm_reg = Reg; opcode = 96 }
}
let rsqrtss = {
    id = Rsqrtss
  ; args = [|{ loc = Temp [|XMM;M32|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "rsqrtss"
  ; enc = { prefix = Legacy { prefix = Prx_F3; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 82 }
}
let psignd_X_Xm128 = {
    id = Psignd_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "psignd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 10 }
}
let pmullw = {
    id = Pmullw
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pmullw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 213 }
}
let pabsd_X_Xm128 = {
    id = Pabsd_X_Xm128
  ; args = [|{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "pabsd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 30 }
}
let phaddd_M_Mm64 = {
    id = Phaddd_M_Mm64
  ; args = [|{ loc = Temp [|MM|]; enc = RM_r };{ loc = Temp [|MM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "phaddd"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 2 }
}
let cvtps2pd = {
    id = Cvtps2pd
  ; args = [|{ loc = Temp [|XMM;M64|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "cvtps2pd"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 90 }
}
let andnps = {
    id = Andnps
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "andnps"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 85 }
}
let sqrtss = {
    id = Sqrtss
  ; args = [|{ loc = Temp [|XMM;M32|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "sqrtss"
  ; enc = { prefix = Legacy { prefix = Prx_F3; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 81 }
}
let phaddw_X_Xm128 = {
    id = Phaddw_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "phaddw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 1 }
}
let addpd = {
    id = Addpd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "addpd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 88 }
}
let pmovzxdq = {
    id = Pmovzxdq
  ; args = [|{ loc = Temp [|XMM;M64|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "pmovzxdq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 53 }
}
let shufpd = {
    id = Shufpd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "shufpd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 198 }
}
let pinsrw_X_r32m16 = {
    id = Pinsrw_X_r32m16
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|R32;M16|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "pinsrw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 196 }
}
let psignw_M_Mm64 = {
    id = Psignw_M_Mm64
  ; args = [|{ loc = Temp [|MM|]; enc = RM_r };{ loc = Temp [|MM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "psignw"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 9 }
}
let phsubd_X_Xm128 = {
    id = Phsubd_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "phsubd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 6 }
}
let shlx_r32_r32m32_r32 = {
    id = Shlx_r32_r32m32_r32
  ; args = [|{ loc = Temp [|R32;M32|]; enc = RM_rm };{ loc = Temp [|R32|]; enc = Vex_v }|]
  ; res = Res { loc = Temp [|R32|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "shlx"
  ; enc = { prefix = Vex { vex_m = Vexm_0F38; vex_w = false; vex_l = false; vex_p = Prx_66 }; rm_reg = Reg; opcode = 247 }
}
let punpcklbw = {
    id = Punpcklbw
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "punpcklbw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 96 }
}
let paddb = {
    id = Paddb
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "paddb"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 252 }
}
let pminsw_X_Xm128 = {
    id = Pminsw_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pminsw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 234 }
}
let cvtpd2dq = {
    id = Cvtpd2dq
  ; args = [|{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "cvtpd2dq"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 230 }
}
let psadbw_X_Xm128 = {
    id = Psadbw_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "psadbw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 246 }
}
let pmovsxdq = {
    id = Pmovsxdq
  ; args = [|{ loc = Temp [|XMM;M64|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "pmovsxdq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 37 }
}
let haddpd = {
    id = Haddpd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "haddpd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 124 }
}
let mulss = {
    id = Mulss
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M32|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "mulss"
  ; enc = { prefix = Legacy { prefix = Prx_F3; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 89 }
}
let cmpsd = {
    id = Cmpsd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "cmpsd"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 194 }
}
let movddup = {
    id = Movddup
  ; args = [|{ loc = Temp [|XMM;M64|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "movddup"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 18 }
}
let cvtsi2sd_X_r32m32 = {
    id = Cvtsi2sd_X_r32m32
  ; args = [|{ loc = Temp [|R32;M32|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "cvtsi2sd"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 42 }
}
let cvtss2sd = {
    id = Cvtss2sd
  ; args = [|{ loc = Temp [|XMM;M32|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "cvtss2sd"
  ; enc = { prefix = Legacy { prefix = Prx_F3; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 90 }
}
let andpd = {
    id = Andpd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "andpd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 84 }
}
let pminuw = {
    id = Pminuw
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pminuw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 58 }
}
let psrad_X_Xm128 = {
    id = Psrad_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "psrad"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 226 }
}
let packusdw = {
    id = Packusdw
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "packusdw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 43 }
}
let phsubw_X_Xm128 = {
    id = Phsubw_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "phsubw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 5 }
}
let rorx_r32_r32m32 = {
    id = Rorx_r32_r32m32
  ; args = [|{ loc = Temp [|R32;M32|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|R32|]; enc = RM_r }
  ; imm = true
  ; mnemonic = "rorx"
  ; enc = { prefix = Vex { vex_m = Vexm_0F3A; vex_w = false; vex_l = false; vex_p = Prx_F2 }; rm_reg = Reg; opcode = 240 }
}
let pclmulqdq = {
    id = Pclmulqdq
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "pclmulqdq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F3A }; rm_reg = Reg; opcode = 68 }
}
let pshufb_M_Mm64 = {
    id = Pshufb_M_Mm64
  ; args = [|{ loc = Temp [|MM|]; enc = RM_r };{ loc = Temp [|MM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pshufb"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 0 }
}
let phaddw_M_Mm64 = {
    id = Phaddw_M_Mm64
  ; args = [|{ loc = Temp [|MM|]; enc = RM_r };{ loc = Temp [|MM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "phaddw"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 1 }
}
let paddsw = {
    id = Paddsw
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "paddsw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 237 }
}
let phminposuw = {
    id = Phminposuw
  ; args = [|{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "phminposuw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 65 }
}
let pminsb = {
    id = Pminsb
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pminsb"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 56 }
}
let rorx_r64_r64m64 = {
    id = Rorx_r64_r64m64
  ; args = [|{ loc = Temp [|R64;M64|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|R64|]; enc = RM_r }
  ; imm = true
  ; mnemonic = "rorx"
  ; enc = { prefix = Vex { vex_m = Vexm_0F3A; vex_w = true; vex_l = false; vex_p = Prx_F2 }; rm_reg = Reg; opcode = 240 }
}
let pblendw = {
    id = Pblendw
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "pblendw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F3A }; rm_reg = Reg; opcode = 14 }
}
let andnpd = {
    id = Andnpd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "andnpd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 85 }
}
let pextrb = {
    id = Pextrb
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r }|]
  ; res = Res { loc = Temp [|R64;M8|]; enc = RM_rm }
  ; imm = true
  ; mnemonic = "pextrb"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F3A }; rm_reg = Reg; opcode = 20 }
}
let mulsd = {
    id = Mulsd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "mulsd"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 89 }
}
let psubusb = {
    id = Psubusb
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "psubusb"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 216 }
}
let pminsd = {
    id = Pminsd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pminsd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 57 }
}
let pmaxub_M_Mm64 = {
    id = Pmaxub_M_Mm64
  ; args = [|{ loc = Temp [|MM|]; enc = RM_r };{ loc = Temp [|MM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pmaxub"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 222 }
}
let psrld_X_Xm128 = {
    id = Psrld_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "psrld"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 210 }
}
let movntps = {
    id = Movntps
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r }|]
  ; res = Res { loc = Temp [|M128|]; enc = RM_rm }
  ; imm = false
  ; mnemonic = "movntps"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 43 }
}
let palignr_M_Mm64 = {
    id = Palignr_M_Mm64
  ; args = [|{ loc = Temp [|MM|]; enc = RM_r };{ loc = Temp [|MM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "palignr"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F3A }; rm_reg = Reg; opcode = 15 }
}
let cvtdq2pd = {
    id = Cvtdq2pd
  ; args = [|{ loc = Temp [|XMM;M64|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "cvtdq2pd"
  ; enc = { prefix = Legacy { prefix = Prx_F3; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 230 }
}
let pcmpistrm = {
    id = Pcmpistrm
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Pin XMM0; enc = Implicit }
  ; imm = true
  ; mnemonic = "pcmpistrm"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F3A }; rm_reg = Reg; opcode = 98 }
}
let addss = {
    id = Addss
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M32|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "addss"
  ; enc = { prefix = Legacy { prefix = Prx_F3; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 88 }
}
let comiss = {
    id = Comiss
  ; args = [|{ loc = Temp [|XMM;M32|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "comiss"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 47 }
}
let shufps = {
    id = Shufps
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "shufps"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 198 }
}
let rsqrtps = {
    id = Rsqrtps
  ; args = [|{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "rsqrtps"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 82 }
}
let movlpd_X_m64 = {
    id = Movlpd_X_m64
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "movlpd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 18 }
}
let psrlw_X_Xm128 = {
    id = Psrlw_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "psrlw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 209 }
}
let minsd = {
    id = Minsd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "minsd"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 93 }
}
let cvtss2si_r32_Xm32 = {
    id = Cvtss2si_r32_Xm32
  ; args = [|{ loc = Temp [|XMM;M32|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|R32|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "cvtss2si"
  ; enc = { prefix = Legacy { prefix = Prx_F3; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 45 }
}
let pslld_X_Xm128 = {
    id = Pslld_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pslld"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 242 }
}
let movapd_X_Xm128 = {
    id = Movapd_X_Xm128
  ; args = [|{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "movapd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 40 }
}
let hsubps = {
    id = Hsubps
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "hsubps"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 125 }
}
let andps = {
    id = Andps
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "andps"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 84 }
}
let dpps = {
    id = Dpps
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "dpps"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F3A }; rm_reg = Reg; opcode = 64 }
}
let pextrw_r64_M = {
    id = Pextrw_r64_M
  ; args = [|{ loc = Temp [|MM|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|R64|]; enc = RM_r }
  ; imm = true
  ; mnemonic = "pextrw"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 197 }
}
let cvtdq2ps = {
    id = Cvtdq2ps
  ; args = [|{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "cvtdq2ps"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 91 }
}
let pcmpeqw = {
    id = Pcmpeqw
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pcmpeqw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 117 }
}
let psignb_M_Mm64 = {
    id = Psignb_M_Mm64
  ; args = [|{ loc = Temp [|MM|]; enc = RM_r };{ loc = Temp [|MM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "psignb"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 8 }
}
let psllw_X_Xm128 = {
    id = Psllw_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "psllw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 241 }
}
let punpckhdq = {
    id = Punpckhdq
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "punpckhdq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 106 }
}
let phsubd_M_Mm64 = {
    id = Phsubd_M_Mm64
  ; args = [|{ loc = Temp [|MM|]; enc = RM_r };{ loc = Temp [|MM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "phsubd"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 6 }
}
let movlps_m64_X = {
    id = Movlps_m64_X
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r }|]
  ; res = Res { loc = Temp [|M64|]; enc = RM_rm }
  ; imm = false
  ; mnemonic = "movlps"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 19 }
}
let pxor = {
    id = Pxor
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pxor"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 239 }
}
let maxpd = {
    id = Maxpd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "maxpd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 95 }
}
let pmovsxwq = {
    id = Pmovsxwq
  ; args = [|{ loc = Temp [|XMM;M32|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "pmovsxwq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 36 }
}
let phsubsw_M_Mm64 = {
    id = Phsubsw_M_Mm64
  ; args = [|{ loc = Temp [|MM|]; enc = RM_r };{ loc = Temp [|MM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "phsubsw"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 7 }
}
let pmulhuw_M_Mm64 = {
    id = Pmulhuw_M_Mm64
  ; args = [|{ loc = Temp [|MM|]; enc = RM_r };{ loc = Temp [|MM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pmulhuw"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 228 }
}
let maskmovdqu = {
    id = Maskmovdqu
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "maskmovdqu"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 247 }
}
let movlps_X_m64 = {
    id = Movlps_X_m64
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "movlps"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 18 }
}
let pinsrw_M_r32m16 = {
    id = Pinsrw_M_r32m16
  ; args = [|{ loc = Temp [|MM|]; enc = RM_r };{ loc = Temp [|R32;M16|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "pinsrw"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 196 }
}
let cvtss2si_r64_Xm32 = {
    id = Cvtss2si_r64_Xm32
  ; args = [|{ loc = Temp [|XMM;M32|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|R64|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "cvtss2si"
  ; enc = { prefix = Legacy { prefix = Prx_F3; rex = Rex_w; escape = Esc_0F }; rm_reg = Reg; opcode = 45 }
}
let hsubpd = {
    id = Hsubpd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "hsubpd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 125 }
}
let movq_X_Xm64 = {
    id = Movq_X_Xm64
  ; args = [|{ loc = Temp [|XMM;M64|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "movq"
  ; enc = { prefix = Legacy { prefix = Prx_F3; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 126 }
}
let movaps_X_Xm128 = {
    id = Movaps_X_Xm128
  ; args = [|{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "movaps"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 40 }
}
let punpcklwd = {
    id = Punpcklwd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "punpcklwd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 97 }
}
let blendvps = {
    id = Blendvps
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm };{ loc = Pin XMM0; enc = Implicit }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "blendvps"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 20 }
}
let mpsadbw = {
    id = Mpsadbw
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "mpsadbw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F3A }; rm_reg = Reg; opcode = 66 }
}
let pavgb_X_Xm128 = {
    id = Pavgb_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pavgb"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 224 }
}
let movdqa_X_Xm128 = {
    id = Movdqa_X_Xm128
  ; args = [|{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "movdqa"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 111 }
}
let pblendvb = {
    id = Pblendvb
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm };{ loc = Pin XMM0; enc = Implicit }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pblendvb"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 16 }
}
let pmovzxwq = {
    id = Pmovzxwq
  ; args = [|{ loc = Temp [|XMM;M32|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "pmovzxwq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 52 }
}
let unpcklps = {
    id = Unpcklps
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "unpcklps"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 20 }
}
let bzhi_r32_r32m32_r32 = {
    id = Bzhi_r32_r32m32_r32
  ; args = [|{ loc = Temp [|R32;M32|]; enc = RM_rm };{ loc = Temp [|R32|]; enc = Vex_v }|]
  ; res = Res { loc = Temp [|R32|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "bzhi"
  ; enc = { prefix = Vex { vex_m = Vexm_0F38; vex_w = false; vex_l = false; vex_p = Prx_none }; rm_reg = Reg; opcode = 245 }
}
let pminub_X_Xm128 = {
    id = Pminub_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pminub"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 218 }
}
let psubsw = {
    id = Psubsw
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "psubsw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 233 }
}
let ucomisd = {
    id = Ucomisd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "ucomisd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 46 }
}
let pmovzxbq = {
    id = Pmovzxbq
  ; args = [|{ loc = Temp [|XMM;M16|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "pmovzxbq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 50 }
}
let movlpd_m64_X = {
    id = Movlpd_m64_X
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r }|]
  ; res = Res { loc = Temp [|M64|]; enc = RM_rm }
  ; imm = false
  ; mnemonic = "movlpd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 19 }
}
let pmovzxwd = {
    id = Pmovzxwd
  ; args = [|{ loc = Temp [|XMM;M64|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "pmovzxwd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 51 }
}
let pavgw_M_Mm64 = {
    id = Pavgw_M_Mm64
  ; args = [|{ loc = Temp [|MM|]; enc = RM_r };{ loc = Temp [|MM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pavgw"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 227 }
}
let xorps = {
    id = Xorps
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "xorps"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 87 }
}
let cvttps2dq = {
    id = Cvttps2dq
  ; args = [|{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "cvttps2dq"
  ; enc = { prefix = Legacy { prefix = Prx_F3; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 91 }
}
let unpckhpd = {
    id = Unpckhpd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "unpckhpd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 21 }
}
let paddq = {
    id = Paddq
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "paddq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 212 }
}
let cmppd = {
    id = Cmppd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "cmppd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 194 }
}
let sarx_r32_r32m32_r32 = {
    id = Sarx_r32_r32m32_r32
  ; args = [|{ loc = Temp [|R32;M32|]; enc = RM_rm };{ loc = Temp [|R32|]; enc = Vex_v }|]
  ; res = Res { loc = Temp [|R32|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "sarx"
  ; enc = { prefix = Vex { vex_m = Vexm_0F38; vex_w = false; vex_l = false; vex_p = Prx_F3 }; rm_reg = Reg; opcode = 247 }
}
let movsd_Xm64_X = {
    id = Movsd_Xm64_X
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r }|]
  ; res = Res { loc = Temp [|XMM;M64|]; enc = RM_rm }
  ; imm = false
  ; mnemonic = "movsd"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 17 }
}
let pavgb_M_Mm64 = {
    id = Pavgb_M_Mm64
  ; args = [|{ loc = Temp [|MM|]; enc = RM_r };{ loc = Temp [|MM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pavgb"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 224 }
}
let cvttss2si_r64_Xm32 = {
    id = Cvttss2si_r64_Xm32
  ; args = [|{ loc = Temp [|XMM;M32|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|R64|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "cvttss2si"
  ; enc = { prefix = Legacy { prefix = Prx_F3; rex = Rex_w; escape = Esc_0F }; rm_reg = Reg; opcode = 44 }
}
let psubusw = {
    id = Psubusw
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "psubusw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 217 }
}
let unpcklpd = {
    id = Unpcklpd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "unpcklpd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 20 }
}
let pmuldq = {
    id = Pmuldq
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pmuldq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 40 }
}
let cmpps = {
    id = Cmpps
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "cmpps"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 194 }
}
let pcmpgtd = {
    id = Pcmpgtd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pcmpgtd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 102 }
}
let pand = {
    id = Pand
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pand"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 219 }
}
let pcmpgtq = {
    id = Pcmpgtq
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pcmpgtq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 55 }
}
let pabsd_M_Mm64 = {
    id = Pabsd_M_Mm64
  ; args = [|{ loc = Temp [|MM;M64|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|MM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "pabsd"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 30 }
}
let crc32_r64_r64m64 = {
    id = Crc32_r64_r64m64
  ; args = [|{ loc = Temp [|R64|]; enc = RM_r };{ loc = Temp [|R64;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "crc32"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex_w; escape = Esc_0F38 }; rm_reg = Reg; opcode = 241 }
}
let movupd_X_Xm128 = {
    id = Movupd_X_Xm128
  ; args = [|{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "movupd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 16 }
}
let pslld_X = {
    id = Pslld_X
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "pslld"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Spec 6; opcode = 114 }
}
let pmaxsw_X_Xm128 = {
    id = Pmaxsw_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pmaxsw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 238 }
}
let palignr_X_Xm128 = {
    id = Palignr_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "palignr"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F3A }; rm_reg = Reg; opcode = 15 }
}
let psignb_X_Xm128 = {
    id = Psignb_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "psignb"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 8 }
}
let pandn = {
    id = Pandn
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pandn"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 223 }
}
let movdqu_X_Xm128 = {
    id = Movdqu_X_Xm128
  ; args = [|{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "movdqu"
  ; enc = { prefix = Legacy { prefix = Prx_F3; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 127 }
}
let psubw = {
    id = Psubw
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "psubw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 249 }
}
let packuswb = {
    id = Packuswb
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "packuswb"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 103 }
}
let haddps = {
    id = Haddps
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "haddps"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 124 }
}
let movdqa_Xm128_X = {
    id = Movdqa_Xm128_X
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r }|]
  ; res = Res { loc = Temp [|XMM;M128|]; enc = RM_rm }
  ; imm = false
  ; mnemonic = "movdqa"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 127 }
}
let orpd = {
    id = Orpd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "orpd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 86 }
}
let paddsb = {
    id = Paddsb
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "paddsb"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 236 }
}
let packsswb = {
    id = Packsswb
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "packsswb"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 99 }
}
let movss_X_m32 = {
    id = Movss_X_m32
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|M32|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "movss"
  ; enc = { prefix = Legacy { prefix = Prx_F3; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 16 }
}
let movss_X_X = {
    id = Movss_X_X
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "movss"
  ; enc = { prefix = Legacy { prefix = Prx_F3; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 16 }
}
let minpd = {
    id = Minpd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "minpd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 93 }
}
let movhlps = {
    id = Movhlps
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "movhlps"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 18 }
}
let psrlq_X_Xm128 = {
    id = Psrlq_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "psrlq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 211 }
}
let blendpd = {
    id = Blendpd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "blendpd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F3A }; rm_reg = Reg; opcode = 13 }
}
let pextrw_r64m16_X = {
    id = Pextrw_r64m16_X
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r }|]
  ; res = Res { loc = Temp [|R64;M16|]; enc = RM_rm }
  ; imm = true
  ; mnemonic = "pextrw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F3A }; rm_reg = Reg; opcode = 21 }
}
let cvttpd2dq = {
    id = Cvttpd2dq
  ; args = [|{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "cvttpd2dq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 230 }
}
let packssdw = {
    id = Packssdw
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "packssdw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 107 }
}
let divpd = {
    id = Divpd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "divpd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 94 }
}
let pmuludq_M_Mm64 = {
    id = Pmuludq_M_Mm64
  ; args = [|{ loc = Temp [|MM|]; enc = RM_r };{ loc = Temp [|MM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pmuludq"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 244 }
}
let pabsb_X_Xm128 = {
    id = Pabsb_X_Xm128
  ; args = [|{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "pabsb"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 28 }
}
let pmaxsb = {
    id = Pmaxsb
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pmaxsb"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 60 }
}
let insertps = {
    id = Insertps
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M32|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "insertps"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F3A }; rm_reg = Reg; opcode = 33 }
}
let pshuflw = {
    id = Pshuflw
  ; args = [|{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = true
  ; mnemonic = "pshuflw"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 112 }
}
let cvtsd2ss = {
    id = Cvtsd2ss
  ; args = [|{ loc = Temp [|XMM;M64|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "cvtsd2ss"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 90 }
}
let pminub_M_Mm64 = {
    id = Pminub_M_Mm64
  ; args = [|{ loc = Temp [|MM|]; enc = RM_r };{ loc = Temp [|MM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pminub"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 218 }
}
let pabsw_M_Mm64 = {
    id = Pabsw_M_Mm64
  ; args = [|{ loc = Temp [|MM;M64|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|MM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "pabsw"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 29 }
}
let punpcklqdq = {
    id = Punpcklqdq
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "punpcklqdq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 108 }
}
let subss = {
    id = Subss
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M32|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "subss"
  ; enc = { prefix = Legacy { prefix = Prx_F3; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 92 }
}
let punpckldq = {
    id = Punpckldq
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "punpckldq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 98 }
}
let ucomiss = {
    id = Ucomiss
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M32|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "ucomiss"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 46 }
}
let movhpd_m64_X = {
    id = Movhpd_m64_X
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r }|]
  ; res = Res { loc = Temp [|M64|]; enc = RM_rm }
  ; imm = false
  ; mnemonic = "movhpd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 23 }
}
let addsubpd = {
    id = Addsubpd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "addsubpd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 208 }
}
let pmaxsw_M_Mm64 = {
    id = Pmaxsw_M_Mm64
  ; args = [|{ loc = Temp [|MM|]; enc = RM_r };{ loc = Temp [|MM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pmaxsw"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 238 }
}
let minss = {
    id = Minss
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M32|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "minss"
  ; enc = { prefix = Legacy { prefix = Prx_F3; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 93 }
}
let psadbw_M_Mm64 = {
    id = Psadbw_M_Mm64
  ; args = [|{ loc = Temp [|MM|]; enc = RM_r };{ loc = Temp [|MM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "psadbw"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 246 }
}
let cmpss = {
    id = Cmpss
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M32|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "cmpss"
  ; enc = { prefix = Legacy { prefix = Prx_F3; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 194 }
}
let maxps = {
    id = Maxps
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "maxps"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 95 }
}
let pmovzxbw = {
    id = Pmovzxbw
  ; args = [|{ loc = Temp [|XMM;M64|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "pmovzxbw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 48 }
}
let movshdup = {
    id = Movshdup
  ; args = [|{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "movshdup"
  ; enc = { prefix = Legacy { prefix = Prx_F3; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 22 }
}
let movq_X_r64m64 = {
    id = Movq_X_r64m64
  ; args = [|{ loc = Temp [|R64;M64|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "movq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_w; escape = Esc_0F }; rm_reg = Reg; opcode = 126 }
}
let pinsrq = {
    id = Pinsrq
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|R64;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "pinsrq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_w; escape = Esc_0F3A }; rm_reg = Reg; opcode = 34 }
}
let cvttsd2si_r32_Xm64 = {
    id = Cvttsd2si_r32_Xm64
  ; args = [|{ loc = Temp [|XMM;M64|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|R32|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "cvttsd2si"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 44 }
}
let shrx_r64_r64m64_r64 = {
    id = Shrx_r64_r64m64_r64
  ; args = [|{ loc = Temp [|R64;M64|]; enc = RM_rm };{ loc = Temp [|R64|]; enc = Vex_v }|]
  ; res = Res { loc = Temp [|R64|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "shrx"
  ; enc = { prefix = Vex { vex_m = Vexm_0F38; vex_w = true; vex_l = false; vex_p = Prx_F2 }; rm_reg = Reg; opcode = 247 }
}
let divps = {
    id = Divps
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "divps"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 94 }
}
let pabsw_X_Xm128 = {
    id = Pabsw_X_Xm128
  ; args = [|{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "pabsw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 29 }
}
let psubq_M_Mm64 = {
    id = Psubq_M_Mm64
  ; args = [|{ loc = Temp [|MM|]; enc = RM_r };{ loc = Temp [|MM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "psubq"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 251 }
}
let pshufb_X_Xm128 = {
    id = Pshufb_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pshufb"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 0 }
}
let pmovmskb_r64_M = {
    id = Pmovmskb_r64_M
  ; args = [|{ loc = Temp [|MM|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|R64|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "pmovmskb"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 215 }
}
let movhps_X_m64 = {
    id = Movhps_X_m64
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "movhps"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 22 }
}
let pmulhrsw_X_Xm128 = {
    id = Pmulhrsw_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pmulhrsw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 11 }
}
let mulps = {
    id = Mulps
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "mulps"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 89 }
}
let pcmpestri = {
    id = Pcmpestri
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm };{ loc = Pin RAX; enc = Implicit };{ loc = Pin RDX; enc = Implicit }|]
  ; res = Res { loc = Pin RCX; enc = Implicit }
  ; imm = true
  ; mnemonic = "pcmpestri"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F3A }; rm_reg = Reg; opcode = 97 }
}
let maxss = {
    id = Maxss
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M32|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "maxss"
  ; enc = { prefix = Legacy { prefix = Prx_F3; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 95 }
}
let crc32_r32_r8m8 = {
    id = Crc32_r32_r8m8
  ; args = [|{ loc = Temp [|R32|]; enc = RM_r };{ loc = Temp [|R8;M8|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "crc32"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex; escape = Esc_0F38 }; rm_reg = Reg; opcode = 240 }
}
let movhps_m64_X = {
    id = Movhps_m64_X
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r }|]
  ; res = Res { loc = Temp [|M64|]; enc = RM_rm }
  ; imm = false
  ; mnemonic = "movhps"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 23 }
}
let psrlw_X = {
    id = Psrlw_X
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "psrlw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Spec 2; opcode = 113 }
}
let roundpd = {
    id = Roundpd
  ; args = [|{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = true
  ; mnemonic = "roundpd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F3A }; rm_reg = Reg; opcode = 9 }
}
let dppd = {
    id = Dppd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = true
  ; mnemonic = "dppd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F3A }; rm_reg = Reg; opcode = 65 }
}
let pextrq = {
    id = Pextrq
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r }|]
  ; res = Res { loc = Temp [|R64;M64|]; enc = RM_rm }
  ; imm = true
  ; mnemonic = "pextrq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_w; escape = Esc_0F3A }; rm_reg = Reg; opcode = 22 }
}
let ldmxcsr = {
    id = Ldmxcsr
  ; args = [|{ loc = Temp [|M32|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "ldmxcsr"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Spec 2; opcode = 174 }
}
let pmovzxbd = {
    id = Pmovzxbd
  ; args = [|{ loc = Temp [|XMM;M32|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "pmovzxbd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 49 }
}
let pshufhw = {
    id = Pshufhw
  ; args = [|{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = true
  ; mnemonic = "pshufhw"
  ; enc = { prefix = Legacy { prefix = Prx_F3; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 112 }
}
let divsd = {
    id = Divsd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "divsd"
  ; enc = { prefix = Legacy { prefix = Prx_F2; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 94 }
}
let psignd_M_Mm64 = {
    id = Psignd_M_Mm64
  ; args = [|{ loc = Temp [|MM|]; enc = RM_r };{ loc = Temp [|MM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "psignd"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 10 }
}
let comisd = {
    id = Comisd
  ; args = [|{ loc = Temp [|XMM;M64|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "comisd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 47 }
}
let cvtps2dq = {
    id = Cvtps2dq
  ; args = [|{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "cvtps2dq"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 91 }
}
let orps = {
    id = Orps
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "orps"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 86 }
}
let movups_X_Xm128 = {
    id = Movups_X_Xm128
  ; args = [|{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "movups"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 16 }
}
let punpckhwd = {
    id = Punpckhwd
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "punpckhwd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 105 }
}
let pcmpistri = {
    id = Pcmpistri
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Pin RCX; enc = Implicit }
  ; imm = true
  ; mnemonic = "pcmpistri"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F3A }; rm_reg = Reg; opcode = 99 }
}
let pmovsxwd = {
    id = Pmovsxwd
  ; args = [|{ loc = Temp [|XMM;M64|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "pmovsxwd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 35 }
}
let pmaddubsw_X_Xm128 = {
    id = Pmaddubsw_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pmaddubsw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 4 }
}
let pcmpgtw = {
    id = Pcmpgtw
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "pcmpgtw"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F }; rm_reg = Reg; opcode = 101 }
}
let roundps = {
    id = Roundps
  ; args = [|{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|XMM|]; enc = RM_r }
  ; imm = true
  ; mnemonic = "roundps"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F3A }; rm_reg = Reg; opcode = 8 }
}
let phsubw_M_Mm64 = {
    id = Phsubw_M_Mm64
  ; args = [|{ loc = Temp [|MM|]; enc = RM_r };{ loc = Temp [|MM;M64|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "phsubw"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 5 }
}
let sarx_r64_r64m64_r64 = {
    id = Sarx_r64_r64m64_r64
  ; args = [|{ loc = Temp [|R64;M64|]; enc = RM_rm };{ loc = Temp [|R64|]; enc = Vex_v }|]
  ; res = Res { loc = Temp [|R64|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "sarx"
  ; enc = { prefix = Vex { vex_m = Vexm_0F38; vex_w = true; vex_l = false; vex_p = Prx_F3 }; rm_reg = Reg; opcode = 247 }
}
let pdep_r64_r64_r64m64 = {
    id = Pdep_r64_r64_r64m64
  ; args = [|{ loc = Temp [|R64|]; enc = Vex_v };{ loc = Temp [|R64;M64|]; enc = RM_rm }|]
  ; res = Res { loc = Temp [|R64|]; enc = RM_r }
  ; imm = false
  ; mnemonic = "pdep"
  ; enc = { prefix = Vex { vex_m = Vexm_0F38; vex_w = true; vex_l = false; vex_p = Prx_F2 }; rm_reg = Reg; opcode = 245 }
}
let stmxcsr = {
    id = Stmxcsr
  ; args = [||]
  ; res = Res { loc = Temp [|M32|]; enc = RM_rm }
  ; imm = false
  ; mnemonic = "stmxcsr"
  ; enc = { prefix = Legacy { prefix = Prx_none; rex = Rex_none; escape = Esc_0F }; rm_reg = Spec 3; opcode = 174 }
}
let phaddd_X_Xm128 = {
    id = Phaddd_X_Xm128
  ; args = [|{ loc = Temp [|XMM|]; enc = RM_r };{ loc = Temp [|XMM;M128|]; enc = RM_rm }|]
  ; res = First_arg
  ; imm = false
  ; mnemonic = "phaddd"
  ; enc = { prefix = Legacy { prefix = Prx_66; rex = Rex_none; escape = Esc_0F38 }; rm_reg = Reg; opcode = 2 }
}