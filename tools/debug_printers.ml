let type_expr = Printtyp.raw_type_expr
let type_set = Btype.TypeSet.debug_print
let row_field = Printtyp.raw_field
let row_desc = Printtyp.raw_row_desc
let ident = Ident.print_with_scope
let path = Path.print
let ctype_global_state = Ctype.print_global_state
let sort = Jkind.Sort.Debug_printers.t
let sort_var = Jkind.Sort.Debug_printers.var
let jkind ppf k = Jkind.Debug_printers.t ppf k
let zero_alloc_var = Zero_alloc.debug_printer
let maybe_unique = Uniqueness_analysis.Maybe_unique.print
let maybe_aliased = Uniqueness_analysis.Maybe_aliased.print
let aliased = Uniqueness_analysis.Aliased.print
let tag = Uniqueness_analysis.Tag.print
let projection = Uniqueness_analysis.Projection.print
let usage_tree = Uniqueness_analysis.Usage_tree.print
let usage_forest = Uniqueness_analysis.Usage_forest.print
let paths = Uniqueness_analysis.Paths.print
let value = Uniqueness_analysis.Value.print
let ienv = Uniqueness_analysis.Ienv.print
let axis_set = Jkind_axis.Axis_set.print
let layout = Jkind.Layout.Debug_printers.t Jkind.Sort.Debug_printers.t
let mod_bounds ppf m = Types.Jkind_mod_bounds.debug_print ppf m
let with_bounds ppf w = Jkind.With_bounds.debug_print ppf w
let with_bounds_types ppf w = Jkind.With_bounds.debug_print_types ppf w
let modalities = Mode.Modality.Value.Const.print
let type_set ppf set = let open Format in fprintf ppf "@[[%a]@]" (pp_print_list ~pp_sep:(fun ppf () -> fprintf ppf ";@ ") Printtyp.raw_type_expr) (Btype.TypeSet.elements set)
