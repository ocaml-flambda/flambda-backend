(env
 (_
  ; FIXME Fix warnings or suppress them more finely
  (flags
   (:standard -w -32-33-35-60))))

; Helpers

(library
 (name simd_test_helpers)
 (wrapped false)
 (modules test_helpers))

; Stubs

(foreign_library
 (archive_name stubs)
 (language c)
 (names stubs)
 (flags -msse4.2)
 (include_dirs "../../ocaml/%{env:RUNTIME_DIR=runtime-dir-env-var-not-set}"))

; Tests with external assembler

(executables
 (names basic ops arrays scalar_ops consts)
 (modules basic ops arrays scalar_ops consts)
 (libraries simd_test_helpers)
 (foreign_archives stubs)
 (ocamlopt_flags
  (:standard -extension simd -dump-into-file -dsel)))

(rule
 (enabled_if
  (= %{context_name} "main"))
 (targets basic.out ops.out arrays.out scalar_ops.out consts.out)
 (deps basic.exe ops.exe arrays.exe scalar_ops.exe consts.exe)
 (action
  (progn
   (with-outputs-to
    basic.out
    (run ./basic.exe))
   (with-outputs-to
    ops.out
    (run ./ops.exe))
   (with-outputs-to
    arrays.out
    (run ./arrays.exe))
   (with-outputs-to
    scalar_ops.out
    (run ./scalar_ops.exe))
   (with-outputs-to
    consts.out
    (run ./consts.exe)))))

(rule
 (alias runtest)
 (enabled_if
  (and
   (= %{context_name} "main")
   (= %{architecture} amd64)))
 (action
  (progn
   (diff empty.expected basic.out)
   (diff empty.expected ops.out)
   (diff empty.expected arrays.out)
   (diff empty.expected scalar_ops.out)
   (diff empty.expected consts.out))))

; Tests with probes / internal assembler - not supported on macOS

(executable
 (name probes)
 (modules probes)
 (enabled_if
  (<> %{system} macosx))
 (foreign_archives stubs)
 (ocamlopt_flags
  (:standard -extension simd)))

(rule
 (targets
  basic_internal.ml
  ops_internal.ml
  consts_internal.ml
  arrays_internal.ml
  scalar_ops_internal.ml)
 (deps basic.ml ops.ml consts.ml scalar_ops.ml)
 (action
  (progn
   (copy basic.ml basic_internal.ml)
   (copy ops.ml ops_internal.ml)
   (copy consts.ml consts_internal.ml)
   (copy arrays.ml arrays_internal.ml)
   (copy scalar_ops.ml scalar_ops_internal.ml))))

(executables
 (names
  basic_internal
  ops_internal
  consts_internal
  arrays_internal
  scalar_ops_internal)
 (modules
  basic_internal
  ops_internal
  consts_internal
  arrays_internal
  scalar_ops_internal)
 (libraries simd_test_helpers)
 (enabled_if
  (<> %{system} macosx))
 (foreign_archives stubs)
 (ocamlopt_flags
  (:standard -extension simd -internal-assembler)))

(rule
 (enabled_if
  (and
   (= %{context_name} "main")
   (<> %{system} macosx)))
 (targets
  probes.out
  basic_internal.out
  ops_internal.out
  arrays_internal.out
  scalar_ops_internal.out)
 (deps
  probes.exe
  basic_internal.exe
  ops_internal.exe
  arrays_internal.exe
  scalar_ops_internal.exe)
 (action
  (progn
   (with-outputs-to
    probes.out
    (run ./probes.exe))
   (with-outputs-to
    basic_internal.out
    (run ./basic_internal.exe))
   (with-outputs-to
    ops_internal.out
    (run ./ops_internal.exe))
   (with-outputs-to
    arrays_internal.out
    (run ./arrays_internal.exe))
   (with-outputs-to
    scalar_ops_internal.out
    (run ./scalar_ops_internal.exe))
   (with-outputs-to
    consts_internal.out
    (run ./consts_internal.exe)))))

(rule
 (alias runtest)
 (enabled_if
  (and
   (= %{context_name} "main")
   (<> %{system} macosx)))
 (action
  (progn
   (diff empty.expected probes.out)
   (diff empty.expected basic_internal.out)
   (diff empty.expected ops_internal.out)
   (diff empty.expected arrays_internal.out)
   (diff empty.expected scalar_ops_internal.out)
   (diff empty.expected consts_internal.out))))
