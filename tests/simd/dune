; Stubs

(foreign_library
 (archive_name stubs)
 (language c)
 (names stubs)
 (flags -msse4.2)
 (include_dirs "../../ocaml/runtime"))

; Tests with external assembler

(executables
 (names basic ops arrays)
 (modules basic ops arrays)
 (foreign_archives stubs)
 (ocamlopt_flags
  (:standard -extension simd)))

(rule
 (enabled_if
  (= %{context_name} "main"))
 (targets basic.out ops.out arrays.out)
 (deps basic.exe ops.exe arrays.exe)
 (action
  (progn
   (with-outputs-to
    basic.out
    (run ./basic.exe))
   (with-outputs-to
    ops.out
    (run ./ops.exe))
   (with-outputs-to
    arrays.out
    (run ./arrays.exe)))))

(rule
 (alias runtest)
 (enabled_if
  (= %{context_name} "main"))
 (action
  (progn
   (diff empty.expected basic.out)
   (diff empty.expected ops.out)
   (diff empty.expected arrays.out))))

; Constants - proper inlining not supported on closure
; CR mslater: these should run on flambda1 and 2, but dune doesn't know about 2

(executable
 (name consts)
 (modules consts)
 (foreign_archives stubs)
 (ocamlopt_flags
  (:standard -extension simd)))

(rule
 (enabled_if
  (and
   (= %{context_name} "main")
   %{ocaml-config:flambda}))
 (target consts.out)
 (deps consts.exe)
 (action
  (with-outputs-to
   consts.out
   (run ./consts.exe))))

(rule
 (alias runtest)
 (enabled_if
  (and
   (= %{context_name} "main")
   %{ocaml-config:flambda}))
 (action
  (diff empty.expected consts.out)))

; Tests with probes / internal assembler - not supported on macOS

(executable
 (name probes)
 (modules probes)
 (enabled_if
  (<> %{system} macosx))
 (foreign_archives stubs)
 (ocamlopt_flags
  (:standard -extension simd)))

(rule
 (targets
  basic_internal.ml
  ops_internal.ml
  consts_internal.ml
  arrays_internal.ml)
 (deps basic.ml ops.ml consts.ml)
 (action
  (progn
   (copy basic.ml basic_internal.ml)
   (copy ops.ml ops_internal.ml)
   (copy consts.ml consts_internal.ml)
   (copy arrays.ml arrays_internal.ml))))

(executables
 (names basic_internal ops_internal consts_internal arrays_internal)
 (modules basic_internal ops_internal consts_internal arrays_internal)
 (enabled_if
  (<> %{system} macosx))
 (foreign_archives stubs)
 (ocamlopt_flags
  (:standard -extension simd -internal-assembler)))

(rule
 (enabled_if
  (and
   (= %{context_name} "main")
   (<> %{system} macosx)))
 (targets probes.out basic_internal.out ops_internal.out arrays_internal.out)
 (deps probes.exe basic_internal.exe ops_internal.exe arrays_internal.exe)
 (action
  (progn
   (with-outputs-to
    probes.out
    (run ./probes.exe))
   (with-outputs-to
    basic_internal.out
    (run ./basic_internal.exe))
   (with-outputs-to
    ops_internal.out
    (run ./ops_internal.exe))
   (with-outputs-to
    arrays_internal.out
    (run ./arrays_internal.exe)))))

(rule
 (enabled_if
  (and
   (= %{context_name} "main")
   (<> %{system} macosx)
   %{ocaml-config:flambda}))
 (targets consts_internal.out)
 (deps consts_internal.exe)
 (action
  (progn
   (with-outputs-to
    consts_internal.out
    (run ./consts_internal.exe)))))

(rule
 (alias runtest)
 (enabled_if
  (and
   (= %{context_name} "main")
   (<> %{system} macosx)))
 (action
  (progn
   (diff empty.expected probes.out)
   (diff empty.expected basic_internal.out)
   (diff empty.expected ops_internal.out)
   (diff empty.expected arrays_internal.out))))

(rule
 (alias runtest)
 (enabled_if
  (and
   (= %{context_name} "main")
   (<> %{system} macosx)
   %{ocaml-config:flambda}))
 (action
  (progn
   (diff empty.expected consts_internal.out))))
