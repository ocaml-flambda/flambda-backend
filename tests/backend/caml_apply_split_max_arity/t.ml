(* Checks that indirect calls with hundreds of arguments are working *)

let[@inline never] foo a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 a28 a29 a30 a31 a32 a33 a34 a35 a36 a37 a38 a39 a40 a41 a42 a43 a44 a45 a46 a47 a48 a49 a50 a51 a52 a53 a54 a55 a56 a57 a58 a59 a60 a61 a62 a63 a64 a65 a66 a67 a68 a69 a70 a71 a72 a73 a74 a75 a76 a77 a78 a79 a80 a81 a82 a83 a84 a85 a86 a87 a88 a89 a90 a91 a92 a93 a94 a95 a96 a97 a98 a99 a100 a101 a102 a103 a104 a105 a106 a107 a108 a109 a110 a111 a112 a113 a114 a115 a116 a117 a118 a119 a120 a121 a122 a123 a124 a125 a126 a127 a128 a129 a130 a131 a132 a133 a134 a135 a136 a137 a138 a139 a140 a141 a142 a143 a144 a145 a146 a147 a148 a149 a150 a151 a152 a153 a154 a155 a156 a157 a158 a159 a160 a161 a162 a163 a164 a165 a166 a167 a168 a169 a170 a171 a172 a173 a174 a175 a176 a177 a178 a179 a180 a181 a182 a183 a184 a185 a186 a187 a188 a189 a190 a191 a192 a193 a194 a195 a196 a197 a198 a199 a200 a201 a202 a203 a204 a205 a206 a207 a208 a209 a210 a211 a212 a213 a214 a215 a216 a217 a218 a219 a220 a221 a222 a223 a224 a225 a226 a227 a228 a229 a230 a231 a232 a233 a234 a235 a236 a237 a238 a239 a240 a241 a242 a243 a244 a245 a246 a247 a248 a249 a250 a251 a252 a253 a254 a255 a256 a257 a258 a259 a260 a261 a262 a263 a264 a265 a266 a267 a268 a269 a270 a271 a272 a273 a274 a275 a276 a277 a278 a279 a280 a281 a282 a283 a284 a285 a286 a287 a288 a289 a290 a291 a292 a293 a294 a295 a296 a297 a298 a299 a300 a301 a302 a303 a304 a305 a306 a307 a308 a309 a310 a311 a312 a313 a314 a315 a316 a317 a318 a319 a320 a321 a322 a323 a324 a325 a326 a327 a328 a329 a330 a331 a332 a333 a334 a335 a336 a337 a338 a339 a340 a341 a342 a343 a344 a345 a346 a347 a348 a349 a350 a351 a352 a353 a354 a355 a356 a357 a358 a359 a360 a361 a362 a363 a364 a365 a366 a367 a368 a369 a370 a371 a372 a373 a374 a375 a376 a377 a378 a379 a380 a381 a382 a383 a384 a385 a386 a387 a388 a389 a390 a391 a392 a393 a394 a395 a396 a397 a398 a399 a400 a401 a402 a403 a404 a405 a406 a407 a408 a409 a410 a411 a412 a413 a414 a415 a416 a417 a418 a419 a420 a421 a422 a423 a424 a425 a426 a427 a428 a429 a430 a431 a432 a433 a434 a435 a436 a437 a438 a439 a440 a441 a442 a443 a444 a445 a446 a447 a448 a449 a450 a451 a452 a453 a454 a455 a456 a457 a458 a459 a460 a461 a462 a463 a464 a465 a466 a467 a468 a469 a470 a471 a472 a473 a474 a475 a476 a477 a478 a479 a480 a481 a482 a483 a484 a485 a486 a487 a488 a489 a490 a491 a492 a493 a494 a495 a496 a497 a498 a499 a500 a501 a502 a503 a504 a505 a506 a507 a508 a509 a510 =
Sys.opaque_identity (a0+a1+a2+a3+a4+a5+a6+a7+a8+a9+a10+a11+a12+a13+a14+a15+a16+a17+a18+a19+a20+a21+a22+a23+a24+a25+a26+a27+a28+a29+a30+a31+a32+a33+a34+a35+a36+a37+a38+a39+a40+a41+a42+a43+a44+a45+a46+a47+a48+a49+a50+a51+a52+a53+a54+a55+a56+a57+a58+a59+a60+a61+a62+a63+a64+a65+a66+a67+a68+a69+a70+a71+a72+a73+a74+a75+a76+a77+a78+a79+a80+a81+a82+a83+a84+a85+a86+a87+a88+a89+a90+a91+a92+a93+a94+a95+a96+a97+a98+a99+a100+a101+a102+a103+a104+a105+a106+a107+a108+a109+a110+a111+a112+a113+a114+a115+a116+a117+a118+a119+a120+a121+a122+a123+a124+a125+a126+a127+a128+a129+a130+a131+a132+a133+a134+a135+a136+a137+a138+a139+a140+a141+a142+a143+a144+a145+a146+a147+a148+a149+a150+a151+a152+a153+a154+a155+a156+a157+a158+a159+a160+a161+a162+a163+a164+a165+a166+a167+a168+a169+a170+a171+a172+a173+a174+a175+a176+a177+a178+a179+a180+a181+a182+a183+a184+a185+a186+a187+a188+a189+a190+a191+a192+a193+a194+a195+a196+a197+a198+a199+a200+a201+a202+a203+a204+a205+a206+a207+a208+a209+a210+a211+a212+a213+a214+a215+a216+a217+a218+a219+a220+a221+a222+a223+a224+a225+a226+a227+a228+a229+a230+a231+a232+a233+a234+a235+a236+a237+a238+a239+a240+a241+a242+a243+a244+a245+a246+a247+a248+a249+a250+a251+a252+a253+a254+a255+a256+a257+a258+a259+a260+a261+a262+a263+a264+a265+a266+a267+a268+a269+a270+a271+a272+a273+a274+a275+a276+a277+a278+a279+a280+a281+a282+a283+a284+a285+a286+a287+a288+a289+a290+a291+a292+a293+a294+a295+a296+a297+a298+a299+a300+a301+a302+a303+a304+a305+a306+a307+a308+a309+a310+a311+a312+a313+a314+a315+a316+a317+a318+a319+a320+a321+a322+a323+a324+a325+a326+a327+a328+a329+a330+a331+a332+a333+a334+a335+a336+a337+a338+a339+a340+a341+a342+a343+a344+a345+a346+a347+a348+a349+a350+a351+a352+a353+a354+a355+a356+a357+a358+a359+a360+a361+a362+a363+a364+a365+a366+a367+a368+a369+a370+a371+a372+a373+a374+a375+a376+a377+a378+a379+a380+a381+a382+a383+a384+a385+a386+a387+a388+a389+a390+a391+a392+a393+a394+a395+a396+a397+a398+a399+a400+a401+a402+a403+a404+a405+a406+a407+a408+a409+a410+a411+a412+a413+a414+a415+a416+a417+a418+a419+a420+a421+a422+a423+a424+a425+a426+a427+a428+a429+a430+a431+a432+a433+a434+a435+a436+a437+a438+a439+a440+a441+a442+a443+a444+a445+a446+a447+a448+a449+a450+a451+a452+a453+a454+a455+a456+a457+a458+a459+a460+a461+a462+a463+a464+a465+a466+a467+a468+a469+a470+a471+a472+a473+a474+a475+a476+a477+a478+a479+a480+a481+a482+a483+a484+a485+a486+a487+a488+a489+a490+a491+a492+a493+a494+a495+a496+a497+a498+a499+a500+a501+a502+a503+a504+a505+a506+a507+a508+a509+a510)


let[@inline never] g ~f args =
  f args 1 2 3 4 5 6 7 8 9 0 10 11 12 13 14 15 16 17 18 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1

let () = print_endline (string_of_int (g ~f:foo 1))

let split_on_max_arity ?x1:_ ?x2:_ ?x3:_ ?x4:_ ?x5:_ ?x6:_ ?x7:_ ?x8:_ ?x9:_ ?x10:_ ?x11:_ ?x12:_ ?x13:_ ?x14:_ ?x15:_ ?x16:_ ?x17:_ ?x18:_ ?x19:_ ?x20:_ ?x21:_ ?x22:_ ?x23:_ ?x24:_ ?x25:_ ?x26:_ ?x27:_ ?x28:_ ?x29:_ ?x30:_ ?x31:_ ?x32:_ ?x33:_ ?x34:_ ?x35:_ ?x36:_ ?x37:_ ?x38:_ ?x39:_ ?x40:_ ?x41:_ ?x42:_ ?x43:_ ?x44:_ ?x45:_ ?x46:_ ?x47:_ ?x48:_ ?x49:_ ?x50:_ ?x51:_ ?x52:_ ?x53:_ ?x54:_ ?x55:_ ?x56:_ ?x57:_ ?x58:_ ?x59:_ ?x60:_ ?x61:_ ?x62:_ ?x63:_ ?x64:_ ?x65:_ ?x66:_ ?x67:_ ?x68:_ ?x69:_ ?x70:_ ?x71:_ ?x72:_ ?x73:_ ?x74:_ ?x75:_ ?x76:_ ?x77:_ ?x78:_ ?x79:_ ?x80:_ ?x81:_ ?x82:_ ?x83:_ ?x84:_ ?x85:_ ?x86:_ ?x87:_ ?x88:_ ?x89:_ ?x90:_ ?x91:_ ?x92:_ ?x93:_ ?x94:_ ?x95:_ ?x96:_ ?x97:_ ?x98:_ ?x99:_ ?x100:_ ?x101:_ ?x102:_ ?x103:_ ?x104:_ ?x105:_ ?x106:_ ?x107:_ ?x108:_ ?x109:_ ?x110:_ ?x111:_ ?x112:_ ?x113:_ ?x114:_ ?x115:_ ?x116:_ ?x117:_ ?x118:_ ?x119:_ ?x120:_ ?x121:_ ?x122:_ ?x123:_ ?x124:_ ?x125:_ ()
  = ()
;;

let () = (Sys.opaque_identity split_on_max_arity) ?x1:(Some ()) ()

let split_with_tailcall ?x1:_ ?x2:_ ?x3:_ ?x4:_ ?x5:_ ?x6:_ ?x7:_ ?x8:_ ?x9:_ ?x10:_ ?x11:_ ?x12:_ ?x13:_ ?x14:_ ?x15:_ ?x16:_ ?x17:_ ?x18:_ ?x19:_ ?x20:_ ?x21:_ ?x22:_ ?x23:_ ?x24:_ ?x25:_ ?x26:_ ?x27:_ ?x28:_ ?x29:_ ?x30:_ ?x31:_ ?x32:_ ?x33:_ ?x34:_ ?x35:_ ?x36:_ ?x37:_ ?x38:_ ?x39:_ ?x40:_ ?x41:_ ?x42:_ ?x43:_ ?x44:_ ?x45:_ ?x46:_ ?x47:_ ?x48:_ ?x49:_ ?x50:_ ?x51:_ ?x52:_ ?x53:_ ?x54:_ ?x55:_ ?x56:_ ?x57:_ ?x58:_ ?x59:_ ?x60:_ ?x61:_ ?x62:_ ?x63:_ ?x64:_ ?x65:_ ?x66:_ ?x67:_ ?x68:_ ?x69:_ ?x70:_ ?x71:_ ?x72:_ ?x73:_ ?x74:_ ?x75:_ ?x76:_ ?x77:_ ?x78:_ ?x79:_ ?x80:_ ?x81:_ ?x82:_ ?x83:_ ?x84:_ ?x85:_ ?x86:_ ?x87:_ ?x88:_ ?x89:_ ?x90:_ ?x91:_ ?x92:_ ?x93:_ ?x94:_ ?x95:_ ?x96:_ ?x97:_ ?x98:_ ?x99:_ ?x100:_ ?x101:_ ?x102:_ ?x103:_ ?x104:_ ?x105:_ ?x106:_ ?x107:_ ?x108:_ ?x109:_ ?x110:_ ?x111:_ ?x112:_ ?x113:_ ?x114:_ ?x115:_ ?x116:_ ?x117:_ ?x118:_ ?x119:_ ?x120:_ ?x121:_ ?x122:_ ?x123:_ ?x124:_ ?x125:_ ?x126:_ ()
  = ()
;;

let go x =
  let (_ : _) = Some x in
  (Sys.opaque_identity split_with_tailcall) ()
;;


(* The next few changes are checking that splitting caml_apply does not
   erase local allocations made in a previous region *)
external globalize : local_ 'a -> 'a = "%obj_dup"
external opaque : ('a[@local_opt]) -> ('a[@local_opt]) = "%opaque"

external local_stack_offset : unit -> int = "caml_local_stack_offset"

let rec grow_local_stack n (local_ acc) =
  let local_ acc = acc +. 1. in
  let local_ acc = if n = 0 then acc else grow_local_stack (n - 1) acc in
  let local_ acc = acc +. 1. in
  local_ acc

let[@inline never] foo (local_ a0) (local_ a1) =
  let local_ r = a0 +. a1 in
  local_ fun (local_ a2) (local_ a3) a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 a28 a29 a30 a31 a32 a33 a34 a35 a36 a37 a38 a39 a40 a41 a42 a43 a44 a45 a46 a47 a48 a49 a50 a51 a52 a53 a54 a55 a56 a57 a58 a59 a60 a61 a62 a63 a64 a65 a66 a67 a68 a69 a70 a71 a72 a73 a74 a75 a76 a77 a78 a79 a80 a81 a82 a83 a84 a85 a86 a87 a88 a89 a90 a91 a92 a93 a94 a95 a96 a97 a98 a99 a100 a101 a102 a103 a104 a105 a106 a107 a108 a109 a110 a111 a112 a113 a114 a115 a116 a117 a118 a119 a120 a121 a122 a123 a124 a125 a126 a127 a128 a129 a130 a131 a132 a133 a134 a135 a136 a137 a138 a139 a140 a141 a142 a143 a144 a145 a146 a147 a148 a149 a150 a151 a152 a153 a154 a155 a156 a157 a158 a159 a160 a161 a162 a163 a164 a165 a166 a167 a168 a169 a170 a171 a172 a173 a174 a175 a176 a177 a178 a179 a180 a181 a182 a183 a184 a185 a186 a187 a188 a189 a190 a191 a192 a193 a194 a195 a196 a197 a198 a199 a200 a201 a202 a203 a204 a205 a206 a207 a208 a209 a210 a211 a212 a213 a214 a215 a216 a217 a218 a219 a220 a221 a222 a223 a224 a225 a226 a227 a228 a229 a230 a231 a232 a233 a234 a235 a236 a237 a238 a239 a240 a241 a242 a243 a244 a245 a246 a247 a248 a249 a250 a251 a252 a253 a254 a255 a256 ->
    let local_ z = opaque (a2 +. a3) in
    let z = globalize z in
    globalize r +. z +.a4+.a5+.a6+.a7+.a8+.a9+.a10+.a11+.a12+.a13+.a14+.a15+.a16+.a17+.a18+.a19+.a20+.a21+.a22+.a23+.a24+.a25+.a26+.a27+.a28+.a29+.a30+.a31+.a32+.a33+.a34+.a35+.a36+.a37+.a38+.a39+.a40+.a41+.a42+.a43+.a44+.a45+.a46+.a47+.a48+.a49+.a50+.a51+.a52+.a53+.a54+.a55+.a56+.a57+.a58+.a59+.a60+.a61+.a62+.a63+.a64+.a65+.a66+.a67+.a68+.a69+.a70+.a71+.a72+.a73+.a74+.a75+.a76+.a77+.a78+.a79+.a80+.a81+.a82+.a83+.a84+.a85+.a86+.a87+.a88+.a89+.a90+.a91+.a92+.a93+.a94+.a95+.a96+.a97+.a98+.a99+.a100+.a101+.a102+.a103+.a104+.a105+.a106+.a107+.a108+.a109+.a110+.a111+.a112+.a113+.a114+.a115+.a116+.a117+.a118+.a119+.a120+.a121+.a122+.a123+.a124+.a125+.a126+.a127+.a128+.a129+.a130+.a131+.a132+.a133+.a134+.a135+.a136+.a137+.a138+.a139+.a140+.a141+.a142+.a143+.a144+.a145+.a146+.a147+.a148+.a149+.a150+.a151+.a152+.a153+.a154+.a155+.a156+.a157+.a158+.a159+.a160+.a161+.a162+.a163+.a164+.a165+.a166+.a167+.a168+.a169+.a170+.a171+.a172+.a173+.a174+.a175+.a176+.a177+.a178+.a179+.a180+.a181+.a182+.a183+.a184+.a185+.a186+.a187+.a188+.a189+.a190+.a191+.a192+.a193+.a194+.a195+.a196+.a197+.a198+.a199+.a200+.a201+.a202+.a203+.a204+.a205+.a206+.a207+.a208+.a209+.a210+.a211+.a212+.a213+.a214+.a215+.a216+.a217+.a218+.a219+.a220+.a221+.a222+.a223+.a224+.a225+.a226+.a227+.a228+.a229+.a230+.a231+.a232+.a233+.a234+.a235+.a236+.a237+.a238+.a239+.a240+.a241+.a242+.a243+.a244+.a245+.a246+.a247+.a248+.a249+.a250+.a251+.a252+.a253+.a254+.a255+.a256


let[@inline never] g ~(f : local_ float -> local_ float -> local_ float -> local_ float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float -> float) =
  let r = f (local_ 1000000.) (local_ 1.) (local_ 2.) (local_ 3.) 4. 5. 6. 7. 8. 9. 10. 11. 12. 13. 14. 15. 16. 17. 18. 19. 20. 21. 22. 23. 24. 25. 26. 27. 28. 29. 30. 31. 32. 33. 34. 35. 36. 37. 38. 39. 40. 41. 42. 43. 44. 45. 46. 47. 48. 49. 50. 51. 52. 53. 54. 55. 56. 57. 58. 59. 60. 61. 62. 63. 64. 65. 66. 67. 68. 69. 70. 71. 72. 73. 74. 75. 76. 77. 78. 79. 80. 81. 82. 83. 84. 85. 86. 87. 88. 89. 90. 91. 92. 93. 94. 95. 96. 97. 98. 99. 100. 101. 102. 103. 104. 105. 106. 107. 108. 109. 110. 111. 112. 113. 114. 115. 116. 117. 118. 119. 120. 121. 122. 123. 124. 125. 126. 127. 128. 129. 130. 131. 132. 133. 134. 135. 136. 137. 138. 139. 140. 141. 142. 143. 144. 145. 146. 147. 148. 149. 150. 151. 152. 153. 154. 155. 156. 157. 158. 159. 160. 161. 162. 163. 164. 165. 166. 167. 168. 169. 170. 171. 172. 173. 174. 175. 176. 177. 178. 179. 180. 181. 182. 183. 184. 185. 186. 187. 188. 189. 190. 191. 192. 193. 194. 195. 196. 197. 198. 199. 200. 201. 202. 203. 204. 205. 206. 207. 208. 209. 210. 211. 212. 213. 214. 215. 216. 217. 218. 219. 220. 221. 222. 223. 224. 225. 226. 227. 228. 229. 230. 231. 232. 233. 234. 235. 236. 237. 238. 239. 240. 241. 242. 243. 244. 245. 246. 247. 248. 249. 250. 251. 252. 253. 254. 255. 256. in
  r

let _ = grow_local_stack 2000 (local_ 0.)
let x = local_stack_offset ()
let () = print_endline (string_of_float (g ~f:foo))
let y = local_stack_offset ()
let () = print_endline ("unclean local allocs: " ^ string_of_int (y - x))
