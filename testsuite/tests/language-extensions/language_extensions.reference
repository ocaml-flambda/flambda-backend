# "comprehensions" extension in its default state [comprehensions disabled]:
<extension error>

# no extensions enabled [comprehensions disabled]:
<extension error>

# "comprehensions" extension enabled [comprehensions enabled]:
Successfully typechecked "[x for x = 1 to 10]"

# "comprehensions" extension still enabled [comprehensions enabled]:
Successfully typechecked "[x for x = 1 to 10]"

# "comprehensions" extension disabled [comprehensions disabled]:
<extension error>

# "comprehensions" extension still disabled [comprehensions disabled]:
<extension error>

# "comprehensions" extension enabled via [set] [comprehensions enabled]:
Successfully typechecked "[x for x = 1 to 10]"

# "comprehensions" extension still enabled, via [set] and [enable] [comprehensions enabled]:
Successfully typechecked "[x for x = 1 to 10]"

# "comprehensions" extension disabled via [set] [comprehensions disabled]:
<extension error>

# "comprehensions" extension still disabled, via [set] and [disable] [comprehensions disabled]:
<extension error>

# "comprehensions" extension enabled locally and disabled globally [comprehensions enabled]:
Successfully typechecked "[x for x = 1 to 10]"

# "comprehensions" extension disabled locally and globally [comprehensions disabled]:
<extension error>

# "comprehensions" extension enabled locally via [with_set] and disabled globally [comprehensions enabled]:
Successfully typechecked "[x for x = 1 to 10]"

# "comprehensions" extension disabled locally via [with_set] and also globally [comprehensions disabled]:
<extension error>

# "comprehensions" extension disabled locally and enabled globally [comprehensions disabled]:
<extension error>

# "comprehensions" extension enabled locally and globally [comprehensions enabled]:
Successfully typechecked "[x for x = 1 to 10]"

# "comprehensions" extension disabled locally via [with_set] and enabled globally [comprehensions disabled]:
<extension error>

# "comprehensions" extension disabled locally via [with_set] and also globally [comprehensions enabled]:
Successfully typechecked "[x for x = 1 to 10]"

# Enable two layouts [comprehensions enabled]:
Succeeded

# Disable layouts [comprehensions enabled]:
Succeeded

# Enable two layouts, in reverse order [comprehensions enabled]:
Succeeded

# can set [No_extensions] while extensions are enabled [comprehensions disabled]:
Succeeded at setting universe no_extensions

# setting [No_extensions] is idempotent [comprehensions disabled]:
Succeeded at setting universe no_extensions

# can't call [set ~enabled:true] when in universe no_extensions [comprehensions disabled]:
Failed as expected: Cannot enable extension comprehensions: incompatible with flag -extension-universe no_extensions

# can call [set ~enabled:false] when in universe no_extensions [comprehensions disabled]:
Succeeded at redundantly calling [set ~enabled:false]

# can't call [enable] when in universe no_extensions [comprehensions disabled]:
Failed as expected: Cannot enable extension comprehensions: incompatible with flag -extension-universe no_extensions

# can call [disable] when in universe no_extensions [comprehensions disabled]:
Succeeded at redundantly calling [disable]

# can't call [with_set ~enabled:true] when in universe no_extensions [comprehensions disabled]:
Failed as expected: Cannot enable extension comprehensions: incompatible with flag -extension-universe no_extensions

# can call [with_set ~enabled:false] when in universe no_extensions [comprehensions disabled]:
Succeeded at redundantly calling [with_set ~enabled:false]

# can't call [with_enabled] when in universe no_extensions [comprehensions disabled]:
Failed as expected: Cannot enable extension comprehensions: incompatible with flag -extension-universe no_extensions

# can call [with_disabled] when in universe no_extensions [comprehensions disabled]:
Succeeded at redundantly calling [with_disabled]

# [is_enabled] returns [false] when extensions are disallowed [comprehensions disabled]:
"comprehensions" is correctly disabled

# can set [Stable] while extensions are disabled [comprehensions disabled]:
Succeeded at setting universe stable

# can call [Language_extension.(enable Layouts Stable)] when in universe stable [comprehensions disabled]:
Succeeded at redundantly calling [Language_extension.(enable Layouts Stable)]

# can't call [Language_extension.(enable Comprehensions) ] when in universe stable [comprehensions disabled]:
Failed as expected: Cannot enable extension comprehensions: incompatible with flag -extension-universe stable

# can't call [Language_extension.(enable Layouts Alpha)] when in universe stable [comprehensions disabled]:
Failed as expected: Cannot enable extension layouts_alpha: incompatible with flag -extension-universe stable

# can set [Beta] from [Stable] [comprehensions enabled]:
Succeeded at setting universe beta

# "comprehensions" extension enabled via [Universe.set] [comprehensions enabled]:
Successfully typechecked "[x for x = 1 to 10]"

# can call [Language_extension.(enable Comprehensions) ] when in universe stable [comprehensions enabled]:
Succeeded at redundantly calling [Language_extension.(enable Comprehensions) ]

# can't call [Language_extension.(enable Layouts Alpha)] when in universe stable [comprehensions enabled]:
Failed as expected: Cannot enable extension layouts_alpha: incompatible with flag -extension-universe beta

