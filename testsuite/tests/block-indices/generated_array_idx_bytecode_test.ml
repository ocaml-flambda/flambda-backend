(* TEST
 include stdlib_stable;
 include stdlib_upstream_compatible;
 flags = "-extension layouts_alpha";
 bytecode;
*)
(** This is code generated by [generate_array_idx_tests.ml]. *)

[@@@warning "-23"]
module Metaprogramming_lib__ = struct
  let int64x2_u_equal (_ : int64x2#) (_ : int64x2#) = failwith "should not be called from bytecode"
end

open Stdlib_upstream_compatible
open Stdlib_stable

external[@layout_poly] makearray_dynamic_local :
  ('a : any_non_null) . int -> 'a -> 'a array @ local =
  "%makearray_dynamic"

external[@layout_poly] makearray_dynamic :
  ('a : any_non_null) . int -> 'a -> 'a array =
  "%makearray_dynamic"

external[@layout_poly] get :
  ('a : any_non_null) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a =
  "%array_safe_get"

external[@layout_poly] set :
  ('a : any_non_null) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a -> unit =
  "%array_safe_set"

external[@layout_poly] get_idx_imm :
  'a ('b : any). ('a [@local_opt]) -> ('a, 'b) idx_imm -> ('b [@local_opt]) =
  "%unsafe_get_idx_imm"

external[@layout_poly] get_idx_mut :
  'a ('b : any). ('a [@local_opt]) -> ('a, 'b) idx_mut -> ('b [@local_opt]) =
  "%unsafe_get_idx"

external[@layout_poly] set_idx_mut :
  'a ('b : any).
    ('a [@local_opt]) -> ('a, 'b) idx_mut -> ('b [@local_opt]) -> unit =
  "%unsafe_set_idx"

module Idx_repr : sig
  type t
  val of_idx_imm : 'a ('b : any). ('a, 'b) idx_imm -> t
  val of_idx_mut : 'a ('b : any). ('a, 'b) idx_mut -> t
  val equal : t -> t -> bool
  val debug_string : t -> string
end = struct
  (* See Note [Representation of block indices] in [lambda/translcore.ml] *)
  type t =
    | Bytecode of { path : int list }
    | Native of { offset : int; gap : int }

  external magic_box_bits64 : ('a : bits64) 'b . 'a -> 'b =
    "%box_int64"
  external lessthan_if_bytecode : int -> int -> bool =
    "caml_lessthan" "caml_greaterthan"

  let of_idx idx =
    let is_bytecode = lessthan_if_bytecode 0 1 in
    if is_bytecode then
      let r = Obj.repr (magic_box_bits64 idx) in
      let nth_idx n : int = Obj.magic (Obj.field r n) in
      let path = List.init (Obj.size r) nth_idx in
      Bytecode { path }
    else
      let i : int64 = magic_box_bits64 idx in
      let offset =
        Int64.(logand (sub (shift_left one 48) one)) i
        |> Int64.to_int
      in
      let gap =
        Int64.shift_right i 48
        |> Int64.to_int
      in
      Native { offset; gap }

  let of_idx_imm = of_idx
  let of_idx_mut = of_idx

  let equal t1 t2 =
    match t1, t2 with
    | Bytecode { path = path1 }, Bytecode { path = path2 } ->
      List.equal Int.equal path1 path2
    | Native { gap = gap1; offset = offset1 },
      Native { gap = gap2; offset = offset2 } ->
      Int.equal gap1 gap2 && Int.equal offset1 offset2
    | Bytecode _, Native _ | Native _, Bytecode _ -> assert false

  let debug_string = function
    | Bytecode { path } ->
      Printf.sprintf "{ %s }"
        (String.concat "; " (List.map Int.to_string path))
    | Native { offset; gap } ->
      Printf.sprintf "offset %d; gap %d" offset gap
end

let failwithf fmt = Printf.ksprintf failwith fmt

external globalize : local_ 'a -> 'a = "%obj_dup";;

(* Redefine iter to infer locality *)
let rec iter ~f = function
    [] -> ()
  | a::l -> f a; iter ~f l

module Int_set = Set.Make(Int)

let tests_run = ref Int_set.empty

let mark_test_run test_id =
  tests_run := Int_set.add test_id !tests_run

(* Various interesting values *)

let sizes = [ 0; 1; 2; 30 ]

let indices_in_deepening_tests = [0; 100_000]


type t0 = #{ a0 : int64#; b0 : int64# }
type t1 = #{ a1 : int64#; b1 : t0 }
type t2 = #{ a2 : string; b2 : string }
type t3 = #{ a3 : string; b3 : t2 }
type t4 = #{ a4 : t0; b4 : int64# }
type t5 = #{ a5 : t2; b5 : string }
type t6 = #{ a6 : int }
type t7 = #{ a7 : int64 }
type t8 = #{ a8 : int32# }
type t9 = #{ a9 : int; b9 : int }
type t10 = #{ a10 : int; b10 : int64 }
type t11 = #{ a11 : int; b11 : int32# }
type t12 = #{ a12 : int; b12 : float }
type t13 = #{ a13 : int64; b13 : int }
type t14 = #{ a14 : int64; b14 : int64 }
type t15 = #{ a15 : int64; b15 : float }
type t16 = #{ a16 : int32#; b16 : int32# }
type t17 = #{ a17 : float; b17 : int }
type t18 = #{ a18 : float; b18 : int64 }
type t19 = #{ a19 : float; b19 : float }
type t20 = #{ a20 : t6 }
type t21 = #{ a21 : t7 }
type t22 = #{ a22 : t8 }
type t23 = #{ a23 : int; b23 : int; c23 : int }
type t24 = #{ a24 : int; b24 : int; c24 : int64 }
type t25 = #{ a25 : int; b25 : int; c25 : int32# }
type t26 = #{ a26 : int; b26 : int; c26 : float }
type t27 = #{ a27 : int; b27 : int64; c27 : int }
type t28 = #{ a28 : int; b28 : int64; c28 : int64 }
type t29 = #{ a29 : int; b29 : int64; c29 : float }
type t30 = #{ a30 : int; b30 : int32#; c30 : int32# }
type t31 = #{ a31 : int; b31 : float; c31 : int }
type t32 = #{ a32 : int; b32 : float; c32 : int64 }
type t33 = #{ a33 : int; b33 : float; c33 : float }
type t34 = #{ a34 : int64; b34 : int; c34 : int }
type t35 = #{ a35 : int64; b35 : int; c35 : int64 }
type t36 = #{ a36 : int64; b36 : int; c36 : float }
type t37 = #{ a37 : int64; b37 : int64; c37 : int }
type t38 = #{ a38 : int64; b38 : int64; c38 : int64 }
type t39 = #{ a39 : int64; b39 : int64; c39 : float }
type t40 = #{ a40 : int64; b40 : float; c40 : int }
type t41 = #{ a41 : int64; b41 : float; c41 : int64 }
type t42 = #{ a42 : int64; b42 : float; c42 : float }
type t43 = #{ a43 : int32#; b43 : int32#; c43 : int32# }
type t44 = #{ a44 : float; b44 : int; c44 : int }
type t45 = #{ a45 : float; b45 : int; c45 : int64 }
type t46 = #{ a46 : float; b46 : int; c46 : float }
type t47 = #{ a47 : float; b47 : int64; c47 : int }
type t48 = #{ a48 : float; b48 : int64; c48 : int64 }
type t49 = #{ a49 : float; b49 : int64; c49 : float }
type t50 = #{ a50 : float; b50 : float; c50 : int }
type t51 = #{ a51 : float; b51 : float; c51 : int64 }
type t52 = #{ a52 : float; b52 : float; c52 : float }
type t53 = #{ a53 : int; b53 : t6 }
type t54 = #{ a54 : int; b54 : t7 }
type t55 = #{ a55 : int; b55 : t8 }
type t56 = #{ a56 : float }
type t57 = #{ a57 : int; b57 : t56 }
type t58 = #{ a58 : int64; b58 : t6 }
type t59 = #{ a59 : int64; b59 : t7 }
type t60 = #{ a60 : int64; b60 : t56 }
type t61 = #{ a61 : int32#; b61 : t8 }
type t62 = #{ a62 : float; b62 : t6 }
type t63 = #{ a63 : float; b63 : t7 }
type t64 = #{ a64 : float; b64 : t56 }
type t65 = #{ a65 : t6; b65 : int }
type t66 = #{ a66 : t6; b66 : int64 }
type t67 = #{ a67 : t6; b67 : int32# }
type t68 = #{ a68 : t6; b68 : float }
type t69 = #{ a69 : t7; b69 : int }
type t70 = #{ a70 : t7; b70 : int64 }
type t71 = #{ a71 : t7; b71 : float }
type t72 = #{ a72 : t8; b72 : int32# }
type t73 = #{ a73 : t56; b73 : int }
type t74 = #{ a74 : t56; b74 : int64 }
type t75 = #{ a75 : t56; b75 : float }
type t76 = #{ a76 : t9 }
type t77 = #{ a77 : t10 }
type t78 = #{ a78 : t11 }
type t79 = #{ a79 : t12 }
type t80 = #{ a80 : t13 }
type t81 = #{ a81 : t14 }
type t82 = #{ a82 : t15 }
type t83 = #{ a83 : t16 }
type t84 = #{ a84 : t17 }
type t85 = #{ a85 : t18 }
type t86 = #{ a86 : t19 }
type t87 = #{ a87 : t20 }
type t88 = #{ a88 : t21 }
type t89 = #{ a89 : t22 }
type t90 = #{ a90 : int64# }
type t91 = #{ a91 : nativeint# }
type t92 = #{ a92 : int; b92 : int64# }
type t93 = #{ a93 : int; b93 : nativeint# }
type t94 = #{ a94 : int32#; b94 : int64# }
type t95 = #{ a95 : int32#; b95 : nativeint# }
type t96 = #{ a96 : int64#; b96 : int32# }
type t97 = #{ a97 : int64#; b97 : nativeint# }
type t98 = #{ a98 : nativeint#; b98 : int32# }
type t99 = #{ a99 : nativeint#; b99 : int64# }
type t100 = #{ a100 : nativeint#; b100 : nativeint# }
type t101 = #{ a101 : t90 }
type t102 = #{ a102 : t91 }
type t103 = #{ a103 : int64#; b103 : float# }
type t104 = #{ a104 : t92; b104 : t103 }
type t105 = { mutable a105 : int64#; mutable b105 : t0 }
type t106 = #{ a106 : int64#; b106 : string }
type t107 = { mutable a107 : int64#; mutable b107 : t106 }
type t108 = #{ a108 : string; b108 : int64# }
type t109 = { mutable a109 : int64#; mutable b109 : t108 }
type t110 = { mutable a110 : int64#; mutable b110 : t2 }
type t111 = { mutable a111 : string; mutable b111 : t0 }
type t112 = { mutable a112 : string; mutable b112 : t106 }
type t113 = { mutable a113 : string; mutable b113 : t108 }
type t114 = { mutable a114 : string; mutable b114 : t2 }
type t115 = { mutable a115 : t0; mutable b115 : int64# }
type t116 = { mutable a116 : t0; mutable b116 : string }
type t117 = { mutable a117 : t106; mutable b117 : int64# }
type t118 = { mutable a118 : t106; mutable b118 : string }
type t119 = { mutable a119 : t108; mutable b119 : int64# }
type t120 = { mutable a120 : t108; mutable b120 : string }
type t121 = { mutable a121 : t2; mutable b121 : int64# }
type t122 = { mutable a122 : t2; mutable b122 : string }
type t123 = { mutable a123 : int }
type t124 = { mutable a124 : int64 }
type t125 = { mutable a125 : int32# }
type t126 = { mutable a126 : float }
type t127 = { mutable a127 : int64x2# }
type t128 = { mutable a128 : int; mutable b128 : int }
type t129 = { mutable a129 : int; mutable b129 : int64 }
type t130 = { mutable a130 : int; mutable b130 : int32# }
type t131 = { mutable a131 : int; mutable b131 : float }
type t132 = { mutable a132 : int; mutable b132 : int64x2# }
type t133 = { mutable a133 : int64; mutable b133 : int }
type t134 = { mutable a134 : int64; mutable b134 : int64 }
type t135 = { mutable a135 : int64; mutable b135 : int32# }
type t136 = { mutable a136 : int64; mutable b136 : float }
type t137 = { mutable a137 : int64; mutable b137 : int64x2# }
type t138 = { mutable a138 : int32#; mutable b138 : int }
type t139 = { mutable a139 : int32#; mutable b139 : int64 }
type t140 = { mutable a140 : int32#; mutable b140 : int32# }
type t141 = { mutable a141 : int32#; mutable b141 : float }
type t142 = { mutable a142 : int32#; mutable b142 : int64x2# }
type t143 = { mutable a143 : float; mutable b143 : int }
type t144 = { mutable a144 : float; mutable b144 : int64 }
type t145 = { mutable a145 : float; mutable b145 : int32# }
type t146 = { mutable a146 : float; mutable b146 : float }
type t147 = { mutable a147 : float; mutable b147 : int64x2# }
type t148 = { mutable a148 : int64x2#; mutable b148 : int }
type t149 = { mutable a149 : int64x2#; mutable b149 : int64 }
type t150 = { mutable a150 : int64x2#; mutable b150 : int32# }
type t151 = { mutable a151 : int64x2#; mutable b151 : float }
type t152 = { mutable a152 : int64x2#; mutable b152 : int64x2# }
type t153 = { mutable a153 : t6 }
type t154 = { mutable a154 : t7 }
type t155 = { mutable a155 : t8 }
type t156 = { mutable a156 : t56 }
type t157 = #{ a157 : int64x2# }
type t158 = { mutable a158 : t157 }
type t159 = { mutable a159 : int; mutable b159 : int; mutable c159 : int }
type t160 = { mutable a160 : int; mutable b160 : int; mutable c160 : int64 }
type t161 = { mutable a161 : int; mutable b161 : int; mutable c161 : int32# }
type t162 = { mutable a162 : int; mutable b162 : int; mutable c162 : float }
type t163 = { mutable a163 : int; mutable b163 : int; mutable c163 : int64x2# }
type t164 = { mutable a164 : int; mutable b164 : int64; mutable c164 : int }
type t165 = { mutable a165 : int; mutable b165 : int64; mutable c165 : int64 }
type t166 = { mutable a166 : int; mutable b166 : int64; mutable c166 : int32# }
type t167 = { mutable a167 : int; mutable b167 : int64; mutable c167 : float }
type t168 = { mutable a168 : int; mutable b168 : int64; mutable c168 : int64x2# }
type t169 = { mutable a169 : int; mutable b169 : int32#; mutable c169 : int }
type t170 = { mutable a170 : int; mutable b170 : int32#; mutable c170 : int64 }
type t171 = { mutable a171 : int; mutable b171 : int32#; mutable c171 : int32# }
type t172 = { mutable a172 : int; mutable b172 : int32#; mutable c172 : float }
type t173 = { mutable a173 : int; mutable b173 : int32#; mutable c173 : int64x2# }
type t174 = { mutable a174 : int; mutable b174 : float; mutable c174 : int }
type t175 = { mutable a175 : int; mutable b175 : float; mutable c175 : int64 }
type t176 = { mutable a176 : int; mutable b176 : float; mutable c176 : int32# }
type t177 = { mutable a177 : int; mutable b177 : float; mutable c177 : float }
type t178 = { mutable a178 : int; mutable b178 : float; mutable c178 : int64x2# }
type t179 = { mutable a179 : int; mutable b179 : int64x2#; mutable c179 : int }
type t180 = { mutable a180 : int; mutable b180 : int64x2#; mutable c180 : int64 }
type t181 = { mutable a181 : int; mutable b181 : int64x2#; mutable c181 : int32# }
type t182 = { mutable a182 : int; mutable b182 : int64x2#; mutable c182 : float }
type t183 = { mutable a183 : int; mutable b183 : int64x2#; mutable c183 : int64x2# }
type t184 = { mutable a184 : int64; mutable b184 : int; mutable c184 : int }
type t185 = { mutable a185 : int64; mutable b185 : int; mutable c185 : int64 }
type t186 = { mutable a186 : int64; mutable b186 : int; mutable c186 : int32# }
type t187 = { mutable a187 : int64; mutable b187 : int; mutable c187 : float }
type t188 = { mutable a188 : int64; mutable b188 : int; mutable c188 : int64x2# }
type t189 = { mutable a189 : int64; mutable b189 : int64; mutable c189 : int }
type t190 = { mutable a190 : int64; mutable b190 : int64; mutable c190 : int64 }
type t191 = { mutable a191 : int64; mutable b191 : int64; mutable c191 : int32# }
type t192 = { mutable a192 : int64; mutable b192 : int64; mutable c192 : float }
type t193 = { mutable a193 : int64; mutable b193 : int64; mutable c193 : int64x2# }
type t194 = { mutable a194 : int64; mutable b194 : int32#; mutable c194 : int }
type t195 = { mutable a195 : int64; mutable b195 : int32#; mutable c195 : int64 }
type t196 = { mutable a196 : int64; mutable b196 : int32#; mutable c196 : int32# }
type t197 = { mutable a197 : int64; mutable b197 : int32#; mutable c197 : float }
type t198 = { mutable a198 : int64; mutable b198 : int32#; mutable c198 : int64x2# }
type t199 = { mutable a199 : int64; mutable b199 : float; mutable c199 : int }
type t200 = { mutable a200 : int64; mutable b200 : float; mutable c200 : int64 }
type t201 = { mutable a201 : int64; mutable b201 : float; mutable c201 : int32# }
type t202 = { mutable a202 : int64; mutable b202 : float; mutable c202 : float }
type t203 = { mutable a203 : int64; mutable b203 : float; mutable c203 : int64x2# }
type t204 = { mutable a204 : int64; mutable b204 : int64x2#; mutable c204 : int }
type t205 = { mutable a205 : int64; mutable b205 : int64x2#; mutable c205 : int64 }
type t206 = { mutable a206 : int64; mutable b206 : int64x2#; mutable c206 : int32# }
type t207 = { mutable a207 : int64; mutable b207 : int64x2#; mutable c207 : float }
type t208 = { mutable a208 : int64; mutable b208 : int64x2#; mutable c208 : int64x2# }
type t209 = { mutable a209 : int32#; mutable b209 : int; mutable c209 : int }
type t210 = { mutable a210 : int32#; mutable b210 : int; mutable c210 : int64 }
type t211 = { mutable a211 : int32#; mutable b211 : int; mutable c211 : int32# }
type t212 = { mutable a212 : int32#; mutable b212 : int; mutable c212 : float }
type t213 = { mutable a213 : int32#; mutable b213 : int; mutable c213 : int64x2# }
type t214 = { mutable a214 : int32#; mutable b214 : int64; mutable c214 : int }
type t215 = { mutable a215 : int32#; mutable b215 : int64; mutable c215 : int64 }
type t216 = { mutable a216 : int32#; mutable b216 : int64; mutable c216 : int32# }
type t217 = { mutable a217 : int32#; mutable b217 : int64; mutable c217 : float }
type t218 = { mutable a218 : int32#; mutable b218 : int64; mutable c218 : int64x2# }
type t219 = { mutable a219 : int32#; mutable b219 : int32#; mutable c219 : int }
type t220 = { mutable a220 : int32#; mutable b220 : int32#; mutable c220 : int64 }
type t221 = { mutable a221 : int32#; mutable b221 : int32#; mutable c221 : int32# }
type t222 = { mutable a222 : int32#; mutable b222 : int32#; mutable c222 : float }
type t223 = { mutable a223 : int32#; mutable b223 : int32#; mutable c223 : int64x2# }
type t224 = { mutable a224 : int32#; mutable b224 : float; mutable c224 : int }
type t225 = { mutable a225 : int32#; mutable b225 : float; mutable c225 : int64 }
type t226 = { mutable a226 : int32#; mutable b226 : float; mutable c226 : int32# }
type t227 = { mutable a227 : int32#; mutable b227 : float; mutable c227 : float }
type t228 = { mutable a228 : int32#; mutable b228 : float; mutable c228 : int64x2# }
type t229 = { mutable a229 : int32#; mutable b229 : int64x2#; mutable c229 : int }
type t230 = { mutable a230 : int32#; mutable b230 : int64x2#; mutable c230 : int64 }
type t231 = { mutable a231 : int32#; mutable b231 : int64x2#; mutable c231 : int32# }
type t232 = { mutable a232 : int32#; mutable b232 : int64x2#; mutable c232 : float }
type t233 = { mutable a233 : int32#; mutable b233 : int64x2#; mutable c233 : int64x2# }
type t234 = { mutable a234 : float; mutable b234 : int; mutable c234 : int }
type t235 = { mutable a235 : float; mutable b235 : int; mutable c235 : int64 }
type t236 = { mutable a236 : float; mutable b236 : int; mutable c236 : int32# }
type t237 = { mutable a237 : float; mutable b237 : int; mutable c237 : float }
type t238 = { mutable a238 : float; mutable b238 : int; mutable c238 : int64x2# }
type t239 = { mutable a239 : float; mutable b239 : int64; mutable c239 : int }
type t240 = { mutable a240 : float; mutable b240 : int64; mutable c240 : int64 }
type t241 = { mutable a241 : float; mutable b241 : int64; mutable c241 : int32# }
type t242 = { mutable a242 : float; mutable b242 : int64; mutable c242 : float }
type t243 = { mutable a243 : float; mutable b243 : int64; mutable c243 : int64x2# }
type t244 = { mutable a244 : float; mutable b244 : int32#; mutable c244 : int }
type t245 = { mutable a245 : float; mutable b245 : int32#; mutable c245 : int64 }
type t246 = { mutable a246 : float; mutable b246 : int32#; mutable c246 : int32# }
type t247 = { mutable a247 : float; mutable b247 : int32#; mutable c247 : float }
type t248 = { mutable a248 : float; mutable b248 : int32#; mutable c248 : int64x2# }
type t249 = { mutable a249 : float; mutable b249 : float; mutable c249 : int }
type t250 = { mutable a250 : float; mutable b250 : float; mutable c250 : int64 }
type t251 = { mutable a251 : float; mutable b251 : float; mutable c251 : int32# }
type t252 = { mutable a252 : float; mutable b252 : float; mutable c252 : float }
type t253 = { mutable a253 : float; mutable b253 : float; mutable c253 : int64x2# }
type t254 = { mutable a254 : float; mutable b254 : int64x2#; mutable c254 : int }
type t255 = { mutable a255 : float; mutable b255 : int64x2#; mutable c255 : int64 }
type t256 = { mutable a256 : float; mutable b256 : int64x2#; mutable c256 : int32# }
type t257 = { mutable a257 : float; mutable b257 : int64x2#; mutable c257 : float }
type t258 = { mutable a258 : float; mutable b258 : int64x2#; mutable c258 : int64x2# }
type t259 = { mutable a259 : int64x2#; mutable b259 : int; mutable c259 : int }
type t260 = { mutable a260 : int64x2#; mutable b260 : int; mutable c260 : int64 }
type t261 = { mutable a261 : int64x2#; mutable b261 : int; mutable c261 : int32# }
type t262 = { mutable a262 : int64x2#; mutable b262 : int; mutable c262 : float }
type t263 = { mutable a263 : int64x2#; mutable b263 : int; mutable c263 : int64x2# }
type t264 = { mutable a264 : int64x2#; mutable b264 : int64; mutable c264 : int }
type t265 = { mutable a265 : int64x2#; mutable b265 : int64; mutable c265 : int64 }
type t266 = { mutable a266 : int64x2#; mutable b266 : int64; mutable c266 : int32# }
type t267 = { mutable a267 : int64x2#; mutable b267 : int64; mutable c267 : float }
type t268 = { mutable a268 : int64x2#; mutable b268 : int64; mutable c268 : int64x2# }
type t269 = { mutable a269 : int64x2#; mutable b269 : int32#; mutable c269 : int }
type t270 = { mutable a270 : int64x2#; mutable b270 : int32#; mutable c270 : int64 }
type t271 = { mutable a271 : int64x2#; mutable b271 : int32#; mutable c271 : int32# }
type t272 = { mutable a272 : int64x2#; mutable b272 : int32#; mutable c272 : float }
type t273 = { mutable a273 : int64x2#; mutable b273 : int32#; mutable c273 : int64x2# }
type t274 = { mutable a274 : int64x2#; mutable b274 : float; mutable c274 : int }
type t275 = { mutable a275 : int64x2#; mutable b275 : float; mutable c275 : int64 }
type t276 = { mutable a276 : int64x2#; mutable b276 : float; mutable c276 : int32# }
type t277 = { mutable a277 : int64x2#; mutable b277 : float; mutable c277 : float }
type t278 = { mutable a278 : int64x2#; mutable b278 : float; mutable c278 : int64x2# }
type t279 = { mutable a279 : int64x2#; mutable b279 : int64x2#; mutable c279 : int }
type t280 = { mutable a280 : int64x2#; mutable b280 : int64x2#; mutable c280 : int64 }
type t281 = { mutable a281 : int64x2#; mutable b281 : int64x2#; mutable c281 : int32# }
type t282 = { mutable a282 : int64x2#; mutable b282 : int64x2#; mutable c282 : float }
type t283 = { mutable a283 : int64x2#; mutable b283 : int64x2#; mutable c283 : int64x2# }
type t284 = { mutable a284 : int; mutable b284 : t6 }
type t285 = { mutable a285 : int; mutable b285 : t7 }
type t286 = { mutable a286 : int; mutable b286 : t8 }
type t287 = { mutable a287 : int; mutable b287 : t56 }
type t288 = { mutable a288 : int; mutable b288 : t157 }
type t289 = { mutable a289 : int64; mutable b289 : t6 }
type t290 = { mutable a290 : int64; mutable b290 : t7 }
type t291 = { mutable a291 : int64; mutable b291 : t8 }
type t292 = { mutable a292 : int64; mutable b292 : t56 }
type t293 = { mutable a293 : int64; mutable b293 : t157 }
type t294 = { mutable a294 : int32#; mutable b294 : t6 }
type t295 = { mutable a295 : int32#; mutable b295 : t7 }
type t296 = { mutable a296 : int32#; mutable b296 : t8 }
type t297 = { mutable a297 : int32#; mutable b297 : t56 }
type t298 = { mutable a298 : int32#; mutable b298 : t157 }
type t299 = { mutable a299 : float; mutable b299 : t6 }
type t300 = { mutable a300 : float; mutable b300 : t7 }
type t301 = { mutable a301 : float; mutable b301 : t8 }
type t302 = { mutable a302 : float; mutable b302 : t56 }
type t303 = { mutable a303 : float; mutable b303 : t157 }
type t304 = { mutable a304 : int64x2#; mutable b304 : t6 }
type t305 = { mutable a305 : int64x2#; mutable b305 : t7 }
type t306 = { mutable a306 : int64x2#; mutable b306 : t8 }
type t307 = { mutable a307 : int64x2#; mutable b307 : t56 }
type t308 = { mutable a308 : int64x2#; mutable b308 : t157 }
type t309 = { mutable a309 : t6; mutable b309 : int }
type t310 = { mutable a310 : t6; mutable b310 : int64 }
type t311 = { mutable a311 : t6; mutable b311 : int32# }
type t312 = { mutable a312 : t6; mutable b312 : float }
type t313 = { mutable a313 : t6; mutable b313 : int64x2# }
type t314 = { mutable a314 : t7; mutable b314 : int }
type t315 = { mutable a315 : t7; mutable b315 : int64 }
type t316 = { mutable a316 : t7; mutable b316 : int32# }
type t317 = { mutable a317 : t7; mutable b317 : float }
type t318 = { mutable a318 : t7; mutable b318 : int64x2# }
type t319 = { mutable a319 : t8; mutable b319 : int }
type t320 = { mutable a320 : t8; mutable b320 : int64 }
type t321 = { mutable a321 : t8; mutable b321 : int32# }
type t322 = { mutable a322 : t8; mutable b322 : float }
type t323 = { mutable a323 : t8; mutable b323 : int64x2# }
type t324 = { mutable a324 : t56; mutable b324 : int }
type t325 = { mutable a325 : t56; mutable b325 : int64 }
type t326 = { mutable a326 : t56; mutable b326 : int32# }
type t327 = { mutable a327 : t56; mutable b327 : float }
type t328 = { mutable a328 : t56; mutable b328 : int64x2# }
type t329 = { mutable a329 : t157; mutable b329 : int }
type t330 = { mutable a330 : t157; mutable b330 : int64 }
type t331 = { mutable a331 : t157; mutable b331 : int32# }
type t332 = { mutable a332 : t157; mutable b332 : float }
type t333 = { mutable a333 : t157; mutable b333 : int64x2# }
type t334 = { mutable a334 : t9 }
type t335 = { mutable a335 : t10 }
type t336 = { mutable a336 : t11 }
type t337 = { mutable a337 : t12 }
type t338 = #{ a338 : int; b338 : int64x2# }
type t339 = { mutable a339 : t338 }
type t340 = { mutable a340 : t13 }
type t341 = { mutable a341 : t14 }
type t342 = #{ a342 : int64; b342 : int32# }
type t343 = { mutable a343 : t342 }
type t344 = { mutable a344 : t15 }
type t345 = #{ a345 : int64; b345 : int64x2# }
type t346 = { mutable a346 : t345 }
type t347 = #{ a347 : int32#; b347 : int }
type t348 = { mutable a348 : t347 }
type t349 = #{ a349 : int32#; b349 : int64 }
type t350 = { mutable a350 : t349 }
type t351 = { mutable a351 : t16 }
type t352 = #{ a352 : int32#; b352 : float }
type t353 = { mutable a353 : t352 }
type t354 = #{ a354 : int32#; b354 : int64x2# }
type t355 = { mutable a355 : t354 }
type t356 = { mutable a356 : t17 }
type t357 = { mutable a357 : t18 }
type t358 = #{ a358 : float; b358 : int32# }
type t359 = { mutable a359 : t358 }
type t360 = { mutable a360 : t19 }
type t361 = #{ a361 : float; b361 : int64x2# }
type t362 = { mutable a362 : t361 }
type t363 = #{ a363 : int64x2#; b363 : int }
type t364 = { mutable a364 : t363 }
type t365 = #{ a365 : int64x2#; b365 : int64 }
type t366 = { mutable a366 : t365 }
type t367 = #{ a367 : int64x2#; b367 : int32# }
type t368 = { mutable a368 : t367 }
type t369 = #{ a369 : int64x2#; b369 : float }
type t370 = { mutable a370 : t369 }
type t371 = #{ a371 : int64x2#; b371 : int64x2# }
type t372 = { mutable a372 : t371 }
type t373 = { mutable a373 : t20 }
type t374 = { mutable a374 : t21 }
type t375 = { mutable a375 : t22 }
type t376 = #{ a376 : t56 }
type t377 = { mutable a377 : t376 }
type t378 = #{ a378 : t157 }
type t379 = { mutable a379 : t378 }
type t380 = { mutable a380 : int64# }
type t381 = { mutable a381 : nativeint# }
type t382 = { mutable a382 : int; mutable b382 : int64# }
type t383 = { mutable a383 : int; mutable b383 : nativeint# }
type t384 = { mutable a384 : int64; mutable b384 : int64# }
type t385 = { mutable a385 : int64; mutable b385 : nativeint# }
type t386 = { mutable a386 : int32#; mutable b386 : int64# }
type t387 = { mutable a387 : int32#; mutable b387 : nativeint# }
type t388 = { mutable a388 : float; mutable b388 : int64# }
type t389 = { mutable a389 : float; mutable b389 : nativeint# }
type t390 = { mutable a390 : int64#; mutable b390 : int }
type t391 = { mutable a391 : int64#; mutable b391 : int64 }
type t392 = { mutable a392 : int64#; mutable b392 : int32# }
type t393 = { mutable a393 : int64#; mutable b393 : float }
type t394 = { mutable a394 : int64#; mutable b394 : int64# }
type t395 = { mutable a395 : int64#; mutable b395 : nativeint# }
type t396 = { mutable a396 : nativeint#; mutable b396 : int }
type t397 = { mutable a397 : nativeint#; mutable b397 : int64 }
type t398 = { mutable a398 : nativeint#; mutable b398 : int32# }
type t399 = { mutable a399 : nativeint#; mutable b399 : float }
type t400 = { mutable a400 : nativeint#; mutable b400 : int64# }
type t401 = { mutable a401 : nativeint#; mutable b401 : nativeint# }
type t402 = { mutable a402 : t90 }
type t403 = { mutable a403 : t91 }
type t404 = { mutable a404 : t92; mutable b404 : t103 }
type t405 = #{ a405 : int64x2#; b405 : string }
type t406 = #{ a406 : int64; b406 : float# }
type t407 = { mutable a407 : t405; mutable b407 : t406 }
type t408 = #{ a408 : string; b408 : float# }
type t409 = { mutable a409 : int64x2#; mutable b409 : t408 }

let test_array_idx_with_makearray_dynamic size =
  (*********************************************)
  (*   t1 = #{ int64#; #{ int64#; int64# } }   *)
  (*********************************************)
  let eq = (fun (#{ a1 = a11; b1 = b11 } : t1) (#{ a1 = a12; b1 = b12 } : t1) -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a11 a12 && (fun (#{ a0 = a01; b0 = b01 } : t0) (#{ a0 = a02; b0 = b02 } : t0) -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a01 a02 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b01 b02) b11 b12) in
  let mk_value i = (#{ a1 = Int64_u.of_int (i + 0); b1 = (#{ a0 = Int64_u.of_int (i + 1); b0 = Int64_u.of_int (i + 2) } : t0) } : t1) in
  (* 1. Create an array of size [size] *)
  let a : t1 array = makearray_dynamic size (#{ a1 = #0L; b1 = (#{ a0 = #1L; b0 = #2L } : t0) } : t1) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 2;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 2 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a1 *)
    let el = #{ el with a1 = next_el.#a1 } in
    set_idx_mut a ((.(i).#a1) : (t1 array, _) idx_mut) next_el.#a1;
    mark_test_run 3;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 3 failed %d %d" size i;
    (* .#b1 *)
    let el = #{ el with b1 = next_el.#b1 } in
    set_idx_mut a ((.(i).#b1) : (t1 array, _) idx_mut) next_el.#b1;
    mark_test_run 4;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 4 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#b1.#a0 *)
    let el = #{ el with b1 = #{ el.#b1 with a0 = next_el.#b1.#a0 } } in
    set_idx_mut a ((.(i).#b1.#a0) : (t1 array, _) idx_mut) next_el.#b1.#a0;
    mark_test_run 5;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 5 failed %d %d" size i;
    (* .#b1.#b0 *)
    let el = #{ el with b1 = #{ el.#b1 with b0 = next_el.#b1.#b0 } } in
    set_idx_mut a ((.(i).#b1.#b0) : (t1 array, _) idx_mut) next_el.#b1.#b0;
    mark_test_run 6;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 6 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*********************************************)
  (*   t3 = #{ string; #{ string; string } }   *)
  (*********************************************)
  let eq = (fun (#{ a3 = a31; b3 = b31 } : t3) (#{ a3 = a32; b3 = b32 } : t3) -> (fun a b -> String.equal (globalize a) (globalize b)) a31 a32 && (fun (#{ a2 = a21; b2 = b21 } : t2) (#{ a2 = a22; b2 = b22 } : t2) -> (fun a b -> String.equal (globalize a) (globalize b)) a21 a22 && (fun a b -> String.equal (globalize a) (globalize b)) b21 b22) b31 b32) in
  let mk_value i = (#{ a3 = Int.to_string (i + 0); b3 = (#{ a2 = Int.to_string (i + 1); b2 = Int.to_string (i + 2) } : t2) } : t3) in
  (* 1. Create an array of size [size] *)
  let a : t3 array = makearray_dynamic size (#{ a3 = "0"; b3 = (#{ a2 = "1"; b2 = "2" } : t2) } : t3) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 7;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 7 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 8;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 8 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a3 *)
    let el = #{ el with a3 = next_el.#a3 } in
    set_idx_mut a ((.(i).#a3) : (t3 array, _) idx_mut) next_el.#a3;
    mark_test_run 9;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 9 failed %d %d" size i;
    (* .#b3 *)
    let el = #{ el with b3 = next_el.#b3 } in
    set_idx_mut a ((.(i).#b3) : (t3 array, _) idx_mut) next_el.#b3;
    mark_test_run 10;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 10 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#b3.#a2 *)
    let el = #{ el with b3 = #{ el.#b3 with a2 = next_el.#b3.#a2 } } in
    set_idx_mut a ((.(i).#b3.#a2) : (t3 array, _) idx_mut) next_el.#b3.#a2;
    mark_test_run 11;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 11 failed %d %d" size i;
    (* .#b3.#b2 *)
    let el = #{ el with b3 = #{ el.#b3 with b2 = next_el.#b3.#b2 } } in
    set_idx_mut a ((.(i).#b3.#b2) : (t3 array, _) idx_mut) next_el.#b3.#b2;
    mark_test_run 12;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 12 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*********************************************)
  (*   t4 = #{ #{ int64#; int64# }; int64# }   *)
  (*********************************************)
  let eq = (fun (#{ a4 = a41; b4 = b41 } : t4) (#{ a4 = a42; b4 = b42 } : t4) -> (fun (#{ a0 = a01; b0 = b01 } : t0) (#{ a0 = a02; b0 = b02 } : t0) -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a01 a02 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b01 b02) a41 a42 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b41 b42) in
  let mk_value i = (#{ a4 = (#{ a0 = Int64_u.of_int (i + 0); b0 = Int64_u.of_int (i + 1) } : t0); b4 = Int64_u.of_int (i + 2) } : t4) in
  (* 1. Create an array of size [size] *)
  let a : t4 array = makearray_dynamic size (#{ a4 = (#{ a0 = #0L; b0 = #1L } : t0); b4 = #2L } : t4) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 13;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 13 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 14;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 14 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a4 *)
    let el = #{ el with a4 = next_el.#a4 } in
    set_idx_mut a ((.(i).#a4) : (t4 array, _) idx_mut) next_el.#a4;
    mark_test_run 15;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 15 failed %d %d" size i;
    (* .#b4 *)
    let el = #{ el with b4 = next_el.#b4 } in
    set_idx_mut a ((.(i).#b4) : (t4 array, _) idx_mut) next_el.#b4;
    mark_test_run 16;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 16 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a4.#a0 *)
    let el = #{ el with a4 = #{ el.#a4 with a0 = next_el.#a4.#a0 } } in
    set_idx_mut a ((.(i).#a4.#a0) : (t4 array, _) idx_mut) next_el.#a4.#a0;
    mark_test_run 17;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 17 failed %d %d" size i;
    (* .#a4.#b0 *)
    let el = #{ el with a4 = #{ el.#a4 with b0 = next_el.#a4.#b0 } } in
    set_idx_mut a ((.(i).#a4.#b0) : (t4 array, _) idx_mut) next_el.#a4.#b0;
    mark_test_run 18;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 18 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*********************************************)
  (*   t5 = #{ #{ string; string }; string }   *)
  (*********************************************)
  let eq = (fun (#{ a5 = a51; b5 = b51 } : t5) (#{ a5 = a52; b5 = b52 } : t5) -> (fun (#{ a2 = a21; b2 = b21 } : t2) (#{ a2 = a22; b2 = b22 } : t2) -> (fun a b -> String.equal (globalize a) (globalize b)) a21 a22 && (fun a b -> String.equal (globalize a) (globalize b)) b21 b22) a51 a52 && (fun a b -> String.equal (globalize a) (globalize b)) b51 b52) in
  let mk_value i = (#{ a5 = (#{ a2 = Int.to_string (i + 0); b2 = Int.to_string (i + 1) } : t2); b5 = Int.to_string (i + 2) } : t5) in
  (* 1. Create an array of size [size] *)
  let a : t5 array = makearray_dynamic size (#{ a5 = (#{ a2 = "0"; b2 = "1" } : t2); b5 = "2" } : t5) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 19;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 19 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 20;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 20 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a5 *)
    let el = #{ el with a5 = next_el.#a5 } in
    set_idx_mut a ((.(i).#a5) : (t5 array, _) idx_mut) next_el.#a5;
    mark_test_run 21;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 21 failed %d %d" size i;
    (* .#b5 *)
    let el = #{ el with b5 = next_el.#b5 } in
    set_idx_mut a ((.(i).#b5) : (t5 array, _) idx_mut) next_el.#b5;
    mark_test_run 22;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 22 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a5.#a2 *)
    let el = #{ el with a5 = #{ el.#a5 with a2 = next_el.#a5.#a2 } } in
    set_idx_mut a ((.(i).#a5.#a2) : (t5 array, _) idx_mut) next_el.#a5.#a2;
    mark_test_run 23;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 23 failed %d %d" size i;
    (* .#a5.#b2 *)
    let el = #{ el with a5 = #{ el.#a5 with b2 = next_el.#a5.#b2 } } in
    set_idx_mut a ((.(i).#a5.#b2) : (t5 array, _) idx_mut) next_el.#a5.#b2;
    mark_test_run 24;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 24 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (***********)
  (*   int   *)
  (***********)
  let eq = (fun a b -> Int.equal a b) in
  let mk_value i = (i + 0) in
  (* 1. Create an array of size [size] *)
  let a : int array = makearray_dynamic size 0 in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 25;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 25 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 26;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 26 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    ()
  done;
  Gc.compact ();

  (*************)
  (*   int64   *)
  (*************)
  let eq = (fun a b -> Int64.equal (globalize a) (globalize b)) in
  let mk_value i = Int64.of_int (i + 0) in
  (* 1. Create an array of size [size] *)
  let a : int64 array = makearray_dynamic size 0L in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 27;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 27 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 28;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 28 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    ()
  done;
  Gc.compact ();

  (**************)
  (*   int32#   *)
  (**************)
  let eq = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) in
  let mk_value i = Int32_u.of_int (i + 0) in
  (* 1. Create an array of size [size] *)
  let a : int32# array = makearray_dynamic size #0l in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 29;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 29 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 30;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 30 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    ()
  done;
  Gc.compact ();

  (*********************)
  (*   t6 = #{ int }   *)
  (*********************)
  let eq = (fun (#{ a6 = a61 } : t6) (#{ a6 = a62 } : t6) -> (fun a b -> Int.equal a b) a61 a62) in
  let mk_value i = (#{ a6 = (i + 0) } : t6) in
  (* 1. Create an array of size [size] *)
  let a : t6 array = makearray_dynamic size (#{ a6 = 0 } : t6) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 31;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 31 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 32;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 32 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a6 *)
    let el = #{ el with a6 = next_el.#a6 } in
    set_idx_mut a ((.(i).#a6) : (t6 array, _) idx_mut) next_el.#a6;
    mark_test_run 33;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 33 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (***********************)
  (*   t7 = #{ int64 }   *)
  (***********************)
  let eq = (fun (#{ a7 = a71 } : t7) (#{ a7 = a72 } : t7) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a71 a72) in
  let mk_value i = (#{ a7 = Int64.of_int (i + 0) } : t7) in
  (* 1. Create an array of size [size] *)
  let a : t7 array = makearray_dynamic size (#{ a7 = 0L } : t7) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 34;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 34 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 35;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 35 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a7 *)
    let el = #{ el with a7 = next_el.#a7 } in
    set_idx_mut a ((.(i).#a7) : (t7 array, _) idx_mut) next_el.#a7;
    mark_test_run 36;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 36 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************)
  (*   t8 = #{ int32# }   *)
  (************************)
  let eq = (fun (#{ a8 = a81 } : t8) (#{ a8 = a82 } : t8) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a81 a82) in
  let mk_value i = (#{ a8 = Int32_u.of_int (i + 0) } : t8) in
  (* 1. Create an array of size [size] *)
  let a : t8 array = makearray_dynamic size (#{ a8 = #0l } : t8) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 37;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 37 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 38;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 38 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a8 *)
    let el = #{ el with a8 = next_el.#a8 } in
    set_idx_mut a ((.(i).#a8) : (t8 array, _) idx_mut) next_el.#a8;
    mark_test_run 39;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 39 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**************************)
  (*   t9 = #{ int; int }   *)
  (**************************)
  let eq = (fun (#{ a9 = a91; b9 = b91 } : t9) (#{ a9 = a92; b9 = b92 } : t9) -> (fun a b -> Int.equal a b) a91 a92 && (fun a b -> Int.equal a b) b91 b92) in
  let mk_value i = (#{ a9 = (i + 0); b9 = (i + 1) } : t9) in
  (* 1. Create an array of size [size] *)
  let a : t9 array = makearray_dynamic size (#{ a9 = 0; b9 = 1 } : t9) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 40;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 40 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 41;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 41 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a9 *)
    let el = #{ el with a9 = next_el.#a9 } in
    set_idx_mut a ((.(i).#a9) : (t9 array, _) idx_mut) next_el.#a9;
    mark_test_run 42;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 42 failed %d %d" size i;
    (* .#b9 *)
    let el = #{ el with b9 = next_el.#b9 } in
    set_idx_mut a ((.(i).#b9) : (t9 array, _) idx_mut) next_el.#b9;
    mark_test_run 43;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 43 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*****************************)
  (*   t10 = #{ int; int64 }   *)
  (*****************************)
  let eq = (fun (#{ a10 = a101; b10 = b101 } : t10) (#{ a10 = a102; b10 = b102 } : t10) -> (fun a b -> Int.equal a b) a101 a102 && (fun a b -> Int64.equal (globalize a) (globalize b)) b101 b102) in
  let mk_value i = (#{ a10 = (i + 0); b10 = Int64.of_int (i + 1) } : t10) in
  (* 1. Create an array of size [size] *)
  let a : t10 array = makearray_dynamic size (#{ a10 = 0; b10 = 1L } : t10) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 44;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 44 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 45;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 45 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a10 *)
    let el = #{ el with a10 = next_el.#a10 } in
    set_idx_mut a ((.(i).#a10) : (t10 array, _) idx_mut) next_el.#a10;
    mark_test_run 46;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 46 failed %d %d" size i;
    (* .#b10 *)
    let el = #{ el with b10 = next_el.#b10 } in
    set_idx_mut a ((.(i).#b10) : (t10 array, _) idx_mut) next_el.#b10;
    mark_test_run 47;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 47 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (******************************)
  (*   t11 = #{ int; int32# }   *)
  (******************************)
  let eq = (fun (#{ a11 = a111; b11 = b111 } : t11) (#{ a11 = a112; b11 = b112 } : t11) -> (fun a b -> Int.equal a b) a111 a112 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b111 b112) in
  let mk_value i = (#{ a11 = (i + 0); b11 = Int32_u.of_int (i + 1) } : t11) in
  (* 1. Create an array of size [size] *)
  let a : t11 array = makearray_dynamic size (#{ a11 = 0; b11 = #1l } : t11) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 48;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 48 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 49;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 49 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a11 *)
    let el = #{ el with a11 = next_el.#a11 } in
    set_idx_mut a ((.(i).#a11) : (t11 array, _) idx_mut) next_el.#a11;
    mark_test_run 50;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 50 failed %d %d" size i;
    (* .#b11 *)
    let el = #{ el with b11 = next_el.#b11 } in
    set_idx_mut a ((.(i).#b11) : (t11 array, _) idx_mut) next_el.#b11;
    mark_test_run 51;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 51 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*****************************)
  (*   t12 = #{ int; float }   *)
  (*****************************)
  let eq = (fun (#{ a12 = a121; b12 = b121 } : t12) (#{ a12 = a122; b12 = b122 } : t12) -> (fun a b -> Int.equal a b) a121 a122 && (fun a b -> Float.equal (globalize a) (globalize b)) b121 b122) in
  let mk_value i = (#{ a12 = (i + 0); b12 = Float.of_int (i + 1) } : t12) in
  (* 1. Create an array of size [size] *)
  let a : t12 array = makearray_dynamic size (#{ a12 = 0; b12 = 1. } : t12) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 52;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 52 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 53;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 53 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a12 *)
    let el = #{ el with a12 = next_el.#a12 } in
    set_idx_mut a ((.(i).#a12) : (t12 array, _) idx_mut) next_el.#a12;
    mark_test_run 54;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 54 failed %d %d" size i;
    (* .#b12 *)
    let el = #{ el with b12 = next_el.#b12 } in
    set_idx_mut a ((.(i).#b12) : (t12 array, _) idx_mut) next_el.#b12;
    mark_test_run 55;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 55 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*****************************)
  (*   t13 = #{ int64; int }   *)
  (*****************************)
  let eq = (fun (#{ a13 = a131; b13 = b131 } : t13) (#{ a13 = a132; b13 = b132 } : t13) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a131 a132 && (fun a b -> Int.equal a b) b131 b132) in
  let mk_value i = (#{ a13 = Int64.of_int (i + 0); b13 = (i + 1) } : t13) in
  (* 1. Create an array of size [size] *)
  let a : t13 array = makearray_dynamic size (#{ a13 = 0L; b13 = 1 } : t13) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 56;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 56 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 57;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 57 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a13 *)
    let el = #{ el with a13 = next_el.#a13 } in
    set_idx_mut a ((.(i).#a13) : (t13 array, _) idx_mut) next_el.#a13;
    mark_test_run 58;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 58 failed %d %d" size i;
    (* .#b13 *)
    let el = #{ el with b13 = next_el.#b13 } in
    set_idx_mut a ((.(i).#b13) : (t13 array, _) idx_mut) next_el.#b13;
    mark_test_run 59;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 59 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*******************************)
  (*   t14 = #{ int64; int64 }   *)
  (*******************************)
  let eq = (fun (#{ a14 = a141; b14 = b141 } : t14) (#{ a14 = a142; b14 = b142 } : t14) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a141 a142 && (fun a b -> Int64.equal (globalize a) (globalize b)) b141 b142) in
  let mk_value i = (#{ a14 = Int64.of_int (i + 0); b14 = Int64.of_int (i + 1) } : t14) in
  (* 1. Create an array of size [size] *)
  let a : t14 array = makearray_dynamic size (#{ a14 = 0L; b14 = 1L } : t14) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 60;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 60 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 61;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 61 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a14 *)
    let el = #{ el with a14 = next_el.#a14 } in
    set_idx_mut a ((.(i).#a14) : (t14 array, _) idx_mut) next_el.#a14;
    mark_test_run 62;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 62 failed %d %d" size i;
    (* .#b14 *)
    let el = #{ el with b14 = next_el.#b14 } in
    set_idx_mut a ((.(i).#b14) : (t14 array, _) idx_mut) next_el.#b14;
    mark_test_run 63;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 63 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*******************************)
  (*   t15 = #{ int64; float }   *)
  (*******************************)
  let eq = (fun (#{ a15 = a151; b15 = b151 } : t15) (#{ a15 = a152; b15 = b152 } : t15) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a151 a152 && (fun a b -> Float.equal (globalize a) (globalize b)) b151 b152) in
  let mk_value i = (#{ a15 = Int64.of_int (i + 0); b15 = Float.of_int (i + 1) } : t15) in
  (* 1. Create an array of size [size] *)
  let a : t15 array = makearray_dynamic size (#{ a15 = 0L; b15 = 1. } : t15) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 64;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 64 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 65;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 65 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a15 *)
    let el = #{ el with a15 = next_el.#a15 } in
    set_idx_mut a ((.(i).#a15) : (t15 array, _) idx_mut) next_el.#a15;
    mark_test_run 66;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 66 failed %d %d" size i;
    (* .#b15 *)
    let el = #{ el with b15 = next_el.#b15 } in
    set_idx_mut a ((.(i).#b15) : (t15 array, _) idx_mut) next_el.#b15;
    mark_test_run 67;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 67 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*********************************)
  (*   t16 = #{ int32#; int32# }   *)
  (*********************************)
  let eq = (fun (#{ a16 = a161; b16 = b161 } : t16) (#{ a16 = a162; b16 = b162 } : t16) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a161 a162 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b161 b162) in
  let mk_value i = (#{ a16 = Int32_u.of_int (i + 0); b16 = Int32_u.of_int (i + 1) } : t16) in
  (* 1. Create an array of size [size] *)
  let a : t16 array = makearray_dynamic size (#{ a16 = #0l; b16 = #1l } : t16) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 68;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 68 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 69;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 69 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a16 *)
    let el = #{ el with a16 = next_el.#a16 } in
    set_idx_mut a ((.(i).#a16) : (t16 array, _) idx_mut) next_el.#a16;
    mark_test_run 70;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 70 failed %d %d" size i;
    (* .#b16 *)
    let el = #{ el with b16 = next_el.#b16 } in
    set_idx_mut a ((.(i).#b16) : (t16 array, _) idx_mut) next_el.#b16;
    mark_test_run 71;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 71 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*****************************)
  (*   t17 = #{ float; int }   *)
  (*****************************)
  let eq = (fun (#{ a17 = a171; b17 = b171 } : t17) (#{ a17 = a172; b17 = b172 } : t17) -> (fun a b -> Float.equal (globalize a) (globalize b)) a171 a172 && (fun a b -> Int.equal a b) b171 b172) in
  let mk_value i = (#{ a17 = Float.of_int (i + 0); b17 = (i + 1) } : t17) in
  (* 1. Create an array of size [size] *)
  let a : t17 array = makearray_dynamic size (#{ a17 = 0.; b17 = 1 } : t17) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 72;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 72 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 73;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 73 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a17 *)
    let el = #{ el with a17 = next_el.#a17 } in
    set_idx_mut a ((.(i).#a17) : (t17 array, _) idx_mut) next_el.#a17;
    mark_test_run 74;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 74 failed %d %d" size i;
    (* .#b17 *)
    let el = #{ el with b17 = next_el.#b17 } in
    set_idx_mut a ((.(i).#b17) : (t17 array, _) idx_mut) next_el.#b17;
    mark_test_run 75;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 75 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*******************************)
  (*   t18 = #{ float; int64 }   *)
  (*******************************)
  let eq = (fun (#{ a18 = a181; b18 = b181 } : t18) (#{ a18 = a182; b18 = b182 } : t18) -> (fun a b -> Float.equal (globalize a) (globalize b)) a181 a182 && (fun a b -> Int64.equal (globalize a) (globalize b)) b181 b182) in
  let mk_value i = (#{ a18 = Float.of_int (i + 0); b18 = Int64.of_int (i + 1) } : t18) in
  (* 1. Create an array of size [size] *)
  let a : t18 array = makearray_dynamic size (#{ a18 = 0.; b18 = 1L } : t18) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 76;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 76 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 77;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 77 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a18 *)
    let el = #{ el with a18 = next_el.#a18 } in
    set_idx_mut a ((.(i).#a18) : (t18 array, _) idx_mut) next_el.#a18;
    mark_test_run 78;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 78 failed %d %d" size i;
    (* .#b18 *)
    let el = #{ el with b18 = next_el.#b18 } in
    set_idx_mut a ((.(i).#b18) : (t18 array, _) idx_mut) next_el.#b18;
    mark_test_run 79;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 79 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*******************************)
  (*   t19 = #{ float; float }   *)
  (*******************************)
  let eq = (fun (#{ a19 = a191; b19 = b191 } : t19) (#{ a19 = a192; b19 = b192 } : t19) -> (fun a b -> Float.equal (globalize a) (globalize b)) a191 a192 && (fun a b -> Float.equal (globalize a) (globalize b)) b191 b192) in
  let mk_value i = (#{ a19 = Float.of_int (i + 0); b19 = Float.of_int (i + 1) } : t19) in
  (* 1. Create an array of size [size] *)
  let a : t19 array = makearray_dynamic size (#{ a19 = 0.; b19 = 1. } : t19) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 80;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 80 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 81;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 81 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a19 *)
    let el = #{ el with a19 = next_el.#a19 } in
    set_idx_mut a ((.(i).#a19) : (t19 array, _) idx_mut) next_el.#a19;
    mark_test_run 82;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 82 failed %d %d" size i;
    (* .#b19 *)
    let el = #{ el with b19 = next_el.#b19 } in
    set_idx_mut a ((.(i).#b19) : (t19 array, _) idx_mut) next_el.#b19;
    mark_test_run 83;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 83 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (***************************)
  (*   t20 = #{ #{ int } }   *)
  (***************************)
  let eq = (fun (#{ a20 = a201 } : t20) (#{ a20 = a202 } : t20) -> (fun (#{ a6 = a61 } : t6) (#{ a6 = a62 } : t6) -> (fun a b -> Int.equal a b) a61 a62) a201 a202) in
  let mk_value i = (#{ a20 = (#{ a6 = (i + 0) } : t6) } : t20) in
  (* 1. Create an array of size [size] *)
  let a : t20 array = makearray_dynamic size (#{ a20 = (#{ a6 = 0 } : t6) } : t20) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 84;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 84 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 85;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 85 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a20 *)
    let el = #{ el with a20 = next_el.#a20 } in
    set_idx_mut a ((.(i).#a20) : (t20 array, _) idx_mut) next_el.#a20;
    mark_test_run 86;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 86 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a20.#a6 *)
    let el = #{ el with a20 = #{ el.#a20 with a6 = next_el.#a20.#a6 } } in
    set_idx_mut a ((.(i).#a20.#a6) : (t20 array, _) idx_mut) next_el.#a20.#a6;
    mark_test_run 87;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 87 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*****************************)
  (*   t21 = #{ #{ int64 } }   *)
  (*****************************)
  let eq = (fun (#{ a21 = a211 } : t21) (#{ a21 = a212 } : t21) -> (fun (#{ a7 = a71 } : t7) (#{ a7 = a72 } : t7) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a71 a72) a211 a212) in
  let mk_value i = (#{ a21 = (#{ a7 = Int64.of_int (i + 0) } : t7) } : t21) in
  (* 1. Create an array of size [size] *)
  let a : t21 array = makearray_dynamic size (#{ a21 = (#{ a7 = 0L } : t7) } : t21) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 88;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 88 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 89;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 89 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a21 *)
    let el = #{ el with a21 = next_el.#a21 } in
    set_idx_mut a ((.(i).#a21) : (t21 array, _) idx_mut) next_el.#a21;
    mark_test_run 90;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 90 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a21.#a7 *)
    let el = #{ el with a21 = #{ el.#a21 with a7 = next_el.#a21.#a7 } } in
    set_idx_mut a ((.(i).#a21.#a7) : (t21 array, _) idx_mut) next_el.#a21.#a7;
    mark_test_run 91;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 91 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (******************************)
  (*   t22 = #{ #{ int32# } }   *)
  (******************************)
  let eq = (fun (#{ a22 = a221 } : t22) (#{ a22 = a222 } : t22) -> (fun (#{ a8 = a81 } : t8) (#{ a8 = a82 } : t8) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a81 a82) a221 a222) in
  let mk_value i = (#{ a22 = (#{ a8 = Int32_u.of_int (i + 0) } : t8) } : t22) in
  (* 1. Create an array of size [size] *)
  let a : t22 array = makearray_dynamic size (#{ a22 = (#{ a8 = #0l } : t8) } : t22) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 92;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 92 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 93;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 93 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a22 *)
    let el = #{ el with a22 = next_el.#a22 } in
    set_idx_mut a ((.(i).#a22) : (t22 array, _) idx_mut) next_el.#a22;
    mark_test_run 94;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 94 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a22.#a8 *)
    let el = #{ el with a22 = #{ el.#a22 with a8 = next_el.#a22.#a8 } } in
    set_idx_mut a ((.(i).#a22.#a8) : (t22 array, _) idx_mut) next_el.#a22.#a8;
    mark_test_run 95;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 95 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (********************************)
  (*   t23 = #{ int; int; int }   *)
  (********************************)
  let eq = (fun (#{ a23 = a231; b23 = b231; c23 = c231 } : t23) (#{ a23 = a232; b23 = b232; c23 = c232 } : t23) -> (fun a b -> Int.equal a b) a231 a232 && (fun a b -> Int.equal a b) b231 b232 && (fun a b -> Int.equal a b) c231 c232) in
  let mk_value i = (#{ a23 = (i + 0); b23 = (i + 1); c23 = (i + 2) } : t23) in
  (* 1. Create an array of size [size] *)
  let a : t23 array = makearray_dynamic size (#{ a23 = 0; b23 = 1; c23 = 2 } : t23) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 96;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 96 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 97;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 97 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a23 *)
    let el = #{ el with a23 = next_el.#a23 } in
    set_idx_mut a ((.(i).#a23) : (t23 array, _) idx_mut) next_el.#a23;
    mark_test_run 98;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 98 failed %d %d" size i;
    (* .#b23 *)
    let el = #{ el with b23 = next_el.#b23 } in
    set_idx_mut a ((.(i).#b23) : (t23 array, _) idx_mut) next_el.#b23;
    mark_test_run 99;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 99 failed %d %d" size i;
    (* .#c23 *)
    let el = #{ el with c23 = next_el.#c23 } in
    set_idx_mut a ((.(i).#c23) : (t23 array, _) idx_mut) next_el.#c23;
    mark_test_run 100;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 100 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t24 = #{ int; int; int64 }   *)
  (**********************************)
  let eq = (fun (#{ a24 = a241; b24 = b241; c24 = c241 } : t24) (#{ a24 = a242; b24 = b242; c24 = c242 } : t24) -> (fun a b -> Int.equal a b) a241 a242 && (fun a b -> Int.equal a b) b241 b242 && (fun a b -> Int64.equal (globalize a) (globalize b)) c241 c242) in
  let mk_value i = (#{ a24 = (i + 0); b24 = (i + 1); c24 = Int64.of_int (i + 2) } : t24) in
  (* 1. Create an array of size [size] *)
  let a : t24 array = makearray_dynamic size (#{ a24 = 0; b24 = 1; c24 = 2L } : t24) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 101;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 101 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 102;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 102 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a24 *)
    let el = #{ el with a24 = next_el.#a24 } in
    set_idx_mut a ((.(i).#a24) : (t24 array, _) idx_mut) next_el.#a24;
    mark_test_run 103;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 103 failed %d %d" size i;
    (* .#b24 *)
    let el = #{ el with b24 = next_el.#b24 } in
    set_idx_mut a ((.(i).#b24) : (t24 array, _) idx_mut) next_el.#b24;
    mark_test_run 104;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 104 failed %d %d" size i;
    (* .#c24 *)
    let el = #{ el with c24 = next_el.#c24 } in
    set_idx_mut a ((.(i).#c24) : (t24 array, _) idx_mut) next_el.#c24;
    mark_test_run 105;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 105 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (***********************************)
  (*   t25 = #{ int; int; int32# }   *)
  (***********************************)
  let eq = (fun (#{ a25 = a251; b25 = b251; c25 = c251 } : t25) (#{ a25 = a252; b25 = b252; c25 = c252 } : t25) -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) c251 c252) in
  let mk_value i = (#{ a25 = (i + 0); b25 = (i + 1); c25 = Int32_u.of_int (i + 2) } : t25) in
  (* 1. Create an array of size [size] *)
  let a : t25 array = makearray_dynamic size (#{ a25 = 0; b25 = 1; c25 = #2l } : t25) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 106;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 106 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 107;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 107 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a25 *)
    let el = #{ el with a25 = next_el.#a25 } in
    set_idx_mut a ((.(i).#a25) : (t25 array, _) idx_mut) next_el.#a25;
    mark_test_run 108;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 108 failed %d %d" size i;
    (* .#b25 *)
    let el = #{ el with b25 = next_el.#b25 } in
    set_idx_mut a ((.(i).#b25) : (t25 array, _) idx_mut) next_el.#b25;
    mark_test_run 109;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 109 failed %d %d" size i;
    (* .#c25 *)
    let el = #{ el with c25 = next_el.#c25 } in
    set_idx_mut a ((.(i).#c25) : (t25 array, _) idx_mut) next_el.#c25;
    mark_test_run 110;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 110 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t26 = #{ int; int; float }   *)
  (**********************************)
  let eq = (fun (#{ a26 = a261; b26 = b261; c26 = c261 } : t26) (#{ a26 = a262; b26 = b262; c26 = c262 } : t26) -> (fun a b -> Int.equal a b) a261 a262 && (fun a b -> Int.equal a b) b261 b262 && (fun a b -> Float.equal (globalize a) (globalize b)) c261 c262) in
  let mk_value i = (#{ a26 = (i + 0); b26 = (i + 1); c26 = Float.of_int (i + 2) } : t26) in
  (* 1. Create an array of size [size] *)
  let a : t26 array = makearray_dynamic size (#{ a26 = 0; b26 = 1; c26 = 2. } : t26) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 111;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 111 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 112;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 112 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a26 *)
    let el = #{ el with a26 = next_el.#a26 } in
    set_idx_mut a ((.(i).#a26) : (t26 array, _) idx_mut) next_el.#a26;
    mark_test_run 113;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 113 failed %d %d" size i;
    (* .#b26 *)
    let el = #{ el with b26 = next_el.#b26 } in
    set_idx_mut a ((.(i).#b26) : (t26 array, _) idx_mut) next_el.#b26;
    mark_test_run 114;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 114 failed %d %d" size i;
    (* .#c26 *)
    let el = #{ el with c26 = next_el.#c26 } in
    set_idx_mut a ((.(i).#c26) : (t26 array, _) idx_mut) next_el.#c26;
    mark_test_run 115;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 115 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t27 = #{ int; int64; int }   *)
  (**********************************)
  let eq = (fun (#{ a27 = a271; b27 = b271; c27 = c271 } : t27) (#{ a27 = a272; b27 = b272; c27 = c272 } : t27) -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int64.equal (globalize a) (globalize b)) b271 b272 && (fun a b -> Int.equal a b) c271 c272) in
  let mk_value i = (#{ a27 = (i + 0); b27 = Int64.of_int (i + 1); c27 = (i + 2) } : t27) in
  (* 1. Create an array of size [size] *)
  let a : t27 array = makearray_dynamic size (#{ a27 = 0; b27 = 1L; c27 = 2 } : t27) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 116;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 116 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 117;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 117 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a27 *)
    let el = #{ el with a27 = next_el.#a27 } in
    set_idx_mut a ((.(i).#a27) : (t27 array, _) idx_mut) next_el.#a27;
    mark_test_run 118;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 118 failed %d %d" size i;
    (* .#b27 *)
    let el = #{ el with b27 = next_el.#b27 } in
    set_idx_mut a ((.(i).#b27) : (t27 array, _) idx_mut) next_el.#b27;
    mark_test_run 119;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 119 failed %d %d" size i;
    (* .#c27 *)
    let el = #{ el with c27 = next_el.#c27 } in
    set_idx_mut a ((.(i).#c27) : (t27 array, _) idx_mut) next_el.#c27;
    mark_test_run 120;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 120 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t28 = #{ int; int64; int64 }   *)
  (************************************)
  let eq = (fun (#{ a28 = a281; b28 = b281; c28 = c281 } : t28) (#{ a28 = a282; b28 = b282; c28 = c282 } : t28) -> (fun a b -> Int.equal a b) a281 a282 && (fun a b -> Int64.equal (globalize a) (globalize b)) b281 b282 && (fun a b -> Int64.equal (globalize a) (globalize b)) c281 c282) in
  let mk_value i = (#{ a28 = (i + 0); b28 = Int64.of_int (i + 1); c28 = Int64.of_int (i + 2) } : t28) in
  (* 1. Create an array of size [size] *)
  let a : t28 array = makearray_dynamic size (#{ a28 = 0; b28 = 1L; c28 = 2L } : t28) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 121;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 121 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 122;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 122 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a28 *)
    let el = #{ el with a28 = next_el.#a28 } in
    set_idx_mut a ((.(i).#a28) : (t28 array, _) idx_mut) next_el.#a28;
    mark_test_run 123;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 123 failed %d %d" size i;
    (* .#b28 *)
    let el = #{ el with b28 = next_el.#b28 } in
    set_idx_mut a ((.(i).#b28) : (t28 array, _) idx_mut) next_el.#b28;
    mark_test_run 124;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 124 failed %d %d" size i;
    (* .#c28 *)
    let el = #{ el with c28 = next_el.#c28 } in
    set_idx_mut a ((.(i).#c28) : (t28 array, _) idx_mut) next_el.#c28;
    mark_test_run 125;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 125 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t29 = #{ int; int64; float }   *)
  (************************************)
  let eq = (fun (#{ a29 = a291; b29 = b291; c29 = c291 } : t29) (#{ a29 = a292; b29 = b292; c29 = c292 } : t29) -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Int64.equal (globalize a) (globalize b)) b291 b292 && (fun a b -> Float.equal (globalize a) (globalize b)) c291 c292) in
  let mk_value i = (#{ a29 = (i + 0); b29 = Int64.of_int (i + 1); c29 = Float.of_int (i + 2) } : t29) in
  (* 1. Create an array of size [size] *)
  let a : t29 array = makearray_dynamic size (#{ a29 = 0; b29 = 1L; c29 = 2. } : t29) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 126;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 126 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 127;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 127 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a29 *)
    let el = #{ el with a29 = next_el.#a29 } in
    set_idx_mut a ((.(i).#a29) : (t29 array, _) idx_mut) next_el.#a29;
    mark_test_run 128;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 128 failed %d %d" size i;
    (* .#b29 *)
    let el = #{ el with b29 = next_el.#b29 } in
    set_idx_mut a ((.(i).#b29) : (t29 array, _) idx_mut) next_el.#b29;
    mark_test_run 129;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 129 failed %d %d" size i;
    (* .#c29 *)
    let el = #{ el with c29 = next_el.#c29 } in
    set_idx_mut a ((.(i).#c29) : (t29 array, _) idx_mut) next_el.#c29;
    mark_test_run 130;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 130 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**************************************)
  (*   t30 = #{ int; int32#; int32# }   *)
  (**************************************)
  let eq = (fun (#{ a30 = a301; b30 = b301; c30 = c301 } : t30) (#{ a30 = a302; b30 = b302; c30 = c302 } : t30) -> (fun a b -> Int.equal a b) a301 a302 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b301 b302 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) c301 c302) in
  let mk_value i = (#{ a30 = (i + 0); b30 = Int32_u.of_int (i + 1); c30 = Int32_u.of_int (i + 2) } : t30) in
  (* 1. Create an array of size [size] *)
  let a : t30 array = makearray_dynamic size (#{ a30 = 0; b30 = #1l; c30 = #2l } : t30) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 131;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 131 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 132;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 132 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a30 *)
    let el = #{ el with a30 = next_el.#a30 } in
    set_idx_mut a ((.(i).#a30) : (t30 array, _) idx_mut) next_el.#a30;
    mark_test_run 133;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 133 failed %d %d" size i;
    (* .#b30 *)
    let el = #{ el with b30 = next_el.#b30 } in
    set_idx_mut a ((.(i).#b30) : (t30 array, _) idx_mut) next_el.#b30;
    mark_test_run 134;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 134 failed %d %d" size i;
    (* .#c30 *)
    let el = #{ el with c30 = next_el.#c30 } in
    set_idx_mut a ((.(i).#c30) : (t30 array, _) idx_mut) next_el.#c30;
    mark_test_run 135;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 135 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t31 = #{ int; float; int }   *)
  (**********************************)
  let eq = (fun (#{ a31 = a311; b31 = b311; c31 = c311 } : t31) (#{ a31 = a312; b31 = b312; c31 = c312 } : t31) -> (fun a b -> Int.equal a b) a311 a312 && (fun a b -> Float.equal (globalize a) (globalize b)) b311 b312 && (fun a b -> Int.equal a b) c311 c312) in
  let mk_value i = (#{ a31 = (i + 0); b31 = Float.of_int (i + 1); c31 = (i + 2) } : t31) in
  (* 1. Create an array of size [size] *)
  let a : t31 array = makearray_dynamic size (#{ a31 = 0; b31 = 1.; c31 = 2 } : t31) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 136;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 136 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 137;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 137 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a31 *)
    let el = #{ el with a31 = next_el.#a31 } in
    set_idx_mut a ((.(i).#a31) : (t31 array, _) idx_mut) next_el.#a31;
    mark_test_run 138;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 138 failed %d %d" size i;
    (* .#b31 *)
    let el = #{ el with b31 = next_el.#b31 } in
    set_idx_mut a ((.(i).#b31) : (t31 array, _) idx_mut) next_el.#b31;
    mark_test_run 139;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 139 failed %d %d" size i;
    (* .#c31 *)
    let el = #{ el with c31 = next_el.#c31 } in
    set_idx_mut a ((.(i).#c31) : (t31 array, _) idx_mut) next_el.#c31;
    mark_test_run 140;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 140 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t32 = #{ int; float; int64 }   *)
  (************************************)
  let eq = (fun (#{ a32 = a321; b32 = b321; c32 = c321 } : t32) (#{ a32 = a322; b32 = b322; c32 = c322 } : t32) -> (fun a b -> Int.equal a b) a321 a322 && (fun a b -> Float.equal (globalize a) (globalize b)) b321 b322 && (fun a b -> Int64.equal (globalize a) (globalize b)) c321 c322) in
  let mk_value i = (#{ a32 = (i + 0); b32 = Float.of_int (i + 1); c32 = Int64.of_int (i + 2) } : t32) in
  (* 1. Create an array of size [size] *)
  let a : t32 array = makearray_dynamic size (#{ a32 = 0; b32 = 1.; c32 = 2L } : t32) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 141;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 141 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 142;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 142 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a32 *)
    let el = #{ el with a32 = next_el.#a32 } in
    set_idx_mut a ((.(i).#a32) : (t32 array, _) idx_mut) next_el.#a32;
    mark_test_run 143;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 143 failed %d %d" size i;
    (* .#b32 *)
    let el = #{ el with b32 = next_el.#b32 } in
    set_idx_mut a ((.(i).#b32) : (t32 array, _) idx_mut) next_el.#b32;
    mark_test_run 144;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 144 failed %d %d" size i;
    (* .#c32 *)
    let el = #{ el with c32 = next_el.#c32 } in
    set_idx_mut a ((.(i).#c32) : (t32 array, _) idx_mut) next_el.#c32;
    mark_test_run 145;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 145 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t33 = #{ int; float; float }   *)
  (************************************)
  let eq = (fun (#{ a33 = a331; b33 = b331; c33 = c331 } : t33) (#{ a33 = a332; b33 = b332; c33 = c332 } : t33) -> (fun a b -> Int.equal a b) a331 a332 && (fun a b -> Float.equal (globalize a) (globalize b)) b331 b332 && (fun a b -> Float.equal (globalize a) (globalize b)) c331 c332) in
  let mk_value i = (#{ a33 = (i + 0); b33 = Float.of_int (i + 1); c33 = Float.of_int (i + 2) } : t33) in
  (* 1. Create an array of size [size] *)
  let a : t33 array = makearray_dynamic size (#{ a33 = 0; b33 = 1.; c33 = 2. } : t33) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 146;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 146 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 147;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 147 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a33 *)
    let el = #{ el with a33 = next_el.#a33 } in
    set_idx_mut a ((.(i).#a33) : (t33 array, _) idx_mut) next_el.#a33;
    mark_test_run 148;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 148 failed %d %d" size i;
    (* .#b33 *)
    let el = #{ el with b33 = next_el.#b33 } in
    set_idx_mut a ((.(i).#b33) : (t33 array, _) idx_mut) next_el.#b33;
    mark_test_run 149;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 149 failed %d %d" size i;
    (* .#c33 *)
    let el = #{ el with c33 = next_el.#c33 } in
    set_idx_mut a ((.(i).#c33) : (t33 array, _) idx_mut) next_el.#c33;
    mark_test_run 150;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 150 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t34 = #{ int64; int; int }   *)
  (**********************************)
  let eq = (fun (#{ a34 = a341; b34 = b341; c34 = c341 } : t34) (#{ a34 = a342; b34 = b342; c34 = c342 } : t34) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a341 a342 && (fun a b -> Int.equal a b) b341 b342 && (fun a b -> Int.equal a b) c341 c342) in
  let mk_value i = (#{ a34 = Int64.of_int (i + 0); b34 = (i + 1); c34 = (i + 2) } : t34) in
  (* 1. Create an array of size [size] *)
  let a : t34 array = makearray_dynamic size (#{ a34 = 0L; b34 = 1; c34 = 2 } : t34) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 151;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 151 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 152;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 152 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a34 *)
    let el = #{ el with a34 = next_el.#a34 } in
    set_idx_mut a ((.(i).#a34) : (t34 array, _) idx_mut) next_el.#a34;
    mark_test_run 153;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 153 failed %d %d" size i;
    (* .#b34 *)
    let el = #{ el with b34 = next_el.#b34 } in
    set_idx_mut a ((.(i).#b34) : (t34 array, _) idx_mut) next_el.#b34;
    mark_test_run 154;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 154 failed %d %d" size i;
    (* .#c34 *)
    let el = #{ el with c34 = next_el.#c34 } in
    set_idx_mut a ((.(i).#c34) : (t34 array, _) idx_mut) next_el.#c34;
    mark_test_run 155;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 155 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t35 = #{ int64; int; int64 }   *)
  (************************************)
  let eq = (fun (#{ a35 = a351; b35 = b351; c35 = c351 } : t35) (#{ a35 = a352; b35 = b352; c35 = c352 } : t35) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a351 a352 && (fun a b -> Int.equal a b) b351 b352 && (fun a b -> Int64.equal (globalize a) (globalize b)) c351 c352) in
  let mk_value i = (#{ a35 = Int64.of_int (i + 0); b35 = (i + 1); c35 = Int64.of_int (i + 2) } : t35) in
  (* 1. Create an array of size [size] *)
  let a : t35 array = makearray_dynamic size (#{ a35 = 0L; b35 = 1; c35 = 2L } : t35) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 156;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 156 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 157;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 157 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a35 *)
    let el = #{ el with a35 = next_el.#a35 } in
    set_idx_mut a ((.(i).#a35) : (t35 array, _) idx_mut) next_el.#a35;
    mark_test_run 158;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 158 failed %d %d" size i;
    (* .#b35 *)
    let el = #{ el with b35 = next_el.#b35 } in
    set_idx_mut a ((.(i).#b35) : (t35 array, _) idx_mut) next_el.#b35;
    mark_test_run 159;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 159 failed %d %d" size i;
    (* .#c35 *)
    let el = #{ el with c35 = next_el.#c35 } in
    set_idx_mut a ((.(i).#c35) : (t35 array, _) idx_mut) next_el.#c35;
    mark_test_run 160;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 160 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t36 = #{ int64; int; float }   *)
  (************************************)
  let eq = (fun (#{ a36 = a361; b36 = b361; c36 = c361 } : t36) (#{ a36 = a362; b36 = b362; c36 = c362 } : t36) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a361 a362 && (fun a b -> Int.equal a b) b361 b362 && (fun a b -> Float.equal (globalize a) (globalize b)) c361 c362) in
  let mk_value i = (#{ a36 = Int64.of_int (i + 0); b36 = (i + 1); c36 = Float.of_int (i + 2) } : t36) in
  (* 1. Create an array of size [size] *)
  let a : t36 array = makearray_dynamic size (#{ a36 = 0L; b36 = 1; c36 = 2. } : t36) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 161;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 161 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 162;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 162 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a36 *)
    let el = #{ el with a36 = next_el.#a36 } in
    set_idx_mut a ((.(i).#a36) : (t36 array, _) idx_mut) next_el.#a36;
    mark_test_run 163;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 163 failed %d %d" size i;
    (* .#b36 *)
    let el = #{ el with b36 = next_el.#b36 } in
    set_idx_mut a ((.(i).#b36) : (t36 array, _) idx_mut) next_el.#b36;
    mark_test_run 164;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 164 failed %d %d" size i;
    (* .#c36 *)
    let el = #{ el with c36 = next_el.#c36 } in
    set_idx_mut a ((.(i).#c36) : (t36 array, _) idx_mut) next_el.#c36;
    mark_test_run 165;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 165 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t37 = #{ int64; int64; int }   *)
  (************************************)
  let eq = (fun (#{ a37 = a371; b37 = b371; c37 = c371 } : t37) (#{ a37 = a372; b37 = b372; c37 = c372 } : t37) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a371 a372 && (fun a b -> Int64.equal (globalize a) (globalize b)) b371 b372 && (fun a b -> Int.equal a b) c371 c372) in
  let mk_value i = (#{ a37 = Int64.of_int (i + 0); b37 = Int64.of_int (i + 1); c37 = (i + 2) } : t37) in
  (* 1. Create an array of size [size] *)
  let a : t37 array = makearray_dynamic size (#{ a37 = 0L; b37 = 1L; c37 = 2 } : t37) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 166;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 166 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 167;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 167 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a37 *)
    let el = #{ el with a37 = next_el.#a37 } in
    set_idx_mut a ((.(i).#a37) : (t37 array, _) idx_mut) next_el.#a37;
    mark_test_run 168;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 168 failed %d %d" size i;
    (* .#b37 *)
    let el = #{ el with b37 = next_el.#b37 } in
    set_idx_mut a ((.(i).#b37) : (t37 array, _) idx_mut) next_el.#b37;
    mark_test_run 169;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 169 failed %d %d" size i;
    (* .#c37 *)
    let el = #{ el with c37 = next_el.#c37 } in
    set_idx_mut a ((.(i).#c37) : (t37 array, _) idx_mut) next_el.#c37;
    mark_test_run 170;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 170 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**************************************)
  (*   t38 = #{ int64; int64; int64 }   *)
  (**************************************)
  let eq = (fun (#{ a38 = a381; b38 = b381; c38 = c381 } : t38) (#{ a38 = a382; b38 = b382; c38 = c382 } : t38) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a381 a382 && (fun a b -> Int64.equal (globalize a) (globalize b)) b381 b382 && (fun a b -> Int64.equal (globalize a) (globalize b)) c381 c382) in
  let mk_value i = (#{ a38 = Int64.of_int (i + 0); b38 = Int64.of_int (i + 1); c38 = Int64.of_int (i + 2) } : t38) in
  (* 1. Create an array of size [size] *)
  let a : t38 array = makearray_dynamic size (#{ a38 = 0L; b38 = 1L; c38 = 2L } : t38) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 171;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 171 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 172;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 172 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a38 *)
    let el = #{ el with a38 = next_el.#a38 } in
    set_idx_mut a ((.(i).#a38) : (t38 array, _) idx_mut) next_el.#a38;
    mark_test_run 173;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 173 failed %d %d" size i;
    (* .#b38 *)
    let el = #{ el with b38 = next_el.#b38 } in
    set_idx_mut a ((.(i).#b38) : (t38 array, _) idx_mut) next_el.#b38;
    mark_test_run 174;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 174 failed %d %d" size i;
    (* .#c38 *)
    let el = #{ el with c38 = next_el.#c38 } in
    set_idx_mut a ((.(i).#c38) : (t38 array, _) idx_mut) next_el.#c38;
    mark_test_run 175;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 175 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**************************************)
  (*   t39 = #{ int64; int64; float }   *)
  (**************************************)
  let eq = (fun (#{ a39 = a391; b39 = b391; c39 = c391 } : t39) (#{ a39 = a392; b39 = b392; c39 = c392 } : t39) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a391 a392 && (fun a b -> Int64.equal (globalize a) (globalize b)) b391 b392 && (fun a b -> Float.equal (globalize a) (globalize b)) c391 c392) in
  let mk_value i = (#{ a39 = Int64.of_int (i + 0); b39 = Int64.of_int (i + 1); c39 = Float.of_int (i + 2) } : t39) in
  (* 1. Create an array of size [size] *)
  let a : t39 array = makearray_dynamic size (#{ a39 = 0L; b39 = 1L; c39 = 2. } : t39) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 176;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 176 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 177;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 177 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a39 *)
    let el = #{ el with a39 = next_el.#a39 } in
    set_idx_mut a ((.(i).#a39) : (t39 array, _) idx_mut) next_el.#a39;
    mark_test_run 178;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 178 failed %d %d" size i;
    (* .#b39 *)
    let el = #{ el with b39 = next_el.#b39 } in
    set_idx_mut a ((.(i).#b39) : (t39 array, _) idx_mut) next_el.#b39;
    mark_test_run 179;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 179 failed %d %d" size i;
    (* .#c39 *)
    let el = #{ el with c39 = next_el.#c39 } in
    set_idx_mut a ((.(i).#c39) : (t39 array, _) idx_mut) next_el.#c39;
    mark_test_run 180;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 180 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t40 = #{ int64; float; int }   *)
  (************************************)
  let eq = (fun (#{ a40 = a401; b40 = b401; c40 = c401 } : t40) (#{ a40 = a402; b40 = b402; c40 = c402 } : t40) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Float.equal (globalize a) (globalize b)) b401 b402 && (fun a b -> Int.equal a b) c401 c402) in
  let mk_value i = (#{ a40 = Int64.of_int (i + 0); b40 = Float.of_int (i + 1); c40 = (i + 2) } : t40) in
  (* 1. Create an array of size [size] *)
  let a : t40 array = makearray_dynamic size (#{ a40 = 0L; b40 = 1.; c40 = 2 } : t40) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 181;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 181 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 182;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 182 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a40 *)
    let el = #{ el with a40 = next_el.#a40 } in
    set_idx_mut a ((.(i).#a40) : (t40 array, _) idx_mut) next_el.#a40;
    mark_test_run 183;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 183 failed %d %d" size i;
    (* .#b40 *)
    let el = #{ el with b40 = next_el.#b40 } in
    set_idx_mut a ((.(i).#b40) : (t40 array, _) idx_mut) next_el.#b40;
    mark_test_run 184;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 184 failed %d %d" size i;
    (* .#c40 *)
    let el = #{ el with c40 = next_el.#c40 } in
    set_idx_mut a ((.(i).#c40) : (t40 array, _) idx_mut) next_el.#c40;
    mark_test_run 185;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 185 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**************************************)
  (*   t41 = #{ int64; float; int64 }   *)
  (**************************************)
  let eq = (fun (#{ a41 = a411; b41 = b411; c41 = c411 } : t41) (#{ a41 = a412; b41 = b412; c41 = c412 } : t41) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a411 a412 && (fun a b -> Float.equal (globalize a) (globalize b)) b411 b412 && (fun a b -> Int64.equal (globalize a) (globalize b)) c411 c412) in
  let mk_value i = (#{ a41 = Int64.of_int (i + 0); b41 = Float.of_int (i + 1); c41 = Int64.of_int (i + 2) } : t41) in
  (* 1. Create an array of size [size] *)
  let a : t41 array = makearray_dynamic size (#{ a41 = 0L; b41 = 1.; c41 = 2L } : t41) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 186;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 186 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 187;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 187 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a41 *)
    let el = #{ el with a41 = next_el.#a41 } in
    set_idx_mut a ((.(i).#a41) : (t41 array, _) idx_mut) next_el.#a41;
    mark_test_run 188;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 188 failed %d %d" size i;
    (* .#b41 *)
    let el = #{ el with b41 = next_el.#b41 } in
    set_idx_mut a ((.(i).#b41) : (t41 array, _) idx_mut) next_el.#b41;
    mark_test_run 189;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 189 failed %d %d" size i;
    (* .#c41 *)
    let el = #{ el with c41 = next_el.#c41 } in
    set_idx_mut a ((.(i).#c41) : (t41 array, _) idx_mut) next_el.#c41;
    mark_test_run 190;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 190 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**************************************)
  (*   t42 = #{ int64; float; float }   *)
  (**************************************)
  let eq = (fun (#{ a42 = a421; b42 = b421; c42 = c421 } : t42) (#{ a42 = a422; b42 = b422; c42 = c422 } : t42) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422 && (fun a b -> Float.equal (globalize a) (globalize b)) c421 c422) in
  let mk_value i = (#{ a42 = Int64.of_int (i + 0); b42 = Float.of_int (i + 1); c42 = Float.of_int (i + 2) } : t42) in
  (* 1. Create an array of size [size] *)
  let a : t42 array = makearray_dynamic size (#{ a42 = 0L; b42 = 1.; c42 = 2. } : t42) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 191;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 191 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 192;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 192 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a42 *)
    let el = #{ el with a42 = next_el.#a42 } in
    set_idx_mut a ((.(i).#a42) : (t42 array, _) idx_mut) next_el.#a42;
    mark_test_run 193;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 193 failed %d %d" size i;
    (* .#b42 *)
    let el = #{ el with b42 = next_el.#b42 } in
    set_idx_mut a ((.(i).#b42) : (t42 array, _) idx_mut) next_el.#b42;
    mark_test_run 194;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 194 failed %d %d" size i;
    (* .#c42 *)
    let el = #{ el with c42 = next_el.#c42 } in
    set_idx_mut a ((.(i).#c42) : (t42 array, _) idx_mut) next_el.#c42;
    mark_test_run 195;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 195 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*****************************************)
  (*   t43 = #{ int32#; int32#; int32# }   *)
  (*****************************************)
  let eq = (fun (#{ a43 = a431; b43 = b431; c43 = c431 } : t43) (#{ a43 = a432; b43 = b432; c43 = c432 } : t43) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a431 a432 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b431 b432 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) c431 c432) in
  let mk_value i = (#{ a43 = Int32_u.of_int (i + 0); b43 = Int32_u.of_int (i + 1); c43 = Int32_u.of_int (i + 2) } : t43) in
  (* 1. Create an array of size [size] *)
  let a : t43 array = makearray_dynamic size (#{ a43 = #0l; b43 = #1l; c43 = #2l } : t43) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 196;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 196 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 197;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 197 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a43 *)
    let el = #{ el with a43 = next_el.#a43 } in
    set_idx_mut a ((.(i).#a43) : (t43 array, _) idx_mut) next_el.#a43;
    mark_test_run 198;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 198 failed %d %d" size i;
    (* .#b43 *)
    let el = #{ el with b43 = next_el.#b43 } in
    set_idx_mut a ((.(i).#b43) : (t43 array, _) idx_mut) next_el.#b43;
    mark_test_run 199;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 199 failed %d %d" size i;
    (* .#c43 *)
    let el = #{ el with c43 = next_el.#c43 } in
    set_idx_mut a ((.(i).#c43) : (t43 array, _) idx_mut) next_el.#c43;
    mark_test_run 200;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 200 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t44 = #{ float; int; int }   *)
  (**********************************)
  let eq = (fun (#{ a44 = a441; b44 = b441; c44 = c441 } : t44) (#{ a44 = a442; b44 = b442; c44 = c442 } : t44) -> (fun a b -> Float.equal (globalize a) (globalize b)) a441 a442 && (fun a b -> Int.equal a b) b441 b442 && (fun a b -> Int.equal a b) c441 c442) in
  let mk_value i = (#{ a44 = Float.of_int (i + 0); b44 = (i + 1); c44 = (i + 2) } : t44) in
  (* 1. Create an array of size [size] *)
  let a : t44 array = makearray_dynamic size (#{ a44 = 0.; b44 = 1; c44 = 2 } : t44) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 201;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 201 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 202;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 202 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a44 *)
    let el = #{ el with a44 = next_el.#a44 } in
    set_idx_mut a ((.(i).#a44) : (t44 array, _) idx_mut) next_el.#a44;
    mark_test_run 203;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 203 failed %d %d" size i;
    (* .#b44 *)
    let el = #{ el with b44 = next_el.#b44 } in
    set_idx_mut a ((.(i).#b44) : (t44 array, _) idx_mut) next_el.#b44;
    mark_test_run 204;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 204 failed %d %d" size i;
    (* .#c44 *)
    let el = #{ el with c44 = next_el.#c44 } in
    set_idx_mut a ((.(i).#c44) : (t44 array, _) idx_mut) next_el.#c44;
    mark_test_run 205;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 205 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t45 = #{ float; int; int64 }   *)
  (************************************)
  let eq = (fun (#{ a45 = a451; b45 = b451; c45 = c451 } : t45) (#{ a45 = a452; b45 = b452; c45 = c452 } : t45) -> (fun a b -> Float.equal (globalize a) (globalize b)) a451 a452 && (fun a b -> Int.equal a b) b451 b452 && (fun a b -> Int64.equal (globalize a) (globalize b)) c451 c452) in
  let mk_value i = (#{ a45 = Float.of_int (i + 0); b45 = (i + 1); c45 = Int64.of_int (i + 2) } : t45) in
  (* 1. Create an array of size [size] *)
  let a : t45 array = makearray_dynamic size (#{ a45 = 0.; b45 = 1; c45 = 2L } : t45) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 206;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 206 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 207;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 207 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a45 *)
    let el = #{ el with a45 = next_el.#a45 } in
    set_idx_mut a ((.(i).#a45) : (t45 array, _) idx_mut) next_el.#a45;
    mark_test_run 208;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 208 failed %d %d" size i;
    (* .#b45 *)
    let el = #{ el with b45 = next_el.#b45 } in
    set_idx_mut a ((.(i).#b45) : (t45 array, _) idx_mut) next_el.#b45;
    mark_test_run 209;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 209 failed %d %d" size i;
    (* .#c45 *)
    let el = #{ el with c45 = next_el.#c45 } in
    set_idx_mut a ((.(i).#c45) : (t45 array, _) idx_mut) next_el.#c45;
    mark_test_run 210;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 210 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t46 = #{ float; int; float }   *)
  (************************************)
  let eq = (fun (#{ a46 = a461; b46 = b461; c46 = c461 } : t46) (#{ a46 = a462; b46 = b462; c46 = c462 } : t46) -> (fun a b -> Float.equal (globalize a) (globalize b)) a461 a462 && (fun a b -> Int.equal a b) b461 b462 && (fun a b -> Float.equal (globalize a) (globalize b)) c461 c462) in
  let mk_value i = (#{ a46 = Float.of_int (i + 0); b46 = (i + 1); c46 = Float.of_int (i + 2) } : t46) in
  (* 1. Create an array of size [size] *)
  let a : t46 array = makearray_dynamic size (#{ a46 = 0.; b46 = 1; c46 = 2. } : t46) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 211;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 211 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 212;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 212 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a46 *)
    let el = #{ el with a46 = next_el.#a46 } in
    set_idx_mut a ((.(i).#a46) : (t46 array, _) idx_mut) next_el.#a46;
    mark_test_run 213;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 213 failed %d %d" size i;
    (* .#b46 *)
    let el = #{ el with b46 = next_el.#b46 } in
    set_idx_mut a ((.(i).#b46) : (t46 array, _) idx_mut) next_el.#b46;
    mark_test_run 214;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 214 failed %d %d" size i;
    (* .#c46 *)
    let el = #{ el with c46 = next_el.#c46 } in
    set_idx_mut a ((.(i).#c46) : (t46 array, _) idx_mut) next_el.#c46;
    mark_test_run 215;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 215 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t47 = #{ float; int64; int }   *)
  (************************************)
  let eq = (fun (#{ a47 = a471; b47 = b471; c47 = c471 } : t47) (#{ a47 = a472; b47 = b472; c47 = c472 } : t47) -> (fun a b -> Float.equal (globalize a) (globalize b)) a471 a472 && (fun a b -> Int64.equal (globalize a) (globalize b)) b471 b472 && (fun a b -> Int.equal a b) c471 c472) in
  let mk_value i = (#{ a47 = Float.of_int (i + 0); b47 = Int64.of_int (i + 1); c47 = (i + 2) } : t47) in
  (* 1. Create an array of size [size] *)
  let a : t47 array = makearray_dynamic size (#{ a47 = 0.; b47 = 1L; c47 = 2 } : t47) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 216;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 216 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 217;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 217 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a47 *)
    let el = #{ el with a47 = next_el.#a47 } in
    set_idx_mut a ((.(i).#a47) : (t47 array, _) idx_mut) next_el.#a47;
    mark_test_run 218;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 218 failed %d %d" size i;
    (* .#b47 *)
    let el = #{ el with b47 = next_el.#b47 } in
    set_idx_mut a ((.(i).#b47) : (t47 array, _) idx_mut) next_el.#b47;
    mark_test_run 219;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 219 failed %d %d" size i;
    (* .#c47 *)
    let el = #{ el with c47 = next_el.#c47 } in
    set_idx_mut a ((.(i).#c47) : (t47 array, _) idx_mut) next_el.#c47;
    mark_test_run 220;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 220 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**************************************)
  (*   t48 = #{ float; int64; int64 }   *)
  (**************************************)
  let eq = (fun (#{ a48 = a481; b48 = b481; c48 = c481 } : t48) (#{ a48 = a482; b48 = b482; c48 = c482 } : t48) -> (fun a b -> Float.equal (globalize a) (globalize b)) a481 a482 && (fun a b -> Int64.equal (globalize a) (globalize b)) b481 b482 && (fun a b -> Int64.equal (globalize a) (globalize b)) c481 c482) in
  let mk_value i = (#{ a48 = Float.of_int (i + 0); b48 = Int64.of_int (i + 1); c48 = Int64.of_int (i + 2) } : t48) in
  (* 1. Create an array of size [size] *)
  let a : t48 array = makearray_dynamic size (#{ a48 = 0.; b48 = 1L; c48 = 2L } : t48) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 221;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 221 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 222;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 222 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a48 *)
    let el = #{ el with a48 = next_el.#a48 } in
    set_idx_mut a ((.(i).#a48) : (t48 array, _) idx_mut) next_el.#a48;
    mark_test_run 223;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 223 failed %d %d" size i;
    (* .#b48 *)
    let el = #{ el with b48 = next_el.#b48 } in
    set_idx_mut a ((.(i).#b48) : (t48 array, _) idx_mut) next_el.#b48;
    mark_test_run 224;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 224 failed %d %d" size i;
    (* .#c48 *)
    let el = #{ el with c48 = next_el.#c48 } in
    set_idx_mut a ((.(i).#c48) : (t48 array, _) idx_mut) next_el.#c48;
    mark_test_run 225;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 225 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**************************************)
  (*   t49 = #{ float; int64; float }   *)
  (**************************************)
  let eq = (fun (#{ a49 = a491; b49 = b491; c49 = c491 } : t49) (#{ a49 = a492; b49 = b492; c49 = c492 } : t49) -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int64.equal (globalize a) (globalize b)) b491 b492 && (fun a b -> Float.equal (globalize a) (globalize b)) c491 c492) in
  let mk_value i = (#{ a49 = Float.of_int (i + 0); b49 = Int64.of_int (i + 1); c49 = Float.of_int (i + 2) } : t49) in
  (* 1. Create an array of size [size] *)
  let a : t49 array = makearray_dynamic size (#{ a49 = 0.; b49 = 1L; c49 = 2. } : t49) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 226;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 226 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 227;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 227 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a49 *)
    let el = #{ el with a49 = next_el.#a49 } in
    set_idx_mut a ((.(i).#a49) : (t49 array, _) idx_mut) next_el.#a49;
    mark_test_run 228;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 228 failed %d %d" size i;
    (* .#b49 *)
    let el = #{ el with b49 = next_el.#b49 } in
    set_idx_mut a ((.(i).#b49) : (t49 array, _) idx_mut) next_el.#b49;
    mark_test_run 229;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 229 failed %d %d" size i;
    (* .#c49 *)
    let el = #{ el with c49 = next_el.#c49 } in
    set_idx_mut a ((.(i).#c49) : (t49 array, _) idx_mut) next_el.#c49;
    mark_test_run 230;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 230 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t50 = #{ float; float; int }   *)
  (************************************)
  let eq = (fun (#{ a50 = a501; b50 = b501; c50 = c501 } : t50) (#{ a50 = a502; b50 = b502; c50 = c502 } : t50) -> (fun a b -> Float.equal (globalize a) (globalize b)) a501 a502 && (fun a b -> Float.equal (globalize a) (globalize b)) b501 b502 && (fun a b -> Int.equal a b) c501 c502) in
  let mk_value i = (#{ a50 = Float.of_int (i + 0); b50 = Float.of_int (i + 1); c50 = (i + 2) } : t50) in
  (* 1. Create an array of size [size] *)
  let a : t50 array = makearray_dynamic size (#{ a50 = 0.; b50 = 1.; c50 = 2 } : t50) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 231;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 231 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 232;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 232 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a50 *)
    let el = #{ el with a50 = next_el.#a50 } in
    set_idx_mut a ((.(i).#a50) : (t50 array, _) idx_mut) next_el.#a50;
    mark_test_run 233;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 233 failed %d %d" size i;
    (* .#b50 *)
    let el = #{ el with b50 = next_el.#b50 } in
    set_idx_mut a ((.(i).#b50) : (t50 array, _) idx_mut) next_el.#b50;
    mark_test_run 234;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 234 failed %d %d" size i;
    (* .#c50 *)
    let el = #{ el with c50 = next_el.#c50 } in
    set_idx_mut a ((.(i).#c50) : (t50 array, _) idx_mut) next_el.#c50;
    mark_test_run 235;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 235 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**************************************)
  (*   t51 = #{ float; float; int64 }   *)
  (**************************************)
  let eq = (fun (#{ a51 = a511; b51 = b511; c51 = c511 } : t51) (#{ a51 = a512; b51 = b512; c51 = c512 } : t51) -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512 && (fun a b -> Int64.equal (globalize a) (globalize b)) c511 c512) in
  let mk_value i = (#{ a51 = Float.of_int (i + 0); b51 = Float.of_int (i + 1); c51 = Int64.of_int (i + 2) } : t51) in
  (* 1. Create an array of size [size] *)
  let a : t51 array = makearray_dynamic size (#{ a51 = 0.; b51 = 1.; c51 = 2L } : t51) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 236;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 236 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 237;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 237 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a51 *)
    let el = #{ el with a51 = next_el.#a51 } in
    set_idx_mut a ((.(i).#a51) : (t51 array, _) idx_mut) next_el.#a51;
    mark_test_run 238;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 238 failed %d %d" size i;
    (* .#b51 *)
    let el = #{ el with b51 = next_el.#b51 } in
    set_idx_mut a ((.(i).#b51) : (t51 array, _) idx_mut) next_el.#b51;
    mark_test_run 239;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 239 failed %d %d" size i;
    (* .#c51 *)
    let el = #{ el with c51 = next_el.#c51 } in
    set_idx_mut a ((.(i).#c51) : (t51 array, _) idx_mut) next_el.#c51;
    mark_test_run 240;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 240 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**************************************)
  (*   t52 = #{ float; float; float }   *)
  (**************************************)
  let eq = (fun (#{ a52 = a521; b52 = b521; c52 = c521 } : t52) (#{ a52 = a522; b52 = b522; c52 = c522 } : t52) -> (fun a b -> Float.equal (globalize a) (globalize b)) a521 a522 && (fun a b -> Float.equal (globalize a) (globalize b)) b521 b522 && (fun a b -> Float.equal (globalize a) (globalize b)) c521 c522) in
  let mk_value i = (#{ a52 = Float.of_int (i + 0); b52 = Float.of_int (i + 1); c52 = Float.of_int (i + 2) } : t52) in
  (* 1. Create an array of size [size] *)
  let a : t52 array = makearray_dynamic size (#{ a52 = 0.; b52 = 1.; c52 = 2. } : t52) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 241;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 241 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 242;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 242 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a52 *)
    let el = #{ el with a52 = next_el.#a52 } in
    set_idx_mut a ((.(i).#a52) : (t52 array, _) idx_mut) next_el.#a52;
    mark_test_run 243;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 243 failed %d %d" size i;
    (* .#b52 *)
    let el = #{ el with b52 = next_el.#b52 } in
    set_idx_mut a ((.(i).#b52) : (t52 array, _) idx_mut) next_el.#b52;
    mark_test_run 244;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 244 failed %d %d" size i;
    (* .#c52 *)
    let el = #{ el with c52 = next_el.#c52 } in
    set_idx_mut a ((.(i).#c52) : (t52 array, _) idx_mut) next_el.#c52;
    mark_test_run 245;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 245 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (********************************)
  (*   t53 = #{ int; #{ int } }   *)
  (********************************)
  let eq = (fun (#{ a53 = a531; b53 = b531 } : t53) (#{ a53 = a532; b53 = b532 } : t53) -> (fun a b -> Int.equal a b) a531 a532 && (fun (#{ a6 = a61 } : t6) (#{ a6 = a62 } : t6) -> (fun a b -> Int.equal a b) a61 a62) b531 b532) in
  let mk_value i = (#{ a53 = (i + 0); b53 = (#{ a6 = (i + 1) } : t6) } : t53) in
  (* 1. Create an array of size [size] *)
  let a : t53 array = makearray_dynamic size (#{ a53 = 0; b53 = (#{ a6 = 1 } : t6) } : t53) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 246;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 246 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 247;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 247 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a53 *)
    let el = #{ el with a53 = next_el.#a53 } in
    set_idx_mut a ((.(i).#a53) : (t53 array, _) idx_mut) next_el.#a53;
    mark_test_run 248;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 248 failed %d %d" size i;
    (* .#b53 *)
    let el = #{ el with b53 = next_el.#b53 } in
    set_idx_mut a ((.(i).#b53) : (t53 array, _) idx_mut) next_el.#b53;
    mark_test_run 249;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 249 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#b53.#a6 *)
    let el = #{ el with b53 = #{ el.#b53 with a6 = next_el.#b53.#a6 } } in
    set_idx_mut a ((.(i).#b53.#a6) : (t53 array, _) idx_mut) next_el.#b53.#a6;
    mark_test_run 250;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 250 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t54 = #{ int; #{ int64 } }   *)
  (**********************************)
  let eq = (fun (#{ a54 = a541; b54 = b541 } : t54) (#{ a54 = a542; b54 = b542 } : t54) -> (fun a b -> Int.equal a b) a541 a542 && (fun (#{ a7 = a71 } : t7) (#{ a7 = a72 } : t7) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a71 a72) b541 b542) in
  let mk_value i = (#{ a54 = (i + 0); b54 = (#{ a7 = Int64.of_int (i + 1) } : t7) } : t54) in
  (* 1. Create an array of size [size] *)
  let a : t54 array = makearray_dynamic size (#{ a54 = 0; b54 = (#{ a7 = 1L } : t7) } : t54) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 251;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 251 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 252;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 252 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a54 *)
    let el = #{ el with a54 = next_el.#a54 } in
    set_idx_mut a ((.(i).#a54) : (t54 array, _) idx_mut) next_el.#a54;
    mark_test_run 253;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 253 failed %d %d" size i;
    (* .#b54 *)
    let el = #{ el with b54 = next_el.#b54 } in
    set_idx_mut a ((.(i).#b54) : (t54 array, _) idx_mut) next_el.#b54;
    mark_test_run 254;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 254 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#b54.#a7 *)
    let el = #{ el with b54 = #{ el.#b54 with a7 = next_el.#b54.#a7 } } in
    set_idx_mut a ((.(i).#b54.#a7) : (t54 array, _) idx_mut) next_el.#b54.#a7;
    mark_test_run 255;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 255 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (***********************************)
  (*   t55 = #{ int; #{ int32# } }   *)
  (***********************************)
  let eq = (fun (#{ a55 = a551; b55 = b551 } : t55) (#{ a55 = a552; b55 = b552 } : t55) -> (fun a b -> Int.equal a b) a551 a552 && (fun (#{ a8 = a81 } : t8) (#{ a8 = a82 } : t8) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a81 a82) b551 b552) in
  let mk_value i = (#{ a55 = (i + 0); b55 = (#{ a8 = Int32_u.of_int (i + 1) } : t8) } : t55) in
  (* 1. Create an array of size [size] *)
  let a : t55 array = makearray_dynamic size (#{ a55 = 0; b55 = (#{ a8 = #1l } : t8) } : t55) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 256;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 256 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 257;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 257 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a55 *)
    let el = #{ el with a55 = next_el.#a55 } in
    set_idx_mut a ((.(i).#a55) : (t55 array, _) idx_mut) next_el.#a55;
    mark_test_run 258;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 258 failed %d %d" size i;
    (* .#b55 *)
    let el = #{ el with b55 = next_el.#b55 } in
    set_idx_mut a ((.(i).#b55) : (t55 array, _) idx_mut) next_el.#b55;
    mark_test_run 259;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 259 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#b55.#a8 *)
    let el = #{ el with b55 = #{ el.#b55 with a8 = next_el.#b55.#a8 } } in
    set_idx_mut a ((.(i).#b55.#a8) : (t55 array, _) idx_mut) next_el.#b55.#a8;
    mark_test_run 260;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 260 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t57 = #{ int; #{ float } }   *)
  (**********************************)
  let eq = (fun (#{ a57 = a571; b57 = b571 } : t57) (#{ a57 = a572; b57 = b572 } : t57) -> (fun a b -> Int.equal a b) a571 a572 && (fun (#{ a56 = a561 } : t56) (#{ a56 = a562 } : t56) -> (fun a b -> Float.equal (globalize a) (globalize b)) a561 a562) b571 b572) in
  let mk_value i = (#{ a57 = (i + 0); b57 = (#{ a56 = Float.of_int (i + 1) } : t56) } : t57) in
  (* 1. Create an array of size [size] *)
  let a : t57 array = makearray_dynamic size (#{ a57 = 0; b57 = (#{ a56 = 1. } : t56) } : t57) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 261;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 261 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 262;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 262 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a57 *)
    let el = #{ el with a57 = next_el.#a57 } in
    set_idx_mut a ((.(i).#a57) : (t57 array, _) idx_mut) next_el.#a57;
    mark_test_run 263;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 263 failed %d %d" size i;
    (* .#b57 *)
    let el = #{ el with b57 = next_el.#b57 } in
    set_idx_mut a ((.(i).#b57) : (t57 array, _) idx_mut) next_el.#b57;
    mark_test_run 264;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 264 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#b57.#a56 *)
    let el = #{ el with b57 = #{ el.#b57 with a56 = next_el.#b57.#a56 } } in
    set_idx_mut a ((.(i).#b57.#a56) : (t57 array, _) idx_mut) next_el.#b57.#a56;
    mark_test_run 265;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 265 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t58 = #{ int64; #{ int } }   *)
  (**********************************)
  let eq = (fun (#{ a58 = a581; b58 = b581 } : t58) (#{ a58 = a582; b58 = b582 } : t58) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a581 a582 && (fun (#{ a6 = a61 } : t6) (#{ a6 = a62 } : t6) -> (fun a b -> Int.equal a b) a61 a62) b581 b582) in
  let mk_value i = (#{ a58 = Int64.of_int (i + 0); b58 = (#{ a6 = (i + 1) } : t6) } : t58) in
  (* 1. Create an array of size [size] *)
  let a : t58 array = makearray_dynamic size (#{ a58 = 0L; b58 = (#{ a6 = 1 } : t6) } : t58) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 266;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 266 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 267;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 267 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a58 *)
    let el = #{ el with a58 = next_el.#a58 } in
    set_idx_mut a ((.(i).#a58) : (t58 array, _) idx_mut) next_el.#a58;
    mark_test_run 268;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 268 failed %d %d" size i;
    (* .#b58 *)
    let el = #{ el with b58 = next_el.#b58 } in
    set_idx_mut a ((.(i).#b58) : (t58 array, _) idx_mut) next_el.#b58;
    mark_test_run 269;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 269 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#b58.#a6 *)
    let el = #{ el with b58 = #{ el.#b58 with a6 = next_el.#b58.#a6 } } in
    set_idx_mut a ((.(i).#b58.#a6) : (t58 array, _) idx_mut) next_el.#b58.#a6;
    mark_test_run 270;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 270 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t59 = #{ int64; #{ int64 } }   *)
  (************************************)
  let eq = (fun (#{ a59 = a591; b59 = b591 } : t59) (#{ a59 = a592; b59 = b592 } : t59) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a591 a592 && (fun (#{ a7 = a71 } : t7) (#{ a7 = a72 } : t7) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a71 a72) b591 b592) in
  let mk_value i = (#{ a59 = Int64.of_int (i + 0); b59 = (#{ a7 = Int64.of_int (i + 1) } : t7) } : t59) in
  (* 1. Create an array of size [size] *)
  let a : t59 array = makearray_dynamic size (#{ a59 = 0L; b59 = (#{ a7 = 1L } : t7) } : t59) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 271;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 271 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 272;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 272 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a59 *)
    let el = #{ el with a59 = next_el.#a59 } in
    set_idx_mut a ((.(i).#a59) : (t59 array, _) idx_mut) next_el.#a59;
    mark_test_run 273;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 273 failed %d %d" size i;
    (* .#b59 *)
    let el = #{ el with b59 = next_el.#b59 } in
    set_idx_mut a ((.(i).#b59) : (t59 array, _) idx_mut) next_el.#b59;
    mark_test_run 274;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 274 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#b59.#a7 *)
    let el = #{ el with b59 = #{ el.#b59 with a7 = next_el.#b59.#a7 } } in
    set_idx_mut a ((.(i).#b59.#a7) : (t59 array, _) idx_mut) next_el.#b59.#a7;
    mark_test_run 275;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 275 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t60 = #{ int64; #{ float } }   *)
  (************************************)
  let eq = (fun (#{ a60 = a601; b60 = b601 } : t60) (#{ a60 = a602; b60 = b602 } : t60) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a601 a602 && (fun (#{ a56 = a561 } : t56) (#{ a56 = a562 } : t56) -> (fun a b -> Float.equal (globalize a) (globalize b)) a561 a562) b601 b602) in
  let mk_value i = (#{ a60 = Int64.of_int (i + 0); b60 = (#{ a56 = Float.of_int (i + 1) } : t56) } : t60) in
  (* 1. Create an array of size [size] *)
  let a : t60 array = makearray_dynamic size (#{ a60 = 0L; b60 = (#{ a56 = 1. } : t56) } : t60) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 276;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 276 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 277;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 277 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a60 *)
    let el = #{ el with a60 = next_el.#a60 } in
    set_idx_mut a ((.(i).#a60) : (t60 array, _) idx_mut) next_el.#a60;
    mark_test_run 278;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 278 failed %d %d" size i;
    (* .#b60 *)
    let el = #{ el with b60 = next_el.#b60 } in
    set_idx_mut a ((.(i).#b60) : (t60 array, _) idx_mut) next_el.#b60;
    mark_test_run 279;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 279 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#b60.#a56 *)
    let el = #{ el with b60 = #{ el.#b60 with a56 = next_el.#b60.#a56 } } in
    set_idx_mut a ((.(i).#b60.#a56) : (t60 array, _) idx_mut) next_el.#b60.#a56;
    mark_test_run 280;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 280 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**************************************)
  (*   t61 = #{ int32#; #{ int32# } }   *)
  (**************************************)
  let eq = (fun (#{ a61 = a611; b61 = b611 } : t61) (#{ a61 = a612; b61 = b612 } : t61) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a611 a612 && (fun (#{ a8 = a81 } : t8) (#{ a8 = a82 } : t8) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a81 a82) b611 b612) in
  let mk_value i = (#{ a61 = Int32_u.of_int (i + 0); b61 = (#{ a8 = Int32_u.of_int (i + 1) } : t8) } : t61) in
  (* 1. Create an array of size [size] *)
  let a : t61 array = makearray_dynamic size (#{ a61 = #0l; b61 = (#{ a8 = #1l } : t8) } : t61) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 281;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 281 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 282;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 282 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a61 *)
    let el = #{ el with a61 = next_el.#a61 } in
    set_idx_mut a ((.(i).#a61) : (t61 array, _) idx_mut) next_el.#a61;
    mark_test_run 283;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 283 failed %d %d" size i;
    (* .#b61 *)
    let el = #{ el with b61 = next_el.#b61 } in
    set_idx_mut a ((.(i).#b61) : (t61 array, _) idx_mut) next_el.#b61;
    mark_test_run 284;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 284 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#b61.#a8 *)
    let el = #{ el with b61 = #{ el.#b61 with a8 = next_el.#b61.#a8 } } in
    set_idx_mut a ((.(i).#b61.#a8) : (t61 array, _) idx_mut) next_el.#b61.#a8;
    mark_test_run 285;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 285 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t62 = #{ float; #{ int } }   *)
  (**********************************)
  let eq = (fun (#{ a62 = a621; b62 = b621 } : t62) (#{ a62 = a622; b62 = b622 } : t62) -> (fun a b -> Float.equal (globalize a) (globalize b)) a621 a622 && (fun (#{ a6 = a61 } : t6) (#{ a6 = a62 } : t6) -> (fun a b -> Int.equal a b) a61 a62) b621 b622) in
  let mk_value i = (#{ a62 = Float.of_int (i + 0); b62 = (#{ a6 = (i + 1) } : t6) } : t62) in
  (* 1. Create an array of size [size] *)
  let a : t62 array = makearray_dynamic size (#{ a62 = 0.; b62 = (#{ a6 = 1 } : t6) } : t62) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 286;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 286 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 287;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 287 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a62 *)
    let el = #{ el with a62 = next_el.#a62 } in
    set_idx_mut a ((.(i).#a62) : (t62 array, _) idx_mut) next_el.#a62;
    mark_test_run 288;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 288 failed %d %d" size i;
    (* .#b62 *)
    let el = #{ el with b62 = next_el.#b62 } in
    set_idx_mut a ((.(i).#b62) : (t62 array, _) idx_mut) next_el.#b62;
    mark_test_run 289;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 289 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#b62.#a6 *)
    let el = #{ el with b62 = #{ el.#b62 with a6 = next_el.#b62.#a6 } } in
    set_idx_mut a ((.(i).#b62.#a6) : (t62 array, _) idx_mut) next_el.#b62.#a6;
    mark_test_run 290;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 290 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t63 = #{ float; #{ int64 } }   *)
  (************************************)
  let eq = (fun (#{ a63 = a631; b63 = b631 } : t63) (#{ a63 = a632; b63 = b632 } : t63) -> (fun a b -> Float.equal (globalize a) (globalize b)) a631 a632 && (fun (#{ a7 = a71 } : t7) (#{ a7 = a72 } : t7) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a71 a72) b631 b632) in
  let mk_value i = (#{ a63 = Float.of_int (i + 0); b63 = (#{ a7 = Int64.of_int (i + 1) } : t7) } : t63) in
  (* 1. Create an array of size [size] *)
  let a : t63 array = makearray_dynamic size (#{ a63 = 0.; b63 = (#{ a7 = 1L } : t7) } : t63) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 291;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 291 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 292;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 292 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a63 *)
    let el = #{ el with a63 = next_el.#a63 } in
    set_idx_mut a ((.(i).#a63) : (t63 array, _) idx_mut) next_el.#a63;
    mark_test_run 293;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 293 failed %d %d" size i;
    (* .#b63 *)
    let el = #{ el with b63 = next_el.#b63 } in
    set_idx_mut a ((.(i).#b63) : (t63 array, _) idx_mut) next_el.#b63;
    mark_test_run 294;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 294 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#b63.#a7 *)
    let el = #{ el with b63 = #{ el.#b63 with a7 = next_el.#b63.#a7 } } in
    set_idx_mut a ((.(i).#b63.#a7) : (t63 array, _) idx_mut) next_el.#b63.#a7;
    mark_test_run 295;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 295 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t64 = #{ float; #{ float } }   *)
  (************************************)
  let eq = (fun (#{ a64 = a641; b64 = b641 } : t64) (#{ a64 = a642; b64 = b642 } : t64) -> (fun a b -> Float.equal (globalize a) (globalize b)) a641 a642 && (fun (#{ a56 = a561 } : t56) (#{ a56 = a562 } : t56) -> (fun a b -> Float.equal (globalize a) (globalize b)) a561 a562) b641 b642) in
  let mk_value i = (#{ a64 = Float.of_int (i + 0); b64 = (#{ a56 = Float.of_int (i + 1) } : t56) } : t64) in
  (* 1. Create an array of size [size] *)
  let a : t64 array = makearray_dynamic size (#{ a64 = 0.; b64 = (#{ a56 = 1. } : t56) } : t64) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 296;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 296 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 297;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 297 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a64 *)
    let el = #{ el with a64 = next_el.#a64 } in
    set_idx_mut a ((.(i).#a64) : (t64 array, _) idx_mut) next_el.#a64;
    mark_test_run 298;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 298 failed %d %d" size i;
    (* .#b64 *)
    let el = #{ el with b64 = next_el.#b64 } in
    set_idx_mut a ((.(i).#b64) : (t64 array, _) idx_mut) next_el.#b64;
    mark_test_run 299;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 299 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#b64.#a56 *)
    let el = #{ el with b64 = #{ el.#b64 with a56 = next_el.#b64.#a56 } } in
    set_idx_mut a ((.(i).#b64.#a56) : (t64 array, _) idx_mut) next_el.#b64.#a56;
    mark_test_run 300;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 300 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (********************************)
  (*   t65 = #{ #{ int }; int }   *)
  (********************************)
  let eq = (fun (#{ a65 = a651; b65 = b651 } : t65) (#{ a65 = a652; b65 = b652 } : t65) -> (fun (#{ a6 = a61 } : t6) (#{ a6 = a62 } : t6) -> (fun a b -> Int.equal a b) a61 a62) a651 a652 && (fun a b -> Int.equal a b) b651 b652) in
  let mk_value i = (#{ a65 = (#{ a6 = (i + 0) } : t6); b65 = (i + 1) } : t65) in
  (* 1. Create an array of size [size] *)
  let a : t65 array = makearray_dynamic size (#{ a65 = (#{ a6 = 0 } : t6); b65 = 1 } : t65) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 301;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 301 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 302;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 302 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a65 *)
    let el = #{ el with a65 = next_el.#a65 } in
    set_idx_mut a ((.(i).#a65) : (t65 array, _) idx_mut) next_el.#a65;
    mark_test_run 303;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 303 failed %d %d" size i;
    (* .#b65 *)
    let el = #{ el with b65 = next_el.#b65 } in
    set_idx_mut a ((.(i).#b65) : (t65 array, _) idx_mut) next_el.#b65;
    mark_test_run 304;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 304 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a65.#a6 *)
    let el = #{ el with a65 = #{ el.#a65 with a6 = next_el.#a65.#a6 } } in
    set_idx_mut a ((.(i).#a65.#a6) : (t65 array, _) idx_mut) next_el.#a65.#a6;
    mark_test_run 305;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 305 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t66 = #{ #{ int }; int64 }   *)
  (**********************************)
  let eq = (fun (#{ a66 = a661; b66 = b661 } : t66) (#{ a66 = a662; b66 = b662 } : t66) -> (fun (#{ a6 = a61 } : t6) (#{ a6 = a62 } : t6) -> (fun a b -> Int.equal a b) a61 a62) a661 a662 && (fun a b -> Int64.equal (globalize a) (globalize b)) b661 b662) in
  let mk_value i = (#{ a66 = (#{ a6 = (i + 0) } : t6); b66 = Int64.of_int (i + 1) } : t66) in
  (* 1. Create an array of size [size] *)
  let a : t66 array = makearray_dynamic size (#{ a66 = (#{ a6 = 0 } : t6); b66 = 1L } : t66) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 306;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 306 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 307;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 307 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a66 *)
    let el = #{ el with a66 = next_el.#a66 } in
    set_idx_mut a ((.(i).#a66) : (t66 array, _) idx_mut) next_el.#a66;
    mark_test_run 308;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 308 failed %d %d" size i;
    (* .#b66 *)
    let el = #{ el with b66 = next_el.#b66 } in
    set_idx_mut a ((.(i).#b66) : (t66 array, _) idx_mut) next_el.#b66;
    mark_test_run 309;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 309 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a66.#a6 *)
    let el = #{ el with a66 = #{ el.#a66 with a6 = next_el.#a66.#a6 } } in
    set_idx_mut a ((.(i).#a66.#a6) : (t66 array, _) idx_mut) next_el.#a66.#a6;
    mark_test_run 310;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 310 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (***********************************)
  (*   t67 = #{ #{ int }; int32# }   *)
  (***********************************)
  let eq = (fun (#{ a67 = a671; b67 = b671 } : t67) (#{ a67 = a672; b67 = b672 } : t67) -> (fun (#{ a6 = a61 } : t6) (#{ a6 = a62 } : t6) -> (fun a b -> Int.equal a b) a61 a62) a671 a672 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b671 b672) in
  let mk_value i = (#{ a67 = (#{ a6 = (i + 0) } : t6); b67 = Int32_u.of_int (i + 1) } : t67) in
  (* 1. Create an array of size [size] *)
  let a : t67 array = makearray_dynamic size (#{ a67 = (#{ a6 = 0 } : t6); b67 = #1l } : t67) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 311;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 311 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 312;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 312 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a67 *)
    let el = #{ el with a67 = next_el.#a67 } in
    set_idx_mut a ((.(i).#a67) : (t67 array, _) idx_mut) next_el.#a67;
    mark_test_run 313;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 313 failed %d %d" size i;
    (* .#b67 *)
    let el = #{ el with b67 = next_el.#b67 } in
    set_idx_mut a ((.(i).#b67) : (t67 array, _) idx_mut) next_el.#b67;
    mark_test_run 314;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 314 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a67.#a6 *)
    let el = #{ el with a67 = #{ el.#a67 with a6 = next_el.#a67.#a6 } } in
    set_idx_mut a ((.(i).#a67.#a6) : (t67 array, _) idx_mut) next_el.#a67.#a6;
    mark_test_run 315;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 315 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t68 = #{ #{ int }; float }   *)
  (**********************************)
  let eq = (fun (#{ a68 = a681; b68 = b681 } : t68) (#{ a68 = a682; b68 = b682 } : t68) -> (fun (#{ a6 = a61 } : t6) (#{ a6 = a62 } : t6) -> (fun a b -> Int.equal a b) a61 a62) a681 a682 && (fun a b -> Float.equal (globalize a) (globalize b)) b681 b682) in
  let mk_value i = (#{ a68 = (#{ a6 = (i + 0) } : t6); b68 = Float.of_int (i + 1) } : t68) in
  (* 1. Create an array of size [size] *)
  let a : t68 array = makearray_dynamic size (#{ a68 = (#{ a6 = 0 } : t6); b68 = 1. } : t68) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 316;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 316 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 317;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 317 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a68 *)
    let el = #{ el with a68 = next_el.#a68 } in
    set_idx_mut a ((.(i).#a68) : (t68 array, _) idx_mut) next_el.#a68;
    mark_test_run 318;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 318 failed %d %d" size i;
    (* .#b68 *)
    let el = #{ el with b68 = next_el.#b68 } in
    set_idx_mut a ((.(i).#b68) : (t68 array, _) idx_mut) next_el.#b68;
    mark_test_run 319;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 319 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a68.#a6 *)
    let el = #{ el with a68 = #{ el.#a68 with a6 = next_el.#a68.#a6 } } in
    set_idx_mut a ((.(i).#a68.#a6) : (t68 array, _) idx_mut) next_el.#a68.#a6;
    mark_test_run 320;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 320 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t69 = #{ #{ int64 }; int }   *)
  (**********************************)
  let eq = (fun (#{ a69 = a691; b69 = b691 } : t69) (#{ a69 = a692; b69 = b692 } : t69) -> (fun (#{ a7 = a71 } : t7) (#{ a7 = a72 } : t7) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a71 a72) a691 a692 && (fun a b -> Int.equal a b) b691 b692) in
  let mk_value i = (#{ a69 = (#{ a7 = Int64.of_int (i + 0) } : t7); b69 = (i + 1) } : t69) in
  (* 1. Create an array of size [size] *)
  let a : t69 array = makearray_dynamic size (#{ a69 = (#{ a7 = 0L } : t7); b69 = 1 } : t69) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 321;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 321 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 322;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 322 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a69 *)
    let el = #{ el with a69 = next_el.#a69 } in
    set_idx_mut a ((.(i).#a69) : (t69 array, _) idx_mut) next_el.#a69;
    mark_test_run 323;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 323 failed %d %d" size i;
    (* .#b69 *)
    let el = #{ el with b69 = next_el.#b69 } in
    set_idx_mut a ((.(i).#b69) : (t69 array, _) idx_mut) next_el.#b69;
    mark_test_run 324;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 324 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a69.#a7 *)
    let el = #{ el with a69 = #{ el.#a69 with a7 = next_el.#a69.#a7 } } in
    set_idx_mut a ((.(i).#a69.#a7) : (t69 array, _) idx_mut) next_el.#a69.#a7;
    mark_test_run 325;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 325 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t70 = #{ #{ int64 }; int64 }   *)
  (************************************)
  let eq = (fun (#{ a70 = a701; b70 = b701 } : t70) (#{ a70 = a702; b70 = b702 } : t70) -> (fun (#{ a7 = a71 } : t7) (#{ a7 = a72 } : t7) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a71 a72) a701 a702 && (fun a b -> Int64.equal (globalize a) (globalize b)) b701 b702) in
  let mk_value i = (#{ a70 = (#{ a7 = Int64.of_int (i + 0) } : t7); b70 = Int64.of_int (i + 1) } : t70) in
  (* 1. Create an array of size [size] *)
  let a : t70 array = makearray_dynamic size (#{ a70 = (#{ a7 = 0L } : t7); b70 = 1L } : t70) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 326;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 326 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 327;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 327 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a70 *)
    let el = #{ el with a70 = next_el.#a70 } in
    set_idx_mut a ((.(i).#a70) : (t70 array, _) idx_mut) next_el.#a70;
    mark_test_run 328;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 328 failed %d %d" size i;
    (* .#b70 *)
    let el = #{ el with b70 = next_el.#b70 } in
    set_idx_mut a ((.(i).#b70) : (t70 array, _) idx_mut) next_el.#b70;
    mark_test_run 329;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 329 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a70.#a7 *)
    let el = #{ el with a70 = #{ el.#a70 with a7 = next_el.#a70.#a7 } } in
    set_idx_mut a ((.(i).#a70.#a7) : (t70 array, _) idx_mut) next_el.#a70.#a7;
    mark_test_run 330;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 330 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t71 = #{ #{ int64 }; float }   *)
  (************************************)
  let eq = (fun (#{ a71 = a711; b71 = b711 } : t71) (#{ a71 = a712; b71 = b712 } : t71) -> (fun (#{ a7 = a71 } : t7) (#{ a7 = a72 } : t7) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a71 a72) a711 a712 && (fun a b -> Float.equal (globalize a) (globalize b)) b711 b712) in
  let mk_value i = (#{ a71 = (#{ a7 = Int64.of_int (i + 0) } : t7); b71 = Float.of_int (i + 1) } : t71) in
  (* 1. Create an array of size [size] *)
  let a : t71 array = makearray_dynamic size (#{ a71 = (#{ a7 = 0L } : t7); b71 = 1. } : t71) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 331;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 331 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 332;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 332 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a71 *)
    let el = #{ el with a71 = next_el.#a71 } in
    set_idx_mut a ((.(i).#a71) : (t71 array, _) idx_mut) next_el.#a71;
    mark_test_run 333;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 333 failed %d %d" size i;
    (* .#b71 *)
    let el = #{ el with b71 = next_el.#b71 } in
    set_idx_mut a ((.(i).#b71) : (t71 array, _) idx_mut) next_el.#b71;
    mark_test_run 334;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 334 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a71.#a7 *)
    let el = #{ el with a71 = #{ el.#a71 with a7 = next_el.#a71.#a7 } } in
    set_idx_mut a ((.(i).#a71.#a7) : (t71 array, _) idx_mut) next_el.#a71.#a7;
    mark_test_run 335;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 335 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**************************************)
  (*   t72 = #{ #{ int32# }; int32# }   *)
  (**************************************)
  let eq = (fun (#{ a72 = a721; b72 = b721 } : t72) (#{ a72 = a722; b72 = b722 } : t72) -> (fun (#{ a8 = a81 } : t8) (#{ a8 = a82 } : t8) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a81 a82) a721 a722 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b721 b722) in
  let mk_value i = (#{ a72 = (#{ a8 = Int32_u.of_int (i + 0) } : t8); b72 = Int32_u.of_int (i + 1) } : t72) in
  (* 1. Create an array of size [size] *)
  let a : t72 array = makearray_dynamic size (#{ a72 = (#{ a8 = #0l } : t8); b72 = #1l } : t72) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 336;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 336 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 337;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 337 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a72 *)
    let el = #{ el with a72 = next_el.#a72 } in
    set_idx_mut a ((.(i).#a72) : (t72 array, _) idx_mut) next_el.#a72;
    mark_test_run 338;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 338 failed %d %d" size i;
    (* .#b72 *)
    let el = #{ el with b72 = next_el.#b72 } in
    set_idx_mut a ((.(i).#b72) : (t72 array, _) idx_mut) next_el.#b72;
    mark_test_run 339;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 339 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a72.#a8 *)
    let el = #{ el with a72 = #{ el.#a72 with a8 = next_el.#a72.#a8 } } in
    set_idx_mut a ((.(i).#a72.#a8) : (t72 array, _) idx_mut) next_el.#a72.#a8;
    mark_test_run 340;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 340 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t73 = #{ #{ float }; int }   *)
  (**********************************)
  let eq = (fun (#{ a73 = a731; b73 = b731 } : t73) (#{ a73 = a732; b73 = b732 } : t73) -> (fun (#{ a56 = a561 } : t56) (#{ a56 = a562 } : t56) -> (fun a b -> Float.equal (globalize a) (globalize b)) a561 a562) a731 a732 && (fun a b -> Int.equal a b) b731 b732) in
  let mk_value i = (#{ a73 = (#{ a56 = Float.of_int (i + 0) } : t56); b73 = (i + 1) } : t73) in
  (* 1. Create an array of size [size] *)
  let a : t73 array = makearray_dynamic size (#{ a73 = (#{ a56 = 0. } : t56); b73 = 1 } : t73) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 341;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 341 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 342;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 342 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a73 *)
    let el = #{ el with a73 = next_el.#a73 } in
    set_idx_mut a ((.(i).#a73) : (t73 array, _) idx_mut) next_el.#a73;
    mark_test_run 343;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 343 failed %d %d" size i;
    (* .#b73 *)
    let el = #{ el with b73 = next_el.#b73 } in
    set_idx_mut a ((.(i).#b73) : (t73 array, _) idx_mut) next_el.#b73;
    mark_test_run 344;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 344 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a73.#a56 *)
    let el = #{ el with a73 = #{ el.#a73 with a56 = next_el.#a73.#a56 } } in
    set_idx_mut a ((.(i).#a73.#a56) : (t73 array, _) idx_mut) next_el.#a73.#a56;
    mark_test_run 345;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 345 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t74 = #{ #{ float }; int64 }   *)
  (************************************)
  let eq = (fun (#{ a74 = a741; b74 = b741 } : t74) (#{ a74 = a742; b74 = b742 } : t74) -> (fun (#{ a56 = a561 } : t56) (#{ a56 = a562 } : t56) -> (fun a b -> Float.equal (globalize a) (globalize b)) a561 a562) a741 a742 && (fun a b -> Int64.equal (globalize a) (globalize b)) b741 b742) in
  let mk_value i = (#{ a74 = (#{ a56 = Float.of_int (i + 0) } : t56); b74 = Int64.of_int (i + 1) } : t74) in
  (* 1. Create an array of size [size] *)
  let a : t74 array = makearray_dynamic size (#{ a74 = (#{ a56 = 0. } : t56); b74 = 1L } : t74) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 346;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 346 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 347;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 347 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a74 *)
    let el = #{ el with a74 = next_el.#a74 } in
    set_idx_mut a ((.(i).#a74) : (t74 array, _) idx_mut) next_el.#a74;
    mark_test_run 348;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 348 failed %d %d" size i;
    (* .#b74 *)
    let el = #{ el with b74 = next_el.#b74 } in
    set_idx_mut a ((.(i).#b74) : (t74 array, _) idx_mut) next_el.#b74;
    mark_test_run 349;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 349 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a74.#a56 *)
    let el = #{ el with a74 = #{ el.#a74 with a56 = next_el.#a74.#a56 } } in
    set_idx_mut a ((.(i).#a74.#a56) : (t74 array, _) idx_mut) next_el.#a74.#a56;
    mark_test_run 350;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 350 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t75 = #{ #{ float }; float }   *)
  (************************************)
  let eq = (fun (#{ a75 = a751; b75 = b751 } : t75) (#{ a75 = a752; b75 = b752 } : t75) -> (fun (#{ a56 = a561 } : t56) (#{ a56 = a562 } : t56) -> (fun a b -> Float.equal (globalize a) (globalize b)) a561 a562) a751 a752 && (fun a b -> Float.equal (globalize a) (globalize b)) b751 b752) in
  let mk_value i = (#{ a75 = (#{ a56 = Float.of_int (i + 0) } : t56); b75 = Float.of_int (i + 1) } : t75) in
  (* 1. Create an array of size [size] *)
  let a : t75 array = makearray_dynamic size (#{ a75 = (#{ a56 = 0. } : t56); b75 = 1. } : t75) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 351;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 351 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 352;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 352 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a75 *)
    let el = #{ el with a75 = next_el.#a75 } in
    set_idx_mut a ((.(i).#a75) : (t75 array, _) idx_mut) next_el.#a75;
    mark_test_run 353;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 353 failed %d %d" size i;
    (* .#b75 *)
    let el = #{ el with b75 = next_el.#b75 } in
    set_idx_mut a ((.(i).#b75) : (t75 array, _) idx_mut) next_el.#b75;
    mark_test_run 354;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 354 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a75.#a56 *)
    let el = #{ el with a75 = #{ el.#a75 with a56 = next_el.#a75.#a56 } } in
    set_idx_mut a ((.(i).#a75.#a56) : (t75 array, _) idx_mut) next_el.#a75.#a56;
    mark_test_run 355;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 355 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (********************************)
  (*   t76 = #{ #{ int; int } }   *)
  (********************************)
  let eq = (fun (#{ a76 = a761 } : t76) (#{ a76 = a762 } : t76) -> (fun (#{ a9 = a91; b9 = b91 } : t9) (#{ a9 = a92; b9 = b92 } : t9) -> (fun a b -> Int.equal a b) a91 a92 && (fun a b -> Int.equal a b) b91 b92) a761 a762) in
  let mk_value i = (#{ a76 = (#{ a9 = (i + 0); b9 = (i + 1) } : t9) } : t76) in
  (* 1. Create an array of size [size] *)
  let a : t76 array = makearray_dynamic size (#{ a76 = (#{ a9 = 0; b9 = 1 } : t9) } : t76) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 356;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 356 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 357;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 357 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a76 *)
    let el = #{ el with a76 = next_el.#a76 } in
    set_idx_mut a ((.(i).#a76) : (t76 array, _) idx_mut) next_el.#a76;
    mark_test_run 358;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 358 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a76.#a9 *)
    let el = #{ el with a76 = #{ el.#a76 with a9 = next_el.#a76.#a9 } } in
    set_idx_mut a ((.(i).#a76.#a9) : (t76 array, _) idx_mut) next_el.#a76.#a9;
    mark_test_run 359;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 359 failed %d %d" size i;
    (* .#a76.#b9 *)
    let el = #{ el with a76 = #{ el.#a76 with b9 = next_el.#a76.#b9 } } in
    set_idx_mut a ((.(i).#a76.#b9) : (t76 array, _) idx_mut) next_el.#a76.#b9;
    mark_test_run 360;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 360 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t77 = #{ #{ int; int64 } }   *)
  (**********************************)
  let eq = (fun (#{ a77 = a771 } : t77) (#{ a77 = a772 } : t77) -> (fun (#{ a10 = a101; b10 = b101 } : t10) (#{ a10 = a102; b10 = b102 } : t10) -> (fun a b -> Int.equal a b) a101 a102 && (fun a b -> Int64.equal (globalize a) (globalize b)) b101 b102) a771 a772) in
  let mk_value i = (#{ a77 = (#{ a10 = (i + 0); b10 = Int64.of_int (i + 1) } : t10) } : t77) in
  (* 1. Create an array of size [size] *)
  let a : t77 array = makearray_dynamic size (#{ a77 = (#{ a10 = 0; b10 = 1L } : t10) } : t77) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 361;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 361 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 362;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 362 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a77 *)
    let el = #{ el with a77 = next_el.#a77 } in
    set_idx_mut a ((.(i).#a77) : (t77 array, _) idx_mut) next_el.#a77;
    mark_test_run 363;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 363 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a77.#a10 *)
    let el = #{ el with a77 = #{ el.#a77 with a10 = next_el.#a77.#a10 } } in
    set_idx_mut a ((.(i).#a77.#a10) : (t77 array, _) idx_mut) next_el.#a77.#a10;
    mark_test_run 364;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 364 failed %d %d" size i;
    (* .#a77.#b10 *)
    let el = #{ el with a77 = #{ el.#a77 with b10 = next_el.#a77.#b10 } } in
    set_idx_mut a ((.(i).#a77.#b10) : (t77 array, _) idx_mut) next_el.#a77.#b10;
    mark_test_run 365;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 365 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (***********************************)
  (*   t78 = #{ #{ int; int32# } }   *)
  (***********************************)
  let eq = (fun (#{ a78 = a781 } : t78) (#{ a78 = a782 } : t78) -> (fun (#{ a11 = a111; b11 = b111 } : t11) (#{ a11 = a112; b11 = b112 } : t11) -> (fun a b -> Int.equal a b) a111 a112 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b111 b112) a781 a782) in
  let mk_value i = (#{ a78 = (#{ a11 = (i + 0); b11 = Int32_u.of_int (i + 1) } : t11) } : t78) in
  (* 1. Create an array of size [size] *)
  let a : t78 array = makearray_dynamic size (#{ a78 = (#{ a11 = 0; b11 = #1l } : t11) } : t78) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 366;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 366 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 367;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 367 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a78 *)
    let el = #{ el with a78 = next_el.#a78 } in
    set_idx_mut a ((.(i).#a78) : (t78 array, _) idx_mut) next_el.#a78;
    mark_test_run 368;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 368 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a78.#a11 *)
    let el = #{ el with a78 = #{ el.#a78 with a11 = next_el.#a78.#a11 } } in
    set_idx_mut a ((.(i).#a78.#a11) : (t78 array, _) idx_mut) next_el.#a78.#a11;
    mark_test_run 369;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 369 failed %d %d" size i;
    (* .#a78.#b11 *)
    let el = #{ el with a78 = #{ el.#a78 with b11 = next_el.#a78.#b11 } } in
    set_idx_mut a ((.(i).#a78.#b11) : (t78 array, _) idx_mut) next_el.#a78.#b11;
    mark_test_run 370;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 370 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t79 = #{ #{ int; float } }   *)
  (**********************************)
  let eq = (fun (#{ a79 = a791 } : t79) (#{ a79 = a792 } : t79) -> (fun (#{ a12 = a121; b12 = b121 } : t12) (#{ a12 = a122; b12 = b122 } : t12) -> (fun a b -> Int.equal a b) a121 a122 && (fun a b -> Float.equal (globalize a) (globalize b)) b121 b122) a791 a792) in
  let mk_value i = (#{ a79 = (#{ a12 = (i + 0); b12 = Float.of_int (i + 1) } : t12) } : t79) in
  (* 1. Create an array of size [size] *)
  let a : t79 array = makearray_dynamic size (#{ a79 = (#{ a12 = 0; b12 = 1. } : t12) } : t79) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 371;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 371 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 372;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 372 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a79 *)
    let el = #{ el with a79 = next_el.#a79 } in
    set_idx_mut a ((.(i).#a79) : (t79 array, _) idx_mut) next_el.#a79;
    mark_test_run 373;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 373 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a79.#a12 *)
    let el = #{ el with a79 = #{ el.#a79 with a12 = next_el.#a79.#a12 } } in
    set_idx_mut a ((.(i).#a79.#a12) : (t79 array, _) idx_mut) next_el.#a79.#a12;
    mark_test_run 374;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 374 failed %d %d" size i;
    (* .#a79.#b12 *)
    let el = #{ el with a79 = #{ el.#a79 with b12 = next_el.#a79.#b12 } } in
    set_idx_mut a ((.(i).#a79.#b12) : (t79 array, _) idx_mut) next_el.#a79.#b12;
    mark_test_run 375;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 375 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t80 = #{ #{ int64; int } }   *)
  (**********************************)
  let eq = (fun (#{ a80 = a801 } : t80) (#{ a80 = a802 } : t80) -> (fun (#{ a13 = a131; b13 = b131 } : t13) (#{ a13 = a132; b13 = b132 } : t13) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a131 a132 && (fun a b -> Int.equal a b) b131 b132) a801 a802) in
  let mk_value i = (#{ a80 = (#{ a13 = Int64.of_int (i + 0); b13 = (i + 1) } : t13) } : t80) in
  (* 1. Create an array of size [size] *)
  let a : t80 array = makearray_dynamic size (#{ a80 = (#{ a13 = 0L; b13 = 1 } : t13) } : t80) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 376;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 376 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 377;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 377 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a80 *)
    let el = #{ el with a80 = next_el.#a80 } in
    set_idx_mut a ((.(i).#a80) : (t80 array, _) idx_mut) next_el.#a80;
    mark_test_run 378;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 378 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a80.#a13 *)
    let el = #{ el with a80 = #{ el.#a80 with a13 = next_el.#a80.#a13 } } in
    set_idx_mut a ((.(i).#a80.#a13) : (t80 array, _) idx_mut) next_el.#a80.#a13;
    mark_test_run 379;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 379 failed %d %d" size i;
    (* .#a80.#b13 *)
    let el = #{ el with a80 = #{ el.#a80 with b13 = next_el.#a80.#b13 } } in
    set_idx_mut a ((.(i).#a80.#b13) : (t80 array, _) idx_mut) next_el.#a80.#b13;
    mark_test_run 380;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 380 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t81 = #{ #{ int64; int64 } }   *)
  (************************************)
  let eq = (fun (#{ a81 = a811 } : t81) (#{ a81 = a812 } : t81) -> (fun (#{ a14 = a141; b14 = b141 } : t14) (#{ a14 = a142; b14 = b142 } : t14) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a141 a142 && (fun a b -> Int64.equal (globalize a) (globalize b)) b141 b142) a811 a812) in
  let mk_value i = (#{ a81 = (#{ a14 = Int64.of_int (i + 0); b14 = Int64.of_int (i + 1) } : t14) } : t81) in
  (* 1. Create an array of size [size] *)
  let a : t81 array = makearray_dynamic size (#{ a81 = (#{ a14 = 0L; b14 = 1L } : t14) } : t81) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 381;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 381 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 382;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 382 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a81 *)
    let el = #{ el with a81 = next_el.#a81 } in
    set_idx_mut a ((.(i).#a81) : (t81 array, _) idx_mut) next_el.#a81;
    mark_test_run 383;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 383 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a81.#a14 *)
    let el = #{ el with a81 = #{ el.#a81 with a14 = next_el.#a81.#a14 } } in
    set_idx_mut a ((.(i).#a81.#a14) : (t81 array, _) idx_mut) next_el.#a81.#a14;
    mark_test_run 384;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 384 failed %d %d" size i;
    (* .#a81.#b14 *)
    let el = #{ el with a81 = #{ el.#a81 with b14 = next_el.#a81.#b14 } } in
    set_idx_mut a ((.(i).#a81.#b14) : (t81 array, _) idx_mut) next_el.#a81.#b14;
    mark_test_run 385;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 385 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t82 = #{ #{ int64; float } }   *)
  (************************************)
  let eq = (fun (#{ a82 = a821 } : t82) (#{ a82 = a822 } : t82) -> (fun (#{ a15 = a151; b15 = b151 } : t15) (#{ a15 = a152; b15 = b152 } : t15) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a151 a152 && (fun a b -> Float.equal (globalize a) (globalize b)) b151 b152) a821 a822) in
  let mk_value i = (#{ a82 = (#{ a15 = Int64.of_int (i + 0); b15 = Float.of_int (i + 1) } : t15) } : t82) in
  (* 1. Create an array of size [size] *)
  let a : t82 array = makearray_dynamic size (#{ a82 = (#{ a15 = 0L; b15 = 1. } : t15) } : t82) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 386;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 386 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 387;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 387 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a82 *)
    let el = #{ el with a82 = next_el.#a82 } in
    set_idx_mut a ((.(i).#a82) : (t82 array, _) idx_mut) next_el.#a82;
    mark_test_run 388;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 388 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a82.#a15 *)
    let el = #{ el with a82 = #{ el.#a82 with a15 = next_el.#a82.#a15 } } in
    set_idx_mut a ((.(i).#a82.#a15) : (t82 array, _) idx_mut) next_el.#a82.#a15;
    mark_test_run 389;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 389 failed %d %d" size i;
    (* .#a82.#b15 *)
    let el = #{ el with a82 = #{ el.#a82 with b15 = next_el.#a82.#b15 } } in
    set_idx_mut a ((.(i).#a82.#b15) : (t82 array, _) idx_mut) next_el.#a82.#b15;
    mark_test_run 390;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 390 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**************************************)
  (*   t83 = #{ #{ int32#; int32# } }   *)
  (**************************************)
  let eq = (fun (#{ a83 = a831 } : t83) (#{ a83 = a832 } : t83) -> (fun (#{ a16 = a161; b16 = b161 } : t16) (#{ a16 = a162; b16 = b162 } : t16) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a161 a162 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b161 b162) a831 a832) in
  let mk_value i = (#{ a83 = (#{ a16 = Int32_u.of_int (i + 0); b16 = Int32_u.of_int (i + 1) } : t16) } : t83) in
  (* 1. Create an array of size [size] *)
  let a : t83 array = makearray_dynamic size (#{ a83 = (#{ a16 = #0l; b16 = #1l } : t16) } : t83) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 391;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 391 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 392;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 392 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a83 *)
    let el = #{ el with a83 = next_el.#a83 } in
    set_idx_mut a ((.(i).#a83) : (t83 array, _) idx_mut) next_el.#a83;
    mark_test_run 393;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 393 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a83.#a16 *)
    let el = #{ el with a83 = #{ el.#a83 with a16 = next_el.#a83.#a16 } } in
    set_idx_mut a ((.(i).#a83.#a16) : (t83 array, _) idx_mut) next_el.#a83.#a16;
    mark_test_run 394;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 394 failed %d %d" size i;
    (* .#a83.#b16 *)
    let el = #{ el with a83 = #{ el.#a83 with b16 = next_el.#a83.#b16 } } in
    set_idx_mut a ((.(i).#a83.#b16) : (t83 array, _) idx_mut) next_el.#a83.#b16;
    mark_test_run 395;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 395 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t84 = #{ #{ float; int } }   *)
  (**********************************)
  let eq = (fun (#{ a84 = a841 } : t84) (#{ a84 = a842 } : t84) -> (fun (#{ a17 = a171; b17 = b171 } : t17) (#{ a17 = a172; b17 = b172 } : t17) -> (fun a b -> Float.equal (globalize a) (globalize b)) a171 a172 && (fun a b -> Int.equal a b) b171 b172) a841 a842) in
  let mk_value i = (#{ a84 = (#{ a17 = Float.of_int (i + 0); b17 = (i + 1) } : t17) } : t84) in
  (* 1. Create an array of size [size] *)
  let a : t84 array = makearray_dynamic size (#{ a84 = (#{ a17 = 0.; b17 = 1 } : t17) } : t84) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 396;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 396 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 397;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 397 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a84 *)
    let el = #{ el with a84 = next_el.#a84 } in
    set_idx_mut a ((.(i).#a84) : (t84 array, _) idx_mut) next_el.#a84;
    mark_test_run 398;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 398 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a84.#a17 *)
    let el = #{ el with a84 = #{ el.#a84 with a17 = next_el.#a84.#a17 } } in
    set_idx_mut a ((.(i).#a84.#a17) : (t84 array, _) idx_mut) next_el.#a84.#a17;
    mark_test_run 399;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 399 failed %d %d" size i;
    (* .#a84.#b17 *)
    let el = #{ el with a84 = #{ el.#a84 with b17 = next_el.#a84.#b17 } } in
    set_idx_mut a ((.(i).#a84.#b17) : (t84 array, _) idx_mut) next_el.#a84.#b17;
    mark_test_run 400;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 400 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t85 = #{ #{ float; int64 } }   *)
  (************************************)
  let eq = (fun (#{ a85 = a851 } : t85) (#{ a85 = a852 } : t85) -> (fun (#{ a18 = a181; b18 = b181 } : t18) (#{ a18 = a182; b18 = b182 } : t18) -> (fun a b -> Float.equal (globalize a) (globalize b)) a181 a182 && (fun a b -> Int64.equal (globalize a) (globalize b)) b181 b182) a851 a852) in
  let mk_value i = (#{ a85 = (#{ a18 = Float.of_int (i + 0); b18 = Int64.of_int (i + 1) } : t18) } : t85) in
  (* 1. Create an array of size [size] *)
  let a : t85 array = makearray_dynamic size (#{ a85 = (#{ a18 = 0.; b18 = 1L } : t18) } : t85) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 401;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 401 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 402;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 402 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a85 *)
    let el = #{ el with a85 = next_el.#a85 } in
    set_idx_mut a ((.(i).#a85) : (t85 array, _) idx_mut) next_el.#a85;
    mark_test_run 403;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 403 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a85.#a18 *)
    let el = #{ el with a85 = #{ el.#a85 with a18 = next_el.#a85.#a18 } } in
    set_idx_mut a ((.(i).#a85.#a18) : (t85 array, _) idx_mut) next_el.#a85.#a18;
    mark_test_run 404;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 404 failed %d %d" size i;
    (* .#a85.#b18 *)
    let el = #{ el with a85 = #{ el.#a85 with b18 = next_el.#a85.#b18 } } in
    set_idx_mut a ((.(i).#a85.#b18) : (t85 array, _) idx_mut) next_el.#a85.#b18;
    mark_test_run 405;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 405 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t86 = #{ #{ float; float } }   *)
  (************************************)
  let eq = (fun (#{ a86 = a861 } : t86) (#{ a86 = a862 } : t86) -> (fun (#{ a19 = a191; b19 = b191 } : t19) (#{ a19 = a192; b19 = b192 } : t19) -> (fun a b -> Float.equal (globalize a) (globalize b)) a191 a192 && (fun a b -> Float.equal (globalize a) (globalize b)) b191 b192) a861 a862) in
  let mk_value i = (#{ a86 = (#{ a19 = Float.of_int (i + 0); b19 = Float.of_int (i + 1) } : t19) } : t86) in
  (* 1. Create an array of size [size] *)
  let a : t86 array = makearray_dynamic size (#{ a86 = (#{ a19 = 0.; b19 = 1. } : t19) } : t86) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 406;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 406 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 407;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 407 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a86 *)
    let el = #{ el with a86 = next_el.#a86 } in
    set_idx_mut a ((.(i).#a86) : (t86 array, _) idx_mut) next_el.#a86;
    mark_test_run 408;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 408 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a86.#a19 *)
    let el = #{ el with a86 = #{ el.#a86 with a19 = next_el.#a86.#a19 } } in
    set_idx_mut a ((.(i).#a86.#a19) : (t86 array, _) idx_mut) next_el.#a86.#a19;
    mark_test_run 409;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 409 failed %d %d" size i;
    (* .#a86.#b19 *)
    let el = #{ el with a86 = #{ el.#a86 with b19 = next_el.#a86.#b19 } } in
    set_idx_mut a ((.(i).#a86.#b19) : (t86 array, _) idx_mut) next_el.#a86.#b19;
    mark_test_run 410;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 410 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (********************************)
  (*   t87 = #{ #{ #{ int } } }   *)
  (********************************)
  let eq = (fun (#{ a87 = a871 } : t87) (#{ a87 = a872 } : t87) -> (fun (#{ a20 = a201 } : t20) (#{ a20 = a202 } : t20) -> (fun (#{ a6 = a61 } : t6) (#{ a6 = a62 } : t6) -> (fun a b -> Int.equal a b) a61 a62) a201 a202) a871 a872) in
  let mk_value i = (#{ a87 = (#{ a20 = (#{ a6 = (i + 0) } : t6) } : t20) } : t87) in
  (* 1. Create an array of size [size] *)
  let a : t87 array = makearray_dynamic size (#{ a87 = (#{ a20 = (#{ a6 = 0 } : t6) } : t20) } : t87) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 411;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 411 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 412;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 412 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a87 *)
    let el = #{ el with a87 = next_el.#a87 } in
    set_idx_mut a ((.(i).#a87) : (t87 array, _) idx_mut) next_el.#a87;
    mark_test_run 413;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 413 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a87.#a20 *)
    let el = #{ el with a87 = #{ el.#a87 with a20 = next_el.#a87.#a20 } } in
    set_idx_mut a ((.(i).#a87.#a20) : (t87 array, _) idx_mut) next_el.#a87.#a20;
    mark_test_run 414;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 414 failed %d %d" size i;
    (* Paths of depth 3 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 3) in
    (* .#a87.#a20.#a6 *)
    let el = #{ el with a87 = #{ el.#a87 with a20 = #{ el.#a87.#a20 with a6 = next_el.#a87.#a20.#a6 } } } in
    set_idx_mut a ((.(i).#a87.#a20.#a6) : (t87 array, _) idx_mut) next_el.#a87.#a20.#a6;
    mark_test_run 415;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 415 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t88 = #{ #{ #{ int64 } } }   *)
  (**********************************)
  let eq = (fun (#{ a88 = a881 } : t88) (#{ a88 = a882 } : t88) -> (fun (#{ a21 = a211 } : t21) (#{ a21 = a212 } : t21) -> (fun (#{ a7 = a71 } : t7) (#{ a7 = a72 } : t7) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a71 a72) a211 a212) a881 a882) in
  let mk_value i = (#{ a88 = (#{ a21 = (#{ a7 = Int64.of_int (i + 0) } : t7) } : t21) } : t88) in
  (* 1. Create an array of size [size] *)
  let a : t88 array = makearray_dynamic size (#{ a88 = (#{ a21 = (#{ a7 = 0L } : t7) } : t21) } : t88) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 416;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 416 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 417;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 417 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a88 *)
    let el = #{ el with a88 = next_el.#a88 } in
    set_idx_mut a ((.(i).#a88) : (t88 array, _) idx_mut) next_el.#a88;
    mark_test_run 418;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 418 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a88.#a21 *)
    let el = #{ el with a88 = #{ el.#a88 with a21 = next_el.#a88.#a21 } } in
    set_idx_mut a ((.(i).#a88.#a21) : (t88 array, _) idx_mut) next_el.#a88.#a21;
    mark_test_run 419;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 419 failed %d %d" size i;
    (* Paths of depth 3 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 3) in
    (* .#a88.#a21.#a7 *)
    let el = #{ el with a88 = #{ el.#a88 with a21 = #{ el.#a88.#a21 with a7 = next_el.#a88.#a21.#a7 } } } in
    set_idx_mut a ((.(i).#a88.#a21.#a7) : (t88 array, _) idx_mut) next_el.#a88.#a21.#a7;
    mark_test_run 420;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 420 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (***********************************)
  (*   t89 = #{ #{ #{ int32# } } }   *)
  (***********************************)
  let eq = (fun (#{ a89 = a891 } : t89) (#{ a89 = a892 } : t89) -> (fun (#{ a22 = a221 } : t22) (#{ a22 = a222 } : t22) -> (fun (#{ a8 = a81 } : t8) (#{ a8 = a82 } : t8) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a81 a82) a221 a222) a891 a892) in
  let mk_value i = (#{ a89 = (#{ a22 = (#{ a8 = Int32_u.of_int (i + 0) } : t8) } : t22) } : t89) in
  (* 1. Create an array of size [size] *)
  let a : t89 array = makearray_dynamic size (#{ a89 = (#{ a22 = (#{ a8 = #0l } : t8) } : t22) } : t89) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 421;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 421 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 422;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 422 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a89 *)
    let el = #{ el with a89 = next_el.#a89 } in
    set_idx_mut a ((.(i).#a89) : (t89 array, _) idx_mut) next_el.#a89;
    mark_test_run 423;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 423 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a89.#a22 *)
    let el = #{ el with a89 = #{ el.#a89 with a22 = next_el.#a89.#a22 } } in
    set_idx_mut a ((.(i).#a89.#a22) : (t89 array, _) idx_mut) next_el.#a89.#a22;
    mark_test_run 424;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 424 failed %d %d" size i;
    (* Paths of depth 3 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 3) in
    (* .#a89.#a22.#a8 *)
    let el = #{ el with a89 = #{ el.#a89 with a22 = #{ el.#a89.#a22 with a8 = next_el.#a89.#a22.#a8 } } } in
    set_idx_mut a ((.(i).#a89.#a22.#a8) : (t89 array, _) idx_mut) next_el.#a89.#a22.#a8;
    mark_test_run 425;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 425 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (***********)
  (*   int   *)
  (***********)
  let eq = (fun a b -> Int.equal a b) in
  let mk_value i = (i + 0) in
  (* 1. Create an array of size [size] *)
  let a : int array = makearray_dynamic size 0 in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 426;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 426 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 427;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 427 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    ()
  done;
  Gc.compact ();

  (*************)
  (*   int64   *)
  (*************)
  let eq = (fun a b -> Int64.equal (globalize a) (globalize b)) in
  let mk_value i = Int64.of_int (i + 0) in
  (* 1. Create an array of size [size] *)
  let a : int64 array = makearray_dynamic size 0L in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 428;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 428 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 429;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 429 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    ()
  done;
  Gc.compact ();

  (**************)
  (*   int32#   *)
  (**************)
  let eq = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) in
  let mk_value i = Int32_u.of_int (i + 0) in
  (* 1. Create an array of size [size] *)
  let a : int32# array = makearray_dynamic size #0l in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 430;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 430 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 431;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 431 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    ()
  done;
  Gc.compact ();

  (**************)
  (*   int64#   *)
  (**************)
  let eq = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) in
  let mk_value i = Int64_u.of_int (i + 0) in
  (* 1. Create an array of size [size] *)
  let a : int64# array = makearray_dynamic size #0L in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 432;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 432 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 433;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 433 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    ()
  done;
  Gc.compact ();

  (******************)
  (*   nativeint#   *)
  (******************)
  let eq = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) in
  let mk_value i = Nativeint_u.of_int (i + 0) in
  (* 1. Create an array of size [size] *)
  let a : nativeint# array = makearray_dynamic size #0n in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 434;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 434 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 435;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 435 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    ()
  done;
  Gc.compact ();

  (*********************)
  (*   t6 = #{ int }   *)
  (*********************)
  let eq = (fun (#{ a6 = a61 } : t6) (#{ a6 = a62 } : t6) -> (fun a b -> Int.equal a b) a61 a62) in
  let mk_value i = (#{ a6 = (i + 0) } : t6) in
  (* 1. Create an array of size [size] *)
  let a : t6 array = makearray_dynamic size (#{ a6 = 0 } : t6) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 436;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 436 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 437;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 437 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a6 *)
    let el = #{ el with a6 = next_el.#a6 } in
    set_idx_mut a ((.(i).#a6) : (t6 array, _) idx_mut) next_el.#a6;
    mark_test_run 438;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 438 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (***********************)
  (*   t7 = #{ int64 }   *)
  (***********************)
  let eq = (fun (#{ a7 = a71 } : t7) (#{ a7 = a72 } : t7) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a71 a72) in
  let mk_value i = (#{ a7 = Int64.of_int (i + 0) } : t7) in
  (* 1. Create an array of size [size] *)
  let a : t7 array = makearray_dynamic size (#{ a7 = 0L } : t7) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 439;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 439 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 440;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 440 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a7 *)
    let el = #{ el with a7 = next_el.#a7 } in
    set_idx_mut a ((.(i).#a7) : (t7 array, _) idx_mut) next_el.#a7;
    mark_test_run 441;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 441 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************)
  (*   t8 = #{ int32# }   *)
  (************************)
  let eq = (fun (#{ a8 = a81 } : t8) (#{ a8 = a82 } : t8) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a81 a82) in
  let mk_value i = (#{ a8 = Int32_u.of_int (i + 0) } : t8) in
  (* 1. Create an array of size [size] *)
  let a : t8 array = makearray_dynamic size (#{ a8 = #0l } : t8) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 442;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 442 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 443;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 443 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a8 *)
    let el = #{ el with a8 = next_el.#a8 } in
    set_idx_mut a ((.(i).#a8) : (t8 array, _) idx_mut) next_el.#a8;
    mark_test_run 444;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 444 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*************************)
  (*   t90 = #{ int64# }   *)
  (*************************)
  let eq = (fun (#{ a90 = a901 } : t90) (#{ a90 = a902 } : t90) -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a901 a902) in
  let mk_value i = (#{ a90 = Int64_u.of_int (i + 0) } : t90) in
  (* 1. Create an array of size [size] *)
  let a : t90 array = makearray_dynamic size (#{ a90 = #0L } : t90) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 445;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 445 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 446;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 446 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a90 *)
    let el = #{ el with a90 = next_el.#a90 } in
    set_idx_mut a ((.(i).#a90) : (t90 array, _) idx_mut) next_el.#a90;
    mark_test_run 447;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 447 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*****************************)
  (*   t91 = #{ nativeint# }   *)
  (*****************************)
  let eq = (fun (#{ a91 = a911 } : t91) (#{ a91 = a912 } : t91) -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a911 a912) in
  let mk_value i = (#{ a91 = Nativeint_u.of_int (i + 0) } : t91) in
  (* 1. Create an array of size [size] *)
  let a : t91 array = makearray_dynamic size (#{ a91 = #0n } : t91) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 448;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 448 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 449;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 449 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a91 *)
    let el = #{ el with a91 = next_el.#a91 } in
    set_idx_mut a ((.(i).#a91) : (t91 array, _) idx_mut) next_el.#a91;
    mark_test_run 450;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 450 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**************************)
  (*   t9 = #{ int; int }   *)
  (**************************)
  let eq = (fun (#{ a9 = a91; b9 = b91 } : t9) (#{ a9 = a92; b9 = b92 } : t9) -> (fun a b -> Int.equal a b) a91 a92 && (fun a b -> Int.equal a b) b91 b92) in
  let mk_value i = (#{ a9 = (i + 0); b9 = (i + 1) } : t9) in
  (* 1. Create an array of size [size] *)
  let a : t9 array = makearray_dynamic size (#{ a9 = 0; b9 = 1 } : t9) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 451;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 451 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 452;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 452 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a9 *)
    let el = #{ el with a9 = next_el.#a9 } in
    set_idx_mut a ((.(i).#a9) : (t9 array, _) idx_mut) next_el.#a9;
    mark_test_run 453;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 453 failed %d %d" size i;
    (* .#b9 *)
    let el = #{ el with b9 = next_el.#b9 } in
    set_idx_mut a ((.(i).#b9) : (t9 array, _) idx_mut) next_el.#b9;
    mark_test_run 454;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 454 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*****************************)
  (*   t10 = #{ int; int64 }   *)
  (*****************************)
  let eq = (fun (#{ a10 = a101; b10 = b101 } : t10) (#{ a10 = a102; b10 = b102 } : t10) -> (fun a b -> Int.equal a b) a101 a102 && (fun a b -> Int64.equal (globalize a) (globalize b)) b101 b102) in
  let mk_value i = (#{ a10 = (i + 0); b10 = Int64.of_int (i + 1) } : t10) in
  (* 1. Create an array of size [size] *)
  let a : t10 array = makearray_dynamic size (#{ a10 = 0; b10 = 1L } : t10) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 455;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 455 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 456;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 456 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a10 *)
    let el = #{ el with a10 = next_el.#a10 } in
    set_idx_mut a ((.(i).#a10) : (t10 array, _) idx_mut) next_el.#a10;
    mark_test_run 457;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 457 failed %d %d" size i;
    (* .#b10 *)
    let el = #{ el with b10 = next_el.#b10 } in
    set_idx_mut a ((.(i).#b10) : (t10 array, _) idx_mut) next_el.#b10;
    mark_test_run 458;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 458 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (******************************)
  (*   t11 = #{ int; int32# }   *)
  (******************************)
  let eq = (fun (#{ a11 = a111; b11 = b111 } : t11) (#{ a11 = a112; b11 = b112 } : t11) -> (fun a b -> Int.equal a b) a111 a112 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b111 b112) in
  let mk_value i = (#{ a11 = (i + 0); b11 = Int32_u.of_int (i + 1) } : t11) in
  (* 1. Create an array of size [size] *)
  let a : t11 array = makearray_dynamic size (#{ a11 = 0; b11 = #1l } : t11) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 459;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 459 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 460;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 460 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a11 *)
    let el = #{ el with a11 = next_el.#a11 } in
    set_idx_mut a ((.(i).#a11) : (t11 array, _) idx_mut) next_el.#a11;
    mark_test_run 461;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 461 failed %d %d" size i;
    (* .#b11 *)
    let el = #{ el with b11 = next_el.#b11 } in
    set_idx_mut a ((.(i).#b11) : (t11 array, _) idx_mut) next_el.#b11;
    mark_test_run 462;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 462 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*****************************)
  (*   t12 = #{ int; float }   *)
  (*****************************)
  let eq = (fun (#{ a12 = a121; b12 = b121 } : t12) (#{ a12 = a122; b12 = b122 } : t12) -> (fun a b -> Int.equal a b) a121 a122 && (fun a b -> Float.equal (globalize a) (globalize b)) b121 b122) in
  let mk_value i = (#{ a12 = (i + 0); b12 = Float.of_int (i + 1) } : t12) in
  (* 1. Create an array of size [size] *)
  let a : t12 array = makearray_dynamic size (#{ a12 = 0; b12 = 1. } : t12) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 463;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 463 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 464;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 464 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a12 *)
    let el = #{ el with a12 = next_el.#a12 } in
    set_idx_mut a ((.(i).#a12) : (t12 array, _) idx_mut) next_el.#a12;
    mark_test_run 465;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 465 failed %d %d" size i;
    (* .#b12 *)
    let el = #{ el with b12 = next_el.#b12 } in
    set_idx_mut a ((.(i).#b12) : (t12 array, _) idx_mut) next_el.#b12;
    mark_test_run 466;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 466 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (******************************)
  (*   t92 = #{ int; int64# }   *)
  (******************************)
  let eq = (fun (#{ a92 = a921; b92 = b921 } : t92) (#{ a92 = a922; b92 = b922 } : t92) -> (fun a b -> Int.equal a b) a921 a922 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b921 b922) in
  let mk_value i = (#{ a92 = (i + 0); b92 = Int64_u.of_int (i + 1) } : t92) in
  (* 1. Create an array of size [size] *)
  let a : t92 array = makearray_dynamic size (#{ a92 = 0; b92 = #1L } : t92) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 467;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 467 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 468;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 468 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a92 *)
    let el = #{ el with a92 = next_el.#a92 } in
    set_idx_mut a ((.(i).#a92) : (t92 array, _) idx_mut) next_el.#a92;
    mark_test_run 469;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 469 failed %d %d" size i;
    (* .#b92 *)
    let el = #{ el with b92 = next_el.#b92 } in
    set_idx_mut a ((.(i).#b92) : (t92 array, _) idx_mut) next_el.#b92;
    mark_test_run 470;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 470 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t93 = #{ int; nativeint# }   *)
  (**********************************)
  let eq = (fun (#{ a93 = a931; b93 = b931 } : t93) (#{ a93 = a932; b93 = b932 } : t93) -> (fun a b -> Int.equal a b) a931 a932 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b931 b932) in
  let mk_value i = (#{ a93 = (i + 0); b93 = Nativeint_u.of_int (i + 1) } : t93) in
  (* 1. Create an array of size [size] *)
  let a : t93 array = makearray_dynamic size (#{ a93 = 0; b93 = #1n } : t93) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 471;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 471 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 472;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 472 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a93 *)
    let el = #{ el with a93 = next_el.#a93 } in
    set_idx_mut a ((.(i).#a93) : (t93 array, _) idx_mut) next_el.#a93;
    mark_test_run 473;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 473 failed %d %d" size i;
    (* .#b93 *)
    let el = #{ el with b93 = next_el.#b93 } in
    set_idx_mut a ((.(i).#b93) : (t93 array, _) idx_mut) next_el.#b93;
    mark_test_run 474;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 474 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*****************************)
  (*   t13 = #{ int64; int }   *)
  (*****************************)
  let eq = (fun (#{ a13 = a131; b13 = b131 } : t13) (#{ a13 = a132; b13 = b132 } : t13) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a131 a132 && (fun a b -> Int.equal a b) b131 b132) in
  let mk_value i = (#{ a13 = Int64.of_int (i + 0); b13 = (i + 1) } : t13) in
  (* 1. Create an array of size [size] *)
  let a : t13 array = makearray_dynamic size (#{ a13 = 0L; b13 = 1 } : t13) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 475;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 475 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 476;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 476 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a13 *)
    let el = #{ el with a13 = next_el.#a13 } in
    set_idx_mut a ((.(i).#a13) : (t13 array, _) idx_mut) next_el.#a13;
    mark_test_run 477;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 477 failed %d %d" size i;
    (* .#b13 *)
    let el = #{ el with b13 = next_el.#b13 } in
    set_idx_mut a ((.(i).#b13) : (t13 array, _) idx_mut) next_el.#b13;
    mark_test_run 478;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 478 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*******************************)
  (*   t14 = #{ int64; int64 }   *)
  (*******************************)
  let eq = (fun (#{ a14 = a141; b14 = b141 } : t14) (#{ a14 = a142; b14 = b142 } : t14) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a141 a142 && (fun a b -> Int64.equal (globalize a) (globalize b)) b141 b142) in
  let mk_value i = (#{ a14 = Int64.of_int (i + 0); b14 = Int64.of_int (i + 1) } : t14) in
  (* 1. Create an array of size [size] *)
  let a : t14 array = makearray_dynamic size (#{ a14 = 0L; b14 = 1L } : t14) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 479;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 479 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 480;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 480 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a14 *)
    let el = #{ el with a14 = next_el.#a14 } in
    set_idx_mut a ((.(i).#a14) : (t14 array, _) idx_mut) next_el.#a14;
    mark_test_run 481;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 481 failed %d %d" size i;
    (* .#b14 *)
    let el = #{ el with b14 = next_el.#b14 } in
    set_idx_mut a ((.(i).#b14) : (t14 array, _) idx_mut) next_el.#b14;
    mark_test_run 482;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 482 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*******************************)
  (*   t15 = #{ int64; float }   *)
  (*******************************)
  let eq = (fun (#{ a15 = a151; b15 = b151 } : t15) (#{ a15 = a152; b15 = b152 } : t15) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a151 a152 && (fun a b -> Float.equal (globalize a) (globalize b)) b151 b152) in
  let mk_value i = (#{ a15 = Int64.of_int (i + 0); b15 = Float.of_int (i + 1) } : t15) in
  (* 1. Create an array of size [size] *)
  let a : t15 array = makearray_dynamic size (#{ a15 = 0L; b15 = 1. } : t15) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 483;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 483 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 484;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 484 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a15 *)
    let el = #{ el with a15 = next_el.#a15 } in
    set_idx_mut a ((.(i).#a15) : (t15 array, _) idx_mut) next_el.#a15;
    mark_test_run 485;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 485 failed %d %d" size i;
    (* .#b15 *)
    let el = #{ el with b15 = next_el.#b15 } in
    set_idx_mut a ((.(i).#b15) : (t15 array, _) idx_mut) next_el.#b15;
    mark_test_run 486;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 486 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*********************************)
  (*   t16 = #{ int32#; int32# }   *)
  (*********************************)
  let eq = (fun (#{ a16 = a161; b16 = b161 } : t16) (#{ a16 = a162; b16 = b162 } : t16) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a161 a162 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b161 b162) in
  let mk_value i = (#{ a16 = Int32_u.of_int (i + 0); b16 = Int32_u.of_int (i + 1) } : t16) in
  (* 1. Create an array of size [size] *)
  let a : t16 array = makearray_dynamic size (#{ a16 = #0l; b16 = #1l } : t16) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 487;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 487 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 488;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 488 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a16 *)
    let el = #{ el with a16 = next_el.#a16 } in
    set_idx_mut a ((.(i).#a16) : (t16 array, _) idx_mut) next_el.#a16;
    mark_test_run 489;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 489 failed %d %d" size i;
    (* .#b16 *)
    let el = #{ el with b16 = next_el.#b16 } in
    set_idx_mut a ((.(i).#b16) : (t16 array, _) idx_mut) next_el.#b16;
    mark_test_run 490;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 490 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*********************************)
  (*   t94 = #{ int32#; int64# }   *)
  (*********************************)
  let eq = (fun (#{ a94 = a941; b94 = b941 } : t94) (#{ a94 = a942; b94 = b942 } : t94) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a941 a942 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b941 b942) in
  let mk_value i = (#{ a94 = Int32_u.of_int (i + 0); b94 = Int64_u.of_int (i + 1) } : t94) in
  (* 1. Create an array of size [size] *)
  let a : t94 array = makearray_dynamic size (#{ a94 = #0l; b94 = #1L } : t94) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 491;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 491 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 492;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 492 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a94 *)
    let el = #{ el with a94 = next_el.#a94 } in
    set_idx_mut a ((.(i).#a94) : (t94 array, _) idx_mut) next_el.#a94;
    mark_test_run 493;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 493 failed %d %d" size i;
    (* .#b94 *)
    let el = #{ el with b94 = next_el.#b94 } in
    set_idx_mut a ((.(i).#b94) : (t94 array, _) idx_mut) next_el.#b94;
    mark_test_run 494;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 494 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*************************************)
  (*   t95 = #{ int32#; nativeint# }   *)
  (*************************************)
  let eq = (fun (#{ a95 = a951; b95 = b951 } : t95) (#{ a95 = a952; b95 = b952 } : t95) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a951 a952 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b951 b952) in
  let mk_value i = (#{ a95 = Int32_u.of_int (i + 0); b95 = Nativeint_u.of_int (i + 1) } : t95) in
  (* 1. Create an array of size [size] *)
  let a : t95 array = makearray_dynamic size (#{ a95 = #0l; b95 = #1n } : t95) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 495;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 495 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 496;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 496 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a95 *)
    let el = #{ el with a95 = next_el.#a95 } in
    set_idx_mut a ((.(i).#a95) : (t95 array, _) idx_mut) next_el.#a95;
    mark_test_run 497;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 497 failed %d %d" size i;
    (* .#b95 *)
    let el = #{ el with b95 = next_el.#b95 } in
    set_idx_mut a ((.(i).#b95) : (t95 array, _) idx_mut) next_el.#b95;
    mark_test_run 498;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 498 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*****************************)
  (*   t17 = #{ float; int }   *)
  (*****************************)
  let eq = (fun (#{ a17 = a171; b17 = b171 } : t17) (#{ a17 = a172; b17 = b172 } : t17) -> (fun a b -> Float.equal (globalize a) (globalize b)) a171 a172 && (fun a b -> Int.equal a b) b171 b172) in
  let mk_value i = (#{ a17 = Float.of_int (i + 0); b17 = (i + 1) } : t17) in
  (* 1. Create an array of size [size] *)
  let a : t17 array = makearray_dynamic size (#{ a17 = 0.; b17 = 1 } : t17) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 499;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 499 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 500;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 500 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a17 *)
    let el = #{ el with a17 = next_el.#a17 } in
    set_idx_mut a ((.(i).#a17) : (t17 array, _) idx_mut) next_el.#a17;
    mark_test_run 501;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 501 failed %d %d" size i;
    (* .#b17 *)
    let el = #{ el with b17 = next_el.#b17 } in
    set_idx_mut a ((.(i).#b17) : (t17 array, _) idx_mut) next_el.#b17;
    mark_test_run 502;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 502 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*******************************)
  (*   t18 = #{ float; int64 }   *)
  (*******************************)
  let eq = (fun (#{ a18 = a181; b18 = b181 } : t18) (#{ a18 = a182; b18 = b182 } : t18) -> (fun a b -> Float.equal (globalize a) (globalize b)) a181 a182 && (fun a b -> Int64.equal (globalize a) (globalize b)) b181 b182) in
  let mk_value i = (#{ a18 = Float.of_int (i + 0); b18 = Int64.of_int (i + 1) } : t18) in
  (* 1. Create an array of size [size] *)
  let a : t18 array = makearray_dynamic size (#{ a18 = 0.; b18 = 1L } : t18) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 503;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 503 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 504;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 504 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a18 *)
    let el = #{ el with a18 = next_el.#a18 } in
    set_idx_mut a ((.(i).#a18) : (t18 array, _) idx_mut) next_el.#a18;
    mark_test_run 505;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 505 failed %d %d" size i;
    (* .#b18 *)
    let el = #{ el with b18 = next_el.#b18 } in
    set_idx_mut a ((.(i).#b18) : (t18 array, _) idx_mut) next_el.#b18;
    mark_test_run 506;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 506 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*******************************)
  (*   t19 = #{ float; float }   *)
  (*******************************)
  let eq = (fun (#{ a19 = a191; b19 = b191 } : t19) (#{ a19 = a192; b19 = b192 } : t19) -> (fun a b -> Float.equal (globalize a) (globalize b)) a191 a192 && (fun a b -> Float.equal (globalize a) (globalize b)) b191 b192) in
  let mk_value i = (#{ a19 = Float.of_int (i + 0); b19 = Float.of_int (i + 1) } : t19) in
  (* 1. Create an array of size [size] *)
  let a : t19 array = makearray_dynamic size (#{ a19 = 0.; b19 = 1. } : t19) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 507;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 507 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 508;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 508 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a19 *)
    let el = #{ el with a19 = next_el.#a19 } in
    set_idx_mut a ((.(i).#a19) : (t19 array, _) idx_mut) next_el.#a19;
    mark_test_run 509;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 509 failed %d %d" size i;
    (* .#b19 *)
    let el = #{ el with b19 = next_el.#b19 } in
    set_idx_mut a ((.(i).#b19) : (t19 array, _) idx_mut) next_el.#b19;
    mark_test_run 510;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 510 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*********************************)
  (*   t96 = #{ int64#; int32# }   *)
  (*********************************)
  let eq = (fun (#{ a96 = a961; b96 = b961 } : t96) (#{ a96 = a962; b96 = b962 } : t96) -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a961 a962 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b961 b962) in
  let mk_value i = (#{ a96 = Int64_u.of_int (i + 0); b96 = Int32_u.of_int (i + 1) } : t96) in
  (* 1. Create an array of size [size] *)
  let a : t96 array = makearray_dynamic size (#{ a96 = #0L; b96 = #1l } : t96) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 511;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 511 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 512;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 512 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a96 *)
    let el = #{ el with a96 = next_el.#a96 } in
    set_idx_mut a ((.(i).#a96) : (t96 array, _) idx_mut) next_el.#a96;
    mark_test_run 513;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 513 failed %d %d" size i;
    (* .#b96 *)
    let el = #{ el with b96 = next_el.#b96 } in
    set_idx_mut a ((.(i).#b96) : (t96 array, _) idx_mut) next_el.#b96;
    mark_test_run 514;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 514 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (********************************)
  (*   t0 = #{ int64#; int64# }   *)
  (********************************)
  let eq = (fun (#{ a0 = a01; b0 = b01 } : t0) (#{ a0 = a02; b0 = b02 } : t0) -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a01 a02 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b01 b02) in
  let mk_value i = (#{ a0 = Int64_u.of_int (i + 0); b0 = Int64_u.of_int (i + 1) } : t0) in
  (* 1. Create an array of size [size] *)
  let a : t0 array = makearray_dynamic size (#{ a0 = #0L; b0 = #1L } : t0) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 515;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 515 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 516;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 516 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a0 *)
    let el = #{ el with a0 = next_el.#a0 } in
    set_idx_mut a ((.(i).#a0) : (t0 array, _) idx_mut) next_el.#a0;
    mark_test_run 517;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 517 failed %d %d" size i;
    (* .#b0 *)
    let el = #{ el with b0 = next_el.#b0 } in
    set_idx_mut a ((.(i).#b0) : (t0 array, _) idx_mut) next_el.#b0;
    mark_test_run 518;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 518 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*************************************)
  (*   t97 = #{ int64#; nativeint# }   *)
  (*************************************)
  let eq = (fun (#{ a97 = a971; b97 = b971 } : t97) (#{ a97 = a972; b97 = b972 } : t97) -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a971 a972 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b971 b972) in
  let mk_value i = (#{ a97 = Int64_u.of_int (i + 0); b97 = Nativeint_u.of_int (i + 1) } : t97) in
  (* 1. Create an array of size [size] *)
  let a : t97 array = makearray_dynamic size (#{ a97 = #0L; b97 = #1n } : t97) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 519;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 519 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 520;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 520 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a97 *)
    let el = #{ el with a97 = next_el.#a97 } in
    set_idx_mut a ((.(i).#a97) : (t97 array, _) idx_mut) next_el.#a97;
    mark_test_run 521;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 521 failed %d %d" size i;
    (* .#b97 *)
    let el = #{ el with b97 = next_el.#b97 } in
    set_idx_mut a ((.(i).#b97) : (t97 array, _) idx_mut) next_el.#b97;
    mark_test_run 522;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 522 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*************************************)
  (*   t98 = #{ nativeint#; int32# }   *)
  (*************************************)
  let eq = (fun (#{ a98 = a981; b98 = b981 } : t98) (#{ a98 = a982; b98 = b982 } : t98) -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a981 a982 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b981 b982) in
  let mk_value i = (#{ a98 = Nativeint_u.of_int (i + 0); b98 = Int32_u.of_int (i + 1) } : t98) in
  (* 1. Create an array of size [size] *)
  let a : t98 array = makearray_dynamic size (#{ a98 = #0n; b98 = #1l } : t98) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 523;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 523 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 524;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 524 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a98 *)
    let el = #{ el with a98 = next_el.#a98 } in
    set_idx_mut a ((.(i).#a98) : (t98 array, _) idx_mut) next_el.#a98;
    mark_test_run 525;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 525 failed %d %d" size i;
    (* .#b98 *)
    let el = #{ el with b98 = next_el.#b98 } in
    set_idx_mut a ((.(i).#b98) : (t98 array, _) idx_mut) next_el.#b98;
    mark_test_run 526;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 526 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*************************************)
  (*   t99 = #{ nativeint#; int64# }   *)
  (*************************************)
  let eq = (fun (#{ a99 = a991; b99 = b991 } : t99) (#{ a99 = a992; b99 = b992 } : t99) -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a991 a992 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b991 b992) in
  let mk_value i = (#{ a99 = Nativeint_u.of_int (i + 0); b99 = Int64_u.of_int (i + 1) } : t99) in
  (* 1. Create an array of size [size] *)
  let a : t99 array = makearray_dynamic size (#{ a99 = #0n; b99 = #1L } : t99) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 527;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 527 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 528;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 528 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a99 *)
    let el = #{ el with a99 = next_el.#a99 } in
    set_idx_mut a ((.(i).#a99) : (t99 array, _) idx_mut) next_el.#a99;
    mark_test_run 529;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 529 failed %d %d" size i;
    (* .#b99 *)
    let el = #{ el with b99 = next_el.#b99 } in
    set_idx_mut a ((.(i).#b99) : (t99 array, _) idx_mut) next_el.#b99;
    mark_test_run 530;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 530 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (******************************************)
  (*   t100 = #{ nativeint#; nativeint# }   *)
  (******************************************)
  let eq = (fun (#{ a100 = a1001; b100 = b1001 } : t100) (#{ a100 = a1002; b100 = b1002 } : t100) -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a1001 a1002 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b1001 b1002) in
  let mk_value i = (#{ a100 = Nativeint_u.of_int (i + 0); b100 = Nativeint_u.of_int (i + 1) } : t100) in
  (* 1. Create an array of size [size] *)
  let a : t100 array = makearray_dynamic size (#{ a100 = #0n; b100 = #1n } : t100) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 531;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 531 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 532;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 532 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a100 *)
    let el = #{ el with a100 = next_el.#a100 } in
    set_idx_mut a ((.(i).#a100) : (t100 array, _) idx_mut) next_el.#a100;
    mark_test_run 533;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 533 failed %d %d" size i;
    (* .#b100 *)
    let el = #{ el with b100 = next_el.#b100 } in
    set_idx_mut a ((.(i).#b100) : (t100 array, _) idx_mut) next_el.#b100;
    mark_test_run 534;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 534 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (***************************)
  (*   t20 = #{ #{ int } }   *)
  (***************************)
  let eq = (fun (#{ a20 = a201 } : t20) (#{ a20 = a202 } : t20) -> (fun (#{ a6 = a61 } : t6) (#{ a6 = a62 } : t6) -> (fun a b -> Int.equal a b) a61 a62) a201 a202) in
  let mk_value i = (#{ a20 = (#{ a6 = (i + 0) } : t6) } : t20) in
  (* 1. Create an array of size [size] *)
  let a : t20 array = makearray_dynamic size (#{ a20 = (#{ a6 = 0 } : t6) } : t20) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 535;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 535 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 536;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 536 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a20 *)
    let el = #{ el with a20 = next_el.#a20 } in
    set_idx_mut a ((.(i).#a20) : (t20 array, _) idx_mut) next_el.#a20;
    mark_test_run 537;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 537 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a20.#a6 *)
    let el = #{ el with a20 = #{ el.#a20 with a6 = next_el.#a20.#a6 } } in
    set_idx_mut a ((.(i).#a20.#a6) : (t20 array, _) idx_mut) next_el.#a20.#a6;
    mark_test_run 538;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 538 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*****************************)
  (*   t21 = #{ #{ int64 } }   *)
  (*****************************)
  let eq = (fun (#{ a21 = a211 } : t21) (#{ a21 = a212 } : t21) -> (fun (#{ a7 = a71 } : t7) (#{ a7 = a72 } : t7) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a71 a72) a211 a212) in
  let mk_value i = (#{ a21 = (#{ a7 = Int64.of_int (i + 0) } : t7) } : t21) in
  (* 1. Create an array of size [size] *)
  let a : t21 array = makearray_dynamic size (#{ a21 = (#{ a7 = 0L } : t7) } : t21) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 539;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 539 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 540;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 540 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a21 *)
    let el = #{ el with a21 = next_el.#a21 } in
    set_idx_mut a ((.(i).#a21) : (t21 array, _) idx_mut) next_el.#a21;
    mark_test_run 541;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 541 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a21.#a7 *)
    let el = #{ el with a21 = #{ el.#a21 with a7 = next_el.#a21.#a7 } } in
    set_idx_mut a ((.(i).#a21.#a7) : (t21 array, _) idx_mut) next_el.#a21.#a7;
    mark_test_run 542;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 542 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (******************************)
  (*   t22 = #{ #{ int32# } }   *)
  (******************************)
  let eq = (fun (#{ a22 = a221 } : t22) (#{ a22 = a222 } : t22) -> (fun (#{ a8 = a81 } : t8) (#{ a8 = a82 } : t8) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a81 a82) a221 a222) in
  let mk_value i = (#{ a22 = (#{ a8 = Int32_u.of_int (i + 0) } : t8) } : t22) in
  (* 1. Create an array of size [size] *)
  let a : t22 array = makearray_dynamic size (#{ a22 = (#{ a8 = #0l } : t8) } : t22) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 543;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 543 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 544;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 544 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a22 *)
    let el = #{ el with a22 = next_el.#a22 } in
    set_idx_mut a ((.(i).#a22) : (t22 array, _) idx_mut) next_el.#a22;
    mark_test_run 545;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 545 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a22.#a8 *)
    let el = #{ el with a22 = #{ el.#a22 with a8 = next_el.#a22.#a8 } } in
    set_idx_mut a ((.(i).#a22.#a8) : (t22 array, _) idx_mut) next_el.#a22.#a8;
    mark_test_run 546;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 546 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*******************************)
  (*   t101 = #{ #{ int64# } }   *)
  (*******************************)
  let eq = (fun (#{ a101 = a1011 } : t101) (#{ a101 = a1012 } : t101) -> (fun (#{ a90 = a901 } : t90) (#{ a90 = a902 } : t90) -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a901 a902) a1011 a1012) in
  let mk_value i = (#{ a101 = (#{ a90 = Int64_u.of_int (i + 0) } : t90) } : t101) in
  (* 1. Create an array of size [size] *)
  let a : t101 array = makearray_dynamic size (#{ a101 = (#{ a90 = #0L } : t90) } : t101) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 547;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 547 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 548;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 548 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a101 *)
    let el = #{ el with a101 = next_el.#a101 } in
    set_idx_mut a ((.(i).#a101) : (t101 array, _) idx_mut) next_el.#a101;
    mark_test_run 549;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 549 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a101.#a90 *)
    let el = #{ el with a101 = #{ el.#a101 with a90 = next_el.#a101.#a90 } } in
    set_idx_mut a ((.(i).#a101.#a90) : (t101 array, _) idx_mut) next_el.#a101.#a90;
    mark_test_run 550;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 550 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (***********************************)
  (*   t102 = #{ #{ nativeint# } }   *)
  (***********************************)
  let eq = (fun (#{ a102 = a1021 } : t102) (#{ a102 = a1022 } : t102) -> (fun (#{ a91 = a911 } : t91) (#{ a91 = a912 } : t91) -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a911 a912) a1021 a1022) in
  let mk_value i = (#{ a102 = (#{ a91 = Nativeint_u.of_int (i + 0) } : t91) } : t102) in
  (* 1. Create an array of size [size] *)
  let a : t102 array = makearray_dynamic size (#{ a102 = (#{ a91 = #0n } : t91) } : t102) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 551;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 551 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 552;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 552 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a102 *)
    let el = #{ el with a102 = next_el.#a102 } in
    set_idx_mut a ((.(i).#a102) : (t102 array, _) idx_mut) next_el.#a102;
    mark_test_run 553;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 553 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a102.#a91 *)
    let el = #{ el with a102 = #{ el.#a102 with a91 = next_el.#a102.#a91 } } in
    set_idx_mut a ((.(i).#a102.#a91) : (t102 array, _) idx_mut) next_el.#a102.#a91;
    mark_test_run 554;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 554 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*********************************************************)
  (*   t104 = #{ #{ int; int64# }; #{ int64#; float# } }   *)
  (*********************************************************)
  let eq = (fun (#{ a104 = a1041; b104 = b1041 } : t104) (#{ a104 = a1042; b104 = b1042 } : t104) -> (fun (#{ a92 = a921; b92 = b921 } : t92) (#{ a92 = a922; b92 = b922 } : t92) -> (fun a b -> Int.equal a b) a921 a922 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b921 b922) a1041 a1042 && (fun (#{ a103 = a1031; b103 = b1031 } : t103) (#{ a103 = a1032; b103 = b1032 } : t103) -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1031 a1032 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1031 b1032) b1041 b1042) in
  let mk_value i = (#{ a104 = (#{ a92 = (i + 0); b92 = Int64_u.of_int (i + 1) } : t92); b104 = (#{ a103 = Int64_u.of_int (i + 2); b103 = Float_u.of_int (i + 3) } : t103) } : t104) in
  (* 1. Create an array of size [size] *)
  let a : t104 array = makearray_dynamic size (#{ a104 = (#{ a92 = 0; b92 = #1L } : t92); b104 = (#{ a103 = #2L; b103 = #3. } : t103) } : t104) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 555;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 555 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 556;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 556 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a104 *)
    let el = #{ el with a104 = next_el.#a104 } in
    set_idx_mut a ((.(i).#a104) : (t104 array, _) idx_mut) next_el.#a104;
    mark_test_run 557;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 557 failed %d %d" size i;
    (* .#b104 *)
    let el = #{ el with b104 = next_el.#b104 } in
    set_idx_mut a ((.(i).#b104) : (t104 array, _) idx_mut) next_el.#b104;
    mark_test_run 558;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 558 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a104.#a92 *)
    let el = #{ el with a104 = #{ el.#a104 with a92 = next_el.#a104.#a92 } } in
    set_idx_mut a ((.(i).#a104.#a92) : (t104 array, _) idx_mut) next_el.#a104.#a92;
    mark_test_run 559;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 559 failed %d %d" size i;
    (* .#a104.#b92 *)
    let el = #{ el with a104 = #{ el.#a104 with b92 = next_el.#a104.#b92 } } in
    set_idx_mut a ((.(i).#a104.#b92) : (t104 array, _) idx_mut) next_el.#a104.#b92;
    mark_test_run 560;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 560 failed %d %d" size i;
    (* .#b104.#a103 *)
    let el = #{ el with b104 = #{ el.#b104 with a103 = next_el.#b104.#a103 } } in
    set_idx_mut a ((.(i).#b104.#a103) : (t104 array, _) idx_mut) next_el.#b104.#a103;
    mark_test_run 561;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 561 failed %d %d" size i;
    (* .#b104.#b103 *)
    let el = #{ el with b104 = #{ el.#b104 with b103 = next_el.#b104.#b103 } } in
    set_idx_mut a ((.(i).#b104.#b103) : (t104 array, _) idx_mut) next_el.#b104.#b103;
    mark_test_run 562;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 562 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  ()

let test_array_idx_with_makearray_dynamic_local size =
  (*********************************************)
  (*   t1 = #{ int64#; #{ int64#; int64# } }   *)
  (*********************************************)
  let eq = (fun (#{ a1 = a11; b1 = b11 } : t1) (#{ a1 = a12; b1 = b12 } : t1) -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a11 a12 && (fun (#{ a0 = a01; b0 = b01 } : t0) (#{ a0 = a02; b0 = b02 } : t0) -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a01 a02 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b01 b02) b11 b12) in
  let mk_value i = (#{ a1 = Int64_u.of_int (i + 0); b1 = (#{ a0 = Int64_u.of_int (i + 1); b0 = Int64_u.of_int (i + 2) } : t0) } : t1) in
  (* 1. Create an array of size [size] *)
  let a : t1 array = makearray_dynamic_local size (#{ a1 = #0L; b1 = (#{ a0 = #1L; b0 = #2L } : t0) } : t1) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 563;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 563 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 564;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 564 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a1 *)
    let el = #{ el with a1 = next_el.#a1 } in
    set_idx_mut a ((.(i).#a1) : (t1 array, _) idx_mut) next_el.#a1;
    mark_test_run 565;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 565 failed %d %d" size i;
    (* .#b1 *)
    let el = #{ el with b1 = next_el.#b1 } in
    set_idx_mut a ((.(i).#b1) : (t1 array, _) idx_mut) next_el.#b1;
    mark_test_run 566;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 566 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#b1.#a0 *)
    let el = #{ el with b1 = #{ el.#b1 with a0 = next_el.#b1.#a0 } } in
    set_idx_mut a ((.(i).#b1.#a0) : (t1 array, _) idx_mut) next_el.#b1.#a0;
    mark_test_run 567;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 567 failed %d %d" size i;
    (* .#b1.#b0 *)
    let el = #{ el with b1 = #{ el.#b1 with b0 = next_el.#b1.#b0 } } in
    set_idx_mut a ((.(i).#b1.#b0) : (t1 array, _) idx_mut) next_el.#b1.#b0;
    mark_test_run 568;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 568 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*********************************************)
  (*   t3 = #{ string; #{ string; string } }   *)
  (*********************************************)
  let eq = (fun (#{ a3 = a31; b3 = b31 } : t3) (#{ a3 = a32; b3 = b32 } : t3) -> (fun a b -> String.equal (globalize a) (globalize b)) a31 a32 && (fun (#{ a2 = a21; b2 = b21 } : t2) (#{ a2 = a22; b2 = b22 } : t2) -> (fun a b -> String.equal (globalize a) (globalize b)) a21 a22 && (fun a b -> String.equal (globalize a) (globalize b)) b21 b22) b31 b32) in
  let mk_value i = (#{ a3 = Int.to_string (i + 0); b3 = (#{ a2 = Int.to_string (i + 1); b2 = Int.to_string (i + 2) } : t2) } : t3) in
  (* 1. Create an array of size [size] *)
  let a : t3 array = makearray_dynamic_local size (#{ a3 = "0"; b3 = (#{ a2 = "1"; b2 = "2" } : t2) } : t3) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 569;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 569 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 570;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 570 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a3 *)
    let el = #{ el with a3 = next_el.#a3 } in
    set_idx_mut a ((.(i).#a3) : (t3 array, _) idx_mut) next_el.#a3;
    mark_test_run 571;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 571 failed %d %d" size i;
    (* .#b3 *)
    let el = #{ el with b3 = next_el.#b3 } in
    set_idx_mut a ((.(i).#b3) : (t3 array, _) idx_mut) next_el.#b3;
    mark_test_run 572;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 572 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#b3.#a2 *)
    let el = #{ el with b3 = #{ el.#b3 with a2 = next_el.#b3.#a2 } } in
    set_idx_mut a ((.(i).#b3.#a2) : (t3 array, _) idx_mut) next_el.#b3.#a2;
    mark_test_run 573;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 573 failed %d %d" size i;
    (* .#b3.#b2 *)
    let el = #{ el with b3 = #{ el.#b3 with b2 = next_el.#b3.#b2 } } in
    set_idx_mut a ((.(i).#b3.#b2) : (t3 array, _) idx_mut) next_el.#b3.#b2;
    mark_test_run 574;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 574 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*********************************************)
  (*   t4 = #{ #{ int64#; int64# }; int64# }   *)
  (*********************************************)
  let eq = (fun (#{ a4 = a41; b4 = b41 } : t4) (#{ a4 = a42; b4 = b42 } : t4) -> (fun (#{ a0 = a01; b0 = b01 } : t0) (#{ a0 = a02; b0 = b02 } : t0) -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a01 a02 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b01 b02) a41 a42 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b41 b42) in
  let mk_value i = (#{ a4 = (#{ a0 = Int64_u.of_int (i + 0); b0 = Int64_u.of_int (i + 1) } : t0); b4 = Int64_u.of_int (i + 2) } : t4) in
  (* 1. Create an array of size [size] *)
  let a : t4 array = makearray_dynamic_local size (#{ a4 = (#{ a0 = #0L; b0 = #1L } : t0); b4 = #2L } : t4) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 575;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 575 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 576;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 576 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a4 *)
    let el = #{ el with a4 = next_el.#a4 } in
    set_idx_mut a ((.(i).#a4) : (t4 array, _) idx_mut) next_el.#a4;
    mark_test_run 577;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 577 failed %d %d" size i;
    (* .#b4 *)
    let el = #{ el with b4 = next_el.#b4 } in
    set_idx_mut a ((.(i).#b4) : (t4 array, _) idx_mut) next_el.#b4;
    mark_test_run 578;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 578 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a4.#a0 *)
    let el = #{ el with a4 = #{ el.#a4 with a0 = next_el.#a4.#a0 } } in
    set_idx_mut a ((.(i).#a4.#a0) : (t4 array, _) idx_mut) next_el.#a4.#a0;
    mark_test_run 579;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 579 failed %d %d" size i;
    (* .#a4.#b0 *)
    let el = #{ el with a4 = #{ el.#a4 with b0 = next_el.#a4.#b0 } } in
    set_idx_mut a ((.(i).#a4.#b0) : (t4 array, _) idx_mut) next_el.#a4.#b0;
    mark_test_run 580;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 580 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*********************************************)
  (*   t5 = #{ #{ string; string }; string }   *)
  (*********************************************)
  let eq = (fun (#{ a5 = a51; b5 = b51 } : t5) (#{ a5 = a52; b5 = b52 } : t5) -> (fun (#{ a2 = a21; b2 = b21 } : t2) (#{ a2 = a22; b2 = b22 } : t2) -> (fun a b -> String.equal (globalize a) (globalize b)) a21 a22 && (fun a b -> String.equal (globalize a) (globalize b)) b21 b22) a51 a52 && (fun a b -> String.equal (globalize a) (globalize b)) b51 b52) in
  let mk_value i = (#{ a5 = (#{ a2 = Int.to_string (i + 0); b2 = Int.to_string (i + 1) } : t2); b5 = Int.to_string (i + 2) } : t5) in
  (* 1. Create an array of size [size] *)
  let a : t5 array = makearray_dynamic_local size (#{ a5 = (#{ a2 = "0"; b2 = "1" } : t2); b5 = "2" } : t5) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 581;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 581 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 582;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 582 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a5 *)
    let el = #{ el with a5 = next_el.#a5 } in
    set_idx_mut a ((.(i).#a5) : (t5 array, _) idx_mut) next_el.#a5;
    mark_test_run 583;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 583 failed %d %d" size i;
    (* .#b5 *)
    let el = #{ el with b5 = next_el.#b5 } in
    set_idx_mut a ((.(i).#b5) : (t5 array, _) idx_mut) next_el.#b5;
    mark_test_run 584;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 584 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a5.#a2 *)
    let el = #{ el with a5 = #{ el.#a5 with a2 = next_el.#a5.#a2 } } in
    set_idx_mut a ((.(i).#a5.#a2) : (t5 array, _) idx_mut) next_el.#a5.#a2;
    mark_test_run 585;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 585 failed %d %d" size i;
    (* .#a5.#b2 *)
    let el = #{ el with a5 = #{ el.#a5 with b2 = next_el.#a5.#b2 } } in
    set_idx_mut a ((.(i).#a5.#b2) : (t5 array, _) idx_mut) next_el.#a5.#b2;
    mark_test_run 586;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 586 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (***********)
  (*   int   *)
  (***********)
  let eq = (fun a b -> Int.equal a b) in
  let mk_value i = (i + 0) in
  (* 1. Create an array of size [size] *)
  let a : int array = makearray_dynamic_local size 0 in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 587;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 587 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 588;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 588 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    ()
  done;
  Gc.compact ();

  (*************)
  (*   int64   *)
  (*************)
  let eq = (fun a b -> Int64.equal (globalize a) (globalize b)) in
  let mk_value i = Int64.of_int (i + 0) in
  (* 1. Create an array of size [size] *)
  let a : int64 array = makearray_dynamic_local size 0L in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 589;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 589 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 590;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 590 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    ()
  done;
  Gc.compact ();

  (**************)
  (*   int32#   *)
  (**************)
  let eq = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) in
  let mk_value i = Int32_u.of_int (i + 0) in
  (* 1. Create an array of size [size] *)
  let a : int32# array = makearray_dynamic_local size #0l in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 591;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 591 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 592;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 592 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    ()
  done;
  Gc.compact ();

  (*********************)
  (*   t6 = #{ int }   *)
  (*********************)
  let eq = (fun (#{ a6 = a61 } : t6) (#{ a6 = a62 } : t6) -> (fun a b -> Int.equal a b) a61 a62) in
  let mk_value i = (#{ a6 = (i + 0) } : t6) in
  (* 1. Create an array of size [size] *)
  let a : t6 array = makearray_dynamic_local size (#{ a6 = 0 } : t6) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 593;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 593 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 594;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 594 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a6 *)
    let el = #{ el with a6 = next_el.#a6 } in
    set_idx_mut a ((.(i).#a6) : (t6 array, _) idx_mut) next_el.#a6;
    mark_test_run 595;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 595 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (***********************)
  (*   t7 = #{ int64 }   *)
  (***********************)
  let eq = (fun (#{ a7 = a71 } : t7) (#{ a7 = a72 } : t7) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a71 a72) in
  let mk_value i = (#{ a7 = Int64.of_int (i + 0) } : t7) in
  (* 1. Create an array of size [size] *)
  let a : t7 array = makearray_dynamic_local size (#{ a7 = 0L } : t7) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 596;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 596 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 597;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 597 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a7 *)
    let el = #{ el with a7 = next_el.#a7 } in
    set_idx_mut a ((.(i).#a7) : (t7 array, _) idx_mut) next_el.#a7;
    mark_test_run 598;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 598 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************)
  (*   t8 = #{ int32# }   *)
  (************************)
  let eq = (fun (#{ a8 = a81 } : t8) (#{ a8 = a82 } : t8) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a81 a82) in
  let mk_value i = (#{ a8 = Int32_u.of_int (i + 0) } : t8) in
  (* 1. Create an array of size [size] *)
  let a : t8 array = makearray_dynamic_local size (#{ a8 = #0l } : t8) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 599;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 599 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 600;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 600 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a8 *)
    let el = #{ el with a8 = next_el.#a8 } in
    set_idx_mut a ((.(i).#a8) : (t8 array, _) idx_mut) next_el.#a8;
    mark_test_run 601;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 601 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**************************)
  (*   t9 = #{ int; int }   *)
  (**************************)
  let eq = (fun (#{ a9 = a91; b9 = b91 } : t9) (#{ a9 = a92; b9 = b92 } : t9) -> (fun a b -> Int.equal a b) a91 a92 && (fun a b -> Int.equal a b) b91 b92) in
  let mk_value i = (#{ a9 = (i + 0); b9 = (i + 1) } : t9) in
  (* 1. Create an array of size [size] *)
  let a : t9 array = makearray_dynamic_local size (#{ a9 = 0; b9 = 1 } : t9) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 602;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 602 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 603;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 603 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a9 *)
    let el = #{ el with a9 = next_el.#a9 } in
    set_idx_mut a ((.(i).#a9) : (t9 array, _) idx_mut) next_el.#a9;
    mark_test_run 604;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 604 failed %d %d" size i;
    (* .#b9 *)
    let el = #{ el with b9 = next_el.#b9 } in
    set_idx_mut a ((.(i).#b9) : (t9 array, _) idx_mut) next_el.#b9;
    mark_test_run 605;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 605 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*****************************)
  (*   t10 = #{ int; int64 }   *)
  (*****************************)
  let eq = (fun (#{ a10 = a101; b10 = b101 } : t10) (#{ a10 = a102; b10 = b102 } : t10) -> (fun a b -> Int.equal a b) a101 a102 && (fun a b -> Int64.equal (globalize a) (globalize b)) b101 b102) in
  let mk_value i = (#{ a10 = (i + 0); b10 = Int64.of_int (i + 1) } : t10) in
  (* 1. Create an array of size [size] *)
  let a : t10 array = makearray_dynamic_local size (#{ a10 = 0; b10 = 1L } : t10) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 606;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 606 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 607;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 607 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a10 *)
    let el = #{ el with a10 = next_el.#a10 } in
    set_idx_mut a ((.(i).#a10) : (t10 array, _) idx_mut) next_el.#a10;
    mark_test_run 608;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 608 failed %d %d" size i;
    (* .#b10 *)
    let el = #{ el with b10 = next_el.#b10 } in
    set_idx_mut a ((.(i).#b10) : (t10 array, _) idx_mut) next_el.#b10;
    mark_test_run 609;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 609 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (******************************)
  (*   t11 = #{ int; int32# }   *)
  (******************************)
  let eq = (fun (#{ a11 = a111; b11 = b111 } : t11) (#{ a11 = a112; b11 = b112 } : t11) -> (fun a b -> Int.equal a b) a111 a112 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b111 b112) in
  let mk_value i = (#{ a11 = (i + 0); b11 = Int32_u.of_int (i + 1) } : t11) in
  (* 1. Create an array of size [size] *)
  let a : t11 array = makearray_dynamic_local size (#{ a11 = 0; b11 = #1l } : t11) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 610;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 610 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 611;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 611 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a11 *)
    let el = #{ el with a11 = next_el.#a11 } in
    set_idx_mut a ((.(i).#a11) : (t11 array, _) idx_mut) next_el.#a11;
    mark_test_run 612;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 612 failed %d %d" size i;
    (* .#b11 *)
    let el = #{ el with b11 = next_el.#b11 } in
    set_idx_mut a ((.(i).#b11) : (t11 array, _) idx_mut) next_el.#b11;
    mark_test_run 613;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 613 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*****************************)
  (*   t12 = #{ int; float }   *)
  (*****************************)
  let eq = (fun (#{ a12 = a121; b12 = b121 } : t12) (#{ a12 = a122; b12 = b122 } : t12) -> (fun a b -> Int.equal a b) a121 a122 && (fun a b -> Float.equal (globalize a) (globalize b)) b121 b122) in
  let mk_value i = (#{ a12 = (i + 0); b12 = Float.of_int (i + 1) } : t12) in
  (* 1. Create an array of size [size] *)
  let a : t12 array = makearray_dynamic_local size (#{ a12 = 0; b12 = 1. } : t12) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 614;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 614 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 615;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 615 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a12 *)
    let el = #{ el with a12 = next_el.#a12 } in
    set_idx_mut a ((.(i).#a12) : (t12 array, _) idx_mut) next_el.#a12;
    mark_test_run 616;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 616 failed %d %d" size i;
    (* .#b12 *)
    let el = #{ el with b12 = next_el.#b12 } in
    set_idx_mut a ((.(i).#b12) : (t12 array, _) idx_mut) next_el.#b12;
    mark_test_run 617;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 617 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*****************************)
  (*   t13 = #{ int64; int }   *)
  (*****************************)
  let eq = (fun (#{ a13 = a131; b13 = b131 } : t13) (#{ a13 = a132; b13 = b132 } : t13) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a131 a132 && (fun a b -> Int.equal a b) b131 b132) in
  let mk_value i = (#{ a13 = Int64.of_int (i + 0); b13 = (i + 1) } : t13) in
  (* 1. Create an array of size [size] *)
  let a : t13 array = makearray_dynamic_local size (#{ a13 = 0L; b13 = 1 } : t13) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 618;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 618 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 619;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 619 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a13 *)
    let el = #{ el with a13 = next_el.#a13 } in
    set_idx_mut a ((.(i).#a13) : (t13 array, _) idx_mut) next_el.#a13;
    mark_test_run 620;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 620 failed %d %d" size i;
    (* .#b13 *)
    let el = #{ el with b13 = next_el.#b13 } in
    set_idx_mut a ((.(i).#b13) : (t13 array, _) idx_mut) next_el.#b13;
    mark_test_run 621;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 621 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*******************************)
  (*   t14 = #{ int64; int64 }   *)
  (*******************************)
  let eq = (fun (#{ a14 = a141; b14 = b141 } : t14) (#{ a14 = a142; b14 = b142 } : t14) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a141 a142 && (fun a b -> Int64.equal (globalize a) (globalize b)) b141 b142) in
  let mk_value i = (#{ a14 = Int64.of_int (i + 0); b14 = Int64.of_int (i + 1) } : t14) in
  (* 1. Create an array of size [size] *)
  let a : t14 array = makearray_dynamic_local size (#{ a14 = 0L; b14 = 1L } : t14) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 622;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 622 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 623;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 623 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a14 *)
    let el = #{ el with a14 = next_el.#a14 } in
    set_idx_mut a ((.(i).#a14) : (t14 array, _) idx_mut) next_el.#a14;
    mark_test_run 624;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 624 failed %d %d" size i;
    (* .#b14 *)
    let el = #{ el with b14 = next_el.#b14 } in
    set_idx_mut a ((.(i).#b14) : (t14 array, _) idx_mut) next_el.#b14;
    mark_test_run 625;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 625 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*******************************)
  (*   t15 = #{ int64; float }   *)
  (*******************************)
  let eq = (fun (#{ a15 = a151; b15 = b151 } : t15) (#{ a15 = a152; b15 = b152 } : t15) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a151 a152 && (fun a b -> Float.equal (globalize a) (globalize b)) b151 b152) in
  let mk_value i = (#{ a15 = Int64.of_int (i + 0); b15 = Float.of_int (i + 1) } : t15) in
  (* 1. Create an array of size [size] *)
  let a : t15 array = makearray_dynamic_local size (#{ a15 = 0L; b15 = 1. } : t15) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 626;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 626 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 627;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 627 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a15 *)
    let el = #{ el with a15 = next_el.#a15 } in
    set_idx_mut a ((.(i).#a15) : (t15 array, _) idx_mut) next_el.#a15;
    mark_test_run 628;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 628 failed %d %d" size i;
    (* .#b15 *)
    let el = #{ el with b15 = next_el.#b15 } in
    set_idx_mut a ((.(i).#b15) : (t15 array, _) idx_mut) next_el.#b15;
    mark_test_run 629;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 629 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*********************************)
  (*   t16 = #{ int32#; int32# }   *)
  (*********************************)
  let eq = (fun (#{ a16 = a161; b16 = b161 } : t16) (#{ a16 = a162; b16 = b162 } : t16) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a161 a162 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b161 b162) in
  let mk_value i = (#{ a16 = Int32_u.of_int (i + 0); b16 = Int32_u.of_int (i + 1) } : t16) in
  (* 1. Create an array of size [size] *)
  let a : t16 array = makearray_dynamic_local size (#{ a16 = #0l; b16 = #1l } : t16) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 630;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 630 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 631;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 631 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a16 *)
    let el = #{ el with a16 = next_el.#a16 } in
    set_idx_mut a ((.(i).#a16) : (t16 array, _) idx_mut) next_el.#a16;
    mark_test_run 632;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 632 failed %d %d" size i;
    (* .#b16 *)
    let el = #{ el with b16 = next_el.#b16 } in
    set_idx_mut a ((.(i).#b16) : (t16 array, _) idx_mut) next_el.#b16;
    mark_test_run 633;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 633 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*****************************)
  (*   t17 = #{ float; int }   *)
  (*****************************)
  let eq = (fun (#{ a17 = a171; b17 = b171 } : t17) (#{ a17 = a172; b17 = b172 } : t17) -> (fun a b -> Float.equal (globalize a) (globalize b)) a171 a172 && (fun a b -> Int.equal a b) b171 b172) in
  let mk_value i = (#{ a17 = Float.of_int (i + 0); b17 = (i + 1) } : t17) in
  (* 1. Create an array of size [size] *)
  let a : t17 array = makearray_dynamic_local size (#{ a17 = 0.; b17 = 1 } : t17) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 634;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 634 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 635;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 635 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a17 *)
    let el = #{ el with a17 = next_el.#a17 } in
    set_idx_mut a ((.(i).#a17) : (t17 array, _) idx_mut) next_el.#a17;
    mark_test_run 636;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 636 failed %d %d" size i;
    (* .#b17 *)
    let el = #{ el with b17 = next_el.#b17 } in
    set_idx_mut a ((.(i).#b17) : (t17 array, _) idx_mut) next_el.#b17;
    mark_test_run 637;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 637 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*******************************)
  (*   t18 = #{ float; int64 }   *)
  (*******************************)
  let eq = (fun (#{ a18 = a181; b18 = b181 } : t18) (#{ a18 = a182; b18 = b182 } : t18) -> (fun a b -> Float.equal (globalize a) (globalize b)) a181 a182 && (fun a b -> Int64.equal (globalize a) (globalize b)) b181 b182) in
  let mk_value i = (#{ a18 = Float.of_int (i + 0); b18 = Int64.of_int (i + 1) } : t18) in
  (* 1. Create an array of size [size] *)
  let a : t18 array = makearray_dynamic_local size (#{ a18 = 0.; b18 = 1L } : t18) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 638;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 638 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 639;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 639 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a18 *)
    let el = #{ el with a18 = next_el.#a18 } in
    set_idx_mut a ((.(i).#a18) : (t18 array, _) idx_mut) next_el.#a18;
    mark_test_run 640;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 640 failed %d %d" size i;
    (* .#b18 *)
    let el = #{ el with b18 = next_el.#b18 } in
    set_idx_mut a ((.(i).#b18) : (t18 array, _) idx_mut) next_el.#b18;
    mark_test_run 641;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 641 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*******************************)
  (*   t19 = #{ float; float }   *)
  (*******************************)
  let eq = (fun (#{ a19 = a191; b19 = b191 } : t19) (#{ a19 = a192; b19 = b192 } : t19) -> (fun a b -> Float.equal (globalize a) (globalize b)) a191 a192 && (fun a b -> Float.equal (globalize a) (globalize b)) b191 b192) in
  let mk_value i = (#{ a19 = Float.of_int (i + 0); b19 = Float.of_int (i + 1) } : t19) in
  (* 1. Create an array of size [size] *)
  let a : t19 array = makearray_dynamic_local size (#{ a19 = 0.; b19 = 1. } : t19) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 642;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 642 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 643;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 643 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a19 *)
    let el = #{ el with a19 = next_el.#a19 } in
    set_idx_mut a ((.(i).#a19) : (t19 array, _) idx_mut) next_el.#a19;
    mark_test_run 644;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 644 failed %d %d" size i;
    (* .#b19 *)
    let el = #{ el with b19 = next_el.#b19 } in
    set_idx_mut a ((.(i).#b19) : (t19 array, _) idx_mut) next_el.#b19;
    mark_test_run 645;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 645 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (***************************)
  (*   t20 = #{ #{ int } }   *)
  (***************************)
  let eq = (fun (#{ a20 = a201 } : t20) (#{ a20 = a202 } : t20) -> (fun (#{ a6 = a61 } : t6) (#{ a6 = a62 } : t6) -> (fun a b -> Int.equal a b) a61 a62) a201 a202) in
  let mk_value i = (#{ a20 = (#{ a6 = (i + 0) } : t6) } : t20) in
  (* 1. Create an array of size [size] *)
  let a : t20 array = makearray_dynamic_local size (#{ a20 = (#{ a6 = 0 } : t6) } : t20) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 646;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 646 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 647;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 647 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a20 *)
    let el = #{ el with a20 = next_el.#a20 } in
    set_idx_mut a ((.(i).#a20) : (t20 array, _) idx_mut) next_el.#a20;
    mark_test_run 648;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 648 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a20.#a6 *)
    let el = #{ el with a20 = #{ el.#a20 with a6 = next_el.#a20.#a6 } } in
    set_idx_mut a ((.(i).#a20.#a6) : (t20 array, _) idx_mut) next_el.#a20.#a6;
    mark_test_run 649;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 649 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*****************************)
  (*   t21 = #{ #{ int64 } }   *)
  (*****************************)
  let eq = (fun (#{ a21 = a211 } : t21) (#{ a21 = a212 } : t21) -> (fun (#{ a7 = a71 } : t7) (#{ a7 = a72 } : t7) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a71 a72) a211 a212) in
  let mk_value i = (#{ a21 = (#{ a7 = Int64.of_int (i + 0) } : t7) } : t21) in
  (* 1. Create an array of size [size] *)
  let a : t21 array = makearray_dynamic_local size (#{ a21 = (#{ a7 = 0L } : t7) } : t21) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 650;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 650 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 651;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 651 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a21 *)
    let el = #{ el with a21 = next_el.#a21 } in
    set_idx_mut a ((.(i).#a21) : (t21 array, _) idx_mut) next_el.#a21;
    mark_test_run 652;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 652 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a21.#a7 *)
    let el = #{ el with a21 = #{ el.#a21 with a7 = next_el.#a21.#a7 } } in
    set_idx_mut a ((.(i).#a21.#a7) : (t21 array, _) idx_mut) next_el.#a21.#a7;
    mark_test_run 653;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 653 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (******************************)
  (*   t22 = #{ #{ int32# } }   *)
  (******************************)
  let eq = (fun (#{ a22 = a221 } : t22) (#{ a22 = a222 } : t22) -> (fun (#{ a8 = a81 } : t8) (#{ a8 = a82 } : t8) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a81 a82) a221 a222) in
  let mk_value i = (#{ a22 = (#{ a8 = Int32_u.of_int (i + 0) } : t8) } : t22) in
  (* 1. Create an array of size [size] *)
  let a : t22 array = makearray_dynamic_local size (#{ a22 = (#{ a8 = #0l } : t8) } : t22) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 654;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 654 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 655;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 655 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a22 *)
    let el = #{ el with a22 = next_el.#a22 } in
    set_idx_mut a ((.(i).#a22) : (t22 array, _) idx_mut) next_el.#a22;
    mark_test_run 656;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 656 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a22.#a8 *)
    let el = #{ el with a22 = #{ el.#a22 with a8 = next_el.#a22.#a8 } } in
    set_idx_mut a ((.(i).#a22.#a8) : (t22 array, _) idx_mut) next_el.#a22.#a8;
    mark_test_run 657;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 657 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (********************************)
  (*   t23 = #{ int; int; int }   *)
  (********************************)
  let eq = (fun (#{ a23 = a231; b23 = b231; c23 = c231 } : t23) (#{ a23 = a232; b23 = b232; c23 = c232 } : t23) -> (fun a b -> Int.equal a b) a231 a232 && (fun a b -> Int.equal a b) b231 b232 && (fun a b -> Int.equal a b) c231 c232) in
  let mk_value i = (#{ a23 = (i + 0); b23 = (i + 1); c23 = (i + 2) } : t23) in
  (* 1. Create an array of size [size] *)
  let a : t23 array = makearray_dynamic_local size (#{ a23 = 0; b23 = 1; c23 = 2 } : t23) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 658;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 658 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 659;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 659 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a23 *)
    let el = #{ el with a23 = next_el.#a23 } in
    set_idx_mut a ((.(i).#a23) : (t23 array, _) idx_mut) next_el.#a23;
    mark_test_run 660;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 660 failed %d %d" size i;
    (* .#b23 *)
    let el = #{ el with b23 = next_el.#b23 } in
    set_idx_mut a ((.(i).#b23) : (t23 array, _) idx_mut) next_el.#b23;
    mark_test_run 661;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 661 failed %d %d" size i;
    (* .#c23 *)
    let el = #{ el with c23 = next_el.#c23 } in
    set_idx_mut a ((.(i).#c23) : (t23 array, _) idx_mut) next_el.#c23;
    mark_test_run 662;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 662 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t24 = #{ int; int; int64 }   *)
  (**********************************)
  let eq = (fun (#{ a24 = a241; b24 = b241; c24 = c241 } : t24) (#{ a24 = a242; b24 = b242; c24 = c242 } : t24) -> (fun a b -> Int.equal a b) a241 a242 && (fun a b -> Int.equal a b) b241 b242 && (fun a b -> Int64.equal (globalize a) (globalize b)) c241 c242) in
  let mk_value i = (#{ a24 = (i + 0); b24 = (i + 1); c24 = Int64.of_int (i + 2) } : t24) in
  (* 1. Create an array of size [size] *)
  let a : t24 array = makearray_dynamic_local size (#{ a24 = 0; b24 = 1; c24 = 2L } : t24) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 663;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 663 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 664;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 664 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a24 *)
    let el = #{ el with a24 = next_el.#a24 } in
    set_idx_mut a ((.(i).#a24) : (t24 array, _) idx_mut) next_el.#a24;
    mark_test_run 665;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 665 failed %d %d" size i;
    (* .#b24 *)
    let el = #{ el with b24 = next_el.#b24 } in
    set_idx_mut a ((.(i).#b24) : (t24 array, _) idx_mut) next_el.#b24;
    mark_test_run 666;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 666 failed %d %d" size i;
    (* .#c24 *)
    let el = #{ el with c24 = next_el.#c24 } in
    set_idx_mut a ((.(i).#c24) : (t24 array, _) idx_mut) next_el.#c24;
    mark_test_run 667;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 667 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (***********************************)
  (*   t25 = #{ int; int; int32# }   *)
  (***********************************)
  let eq = (fun (#{ a25 = a251; b25 = b251; c25 = c251 } : t25) (#{ a25 = a252; b25 = b252; c25 = c252 } : t25) -> (fun a b -> Int.equal a b) a251 a252 && (fun a b -> Int.equal a b) b251 b252 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) c251 c252) in
  let mk_value i = (#{ a25 = (i + 0); b25 = (i + 1); c25 = Int32_u.of_int (i + 2) } : t25) in
  (* 1. Create an array of size [size] *)
  let a : t25 array = makearray_dynamic_local size (#{ a25 = 0; b25 = 1; c25 = #2l } : t25) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 668;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 668 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 669;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 669 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a25 *)
    let el = #{ el with a25 = next_el.#a25 } in
    set_idx_mut a ((.(i).#a25) : (t25 array, _) idx_mut) next_el.#a25;
    mark_test_run 670;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 670 failed %d %d" size i;
    (* .#b25 *)
    let el = #{ el with b25 = next_el.#b25 } in
    set_idx_mut a ((.(i).#b25) : (t25 array, _) idx_mut) next_el.#b25;
    mark_test_run 671;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 671 failed %d %d" size i;
    (* .#c25 *)
    let el = #{ el with c25 = next_el.#c25 } in
    set_idx_mut a ((.(i).#c25) : (t25 array, _) idx_mut) next_el.#c25;
    mark_test_run 672;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 672 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t26 = #{ int; int; float }   *)
  (**********************************)
  let eq = (fun (#{ a26 = a261; b26 = b261; c26 = c261 } : t26) (#{ a26 = a262; b26 = b262; c26 = c262 } : t26) -> (fun a b -> Int.equal a b) a261 a262 && (fun a b -> Int.equal a b) b261 b262 && (fun a b -> Float.equal (globalize a) (globalize b)) c261 c262) in
  let mk_value i = (#{ a26 = (i + 0); b26 = (i + 1); c26 = Float.of_int (i + 2) } : t26) in
  (* 1. Create an array of size [size] *)
  let a : t26 array = makearray_dynamic_local size (#{ a26 = 0; b26 = 1; c26 = 2. } : t26) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 673;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 673 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 674;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 674 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a26 *)
    let el = #{ el with a26 = next_el.#a26 } in
    set_idx_mut a ((.(i).#a26) : (t26 array, _) idx_mut) next_el.#a26;
    mark_test_run 675;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 675 failed %d %d" size i;
    (* .#b26 *)
    let el = #{ el with b26 = next_el.#b26 } in
    set_idx_mut a ((.(i).#b26) : (t26 array, _) idx_mut) next_el.#b26;
    mark_test_run 676;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 676 failed %d %d" size i;
    (* .#c26 *)
    let el = #{ el with c26 = next_el.#c26 } in
    set_idx_mut a ((.(i).#c26) : (t26 array, _) idx_mut) next_el.#c26;
    mark_test_run 677;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 677 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t27 = #{ int; int64; int }   *)
  (**********************************)
  let eq = (fun (#{ a27 = a271; b27 = b271; c27 = c271 } : t27) (#{ a27 = a272; b27 = b272; c27 = c272 } : t27) -> (fun a b -> Int.equal a b) a271 a272 && (fun a b -> Int64.equal (globalize a) (globalize b)) b271 b272 && (fun a b -> Int.equal a b) c271 c272) in
  let mk_value i = (#{ a27 = (i + 0); b27 = Int64.of_int (i + 1); c27 = (i + 2) } : t27) in
  (* 1. Create an array of size [size] *)
  let a : t27 array = makearray_dynamic_local size (#{ a27 = 0; b27 = 1L; c27 = 2 } : t27) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 678;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 678 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 679;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 679 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a27 *)
    let el = #{ el with a27 = next_el.#a27 } in
    set_idx_mut a ((.(i).#a27) : (t27 array, _) idx_mut) next_el.#a27;
    mark_test_run 680;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 680 failed %d %d" size i;
    (* .#b27 *)
    let el = #{ el with b27 = next_el.#b27 } in
    set_idx_mut a ((.(i).#b27) : (t27 array, _) idx_mut) next_el.#b27;
    mark_test_run 681;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 681 failed %d %d" size i;
    (* .#c27 *)
    let el = #{ el with c27 = next_el.#c27 } in
    set_idx_mut a ((.(i).#c27) : (t27 array, _) idx_mut) next_el.#c27;
    mark_test_run 682;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 682 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t28 = #{ int; int64; int64 }   *)
  (************************************)
  let eq = (fun (#{ a28 = a281; b28 = b281; c28 = c281 } : t28) (#{ a28 = a282; b28 = b282; c28 = c282 } : t28) -> (fun a b -> Int.equal a b) a281 a282 && (fun a b -> Int64.equal (globalize a) (globalize b)) b281 b282 && (fun a b -> Int64.equal (globalize a) (globalize b)) c281 c282) in
  let mk_value i = (#{ a28 = (i + 0); b28 = Int64.of_int (i + 1); c28 = Int64.of_int (i + 2) } : t28) in
  (* 1. Create an array of size [size] *)
  let a : t28 array = makearray_dynamic_local size (#{ a28 = 0; b28 = 1L; c28 = 2L } : t28) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 683;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 683 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 684;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 684 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a28 *)
    let el = #{ el with a28 = next_el.#a28 } in
    set_idx_mut a ((.(i).#a28) : (t28 array, _) idx_mut) next_el.#a28;
    mark_test_run 685;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 685 failed %d %d" size i;
    (* .#b28 *)
    let el = #{ el with b28 = next_el.#b28 } in
    set_idx_mut a ((.(i).#b28) : (t28 array, _) idx_mut) next_el.#b28;
    mark_test_run 686;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 686 failed %d %d" size i;
    (* .#c28 *)
    let el = #{ el with c28 = next_el.#c28 } in
    set_idx_mut a ((.(i).#c28) : (t28 array, _) idx_mut) next_el.#c28;
    mark_test_run 687;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 687 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t29 = #{ int; int64; float }   *)
  (************************************)
  let eq = (fun (#{ a29 = a291; b29 = b291; c29 = c291 } : t29) (#{ a29 = a292; b29 = b292; c29 = c292 } : t29) -> (fun a b -> Int.equal a b) a291 a292 && (fun a b -> Int64.equal (globalize a) (globalize b)) b291 b292 && (fun a b -> Float.equal (globalize a) (globalize b)) c291 c292) in
  let mk_value i = (#{ a29 = (i + 0); b29 = Int64.of_int (i + 1); c29 = Float.of_int (i + 2) } : t29) in
  (* 1. Create an array of size [size] *)
  let a : t29 array = makearray_dynamic_local size (#{ a29 = 0; b29 = 1L; c29 = 2. } : t29) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 688;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 688 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 689;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 689 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a29 *)
    let el = #{ el with a29 = next_el.#a29 } in
    set_idx_mut a ((.(i).#a29) : (t29 array, _) idx_mut) next_el.#a29;
    mark_test_run 690;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 690 failed %d %d" size i;
    (* .#b29 *)
    let el = #{ el with b29 = next_el.#b29 } in
    set_idx_mut a ((.(i).#b29) : (t29 array, _) idx_mut) next_el.#b29;
    mark_test_run 691;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 691 failed %d %d" size i;
    (* .#c29 *)
    let el = #{ el with c29 = next_el.#c29 } in
    set_idx_mut a ((.(i).#c29) : (t29 array, _) idx_mut) next_el.#c29;
    mark_test_run 692;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 692 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**************************************)
  (*   t30 = #{ int; int32#; int32# }   *)
  (**************************************)
  let eq = (fun (#{ a30 = a301; b30 = b301; c30 = c301 } : t30) (#{ a30 = a302; b30 = b302; c30 = c302 } : t30) -> (fun a b -> Int.equal a b) a301 a302 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b301 b302 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) c301 c302) in
  let mk_value i = (#{ a30 = (i + 0); b30 = Int32_u.of_int (i + 1); c30 = Int32_u.of_int (i + 2) } : t30) in
  (* 1. Create an array of size [size] *)
  let a : t30 array = makearray_dynamic_local size (#{ a30 = 0; b30 = #1l; c30 = #2l } : t30) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 693;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 693 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 694;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 694 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a30 *)
    let el = #{ el with a30 = next_el.#a30 } in
    set_idx_mut a ((.(i).#a30) : (t30 array, _) idx_mut) next_el.#a30;
    mark_test_run 695;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 695 failed %d %d" size i;
    (* .#b30 *)
    let el = #{ el with b30 = next_el.#b30 } in
    set_idx_mut a ((.(i).#b30) : (t30 array, _) idx_mut) next_el.#b30;
    mark_test_run 696;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 696 failed %d %d" size i;
    (* .#c30 *)
    let el = #{ el with c30 = next_el.#c30 } in
    set_idx_mut a ((.(i).#c30) : (t30 array, _) idx_mut) next_el.#c30;
    mark_test_run 697;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 697 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t31 = #{ int; float; int }   *)
  (**********************************)
  let eq = (fun (#{ a31 = a311; b31 = b311; c31 = c311 } : t31) (#{ a31 = a312; b31 = b312; c31 = c312 } : t31) -> (fun a b -> Int.equal a b) a311 a312 && (fun a b -> Float.equal (globalize a) (globalize b)) b311 b312 && (fun a b -> Int.equal a b) c311 c312) in
  let mk_value i = (#{ a31 = (i + 0); b31 = Float.of_int (i + 1); c31 = (i + 2) } : t31) in
  (* 1. Create an array of size [size] *)
  let a : t31 array = makearray_dynamic_local size (#{ a31 = 0; b31 = 1.; c31 = 2 } : t31) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 698;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 698 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 699;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 699 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a31 *)
    let el = #{ el with a31 = next_el.#a31 } in
    set_idx_mut a ((.(i).#a31) : (t31 array, _) idx_mut) next_el.#a31;
    mark_test_run 700;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 700 failed %d %d" size i;
    (* .#b31 *)
    let el = #{ el with b31 = next_el.#b31 } in
    set_idx_mut a ((.(i).#b31) : (t31 array, _) idx_mut) next_el.#b31;
    mark_test_run 701;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 701 failed %d %d" size i;
    (* .#c31 *)
    let el = #{ el with c31 = next_el.#c31 } in
    set_idx_mut a ((.(i).#c31) : (t31 array, _) idx_mut) next_el.#c31;
    mark_test_run 702;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 702 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t32 = #{ int; float; int64 }   *)
  (************************************)
  let eq = (fun (#{ a32 = a321; b32 = b321; c32 = c321 } : t32) (#{ a32 = a322; b32 = b322; c32 = c322 } : t32) -> (fun a b -> Int.equal a b) a321 a322 && (fun a b -> Float.equal (globalize a) (globalize b)) b321 b322 && (fun a b -> Int64.equal (globalize a) (globalize b)) c321 c322) in
  let mk_value i = (#{ a32 = (i + 0); b32 = Float.of_int (i + 1); c32 = Int64.of_int (i + 2) } : t32) in
  (* 1. Create an array of size [size] *)
  let a : t32 array = makearray_dynamic_local size (#{ a32 = 0; b32 = 1.; c32 = 2L } : t32) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 703;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 703 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 704;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 704 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a32 *)
    let el = #{ el with a32 = next_el.#a32 } in
    set_idx_mut a ((.(i).#a32) : (t32 array, _) idx_mut) next_el.#a32;
    mark_test_run 705;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 705 failed %d %d" size i;
    (* .#b32 *)
    let el = #{ el with b32 = next_el.#b32 } in
    set_idx_mut a ((.(i).#b32) : (t32 array, _) idx_mut) next_el.#b32;
    mark_test_run 706;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 706 failed %d %d" size i;
    (* .#c32 *)
    let el = #{ el with c32 = next_el.#c32 } in
    set_idx_mut a ((.(i).#c32) : (t32 array, _) idx_mut) next_el.#c32;
    mark_test_run 707;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 707 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t33 = #{ int; float; float }   *)
  (************************************)
  let eq = (fun (#{ a33 = a331; b33 = b331; c33 = c331 } : t33) (#{ a33 = a332; b33 = b332; c33 = c332 } : t33) -> (fun a b -> Int.equal a b) a331 a332 && (fun a b -> Float.equal (globalize a) (globalize b)) b331 b332 && (fun a b -> Float.equal (globalize a) (globalize b)) c331 c332) in
  let mk_value i = (#{ a33 = (i + 0); b33 = Float.of_int (i + 1); c33 = Float.of_int (i + 2) } : t33) in
  (* 1. Create an array of size [size] *)
  let a : t33 array = makearray_dynamic_local size (#{ a33 = 0; b33 = 1.; c33 = 2. } : t33) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 708;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 708 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 709;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 709 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a33 *)
    let el = #{ el with a33 = next_el.#a33 } in
    set_idx_mut a ((.(i).#a33) : (t33 array, _) idx_mut) next_el.#a33;
    mark_test_run 710;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 710 failed %d %d" size i;
    (* .#b33 *)
    let el = #{ el with b33 = next_el.#b33 } in
    set_idx_mut a ((.(i).#b33) : (t33 array, _) idx_mut) next_el.#b33;
    mark_test_run 711;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 711 failed %d %d" size i;
    (* .#c33 *)
    let el = #{ el with c33 = next_el.#c33 } in
    set_idx_mut a ((.(i).#c33) : (t33 array, _) idx_mut) next_el.#c33;
    mark_test_run 712;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 712 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t34 = #{ int64; int; int }   *)
  (**********************************)
  let eq = (fun (#{ a34 = a341; b34 = b341; c34 = c341 } : t34) (#{ a34 = a342; b34 = b342; c34 = c342 } : t34) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a341 a342 && (fun a b -> Int.equal a b) b341 b342 && (fun a b -> Int.equal a b) c341 c342) in
  let mk_value i = (#{ a34 = Int64.of_int (i + 0); b34 = (i + 1); c34 = (i + 2) } : t34) in
  (* 1. Create an array of size [size] *)
  let a : t34 array = makearray_dynamic_local size (#{ a34 = 0L; b34 = 1; c34 = 2 } : t34) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 713;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 713 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 714;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 714 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a34 *)
    let el = #{ el with a34 = next_el.#a34 } in
    set_idx_mut a ((.(i).#a34) : (t34 array, _) idx_mut) next_el.#a34;
    mark_test_run 715;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 715 failed %d %d" size i;
    (* .#b34 *)
    let el = #{ el with b34 = next_el.#b34 } in
    set_idx_mut a ((.(i).#b34) : (t34 array, _) idx_mut) next_el.#b34;
    mark_test_run 716;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 716 failed %d %d" size i;
    (* .#c34 *)
    let el = #{ el with c34 = next_el.#c34 } in
    set_idx_mut a ((.(i).#c34) : (t34 array, _) idx_mut) next_el.#c34;
    mark_test_run 717;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 717 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t35 = #{ int64; int; int64 }   *)
  (************************************)
  let eq = (fun (#{ a35 = a351; b35 = b351; c35 = c351 } : t35) (#{ a35 = a352; b35 = b352; c35 = c352 } : t35) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a351 a352 && (fun a b -> Int.equal a b) b351 b352 && (fun a b -> Int64.equal (globalize a) (globalize b)) c351 c352) in
  let mk_value i = (#{ a35 = Int64.of_int (i + 0); b35 = (i + 1); c35 = Int64.of_int (i + 2) } : t35) in
  (* 1. Create an array of size [size] *)
  let a : t35 array = makearray_dynamic_local size (#{ a35 = 0L; b35 = 1; c35 = 2L } : t35) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 718;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 718 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 719;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 719 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a35 *)
    let el = #{ el with a35 = next_el.#a35 } in
    set_idx_mut a ((.(i).#a35) : (t35 array, _) idx_mut) next_el.#a35;
    mark_test_run 720;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 720 failed %d %d" size i;
    (* .#b35 *)
    let el = #{ el with b35 = next_el.#b35 } in
    set_idx_mut a ((.(i).#b35) : (t35 array, _) idx_mut) next_el.#b35;
    mark_test_run 721;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 721 failed %d %d" size i;
    (* .#c35 *)
    let el = #{ el with c35 = next_el.#c35 } in
    set_idx_mut a ((.(i).#c35) : (t35 array, _) idx_mut) next_el.#c35;
    mark_test_run 722;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 722 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t36 = #{ int64; int; float }   *)
  (************************************)
  let eq = (fun (#{ a36 = a361; b36 = b361; c36 = c361 } : t36) (#{ a36 = a362; b36 = b362; c36 = c362 } : t36) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a361 a362 && (fun a b -> Int.equal a b) b361 b362 && (fun a b -> Float.equal (globalize a) (globalize b)) c361 c362) in
  let mk_value i = (#{ a36 = Int64.of_int (i + 0); b36 = (i + 1); c36 = Float.of_int (i + 2) } : t36) in
  (* 1. Create an array of size [size] *)
  let a : t36 array = makearray_dynamic_local size (#{ a36 = 0L; b36 = 1; c36 = 2. } : t36) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 723;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 723 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 724;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 724 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a36 *)
    let el = #{ el with a36 = next_el.#a36 } in
    set_idx_mut a ((.(i).#a36) : (t36 array, _) idx_mut) next_el.#a36;
    mark_test_run 725;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 725 failed %d %d" size i;
    (* .#b36 *)
    let el = #{ el with b36 = next_el.#b36 } in
    set_idx_mut a ((.(i).#b36) : (t36 array, _) idx_mut) next_el.#b36;
    mark_test_run 726;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 726 failed %d %d" size i;
    (* .#c36 *)
    let el = #{ el with c36 = next_el.#c36 } in
    set_idx_mut a ((.(i).#c36) : (t36 array, _) idx_mut) next_el.#c36;
    mark_test_run 727;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 727 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t37 = #{ int64; int64; int }   *)
  (************************************)
  let eq = (fun (#{ a37 = a371; b37 = b371; c37 = c371 } : t37) (#{ a37 = a372; b37 = b372; c37 = c372 } : t37) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a371 a372 && (fun a b -> Int64.equal (globalize a) (globalize b)) b371 b372 && (fun a b -> Int.equal a b) c371 c372) in
  let mk_value i = (#{ a37 = Int64.of_int (i + 0); b37 = Int64.of_int (i + 1); c37 = (i + 2) } : t37) in
  (* 1. Create an array of size [size] *)
  let a : t37 array = makearray_dynamic_local size (#{ a37 = 0L; b37 = 1L; c37 = 2 } : t37) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 728;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 728 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 729;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 729 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a37 *)
    let el = #{ el with a37 = next_el.#a37 } in
    set_idx_mut a ((.(i).#a37) : (t37 array, _) idx_mut) next_el.#a37;
    mark_test_run 730;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 730 failed %d %d" size i;
    (* .#b37 *)
    let el = #{ el with b37 = next_el.#b37 } in
    set_idx_mut a ((.(i).#b37) : (t37 array, _) idx_mut) next_el.#b37;
    mark_test_run 731;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 731 failed %d %d" size i;
    (* .#c37 *)
    let el = #{ el with c37 = next_el.#c37 } in
    set_idx_mut a ((.(i).#c37) : (t37 array, _) idx_mut) next_el.#c37;
    mark_test_run 732;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 732 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**************************************)
  (*   t38 = #{ int64; int64; int64 }   *)
  (**************************************)
  let eq = (fun (#{ a38 = a381; b38 = b381; c38 = c381 } : t38) (#{ a38 = a382; b38 = b382; c38 = c382 } : t38) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a381 a382 && (fun a b -> Int64.equal (globalize a) (globalize b)) b381 b382 && (fun a b -> Int64.equal (globalize a) (globalize b)) c381 c382) in
  let mk_value i = (#{ a38 = Int64.of_int (i + 0); b38 = Int64.of_int (i + 1); c38 = Int64.of_int (i + 2) } : t38) in
  (* 1. Create an array of size [size] *)
  let a : t38 array = makearray_dynamic_local size (#{ a38 = 0L; b38 = 1L; c38 = 2L } : t38) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 733;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 733 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 734;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 734 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a38 *)
    let el = #{ el with a38 = next_el.#a38 } in
    set_idx_mut a ((.(i).#a38) : (t38 array, _) idx_mut) next_el.#a38;
    mark_test_run 735;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 735 failed %d %d" size i;
    (* .#b38 *)
    let el = #{ el with b38 = next_el.#b38 } in
    set_idx_mut a ((.(i).#b38) : (t38 array, _) idx_mut) next_el.#b38;
    mark_test_run 736;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 736 failed %d %d" size i;
    (* .#c38 *)
    let el = #{ el with c38 = next_el.#c38 } in
    set_idx_mut a ((.(i).#c38) : (t38 array, _) idx_mut) next_el.#c38;
    mark_test_run 737;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 737 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**************************************)
  (*   t39 = #{ int64; int64; float }   *)
  (**************************************)
  let eq = (fun (#{ a39 = a391; b39 = b391; c39 = c391 } : t39) (#{ a39 = a392; b39 = b392; c39 = c392 } : t39) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a391 a392 && (fun a b -> Int64.equal (globalize a) (globalize b)) b391 b392 && (fun a b -> Float.equal (globalize a) (globalize b)) c391 c392) in
  let mk_value i = (#{ a39 = Int64.of_int (i + 0); b39 = Int64.of_int (i + 1); c39 = Float.of_int (i + 2) } : t39) in
  (* 1. Create an array of size [size] *)
  let a : t39 array = makearray_dynamic_local size (#{ a39 = 0L; b39 = 1L; c39 = 2. } : t39) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 738;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 738 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 739;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 739 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a39 *)
    let el = #{ el with a39 = next_el.#a39 } in
    set_idx_mut a ((.(i).#a39) : (t39 array, _) idx_mut) next_el.#a39;
    mark_test_run 740;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 740 failed %d %d" size i;
    (* .#b39 *)
    let el = #{ el with b39 = next_el.#b39 } in
    set_idx_mut a ((.(i).#b39) : (t39 array, _) idx_mut) next_el.#b39;
    mark_test_run 741;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 741 failed %d %d" size i;
    (* .#c39 *)
    let el = #{ el with c39 = next_el.#c39 } in
    set_idx_mut a ((.(i).#c39) : (t39 array, _) idx_mut) next_el.#c39;
    mark_test_run 742;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 742 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t40 = #{ int64; float; int }   *)
  (************************************)
  let eq = (fun (#{ a40 = a401; b40 = b401; c40 = c401 } : t40) (#{ a40 = a402; b40 = b402; c40 = c402 } : t40) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Float.equal (globalize a) (globalize b)) b401 b402 && (fun a b -> Int.equal a b) c401 c402) in
  let mk_value i = (#{ a40 = Int64.of_int (i + 0); b40 = Float.of_int (i + 1); c40 = (i + 2) } : t40) in
  (* 1. Create an array of size [size] *)
  let a : t40 array = makearray_dynamic_local size (#{ a40 = 0L; b40 = 1.; c40 = 2 } : t40) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 743;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 743 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 744;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 744 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a40 *)
    let el = #{ el with a40 = next_el.#a40 } in
    set_idx_mut a ((.(i).#a40) : (t40 array, _) idx_mut) next_el.#a40;
    mark_test_run 745;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 745 failed %d %d" size i;
    (* .#b40 *)
    let el = #{ el with b40 = next_el.#b40 } in
    set_idx_mut a ((.(i).#b40) : (t40 array, _) idx_mut) next_el.#b40;
    mark_test_run 746;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 746 failed %d %d" size i;
    (* .#c40 *)
    let el = #{ el with c40 = next_el.#c40 } in
    set_idx_mut a ((.(i).#c40) : (t40 array, _) idx_mut) next_el.#c40;
    mark_test_run 747;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 747 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**************************************)
  (*   t41 = #{ int64; float; int64 }   *)
  (**************************************)
  let eq = (fun (#{ a41 = a411; b41 = b411; c41 = c411 } : t41) (#{ a41 = a412; b41 = b412; c41 = c412 } : t41) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a411 a412 && (fun a b -> Float.equal (globalize a) (globalize b)) b411 b412 && (fun a b -> Int64.equal (globalize a) (globalize b)) c411 c412) in
  let mk_value i = (#{ a41 = Int64.of_int (i + 0); b41 = Float.of_int (i + 1); c41 = Int64.of_int (i + 2) } : t41) in
  (* 1. Create an array of size [size] *)
  let a : t41 array = makearray_dynamic_local size (#{ a41 = 0L; b41 = 1.; c41 = 2L } : t41) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 748;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 748 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 749;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 749 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a41 *)
    let el = #{ el with a41 = next_el.#a41 } in
    set_idx_mut a ((.(i).#a41) : (t41 array, _) idx_mut) next_el.#a41;
    mark_test_run 750;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 750 failed %d %d" size i;
    (* .#b41 *)
    let el = #{ el with b41 = next_el.#b41 } in
    set_idx_mut a ((.(i).#b41) : (t41 array, _) idx_mut) next_el.#b41;
    mark_test_run 751;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 751 failed %d %d" size i;
    (* .#c41 *)
    let el = #{ el with c41 = next_el.#c41 } in
    set_idx_mut a ((.(i).#c41) : (t41 array, _) idx_mut) next_el.#c41;
    mark_test_run 752;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 752 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**************************************)
  (*   t42 = #{ int64; float; float }   *)
  (**************************************)
  let eq = (fun (#{ a42 = a421; b42 = b421; c42 = c421 } : t42) (#{ a42 = a422; b42 = b422; c42 = c422 } : t42) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422 && (fun a b -> Float.equal (globalize a) (globalize b)) c421 c422) in
  let mk_value i = (#{ a42 = Int64.of_int (i + 0); b42 = Float.of_int (i + 1); c42 = Float.of_int (i + 2) } : t42) in
  (* 1. Create an array of size [size] *)
  let a : t42 array = makearray_dynamic_local size (#{ a42 = 0L; b42 = 1.; c42 = 2. } : t42) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 753;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 753 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 754;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 754 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a42 *)
    let el = #{ el with a42 = next_el.#a42 } in
    set_idx_mut a ((.(i).#a42) : (t42 array, _) idx_mut) next_el.#a42;
    mark_test_run 755;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 755 failed %d %d" size i;
    (* .#b42 *)
    let el = #{ el with b42 = next_el.#b42 } in
    set_idx_mut a ((.(i).#b42) : (t42 array, _) idx_mut) next_el.#b42;
    mark_test_run 756;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 756 failed %d %d" size i;
    (* .#c42 *)
    let el = #{ el with c42 = next_el.#c42 } in
    set_idx_mut a ((.(i).#c42) : (t42 array, _) idx_mut) next_el.#c42;
    mark_test_run 757;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 757 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*****************************************)
  (*   t43 = #{ int32#; int32#; int32# }   *)
  (*****************************************)
  let eq = (fun (#{ a43 = a431; b43 = b431; c43 = c431 } : t43) (#{ a43 = a432; b43 = b432; c43 = c432 } : t43) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a431 a432 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b431 b432 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) c431 c432) in
  let mk_value i = (#{ a43 = Int32_u.of_int (i + 0); b43 = Int32_u.of_int (i + 1); c43 = Int32_u.of_int (i + 2) } : t43) in
  (* 1. Create an array of size [size] *)
  let a : t43 array = makearray_dynamic_local size (#{ a43 = #0l; b43 = #1l; c43 = #2l } : t43) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 758;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 758 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 759;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 759 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a43 *)
    let el = #{ el with a43 = next_el.#a43 } in
    set_idx_mut a ((.(i).#a43) : (t43 array, _) idx_mut) next_el.#a43;
    mark_test_run 760;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 760 failed %d %d" size i;
    (* .#b43 *)
    let el = #{ el with b43 = next_el.#b43 } in
    set_idx_mut a ((.(i).#b43) : (t43 array, _) idx_mut) next_el.#b43;
    mark_test_run 761;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 761 failed %d %d" size i;
    (* .#c43 *)
    let el = #{ el with c43 = next_el.#c43 } in
    set_idx_mut a ((.(i).#c43) : (t43 array, _) idx_mut) next_el.#c43;
    mark_test_run 762;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 762 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t44 = #{ float; int; int }   *)
  (**********************************)
  let eq = (fun (#{ a44 = a441; b44 = b441; c44 = c441 } : t44) (#{ a44 = a442; b44 = b442; c44 = c442 } : t44) -> (fun a b -> Float.equal (globalize a) (globalize b)) a441 a442 && (fun a b -> Int.equal a b) b441 b442 && (fun a b -> Int.equal a b) c441 c442) in
  let mk_value i = (#{ a44 = Float.of_int (i + 0); b44 = (i + 1); c44 = (i + 2) } : t44) in
  (* 1. Create an array of size [size] *)
  let a : t44 array = makearray_dynamic_local size (#{ a44 = 0.; b44 = 1; c44 = 2 } : t44) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 763;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 763 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 764;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 764 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a44 *)
    let el = #{ el with a44 = next_el.#a44 } in
    set_idx_mut a ((.(i).#a44) : (t44 array, _) idx_mut) next_el.#a44;
    mark_test_run 765;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 765 failed %d %d" size i;
    (* .#b44 *)
    let el = #{ el with b44 = next_el.#b44 } in
    set_idx_mut a ((.(i).#b44) : (t44 array, _) idx_mut) next_el.#b44;
    mark_test_run 766;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 766 failed %d %d" size i;
    (* .#c44 *)
    let el = #{ el with c44 = next_el.#c44 } in
    set_idx_mut a ((.(i).#c44) : (t44 array, _) idx_mut) next_el.#c44;
    mark_test_run 767;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 767 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t45 = #{ float; int; int64 }   *)
  (************************************)
  let eq = (fun (#{ a45 = a451; b45 = b451; c45 = c451 } : t45) (#{ a45 = a452; b45 = b452; c45 = c452 } : t45) -> (fun a b -> Float.equal (globalize a) (globalize b)) a451 a452 && (fun a b -> Int.equal a b) b451 b452 && (fun a b -> Int64.equal (globalize a) (globalize b)) c451 c452) in
  let mk_value i = (#{ a45 = Float.of_int (i + 0); b45 = (i + 1); c45 = Int64.of_int (i + 2) } : t45) in
  (* 1. Create an array of size [size] *)
  let a : t45 array = makearray_dynamic_local size (#{ a45 = 0.; b45 = 1; c45 = 2L } : t45) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 768;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 768 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 769;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 769 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a45 *)
    let el = #{ el with a45 = next_el.#a45 } in
    set_idx_mut a ((.(i).#a45) : (t45 array, _) idx_mut) next_el.#a45;
    mark_test_run 770;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 770 failed %d %d" size i;
    (* .#b45 *)
    let el = #{ el with b45 = next_el.#b45 } in
    set_idx_mut a ((.(i).#b45) : (t45 array, _) idx_mut) next_el.#b45;
    mark_test_run 771;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 771 failed %d %d" size i;
    (* .#c45 *)
    let el = #{ el with c45 = next_el.#c45 } in
    set_idx_mut a ((.(i).#c45) : (t45 array, _) idx_mut) next_el.#c45;
    mark_test_run 772;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 772 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t46 = #{ float; int; float }   *)
  (************************************)
  let eq = (fun (#{ a46 = a461; b46 = b461; c46 = c461 } : t46) (#{ a46 = a462; b46 = b462; c46 = c462 } : t46) -> (fun a b -> Float.equal (globalize a) (globalize b)) a461 a462 && (fun a b -> Int.equal a b) b461 b462 && (fun a b -> Float.equal (globalize a) (globalize b)) c461 c462) in
  let mk_value i = (#{ a46 = Float.of_int (i + 0); b46 = (i + 1); c46 = Float.of_int (i + 2) } : t46) in
  (* 1. Create an array of size [size] *)
  let a : t46 array = makearray_dynamic_local size (#{ a46 = 0.; b46 = 1; c46 = 2. } : t46) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 773;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 773 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 774;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 774 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a46 *)
    let el = #{ el with a46 = next_el.#a46 } in
    set_idx_mut a ((.(i).#a46) : (t46 array, _) idx_mut) next_el.#a46;
    mark_test_run 775;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 775 failed %d %d" size i;
    (* .#b46 *)
    let el = #{ el with b46 = next_el.#b46 } in
    set_idx_mut a ((.(i).#b46) : (t46 array, _) idx_mut) next_el.#b46;
    mark_test_run 776;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 776 failed %d %d" size i;
    (* .#c46 *)
    let el = #{ el with c46 = next_el.#c46 } in
    set_idx_mut a ((.(i).#c46) : (t46 array, _) idx_mut) next_el.#c46;
    mark_test_run 777;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 777 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t47 = #{ float; int64; int }   *)
  (************************************)
  let eq = (fun (#{ a47 = a471; b47 = b471; c47 = c471 } : t47) (#{ a47 = a472; b47 = b472; c47 = c472 } : t47) -> (fun a b -> Float.equal (globalize a) (globalize b)) a471 a472 && (fun a b -> Int64.equal (globalize a) (globalize b)) b471 b472 && (fun a b -> Int.equal a b) c471 c472) in
  let mk_value i = (#{ a47 = Float.of_int (i + 0); b47 = Int64.of_int (i + 1); c47 = (i + 2) } : t47) in
  (* 1. Create an array of size [size] *)
  let a : t47 array = makearray_dynamic_local size (#{ a47 = 0.; b47 = 1L; c47 = 2 } : t47) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 778;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 778 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 779;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 779 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a47 *)
    let el = #{ el with a47 = next_el.#a47 } in
    set_idx_mut a ((.(i).#a47) : (t47 array, _) idx_mut) next_el.#a47;
    mark_test_run 780;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 780 failed %d %d" size i;
    (* .#b47 *)
    let el = #{ el with b47 = next_el.#b47 } in
    set_idx_mut a ((.(i).#b47) : (t47 array, _) idx_mut) next_el.#b47;
    mark_test_run 781;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 781 failed %d %d" size i;
    (* .#c47 *)
    let el = #{ el with c47 = next_el.#c47 } in
    set_idx_mut a ((.(i).#c47) : (t47 array, _) idx_mut) next_el.#c47;
    mark_test_run 782;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 782 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**************************************)
  (*   t48 = #{ float; int64; int64 }   *)
  (**************************************)
  let eq = (fun (#{ a48 = a481; b48 = b481; c48 = c481 } : t48) (#{ a48 = a482; b48 = b482; c48 = c482 } : t48) -> (fun a b -> Float.equal (globalize a) (globalize b)) a481 a482 && (fun a b -> Int64.equal (globalize a) (globalize b)) b481 b482 && (fun a b -> Int64.equal (globalize a) (globalize b)) c481 c482) in
  let mk_value i = (#{ a48 = Float.of_int (i + 0); b48 = Int64.of_int (i + 1); c48 = Int64.of_int (i + 2) } : t48) in
  (* 1. Create an array of size [size] *)
  let a : t48 array = makearray_dynamic_local size (#{ a48 = 0.; b48 = 1L; c48 = 2L } : t48) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 783;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 783 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 784;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 784 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a48 *)
    let el = #{ el with a48 = next_el.#a48 } in
    set_idx_mut a ((.(i).#a48) : (t48 array, _) idx_mut) next_el.#a48;
    mark_test_run 785;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 785 failed %d %d" size i;
    (* .#b48 *)
    let el = #{ el with b48 = next_el.#b48 } in
    set_idx_mut a ((.(i).#b48) : (t48 array, _) idx_mut) next_el.#b48;
    mark_test_run 786;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 786 failed %d %d" size i;
    (* .#c48 *)
    let el = #{ el with c48 = next_el.#c48 } in
    set_idx_mut a ((.(i).#c48) : (t48 array, _) idx_mut) next_el.#c48;
    mark_test_run 787;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 787 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**************************************)
  (*   t49 = #{ float; int64; float }   *)
  (**************************************)
  let eq = (fun (#{ a49 = a491; b49 = b491; c49 = c491 } : t49) (#{ a49 = a492; b49 = b492; c49 = c492 } : t49) -> (fun a b -> Float.equal (globalize a) (globalize b)) a491 a492 && (fun a b -> Int64.equal (globalize a) (globalize b)) b491 b492 && (fun a b -> Float.equal (globalize a) (globalize b)) c491 c492) in
  let mk_value i = (#{ a49 = Float.of_int (i + 0); b49 = Int64.of_int (i + 1); c49 = Float.of_int (i + 2) } : t49) in
  (* 1. Create an array of size [size] *)
  let a : t49 array = makearray_dynamic_local size (#{ a49 = 0.; b49 = 1L; c49 = 2. } : t49) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 788;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 788 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 789;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 789 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a49 *)
    let el = #{ el with a49 = next_el.#a49 } in
    set_idx_mut a ((.(i).#a49) : (t49 array, _) idx_mut) next_el.#a49;
    mark_test_run 790;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 790 failed %d %d" size i;
    (* .#b49 *)
    let el = #{ el with b49 = next_el.#b49 } in
    set_idx_mut a ((.(i).#b49) : (t49 array, _) idx_mut) next_el.#b49;
    mark_test_run 791;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 791 failed %d %d" size i;
    (* .#c49 *)
    let el = #{ el with c49 = next_el.#c49 } in
    set_idx_mut a ((.(i).#c49) : (t49 array, _) idx_mut) next_el.#c49;
    mark_test_run 792;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 792 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t50 = #{ float; float; int }   *)
  (************************************)
  let eq = (fun (#{ a50 = a501; b50 = b501; c50 = c501 } : t50) (#{ a50 = a502; b50 = b502; c50 = c502 } : t50) -> (fun a b -> Float.equal (globalize a) (globalize b)) a501 a502 && (fun a b -> Float.equal (globalize a) (globalize b)) b501 b502 && (fun a b -> Int.equal a b) c501 c502) in
  let mk_value i = (#{ a50 = Float.of_int (i + 0); b50 = Float.of_int (i + 1); c50 = (i + 2) } : t50) in
  (* 1. Create an array of size [size] *)
  let a : t50 array = makearray_dynamic_local size (#{ a50 = 0.; b50 = 1.; c50 = 2 } : t50) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 793;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 793 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 794;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 794 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a50 *)
    let el = #{ el with a50 = next_el.#a50 } in
    set_idx_mut a ((.(i).#a50) : (t50 array, _) idx_mut) next_el.#a50;
    mark_test_run 795;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 795 failed %d %d" size i;
    (* .#b50 *)
    let el = #{ el with b50 = next_el.#b50 } in
    set_idx_mut a ((.(i).#b50) : (t50 array, _) idx_mut) next_el.#b50;
    mark_test_run 796;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 796 failed %d %d" size i;
    (* .#c50 *)
    let el = #{ el with c50 = next_el.#c50 } in
    set_idx_mut a ((.(i).#c50) : (t50 array, _) idx_mut) next_el.#c50;
    mark_test_run 797;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 797 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**************************************)
  (*   t51 = #{ float; float; int64 }   *)
  (**************************************)
  let eq = (fun (#{ a51 = a511; b51 = b511; c51 = c511 } : t51) (#{ a51 = a512; b51 = b512; c51 = c512 } : t51) -> (fun a b -> Float.equal (globalize a) (globalize b)) a511 a512 && (fun a b -> Float.equal (globalize a) (globalize b)) b511 b512 && (fun a b -> Int64.equal (globalize a) (globalize b)) c511 c512) in
  let mk_value i = (#{ a51 = Float.of_int (i + 0); b51 = Float.of_int (i + 1); c51 = Int64.of_int (i + 2) } : t51) in
  (* 1. Create an array of size [size] *)
  let a : t51 array = makearray_dynamic_local size (#{ a51 = 0.; b51 = 1.; c51 = 2L } : t51) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 798;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 798 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 799;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 799 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a51 *)
    let el = #{ el with a51 = next_el.#a51 } in
    set_idx_mut a ((.(i).#a51) : (t51 array, _) idx_mut) next_el.#a51;
    mark_test_run 800;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 800 failed %d %d" size i;
    (* .#b51 *)
    let el = #{ el with b51 = next_el.#b51 } in
    set_idx_mut a ((.(i).#b51) : (t51 array, _) idx_mut) next_el.#b51;
    mark_test_run 801;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 801 failed %d %d" size i;
    (* .#c51 *)
    let el = #{ el with c51 = next_el.#c51 } in
    set_idx_mut a ((.(i).#c51) : (t51 array, _) idx_mut) next_el.#c51;
    mark_test_run 802;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 802 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**************************************)
  (*   t52 = #{ float; float; float }   *)
  (**************************************)
  let eq = (fun (#{ a52 = a521; b52 = b521; c52 = c521 } : t52) (#{ a52 = a522; b52 = b522; c52 = c522 } : t52) -> (fun a b -> Float.equal (globalize a) (globalize b)) a521 a522 && (fun a b -> Float.equal (globalize a) (globalize b)) b521 b522 && (fun a b -> Float.equal (globalize a) (globalize b)) c521 c522) in
  let mk_value i = (#{ a52 = Float.of_int (i + 0); b52 = Float.of_int (i + 1); c52 = Float.of_int (i + 2) } : t52) in
  (* 1. Create an array of size [size] *)
  let a : t52 array = makearray_dynamic_local size (#{ a52 = 0.; b52 = 1.; c52 = 2. } : t52) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 803;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 803 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 804;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 804 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a52 *)
    let el = #{ el with a52 = next_el.#a52 } in
    set_idx_mut a ((.(i).#a52) : (t52 array, _) idx_mut) next_el.#a52;
    mark_test_run 805;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 805 failed %d %d" size i;
    (* .#b52 *)
    let el = #{ el with b52 = next_el.#b52 } in
    set_idx_mut a ((.(i).#b52) : (t52 array, _) idx_mut) next_el.#b52;
    mark_test_run 806;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 806 failed %d %d" size i;
    (* .#c52 *)
    let el = #{ el with c52 = next_el.#c52 } in
    set_idx_mut a ((.(i).#c52) : (t52 array, _) idx_mut) next_el.#c52;
    mark_test_run 807;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 807 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (********************************)
  (*   t53 = #{ int; #{ int } }   *)
  (********************************)
  let eq = (fun (#{ a53 = a531; b53 = b531 } : t53) (#{ a53 = a532; b53 = b532 } : t53) -> (fun a b -> Int.equal a b) a531 a532 && (fun (#{ a6 = a61 } : t6) (#{ a6 = a62 } : t6) -> (fun a b -> Int.equal a b) a61 a62) b531 b532) in
  let mk_value i = (#{ a53 = (i + 0); b53 = (#{ a6 = (i + 1) } : t6) } : t53) in
  (* 1. Create an array of size [size] *)
  let a : t53 array = makearray_dynamic_local size (#{ a53 = 0; b53 = (#{ a6 = 1 } : t6) } : t53) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 808;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 808 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 809;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 809 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a53 *)
    let el = #{ el with a53 = next_el.#a53 } in
    set_idx_mut a ((.(i).#a53) : (t53 array, _) idx_mut) next_el.#a53;
    mark_test_run 810;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 810 failed %d %d" size i;
    (* .#b53 *)
    let el = #{ el with b53 = next_el.#b53 } in
    set_idx_mut a ((.(i).#b53) : (t53 array, _) idx_mut) next_el.#b53;
    mark_test_run 811;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 811 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#b53.#a6 *)
    let el = #{ el with b53 = #{ el.#b53 with a6 = next_el.#b53.#a6 } } in
    set_idx_mut a ((.(i).#b53.#a6) : (t53 array, _) idx_mut) next_el.#b53.#a6;
    mark_test_run 812;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 812 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t54 = #{ int; #{ int64 } }   *)
  (**********************************)
  let eq = (fun (#{ a54 = a541; b54 = b541 } : t54) (#{ a54 = a542; b54 = b542 } : t54) -> (fun a b -> Int.equal a b) a541 a542 && (fun (#{ a7 = a71 } : t7) (#{ a7 = a72 } : t7) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a71 a72) b541 b542) in
  let mk_value i = (#{ a54 = (i + 0); b54 = (#{ a7 = Int64.of_int (i + 1) } : t7) } : t54) in
  (* 1. Create an array of size [size] *)
  let a : t54 array = makearray_dynamic_local size (#{ a54 = 0; b54 = (#{ a7 = 1L } : t7) } : t54) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 813;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 813 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 814;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 814 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a54 *)
    let el = #{ el with a54 = next_el.#a54 } in
    set_idx_mut a ((.(i).#a54) : (t54 array, _) idx_mut) next_el.#a54;
    mark_test_run 815;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 815 failed %d %d" size i;
    (* .#b54 *)
    let el = #{ el with b54 = next_el.#b54 } in
    set_idx_mut a ((.(i).#b54) : (t54 array, _) idx_mut) next_el.#b54;
    mark_test_run 816;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 816 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#b54.#a7 *)
    let el = #{ el with b54 = #{ el.#b54 with a7 = next_el.#b54.#a7 } } in
    set_idx_mut a ((.(i).#b54.#a7) : (t54 array, _) idx_mut) next_el.#b54.#a7;
    mark_test_run 817;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 817 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (***********************************)
  (*   t55 = #{ int; #{ int32# } }   *)
  (***********************************)
  let eq = (fun (#{ a55 = a551; b55 = b551 } : t55) (#{ a55 = a552; b55 = b552 } : t55) -> (fun a b -> Int.equal a b) a551 a552 && (fun (#{ a8 = a81 } : t8) (#{ a8 = a82 } : t8) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a81 a82) b551 b552) in
  let mk_value i = (#{ a55 = (i + 0); b55 = (#{ a8 = Int32_u.of_int (i + 1) } : t8) } : t55) in
  (* 1. Create an array of size [size] *)
  let a : t55 array = makearray_dynamic_local size (#{ a55 = 0; b55 = (#{ a8 = #1l } : t8) } : t55) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 818;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 818 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 819;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 819 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a55 *)
    let el = #{ el with a55 = next_el.#a55 } in
    set_idx_mut a ((.(i).#a55) : (t55 array, _) idx_mut) next_el.#a55;
    mark_test_run 820;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 820 failed %d %d" size i;
    (* .#b55 *)
    let el = #{ el with b55 = next_el.#b55 } in
    set_idx_mut a ((.(i).#b55) : (t55 array, _) idx_mut) next_el.#b55;
    mark_test_run 821;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 821 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#b55.#a8 *)
    let el = #{ el with b55 = #{ el.#b55 with a8 = next_el.#b55.#a8 } } in
    set_idx_mut a ((.(i).#b55.#a8) : (t55 array, _) idx_mut) next_el.#b55.#a8;
    mark_test_run 822;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 822 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t57 = #{ int; #{ float } }   *)
  (**********************************)
  let eq = (fun (#{ a57 = a571; b57 = b571 } : t57) (#{ a57 = a572; b57 = b572 } : t57) -> (fun a b -> Int.equal a b) a571 a572 && (fun (#{ a56 = a561 } : t56) (#{ a56 = a562 } : t56) -> (fun a b -> Float.equal (globalize a) (globalize b)) a561 a562) b571 b572) in
  let mk_value i = (#{ a57 = (i + 0); b57 = (#{ a56 = Float.of_int (i + 1) } : t56) } : t57) in
  (* 1. Create an array of size [size] *)
  let a : t57 array = makearray_dynamic_local size (#{ a57 = 0; b57 = (#{ a56 = 1. } : t56) } : t57) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 823;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 823 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 824;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 824 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a57 *)
    let el = #{ el with a57 = next_el.#a57 } in
    set_idx_mut a ((.(i).#a57) : (t57 array, _) idx_mut) next_el.#a57;
    mark_test_run 825;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 825 failed %d %d" size i;
    (* .#b57 *)
    let el = #{ el with b57 = next_el.#b57 } in
    set_idx_mut a ((.(i).#b57) : (t57 array, _) idx_mut) next_el.#b57;
    mark_test_run 826;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 826 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#b57.#a56 *)
    let el = #{ el with b57 = #{ el.#b57 with a56 = next_el.#b57.#a56 } } in
    set_idx_mut a ((.(i).#b57.#a56) : (t57 array, _) idx_mut) next_el.#b57.#a56;
    mark_test_run 827;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 827 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t58 = #{ int64; #{ int } }   *)
  (**********************************)
  let eq = (fun (#{ a58 = a581; b58 = b581 } : t58) (#{ a58 = a582; b58 = b582 } : t58) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a581 a582 && (fun (#{ a6 = a61 } : t6) (#{ a6 = a62 } : t6) -> (fun a b -> Int.equal a b) a61 a62) b581 b582) in
  let mk_value i = (#{ a58 = Int64.of_int (i + 0); b58 = (#{ a6 = (i + 1) } : t6) } : t58) in
  (* 1. Create an array of size [size] *)
  let a : t58 array = makearray_dynamic_local size (#{ a58 = 0L; b58 = (#{ a6 = 1 } : t6) } : t58) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 828;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 828 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 829;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 829 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a58 *)
    let el = #{ el with a58 = next_el.#a58 } in
    set_idx_mut a ((.(i).#a58) : (t58 array, _) idx_mut) next_el.#a58;
    mark_test_run 830;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 830 failed %d %d" size i;
    (* .#b58 *)
    let el = #{ el with b58 = next_el.#b58 } in
    set_idx_mut a ((.(i).#b58) : (t58 array, _) idx_mut) next_el.#b58;
    mark_test_run 831;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 831 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#b58.#a6 *)
    let el = #{ el with b58 = #{ el.#b58 with a6 = next_el.#b58.#a6 } } in
    set_idx_mut a ((.(i).#b58.#a6) : (t58 array, _) idx_mut) next_el.#b58.#a6;
    mark_test_run 832;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 832 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t59 = #{ int64; #{ int64 } }   *)
  (************************************)
  let eq = (fun (#{ a59 = a591; b59 = b591 } : t59) (#{ a59 = a592; b59 = b592 } : t59) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a591 a592 && (fun (#{ a7 = a71 } : t7) (#{ a7 = a72 } : t7) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a71 a72) b591 b592) in
  let mk_value i = (#{ a59 = Int64.of_int (i + 0); b59 = (#{ a7 = Int64.of_int (i + 1) } : t7) } : t59) in
  (* 1. Create an array of size [size] *)
  let a : t59 array = makearray_dynamic_local size (#{ a59 = 0L; b59 = (#{ a7 = 1L } : t7) } : t59) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 833;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 833 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 834;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 834 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a59 *)
    let el = #{ el with a59 = next_el.#a59 } in
    set_idx_mut a ((.(i).#a59) : (t59 array, _) idx_mut) next_el.#a59;
    mark_test_run 835;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 835 failed %d %d" size i;
    (* .#b59 *)
    let el = #{ el with b59 = next_el.#b59 } in
    set_idx_mut a ((.(i).#b59) : (t59 array, _) idx_mut) next_el.#b59;
    mark_test_run 836;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 836 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#b59.#a7 *)
    let el = #{ el with b59 = #{ el.#b59 with a7 = next_el.#b59.#a7 } } in
    set_idx_mut a ((.(i).#b59.#a7) : (t59 array, _) idx_mut) next_el.#b59.#a7;
    mark_test_run 837;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 837 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t60 = #{ int64; #{ float } }   *)
  (************************************)
  let eq = (fun (#{ a60 = a601; b60 = b601 } : t60) (#{ a60 = a602; b60 = b602 } : t60) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a601 a602 && (fun (#{ a56 = a561 } : t56) (#{ a56 = a562 } : t56) -> (fun a b -> Float.equal (globalize a) (globalize b)) a561 a562) b601 b602) in
  let mk_value i = (#{ a60 = Int64.of_int (i + 0); b60 = (#{ a56 = Float.of_int (i + 1) } : t56) } : t60) in
  (* 1. Create an array of size [size] *)
  let a : t60 array = makearray_dynamic_local size (#{ a60 = 0L; b60 = (#{ a56 = 1. } : t56) } : t60) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 838;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 838 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 839;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 839 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a60 *)
    let el = #{ el with a60 = next_el.#a60 } in
    set_idx_mut a ((.(i).#a60) : (t60 array, _) idx_mut) next_el.#a60;
    mark_test_run 840;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 840 failed %d %d" size i;
    (* .#b60 *)
    let el = #{ el with b60 = next_el.#b60 } in
    set_idx_mut a ((.(i).#b60) : (t60 array, _) idx_mut) next_el.#b60;
    mark_test_run 841;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 841 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#b60.#a56 *)
    let el = #{ el with b60 = #{ el.#b60 with a56 = next_el.#b60.#a56 } } in
    set_idx_mut a ((.(i).#b60.#a56) : (t60 array, _) idx_mut) next_el.#b60.#a56;
    mark_test_run 842;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 842 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**************************************)
  (*   t61 = #{ int32#; #{ int32# } }   *)
  (**************************************)
  let eq = (fun (#{ a61 = a611; b61 = b611 } : t61) (#{ a61 = a612; b61 = b612 } : t61) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a611 a612 && (fun (#{ a8 = a81 } : t8) (#{ a8 = a82 } : t8) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a81 a82) b611 b612) in
  let mk_value i = (#{ a61 = Int32_u.of_int (i + 0); b61 = (#{ a8 = Int32_u.of_int (i + 1) } : t8) } : t61) in
  (* 1. Create an array of size [size] *)
  let a : t61 array = makearray_dynamic_local size (#{ a61 = #0l; b61 = (#{ a8 = #1l } : t8) } : t61) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 843;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 843 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 844;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 844 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a61 *)
    let el = #{ el with a61 = next_el.#a61 } in
    set_idx_mut a ((.(i).#a61) : (t61 array, _) idx_mut) next_el.#a61;
    mark_test_run 845;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 845 failed %d %d" size i;
    (* .#b61 *)
    let el = #{ el with b61 = next_el.#b61 } in
    set_idx_mut a ((.(i).#b61) : (t61 array, _) idx_mut) next_el.#b61;
    mark_test_run 846;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 846 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#b61.#a8 *)
    let el = #{ el with b61 = #{ el.#b61 with a8 = next_el.#b61.#a8 } } in
    set_idx_mut a ((.(i).#b61.#a8) : (t61 array, _) idx_mut) next_el.#b61.#a8;
    mark_test_run 847;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 847 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t62 = #{ float; #{ int } }   *)
  (**********************************)
  let eq = (fun (#{ a62 = a621; b62 = b621 } : t62) (#{ a62 = a622; b62 = b622 } : t62) -> (fun a b -> Float.equal (globalize a) (globalize b)) a621 a622 && (fun (#{ a6 = a61 } : t6) (#{ a6 = a62 } : t6) -> (fun a b -> Int.equal a b) a61 a62) b621 b622) in
  let mk_value i = (#{ a62 = Float.of_int (i + 0); b62 = (#{ a6 = (i + 1) } : t6) } : t62) in
  (* 1. Create an array of size [size] *)
  let a : t62 array = makearray_dynamic_local size (#{ a62 = 0.; b62 = (#{ a6 = 1 } : t6) } : t62) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 848;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 848 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 849;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 849 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a62 *)
    let el = #{ el with a62 = next_el.#a62 } in
    set_idx_mut a ((.(i).#a62) : (t62 array, _) idx_mut) next_el.#a62;
    mark_test_run 850;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 850 failed %d %d" size i;
    (* .#b62 *)
    let el = #{ el with b62 = next_el.#b62 } in
    set_idx_mut a ((.(i).#b62) : (t62 array, _) idx_mut) next_el.#b62;
    mark_test_run 851;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 851 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#b62.#a6 *)
    let el = #{ el with b62 = #{ el.#b62 with a6 = next_el.#b62.#a6 } } in
    set_idx_mut a ((.(i).#b62.#a6) : (t62 array, _) idx_mut) next_el.#b62.#a6;
    mark_test_run 852;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 852 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t63 = #{ float; #{ int64 } }   *)
  (************************************)
  let eq = (fun (#{ a63 = a631; b63 = b631 } : t63) (#{ a63 = a632; b63 = b632 } : t63) -> (fun a b -> Float.equal (globalize a) (globalize b)) a631 a632 && (fun (#{ a7 = a71 } : t7) (#{ a7 = a72 } : t7) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a71 a72) b631 b632) in
  let mk_value i = (#{ a63 = Float.of_int (i + 0); b63 = (#{ a7 = Int64.of_int (i + 1) } : t7) } : t63) in
  (* 1. Create an array of size [size] *)
  let a : t63 array = makearray_dynamic_local size (#{ a63 = 0.; b63 = (#{ a7 = 1L } : t7) } : t63) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 853;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 853 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 854;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 854 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a63 *)
    let el = #{ el with a63 = next_el.#a63 } in
    set_idx_mut a ((.(i).#a63) : (t63 array, _) idx_mut) next_el.#a63;
    mark_test_run 855;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 855 failed %d %d" size i;
    (* .#b63 *)
    let el = #{ el with b63 = next_el.#b63 } in
    set_idx_mut a ((.(i).#b63) : (t63 array, _) idx_mut) next_el.#b63;
    mark_test_run 856;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 856 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#b63.#a7 *)
    let el = #{ el with b63 = #{ el.#b63 with a7 = next_el.#b63.#a7 } } in
    set_idx_mut a ((.(i).#b63.#a7) : (t63 array, _) idx_mut) next_el.#b63.#a7;
    mark_test_run 857;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 857 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t64 = #{ float; #{ float } }   *)
  (************************************)
  let eq = (fun (#{ a64 = a641; b64 = b641 } : t64) (#{ a64 = a642; b64 = b642 } : t64) -> (fun a b -> Float.equal (globalize a) (globalize b)) a641 a642 && (fun (#{ a56 = a561 } : t56) (#{ a56 = a562 } : t56) -> (fun a b -> Float.equal (globalize a) (globalize b)) a561 a562) b641 b642) in
  let mk_value i = (#{ a64 = Float.of_int (i + 0); b64 = (#{ a56 = Float.of_int (i + 1) } : t56) } : t64) in
  (* 1. Create an array of size [size] *)
  let a : t64 array = makearray_dynamic_local size (#{ a64 = 0.; b64 = (#{ a56 = 1. } : t56) } : t64) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 858;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 858 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 859;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 859 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a64 *)
    let el = #{ el with a64 = next_el.#a64 } in
    set_idx_mut a ((.(i).#a64) : (t64 array, _) idx_mut) next_el.#a64;
    mark_test_run 860;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 860 failed %d %d" size i;
    (* .#b64 *)
    let el = #{ el with b64 = next_el.#b64 } in
    set_idx_mut a ((.(i).#b64) : (t64 array, _) idx_mut) next_el.#b64;
    mark_test_run 861;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 861 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#b64.#a56 *)
    let el = #{ el with b64 = #{ el.#b64 with a56 = next_el.#b64.#a56 } } in
    set_idx_mut a ((.(i).#b64.#a56) : (t64 array, _) idx_mut) next_el.#b64.#a56;
    mark_test_run 862;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 862 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (********************************)
  (*   t65 = #{ #{ int }; int }   *)
  (********************************)
  let eq = (fun (#{ a65 = a651; b65 = b651 } : t65) (#{ a65 = a652; b65 = b652 } : t65) -> (fun (#{ a6 = a61 } : t6) (#{ a6 = a62 } : t6) -> (fun a b -> Int.equal a b) a61 a62) a651 a652 && (fun a b -> Int.equal a b) b651 b652) in
  let mk_value i = (#{ a65 = (#{ a6 = (i + 0) } : t6); b65 = (i + 1) } : t65) in
  (* 1. Create an array of size [size] *)
  let a : t65 array = makearray_dynamic_local size (#{ a65 = (#{ a6 = 0 } : t6); b65 = 1 } : t65) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 863;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 863 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 864;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 864 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a65 *)
    let el = #{ el with a65 = next_el.#a65 } in
    set_idx_mut a ((.(i).#a65) : (t65 array, _) idx_mut) next_el.#a65;
    mark_test_run 865;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 865 failed %d %d" size i;
    (* .#b65 *)
    let el = #{ el with b65 = next_el.#b65 } in
    set_idx_mut a ((.(i).#b65) : (t65 array, _) idx_mut) next_el.#b65;
    mark_test_run 866;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 866 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a65.#a6 *)
    let el = #{ el with a65 = #{ el.#a65 with a6 = next_el.#a65.#a6 } } in
    set_idx_mut a ((.(i).#a65.#a6) : (t65 array, _) idx_mut) next_el.#a65.#a6;
    mark_test_run 867;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 867 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t66 = #{ #{ int }; int64 }   *)
  (**********************************)
  let eq = (fun (#{ a66 = a661; b66 = b661 } : t66) (#{ a66 = a662; b66 = b662 } : t66) -> (fun (#{ a6 = a61 } : t6) (#{ a6 = a62 } : t6) -> (fun a b -> Int.equal a b) a61 a62) a661 a662 && (fun a b -> Int64.equal (globalize a) (globalize b)) b661 b662) in
  let mk_value i = (#{ a66 = (#{ a6 = (i + 0) } : t6); b66 = Int64.of_int (i + 1) } : t66) in
  (* 1. Create an array of size [size] *)
  let a : t66 array = makearray_dynamic_local size (#{ a66 = (#{ a6 = 0 } : t6); b66 = 1L } : t66) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 868;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 868 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 869;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 869 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a66 *)
    let el = #{ el with a66 = next_el.#a66 } in
    set_idx_mut a ((.(i).#a66) : (t66 array, _) idx_mut) next_el.#a66;
    mark_test_run 870;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 870 failed %d %d" size i;
    (* .#b66 *)
    let el = #{ el with b66 = next_el.#b66 } in
    set_idx_mut a ((.(i).#b66) : (t66 array, _) idx_mut) next_el.#b66;
    mark_test_run 871;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 871 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a66.#a6 *)
    let el = #{ el with a66 = #{ el.#a66 with a6 = next_el.#a66.#a6 } } in
    set_idx_mut a ((.(i).#a66.#a6) : (t66 array, _) idx_mut) next_el.#a66.#a6;
    mark_test_run 872;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 872 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (***********************************)
  (*   t67 = #{ #{ int }; int32# }   *)
  (***********************************)
  let eq = (fun (#{ a67 = a671; b67 = b671 } : t67) (#{ a67 = a672; b67 = b672 } : t67) -> (fun (#{ a6 = a61 } : t6) (#{ a6 = a62 } : t6) -> (fun a b -> Int.equal a b) a61 a62) a671 a672 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b671 b672) in
  let mk_value i = (#{ a67 = (#{ a6 = (i + 0) } : t6); b67 = Int32_u.of_int (i + 1) } : t67) in
  (* 1. Create an array of size [size] *)
  let a : t67 array = makearray_dynamic_local size (#{ a67 = (#{ a6 = 0 } : t6); b67 = #1l } : t67) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 873;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 873 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 874;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 874 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a67 *)
    let el = #{ el with a67 = next_el.#a67 } in
    set_idx_mut a ((.(i).#a67) : (t67 array, _) idx_mut) next_el.#a67;
    mark_test_run 875;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 875 failed %d %d" size i;
    (* .#b67 *)
    let el = #{ el with b67 = next_el.#b67 } in
    set_idx_mut a ((.(i).#b67) : (t67 array, _) idx_mut) next_el.#b67;
    mark_test_run 876;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 876 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a67.#a6 *)
    let el = #{ el with a67 = #{ el.#a67 with a6 = next_el.#a67.#a6 } } in
    set_idx_mut a ((.(i).#a67.#a6) : (t67 array, _) idx_mut) next_el.#a67.#a6;
    mark_test_run 877;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 877 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t68 = #{ #{ int }; float }   *)
  (**********************************)
  let eq = (fun (#{ a68 = a681; b68 = b681 } : t68) (#{ a68 = a682; b68 = b682 } : t68) -> (fun (#{ a6 = a61 } : t6) (#{ a6 = a62 } : t6) -> (fun a b -> Int.equal a b) a61 a62) a681 a682 && (fun a b -> Float.equal (globalize a) (globalize b)) b681 b682) in
  let mk_value i = (#{ a68 = (#{ a6 = (i + 0) } : t6); b68 = Float.of_int (i + 1) } : t68) in
  (* 1. Create an array of size [size] *)
  let a : t68 array = makearray_dynamic_local size (#{ a68 = (#{ a6 = 0 } : t6); b68 = 1. } : t68) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 878;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 878 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 879;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 879 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a68 *)
    let el = #{ el with a68 = next_el.#a68 } in
    set_idx_mut a ((.(i).#a68) : (t68 array, _) idx_mut) next_el.#a68;
    mark_test_run 880;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 880 failed %d %d" size i;
    (* .#b68 *)
    let el = #{ el with b68 = next_el.#b68 } in
    set_idx_mut a ((.(i).#b68) : (t68 array, _) idx_mut) next_el.#b68;
    mark_test_run 881;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 881 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a68.#a6 *)
    let el = #{ el with a68 = #{ el.#a68 with a6 = next_el.#a68.#a6 } } in
    set_idx_mut a ((.(i).#a68.#a6) : (t68 array, _) idx_mut) next_el.#a68.#a6;
    mark_test_run 882;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 882 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t69 = #{ #{ int64 }; int }   *)
  (**********************************)
  let eq = (fun (#{ a69 = a691; b69 = b691 } : t69) (#{ a69 = a692; b69 = b692 } : t69) -> (fun (#{ a7 = a71 } : t7) (#{ a7 = a72 } : t7) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a71 a72) a691 a692 && (fun a b -> Int.equal a b) b691 b692) in
  let mk_value i = (#{ a69 = (#{ a7 = Int64.of_int (i + 0) } : t7); b69 = (i + 1) } : t69) in
  (* 1. Create an array of size [size] *)
  let a : t69 array = makearray_dynamic_local size (#{ a69 = (#{ a7 = 0L } : t7); b69 = 1 } : t69) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 883;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 883 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 884;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 884 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a69 *)
    let el = #{ el with a69 = next_el.#a69 } in
    set_idx_mut a ((.(i).#a69) : (t69 array, _) idx_mut) next_el.#a69;
    mark_test_run 885;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 885 failed %d %d" size i;
    (* .#b69 *)
    let el = #{ el with b69 = next_el.#b69 } in
    set_idx_mut a ((.(i).#b69) : (t69 array, _) idx_mut) next_el.#b69;
    mark_test_run 886;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 886 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a69.#a7 *)
    let el = #{ el with a69 = #{ el.#a69 with a7 = next_el.#a69.#a7 } } in
    set_idx_mut a ((.(i).#a69.#a7) : (t69 array, _) idx_mut) next_el.#a69.#a7;
    mark_test_run 887;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 887 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t70 = #{ #{ int64 }; int64 }   *)
  (************************************)
  let eq = (fun (#{ a70 = a701; b70 = b701 } : t70) (#{ a70 = a702; b70 = b702 } : t70) -> (fun (#{ a7 = a71 } : t7) (#{ a7 = a72 } : t7) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a71 a72) a701 a702 && (fun a b -> Int64.equal (globalize a) (globalize b)) b701 b702) in
  let mk_value i = (#{ a70 = (#{ a7 = Int64.of_int (i + 0) } : t7); b70 = Int64.of_int (i + 1) } : t70) in
  (* 1. Create an array of size [size] *)
  let a : t70 array = makearray_dynamic_local size (#{ a70 = (#{ a7 = 0L } : t7); b70 = 1L } : t70) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 888;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 888 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 889;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 889 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a70 *)
    let el = #{ el with a70 = next_el.#a70 } in
    set_idx_mut a ((.(i).#a70) : (t70 array, _) idx_mut) next_el.#a70;
    mark_test_run 890;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 890 failed %d %d" size i;
    (* .#b70 *)
    let el = #{ el with b70 = next_el.#b70 } in
    set_idx_mut a ((.(i).#b70) : (t70 array, _) idx_mut) next_el.#b70;
    mark_test_run 891;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 891 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a70.#a7 *)
    let el = #{ el with a70 = #{ el.#a70 with a7 = next_el.#a70.#a7 } } in
    set_idx_mut a ((.(i).#a70.#a7) : (t70 array, _) idx_mut) next_el.#a70.#a7;
    mark_test_run 892;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 892 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t71 = #{ #{ int64 }; float }   *)
  (************************************)
  let eq = (fun (#{ a71 = a711; b71 = b711 } : t71) (#{ a71 = a712; b71 = b712 } : t71) -> (fun (#{ a7 = a71 } : t7) (#{ a7 = a72 } : t7) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a71 a72) a711 a712 && (fun a b -> Float.equal (globalize a) (globalize b)) b711 b712) in
  let mk_value i = (#{ a71 = (#{ a7 = Int64.of_int (i + 0) } : t7); b71 = Float.of_int (i + 1) } : t71) in
  (* 1. Create an array of size [size] *)
  let a : t71 array = makearray_dynamic_local size (#{ a71 = (#{ a7 = 0L } : t7); b71 = 1. } : t71) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 893;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 893 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 894;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 894 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a71 *)
    let el = #{ el with a71 = next_el.#a71 } in
    set_idx_mut a ((.(i).#a71) : (t71 array, _) idx_mut) next_el.#a71;
    mark_test_run 895;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 895 failed %d %d" size i;
    (* .#b71 *)
    let el = #{ el with b71 = next_el.#b71 } in
    set_idx_mut a ((.(i).#b71) : (t71 array, _) idx_mut) next_el.#b71;
    mark_test_run 896;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 896 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a71.#a7 *)
    let el = #{ el with a71 = #{ el.#a71 with a7 = next_el.#a71.#a7 } } in
    set_idx_mut a ((.(i).#a71.#a7) : (t71 array, _) idx_mut) next_el.#a71.#a7;
    mark_test_run 897;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 897 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**************************************)
  (*   t72 = #{ #{ int32# }; int32# }   *)
  (**************************************)
  let eq = (fun (#{ a72 = a721; b72 = b721 } : t72) (#{ a72 = a722; b72 = b722 } : t72) -> (fun (#{ a8 = a81 } : t8) (#{ a8 = a82 } : t8) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a81 a82) a721 a722 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b721 b722) in
  let mk_value i = (#{ a72 = (#{ a8 = Int32_u.of_int (i + 0) } : t8); b72 = Int32_u.of_int (i + 1) } : t72) in
  (* 1. Create an array of size [size] *)
  let a : t72 array = makearray_dynamic_local size (#{ a72 = (#{ a8 = #0l } : t8); b72 = #1l } : t72) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 898;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 898 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 899;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 899 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a72 *)
    let el = #{ el with a72 = next_el.#a72 } in
    set_idx_mut a ((.(i).#a72) : (t72 array, _) idx_mut) next_el.#a72;
    mark_test_run 900;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 900 failed %d %d" size i;
    (* .#b72 *)
    let el = #{ el with b72 = next_el.#b72 } in
    set_idx_mut a ((.(i).#b72) : (t72 array, _) idx_mut) next_el.#b72;
    mark_test_run 901;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 901 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a72.#a8 *)
    let el = #{ el with a72 = #{ el.#a72 with a8 = next_el.#a72.#a8 } } in
    set_idx_mut a ((.(i).#a72.#a8) : (t72 array, _) idx_mut) next_el.#a72.#a8;
    mark_test_run 902;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 902 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t73 = #{ #{ float }; int }   *)
  (**********************************)
  let eq = (fun (#{ a73 = a731; b73 = b731 } : t73) (#{ a73 = a732; b73 = b732 } : t73) -> (fun (#{ a56 = a561 } : t56) (#{ a56 = a562 } : t56) -> (fun a b -> Float.equal (globalize a) (globalize b)) a561 a562) a731 a732 && (fun a b -> Int.equal a b) b731 b732) in
  let mk_value i = (#{ a73 = (#{ a56 = Float.of_int (i + 0) } : t56); b73 = (i + 1) } : t73) in
  (* 1. Create an array of size [size] *)
  let a : t73 array = makearray_dynamic_local size (#{ a73 = (#{ a56 = 0. } : t56); b73 = 1 } : t73) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 903;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 903 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 904;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 904 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a73 *)
    let el = #{ el with a73 = next_el.#a73 } in
    set_idx_mut a ((.(i).#a73) : (t73 array, _) idx_mut) next_el.#a73;
    mark_test_run 905;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 905 failed %d %d" size i;
    (* .#b73 *)
    let el = #{ el with b73 = next_el.#b73 } in
    set_idx_mut a ((.(i).#b73) : (t73 array, _) idx_mut) next_el.#b73;
    mark_test_run 906;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 906 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a73.#a56 *)
    let el = #{ el with a73 = #{ el.#a73 with a56 = next_el.#a73.#a56 } } in
    set_idx_mut a ((.(i).#a73.#a56) : (t73 array, _) idx_mut) next_el.#a73.#a56;
    mark_test_run 907;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 907 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t74 = #{ #{ float }; int64 }   *)
  (************************************)
  let eq = (fun (#{ a74 = a741; b74 = b741 } : t74) (#{ a74 = a742; b74 = b742 } : t74) -> (fun (#{ a56 = a561 } : t56) (#{ a56 = a562 } : t56) -> (fun a b -> Float.equal (globalize a) (globalize b)) a561 a562) a741 a742 && (fun a b -> Int64.equal (globalize a) (globalize b)) b741 b742) in
  let mk_value i = (#{ a74 = (#{ a56 = Float.of_int (i + 0) } : t56); b74 = Int64.of_int (i + 1) } : t74) in
  (* 1. Create an array of size [size] *)
  let a : t74 array = makearray_dynamic_local size (#{ a74 = (#{ a56 = 0. } : t56); b74 = 1L } : t74) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 908;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 908 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 909;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 909 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a74 *)
    let el = #{ el with a74 = next_el.#a74 } in
    set_idx_mut a ((.(i).#a74) : (t74 array, _) idx_mut) next_el.#a74;
    mark_test_run 910;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 910 failed %d %d" size i;
    (* .#b74 *)
    let el = #{ el with b74 = next_el.#b74 } in
    set_idx_mut a ((.(i).#b74) : (t74 array, _) idx_mut) next_el.#b74;
    mark_test_run 911;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 911 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a74.#a56 *)
    let el = #{ el with a74 = #{ el.#a74 with a56 = next_el.#a74.#a56 } } in
    set_idx_mut a ((.(i).#a74.#a56) : (t74 array, _) idx_mut) next_el.#a74.#a56;
    mark_test_run 912;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 912 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t75 = #{ #{ float }; float }   *)
  (************************************)
  let eq = (fun (#{ a75 = a751; b75 = b751 } : t75) (#{ a75 = a752; b75 = b752 } : t75) -> (fun (#{ a56 = a561 } : t56) (#{ a56 = a562 } : t56) -> (fun a b -> Float.equal (globalize a) (globalize b)) a561 a562) a751 a752 && (fun a b -> Float.equal (globalize a) (globalize b)) b751 b752) in
  let mk_value i = (#{ a75 = (#{ a56 = Float.of_int (i + 0) } : t56); b75 = Float.of_int (i + 1) } : t75) in
  (* 1. Create an array of size [size] *)
  let a : t75 array = makearray_dynamic_local size (#{ a75 = (#{ a56 = 0. } : t56); b75 = 1. } : t75) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 913;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 913 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 914;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 914 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a75 *)
    let el = #{ el with a75 = next_el.#a75 } in
    set_idx_mut a ((.(i).#a75) : (t75 array, _) idx_mut) next_el.#a75;
    mark_test_run 915;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 915 failed %d %d" size i;
    (* .#b75 *)
    let el = #{ el with b75 = next_el.#b75 } in
    set_idx_mut a ((.(i).#b75) : (t75 array, _) idx_mut) next_el.#b75;
    mark_test_run 916;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 916 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a75.#a56 *)
    let el = #{ el with a75 = #{ el.#a75 with a56 = next_el.#a75.#a56 } } in
    set_idx_mut a ((.(i).#a75.#a56) : (t75 array, _) idx_mut) next_el.#a75.#a56;
    mark_test_run 917;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 917 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (********************************)
  (*   t76 = #{ #{ int; int } }   *)
  (********************************)
  let eq = (fun (#{ a76 = a761 } : t76) (#{ a76 = a762 } : t76) -> (fun (#{ a9 = a91; b9 = b91 } : t9) (#{ a9 = a92; b9 = b92 } : t9) -> (fun a b -> Int.equal a b) a91 a92 && (fun a b -> Int.equal a b) b91 b92) a761 a762) in
  let mk_value i = (#{ a76 = (#{ a9 = (i + 0); b9 = (i + 1) } : t9) } : t76) in
  (* 1. Create an array of size [size] *)
  let a : t76 array = makearray_dynamic_local size (#{ a76 = (#{ a9 = 0; b9 = 1 } : t9) } : t76) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 918;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 918 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 919;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 919 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a76 *)
    let el = #{ el with a76 = next_el.#a76 } in
    set_idx_mut a ((.(i).#a76) : (t76 array, _) idx_mut) next_el.#a76;
    mark_test_run 920;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 920 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a76.#a9 *)
    let el = #{ el with a76 = #{ el.#a76 with a9 = next_el.#a76.#a9 } } in
    set_idx_mut a ((.(i).#a76.#a9) : (t76 array, _) idx_mut) next_el.#a76.#a9;
    mark_test_run 921;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 921 failed %d %d" size i;
    (* .#a76.#b9 *)
    let el = #{ el with a76 = #{ el.#a76 with b9 = next_el.#a76.#b9 } } in
    set_idx_mut a ((.(i).#a76.#b9) : (t76 array, _) idx_mut) next_el.#a76.#b9;
    mark_test_run 922;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 922 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t77 = #{ #{ int; int64 } }   *)
  (**********************************)
  let eq = (fun (#{ a77 = a771 } : t77) (#{ a77 = a772 } : t77) -> (fun (#{ a10 = a101; b10 = b101 } : t10) (#{ a10 = a102; b10 = b102 } : t10) -> (fun a b -> Int.equal a b) a101 a102 && (fun a b -> Int64.equal (globalize a) (globalize b)) b101 b102) a771 a772) in
  let mk_value i = (#{ a77 = (#{ a10 = (i + 0); b10 = Int64.of_int (i + 1) } : t10) } : t77) in
  (* 1. Create an array of size [size] *)
  let a : t77 array = makearray_dynamic_local size (#{ a77 = (#{ a10 = 0; b10 = 1L } : t10) } : t77) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 923;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 923 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 924;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 924 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a77 *)
    let el = #{ el with a77 = next_el.#a77 } in
    set_idx_mut a ((.(i).#a77) : (t77 array, _) idx_mut) next_el.#a77;
    mark_test_run 925;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 925 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a77.#a10 *)
    let el = #{ el with a77 = #{ el.#a77 with a10 = next_el.#a77.#a10 } } in
    set_idx_mut a ((.(i).#a77.#a10) : (t77 array, _) idx_mut) next_el.#a77.#a10;
    mark_test_run 926;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 926 failed %d %d" size i;
    (* .#a77.#b10 *)
    let el = #{ el with a77 = #{ el.#a77 with b10 = next_el.#a77.#b10 } } in
    set_idx_mut a ((.(i).#a77.#b10) : (t77 array, _) idx_mut) next_el.#a77.#b10;
    mark_test_run 927;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 927 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (***********************************)
  (*   t78 = #{ #{ int; int32# } }   *)
  (***********************************)
  let eq = (fun (#{ a78 = a781 } : t78) (#{ a78 = a782 } : t78) -> (fun (#{ a11 = a111; b11 = b111 } : t11) (#{ a11 = a112; b11 = b112 } : t11) -> (fun a b -> Int.equal a b) a111 a112 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b111 b112) a781 a782) in
  let mk_value i = (#{ a78 = (#{ a11 = (i + 0); b11 = Int32_u.of_int (i + 1) } : t11) } : t78) in
  (* 1. Create an array of size [size] *)
  let a : t78 array = makearray_dynamic_local size (#{ a78 = (#{ a11 = 0; b11 = #1l } : t11) } : t78) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 928;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 928 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 929;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 929 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a78 *)
    let el = #{ el with a78 = next_el.#a78 } in
    set_idx_mut a ((.(i).#a78) : (t78 array, _) idx_mut) next_el.#a78;
    mark_test_run 930;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 930 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a78.#a11 *)
    let el = #{ el with a78 = #{ el.#a78 with a11 = next_el.#a78.#a11 } } in
    set_idx_mut a ((.(i).#a78.#a11) : (t78 array, _) idx_mut) next_el.#a78.#a11;
    mark_test_run 931;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 931 failed %d %d" size i;
    (* .#a78.#b11 *)
    let el = #{ el with a78 = #{ el.#a78 with b11 = next_el.#a78.#b11 } } in
    set_idx_mut a ((.(i).#a78.#b11) : (t78 array, _) idx_mut) next_el.#a78.#b11;
    mark_test_run 932;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 932 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t79 = #{ #{ int; float } }   *)
  (**********************************)
  let eq = (fun (#{ a79 = a791 } : t79) (#{ a79 = a792 } : t79) -> (fun (#{ a12 = a121; b12 = b121 } : t12) (#{ a12 = a122; b12 = b122 } : t12) -> (fun a b -> Int.equal a b) a121 a122 && (fun a b -> Float.equal (globalize a) (globalize b)) b121 b122) a791 a792) in
  let mk_value i = (#{ a79 = (#{ a12 = (i + 0); b12 = Float.of_int (i + 1) } : t12) } : t79) in
  (* 1. Create an array of size [size] *)
  let a : t79 array = makearray_dynamic_local size (#{ a79 = (#{ a12 = 0; b12 = 1. } : t12) } : t79) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 933;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 933 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 934;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 934 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a79 *)
    let el = #{ el with a79 = next_el.#a79 } in
    set_idx_mut a ((.(i).#a79) : (t79 array, _) idx_mut) next_el.#a79;
    mark_test_run 935;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 935 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a79.#a12 *)
    let el = #{ el with a79 = #{ el.#a79 with a12 = next_el.#a79.#a12 } } in
    set_idx_mut a ((.(i).#a79.#a12) : (t79 array, _) idx_mut) next_el.#a79.#a12;
    mark_test_run 936;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 936 failed %d %d" size i;
    (* .#a79.#b12 *)
    let el = #{ el with a79 = #{ el.#a79 with b12 = next_el.#a79.#b12 } } in
    set_idx_mut a ((.(i).#a79.#b12) : (t79 array, _) idx_mut) next_el.#a79.#b12;
    mark_test_run 937;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 937 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t80 = #{ #{ int64; int } }   *)
  (**********************************)
  let eq = (fun (#{ a80 = a801 } : t80) (#{ a80 = a802 } : t80) -> (fun (#{ a13 = a131; b13 = b131 } : t13) (#{ a13 = a132; b13 = b132 } : t13) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a131 a132 && (fun a b -> Int.equal a b) b131 b132) a801 a802) in
  let mk_value i = (#{ a80 = (#{ a13 = Int64.of_int (i + 0); b13 = (i + 1) } : t13) } : t80) in
  (* 1. Create an array of size [size] *)
  let a : t80 array = makearray_dynamic_local size (#{ a80 = (#{ a13 = 0L; b13 = 1 } : t13) } : t80) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 938;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 938 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 939;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 939 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a80 *)
    let el = #{ el with a80 = next_el.#a80 } in
    set_idx_mut a ((.(i).#a80) : (t80 array, _) idx_mut) next_el.#a80;
    mark_test_run 940;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 940 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a80.#a13 *)
    let el = #{ el with a80 = #{ el.#a80 with a13 = next_el.#a80.#a13 } } in
    set_idx_mut a ((.(i).#a80.#a13) : (t80 array, _) idx_mut) next_el.#a80.#a13;
    mark_test_run 941;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 941 failed %d %d" size i;
    (* .#a80.#b13 *)
    let el = #{ el with a80 = #{ el.#a80 with b13 = next_el.#a80.#b13 } } in
    set_idx_mut a ((.(i).#a80.#b13) : (t80 array, _) idx_mut) next_el.#a80.#b13;
    mark_test_run 942;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 942 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t81 = #{ #{ int64; int64 } }   *)
  (************************************)
  let eq = (fun (#{ a81 = a811 } : t81) (#{ a81 = a812 } : t81) -> (fun (#{ a14 = a141; b14 = b141 } : t14) (#{ a14 = a142; b14 = b142 } : t14) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a141 a142 && (fun a b -> Int64.equal (globalize a) (globalize b)) b141 b142) a811 a812) in
  let mk_value i = (#{ a81 = (#{ a14 = Int64.of_int (i + 0); b14 = Int64.of_int (i + 1) } : t14) } : t81) in
  (* 1. Create an array of size [size] *)
  let a : t81 array = makearray_dynamic_local size (#{ a81 = (#{ a14 = 0L; b14 = 1L } : t14) } : t81) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 943;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 943 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 944;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 944 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a81 *)
    let el = #{ el with a81 = next_el.#a81 } in
    set_idx_mut a ((.(i).#a81) : (t81 array, _) idx_mut) next_el.#a81;
    mark_test_run 945;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 945 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a81.#a14 *)
    let el = #{ el with a81 = #{ el.#a81 with a14 = next_el.#a81.#a14 } } in
    set_idx_mut a ((.(i).#a81.#a14) : (t81 array, _) idx_mut) next_el.#a81.#a14;
    mark_test_run 946;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 946 failed %d %d" size i;
    (* .#a81.#b14 *)
    let el = #{ el with a81 = #{ el.#a81 with b14 = next_el.#a81.#b14 } } in
    set_idx_mut a ((.(i).#a81.#b14) : (t81 array, _) idx_mut) next_el.#a81.#b14;
    mark_test_run 947;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 947 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t82 = #{ #{ int64; float } }   *)
  (************************************)
  let eq = (fun (#{ a82 = a821 } : t82) (#{ a82 = a822 } : t82) -> (fun (#{ a15 = a151; b15 = b151 } : t15) (#{ a15 = a152; b15 = b152 } : t15) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a151 a152 && (fun a b -> Float.equal (globalize a) (globalize b)) b151 b152) a821 a822) in
  let mk_value i = (#{ a82 = (#{ a15 = Int64.of_int (i + 0); b15 = Float.of_int (i + 1) } : t15) } : t82) in
  (* 1. Create an array of size [size] *)
  let a : t82 array = makearray_dynamic_local size (#{ a82 = (#{ a15 = 0L; b15 = 1. } : t15) } : t82) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 948;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 948 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 949;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 949 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a82 *)
    let el = #{ el with a82 = next_el.#a82 } in
    set_idx_mut a ((.(i).#a82) : (t82 array, _) idx_mut) next_el.#a82;
    mark_test_run 950;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 950 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a82.#a15 *)
    let el = #{ el with a82 = #{ el.#a82 with a15 = next_el.#a82.#a15 } } in
    set_idx_mut a ((.(i).#a82.#a15) : (t82 array, _) idx_mut) next_el.#a82.#a15;
    mark_test_run 951;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 951 failed %d %d" size i;
    (* .#a82.#b15 *)
    let el = #{ el with a82 = #{ el.#a82 with b15 = next_el.#a82.#b15 } } in
    set_idx_mut a ((.(i).#a82.#b15) : (t82 array, _) idx_mut) next_el.#a82.#b15;
    mark_test_run 952;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 952 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**************************************)
  (*   t83 = #{ #{ int32#; int32# } }   *)
  (**************************************)
  let eq = (fun (#{ a83 = a831 } : t83) (#{ a83 = a832 } : t83) -> (fun (#{ a16 = a161; b16 = b161 } : t16) (#{ a16 = a162; b16 = b162 } : t16) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a161 a162 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b161 b162) a831 a832) in
  let mk_value i = (#{ a83 = (#{ a16 = Int32_u.of_int (i + 0); b16 = Int32_u.of_int (i + 1) } : t16) } : t83) in
  (* 1. Create an array of size [size] *)
  let a : t83 array = makearray_dynamic_local size (#{ a83 = (#{ a16 = #0l; b16 = #1l } : t16) } : t83) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 953;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 953 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 954;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 954 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a83 *)
    let el = #{ el with a83 = next_el.#a83 } in
    set_idx_mut a ((.(i).#a83) : (t83 array, _) idx_mut) next_el.#a83;
    mark_test_run 955;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 955 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a83.#a16 *)
    let el = #{ el with a83 = #{ el.#a83 with a16 = next_el.#a83.#a16 } } in
    set_idx_mut a ((.(i).#a83.#a16) : (t83 array, _) idx_mut) next_el.#a83.#a16;
    mark_test_run 956;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 956 failed %d %d" size i;
    (* .#a83.#b16 *)
    let el = #{ el with a83 = #{ el.#a83 with b16 = next_el.#a83.#b16 } } in
    set_idx_mut a ((.(i).#a83.#b16) : (t83 array, _) idx_mut) next_el.#a83.#b16;
    mark_test_run 957;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 957 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t84 = #{ #{ float; int } }   *)
  (**********************************)
  let eq = (fun (#{ a84 = a841 } : t84) (#{ a84 = a842 } : t84) -> (fun (#{ a17 = a171; b17 = b171 } : t17) (#{ a17 = a172; b17 = b172 } : t17) -> (fun a b -> Float.equal (globalize a) (globalize b)) a171 a172 && (fun a b -> Int.equal a b) b171 b172) a841 a842) in
  let mk_value i = (#{ a84 = (#{ a17 = Float.of_int (i + 0); b17 = (i + 1) } : t17) } : t84) in
  (* 1. Create an array of size [size] *)
  let a : t84 array = makearray_dynamic_local size (#{ a84 = (#{ a17 = 0.; b17 = 1 } : t17) } : t84) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 958;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 958 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 959;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 959 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a84 *)
    let el = #{ el with a84 = next_el.#a84 } in
    set_idx_mut a ((.(i).#a84) : (t84 array, _) idx_mut) next_el.#a84;
    mark_test_run 960;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 960 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a84.#a17 *)
    let el = #{ el with a84 = #{ el.#a84 with a17 = next_el.#a84.#a17 } } in
    set_idx_mut a ((.(i).#a84.#a17) : (t84 array, _) idx_mut) next_el.#a84.#a17;
    mark_test_run 961;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 961 failed %d %d" size i;
    (* .#a84.#b17 *)
    let el = #{ el with a84 = #{ el.#a84 with b17 = next_el.#a84.#b17 } } in
    set_idx_mut a ((.(i).#a84.#b17) : (t84 array, _) idx_mut) next_el.#a84.#b17;
    mark_test_run 962;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 962 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t85 = #{ #{ float; int64 } }   *)
  (************************************)
  let eq = (fun (#{ a85 = a851 } : t85) (#{ a85 = a852 } : t85) -> (fun (#{ a18 = a181; b18 = b181 } : t18) (#{ a18 = a182; b18 = b182 } : t18) -> (fun a b -> Float.equal (globalize a) (globalize b)) a181 a182 && (fun a b -> Int64.equal (globalize a) (globalize b)) b181 b182) a851 a852) in
  let mk_value i = (#{ a85 = (#{ a18 = Float.of_int (i + 0); b18 = Int64.of_int (i + 1) } : t18) } : t85) in
  (* 1. Create an array of size [size] *)
  let a : t85 array = makearray_dynamic_local size (#{ a85 = (#{ a18 = 0.; b18 = 1L } : t18) } : t85) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 963;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 963 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 964;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 964 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a85 *)
    let el = #{ el with a85 = next_el.#a85 } in
    set_idx_mut a ((.(i).#a85) : (t85 array, _) idx_mut) next_el.#a85;
    mark_test_run 965;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 965 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a85.#a18 *)
    let el = #{ el with a85 = #{ el.#a85 with a18 = next_el.#a85.#a18 } } in
    set_idx_mut a ((.(i).#a85.#a18) : (t85 array, _) idx_mut) next_el.#a85.#a18;
    mark_test_run 966;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 966 failed %d %d" size i;
    (* .#a85.#b18 *)
    let el = #{ el with a85 = #{ el.#a85 with b18 = next_el.#a85.#b18 } } in
    set_idx_mut a ((.(i).#a85.#b18) : (t85 array, _) idx_mut) next_el.#a85.#b18;
    mark_test_run 967;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 967 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************************)
  (*   t86 = #{ #{ float; float } }   *)
  (************************************)
  let eq = (fun (#{ a86 = a861 } : t86) (#{ a86 = a862 } : t86) -> (fun (#{ a19 = a191; b19 = b191 } : t19) (#{ a19 = a192; b19 = b192 } : t19) -> (fun a b -> Float.equal (globalize a) (globalize b)) a191 a192 && (fun a b -> Float.equal (globalize a) (globalize b)) b191 b192) a861 a862) in
  let mk_value i = (#{ a86 = (#{ a19 = Float.of_int (i + 0); b19 = Float.of_int (i + 1) } : t19) } : t86) in
  (* 1. Create an array of size [size] *)
  let a : t86 array = makearray_dynamic_local size (#{ a86 = (#{ a19 = 0.; b19 = 1. } : t19) } : t86) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 968;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 968 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 969;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 969 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a86 *)
    let el = #{ el with a86 = next_el.#a86 } in
    set_idx_mut a ((.(i).#a86) : (t86 array, _) idx_mut) next_el.#a86;
    mark_test_run 970;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 970 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a86.#a19 *)
    let el = #{ el with a86 = #{ el.#a86 with a19 = next_el.#a86.#a19 } } in
    set_idx_mut a ((.(i).#a86.#a19) : (t86 array, _) idx_mut) next_el.#a86.#a19;
    mark_test_run 971;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 971 failed %d %d" size i;
    (* .#a86.#b19 *)
    let el = #{ el with a86 = #{ el.#a86 with b19 = next_el.#a86.#b19 } } in
    set_idx_mut a ((.(i).#a86.#b19) : (t86 array, _) idx_mut) next_el.#a86.#b19;
    mark_test_run 972;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 972 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (********************************)
  (*   t87 = #{ #{ #{ int } } }   *)
  (********************************)
  let eq = (fun (#{ a87 = a871 } : t87) (#{ a87 = a872 } : t87) -> (fun (#{ a20 = a201 } : t20) (#{ a20 = a202 } : t20) -> (fun (#{ a6 = a61 } : t6) (#{ a6 = a62 } : t6) -> (fun a b -> Int.equal a b) a61 a62) a201 a202) a871 a872) in
  let mk_value i = (#{ a87 = (#{ a20 = (#{ a6 = (i + 0) } : t6) } : t20) } : t87) in
  (* 1. Create an array of size [size] *)
  let a : t87 array = makearray_dynamic_local size (#{ a87 = (#{ a20 = (#{ a6 = 0 } : t6) } : t20) } : t87) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 973;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 973 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 974;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 974 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a87 *)
    let el = #{ el with a87 = next_el.#a87 } in
    set_idx_mut a ((.(i).#a87) : (t87 array, _) idx_mut) next_el.#a87;
    mark_test_run 975;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 975 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a87.#a20 *)
    let el = #{ el with a87 = #{ el.#a87 with a20 = next_el.#a87.#a20 } } in
    set_idx_mut a ((.(i).#a87.#a20) : (t87 array, _) idx_mut) next_el.#a87.#a20;
    mark_test_run 976;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 976 failed %d %d" size i;
    (* Paths of depth 3 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 3) in
    (* .#a87.#a20.#a6 *)
    let el = #{ el with a87 = #{ el.#a87 with a20 = #{ el.#a87.#a20 with a6 = next_el.#a87.#a20.#a6 } } } in
    set_idx_mut a ((.(i).#a87.#a20.#a6) : (t87 array, _) idx_mut) next_el.#a87.#a20.#a6;
    mark_test_run 977;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 977 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t88 = #{ #{ #{ int64 } } }   *)
  (**********************************)
  let eq = (fun (#{ a88 = a881 } : t88) (#{ a88 = a882 } : t88) -> (fun (#{ a21 = a211 } : t21) (#{ a21 = a212 } : t21) -> (fun (#{ a7 = a71 } : t7) (#{ a7 = a72 } : t7) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a71 a72) a211 a212) a881 a882) in
  let mk_value i = (#{ a88 = (#{ a21 = (#{ a7 = Int64.of_int (i + 0) } : t7) } : t21) } : t88) in
  (* 1. Create an array of size [size] *)
  let a : t88 array = makearray_dynamic_local size (#{ a88 = (#{ a21 = (#{ a7 = 0L } : t7) } : t21) } : t88) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 978;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 978 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 979;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 979 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a88 *)
    let el = #{ el with a88 = next_el.#a88 } in
    set_idx_mut a ((.(i).#a88) : (t88 array, _) idx_mut) next_el.#a88;
    mark_test_run 980;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 980 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a88.#a21 *)
    let el = #{ el with a88 = #{ el.#a88 with a21 = next_el.#a88.#a21 } } in
    set_idx_mut a ((.(i).#a88.#a21) : (t88 array, _) idx_mut) next_el.#a88.#a21;
    mark_test_run 981;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 981 failed %d %d" size i;
    (* Paths of depth 3 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 3) in
    (* .#a88.#a21.#a7 *)
    let el = #{ el with a88 = #{ el.#a88 with a21 = #{ el.#a88.#a21 with a7 = next_el.#a88.#a21.#a7 } } } in
    set_idx_mut a ((.(i).#a88.#a21.#a7) : (t88 array, _) idx_mut) next_el.#a88.#a21.#a7;
    mark_test_run 982;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 982 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (***********************************)
  (*   t89 = #{ #{ #{ int32# } } }   *)
  (***********************************)
  let eq = (fun (#{ a89 = a891 } : t89) (#{ a89 = a892 } : t89) -> (fun (#{ a22 = a221 } : t22) (#{ a22 = a222 } : t22) -> (fun (#{ a8 = a81 } : t8) (#{ a8 = a82 } : t8) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a81 a82) a221 a222) a891 a892) in
  let mk_value i = (#{ a89 = (#{ a22 = (#{ a8 = Int32_u.of_int (i + 0) } : t8) } : t22) } : t89) in
  (* 1. Create an array of size [size] *)
  let a : t89 array = makearray_dynamic_local size (#{ a89 = (#{ a22 = (#{ a8 = #0l } : t8) } : t22) } : t89) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 983;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 983 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 984;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 984 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a89 *)
    let el = #{ el with a89 = next_el.#a89 } in
    set_idx_mut a ((.(i).#a89) : (t89 array, _) idx_mut) next_el.#a89;
    mark_test_run 985;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 985 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a89.#a22 *)
    let el = #{ el with a89 = #{ el.#a89 with a22 = next_el.#a89.#a22 } } in
    set_idx_mut a ((.(i).#a89.#a22) : (t89 array, _) idx_mut) next_el.#a89.#a22;
    mark_test_run 986;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 986 failed %d %d" size i;
    (* Paths of depth 3 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 3) in
    (* .#a89.#a22.#a8 *)
    let el = #{ el with a89 = #{ el.#a89 with a22 = #{ el.#a89.#a22 with a8 = next_el.#a89.#a22.#a8 } } } in
    set_idx_mut a ((.(i).#a89.#a22.#a8) : (t89 array, _) idx_mut) next_el.#a89.#a22.#a8;
    mark_test_run 987;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 987 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (***********)
  (*   int   *)
  (***********)
  let eq = (fun a b -> Int.equal a b) in
  let mk_value i = (i + 0) in
  (* 1. Create an array of size [size] *)
  let a : int array = makearray_dynamic_local size 0 in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 988;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 988 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 989;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 989 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    ()
  done;
  Gc.compact ();

  (*************)
  (*   int64   *)
  (*************)
  let eq = (fun a b -> Int64.equal (globalize a) (globalize b)) in
  let mk_value i = Int64.of_int (i + 0) in
  (* 1. Create an array of size [size] *)
  let a : int64 array = makearray_dynamic_local size 0L in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 990;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 990 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 991;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 991 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    ()
  done;
  Gc.compact ();

  (**************)
  (*   int32#   *)
  (**************)
  let eq = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) in
  let mk_value i = Int32_u.of_int (i + 0) in
  (* 1. Create an array of size [size] *)
  let a : int32# array = makearray_dynamic_local size #0l in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 992;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 992 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 993;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 993 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    ()
  done;
  Gc.compact ();

  (**************)
  (*   int64#   *)
  (**************)
  let eq = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) in
  let mk_value i = Int64_u.of_int (i + 0) in
  (* 1. Create an array of size [size] *)
  let a : int64# array = makearray_dynamic_local size #0L in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 994;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 994 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 995;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 995 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    ()
  done;
  Gc.compact ();

  (******************)
  (*   nativeint#   *)
  (******************)
  let eq = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) in
  let mk_value i = Nativeint_u.of_int (i + 0) in
  (* 1. Create an array of size [size] *)
  let a : nativeint# array = makearray_dynamic_local size #0n in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 996;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 996 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 997;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 997 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    ()
  done;
  Gc.compact ();

  (*********************)
  (*   t6 = #{ int }   *)
  (*********************)
  let eq = (fun (#{ a6 = a61 } : t6) (#{ a6 = a62 } : t6) -> (fun a b -> Int.equal a b) a61 a62) in
  let mk_value i = (#{ a6 = (i + 0) } : t6) in
  (* 1. Create an array of size [size] *)
  let a : t6 array = makearray_dynamic_local size (#{ a6 = 0 } : t6) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 998;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 998 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 999;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 999 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a6 *)
    let el = #{ el with a6 = next_el.#a6 } in
    set_idx_mut a ((.(i).#a6) : (t6 array, _) idx_mut) next_el.#a6;
    mark_test_run 1000;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1000 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (***********************)
  (*   t7 = #{ int64 }   *)
  (***********************)
  let eq = (fun (#{ a7 = a71 } : t7) (#{ a7 = a72 } : t7) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a71 a72) in
  let mk_value i = (#{ a7 = Int64.of_int (i + 0) } : t7) in
  (* 1. Create an array of size [size] *)
  let a : t7 array = makearray_dynamic_local size (#{ a7 = 0L } : t7) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1001;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1001 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1002;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1002 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a7 *)
    let el = #{ el with a7 = next_el.#a7 } in
    set_idx_mut a ((.(i).#a7) : (t7 array, _) idx_mut) next_el.#a7;
    mark_test_run 1003;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1003 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (************************)
  (*   t8 = #{ int32# }   *)
  (************************)
  let eq = (fun (#{ a8 = a81 } : t8) (#{ a8 = a82 } : t8) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a81 a82) in
  let mk_value i = (#{ a8 = Int32_u.of_int (i + 0) } : t8) in
  (* 1. Create an array of size [size] *)
  let a : t8 array = makearray_dynamic_local size (#{ a8 = #0l } : t8) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1004;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1004 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1005;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1005 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a8 *)
    let el = #{ el with a8 = next_el.#a8 } in
    set_idx_mut a ((.(i).#a8) : (t8 array, _) idx_mut) next_el.#a8;
    mark_test_run 1006;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1006 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*************************)
  (*   t90 = #{ int64# }   *)
  (*************************)
  let eq = (fun (#{ a90 = a901 } : t90) (#{ a90 = a902 } : t90) -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a901 a902) in
  let mk_value i = (#{ a90 = Int64_u.of_int (i + 0) } : t90) in
  (* 1. Create an array of size [size] *)
  let a : t90 array = makearray_dynamic_local size (#{ a90 = #0L } : t90) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1007;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1007 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1008;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1008 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a90 *)
    let el = #{ el with a90 = next_el.#a90 } in
    set_idx_mut a ((.(i).#a90) : (t90 array, _) idx_mut) next_el.#a90;
    mark_test_run 1009;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1009 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*****************************)
  (*   t91 = #{ nativeint# }   *)
  (*****************************)
  let eq = (fun (#{ a91 = a911 } : t91) (#{ a91 = a912 } : t91) -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a911 a912) in
  let mk_value i = (#{ a91 = Nativeint_u.of_int (i + 0) } : t91) in
  (* 1. Create an array of size [size] *)
  let a : t91 array = makearray_dynamic_local size (#{ a91 = #0n } : t91) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1010;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1010 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1011;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1011 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a91 *)
    let el = #{ el with a91 = next_el.#a91 } in
    set_idx_mut a ((.(i).#a91) : (t91 array, _) idx_mut) next_el.#a91;
    mark_test_run 1012;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1012 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**************************)
  (*   t9 = #{ int; int }   *)
  (**************************)
  let eq = (fun (#{ a9 = a91; b9 = b91 } : t9) (#{ a9 = a92; b9 = b92 } : t9) -> (fun a b -> Int.equal a b) a91 a92 && (fun a b -> Int.equal a b) b91 b92) in
  let mk_value i = (#{ a9 = (i + 0); b9 = (i + 1) } : t9) in
  (* 1. Create an array of size [size] *)
  let a : t9 array = makearray_dynamic_local size (#{ a9 = 0; b9 = 1 } : t9) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1013;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1013 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1014;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1014 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a9 *)
    let el = #{ el with a9 = next_el.#a9 } in
    set_idx_mut a ((.(i).#a9) : (t9 array, _) idx_mut) next_el.#a9;
    mark_test_run 1015;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1015 failed %d %d" size i;
    (* .#b9 *)
    let el = #{ el with b9 = next_el.#b9 } in
    set_idx_mut a ((.(i).#b9) : (t9 array, _) idx_mut) next_el.#b9;
    mark_test_run 1016;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1016 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*****************************)
  (*   t10 = #{ int; int64 }   *)
  (*****************************)
  let eq = (fun (#{ a10 = a101; b10 = b101 } : t10) (#{ a10 = a102; b10 = b102 } : t10) -> (fun a b -> Int.equal a b) a101 a102 && (fun a b -> Int64.equal (globalize a) (globalize b)) b101 b102) in
  let mk_value i = (#{ a10 = (i + 0); b10 = Int64.of_int (i + 1) } : t10) in
  (* 1. Create an array of size [size] *)
  let a : t10 array = makearray_dynamic_local size (#{ a10 = 0; b10 = 1L } : t10) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1017;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1017 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1018;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1018 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a10 *)
    let el = #{ el with a10 = next_el.#a10 } in
    set_idx_mut a ((.(i).#a10) : (t10 array, _) idx_mut) next_el.#a10;
    mark_test_run 1019;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1019 failed %d %d" size i;
    (* .#b10 *)
    let el = #{ el with b10 = next_el.#b10 } in
    set_idx_mut a ((.(i).#b10) : (t10 array, _) idx_mut) next_el.#b10;
    mark_test_run 1020;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1020 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (******************************)
  (*   t11 = #{ int; int32# }   *)
  (******************************)
  let eq = (fun (#{ a11 = a111; b11 = b111 } : t11) (#{ a11 = a112; b11 = b112 } : t11) -> (fun a b -> Int.equal a b) a111 a112 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b111 b112) in
  let mk_value i = (#{ a11 = (i + 0); b11 = Int32_u.of_int (i + 1) } : t11) in
  (* 1. Create an array of size [size] *)
  let a : t11 array = makearray_dynamic_local size (#{ a11 = 0; b11 = #1l } : t11) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1021;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1021 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1022;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1022 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a11 *)
    let el = #{ el with a11 = next_el.#a11 } in
    set_idx_mut a ((.(i).#a11) : (t11 array, _) idx_mut) next_el.#a11;
    mark_test_run 1023;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1023 failed %d %d" size i;
    (* .#b11 *)
    let el = #{ el with b11 = next_el.#b11 } in
    set_idx_mut a ((.(i).#b11) : (t11 array, _) idx_mut) next_el.#b11;
    mark_test_run 1024;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1024 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*****************************)
  (*   t12 = #{ int; float }   *)
  (*****************************)
  let eq = (fun (#{ a12 = a121; b12 = b121 } : t12) (#{ a12 = a122; b12 = b122 } : t12) -> (fun a b -> Int.equal a b) a121 a122 && (fun a b -> Float.equal (globalize a) (globalize b)) b121 b122) in
  let mk_value i = (#{ a12 = (i + 0); b12 = Float.of_int (i + 1) } : t12) in
  (* 1. Create an array of size [size] *)
  let a : t12 array = makearray_dynamic_local size (#{ a12 = 0; b12 = 1. } : t12) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1025;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1025 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1026;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1026 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a12 *)
    let el = #{ el with a12 = next_el.#a12 } in
    set_idx_mut a ((.(i).#a12) : (t12 array, _) idx_mut) next_el.#a12;
    mark_test_run 1027;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1027 failed %d %d" size i;
    (* .#b12 *)
    let el = #{ el with b12 = next_el.#b12 } in
    set_idx_mut a ((.(i).#b12) : (t12 array, _) idx_mut) next_el.#b12;
    mark_test_run 1028;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1028 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (******************************)
  (*   t92 = #{ int; int64# }   *)
  (******************************)
  let eq = (fun (#{ a92 = a921; b92 = b921 } : t92) (#{ a92 = a922; b92 = b922 } : t92) -> (fun a b -> Int.equal a b) a921 a922 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b921 b922) in
  let mk_value i = (#{ a92 = (i + 0); b92 = Int64_u.of_int (i + 1) } : t92) in
  (* 1. Create an array of size [size] *)
  let a : t92 array = makearray_dynamic_local size (#{ a92 = 0; b92 = #1L } : t92) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1029;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1029 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1030;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1030 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a92 *)
    let el = #{ el with a92 = next_el.#a92 } in
    set_idx_mut a ((.(i).#a92) : (t92 array, _) idx_mut) next_el.#a92;
    mark_test_run 1031;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1031 failed %d %d" size i;
    (* .#b92 *)
    let el = #{ el with b92 = next_el.#b92 } in
    set_idx_mut a ((.(i).#b92) : (t92 array, _) idx_mut) next_el.#b92;
    mark_test_run 1032;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1032 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (**********************************)
  (*   t93 = #{ int; nativeint# }   *)
  (**********************************)
  let eq = (fun (#{ a93 = a931; b93 = b931 } : t93) (#{ a93 = a932; b93 = b932 } : t93) -> (fun a b -> Int.equal a b) a931 a932 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b931 b932) in
  let mk_value i = (#{ a93 = (i + 0); b93 = Nativeint_u.of_int (i + 1) } : t93) in
  (* 1. Create an array of size [size] *)
  let a : t93 array = makearray_dynamic_local size (#{ a93 = 0; b93 = #1n } : t93) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1033;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1033 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1034;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1034 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a93 *)
    let el = #{ el with a93 = next_el.#a93 } in
    set_idx_mut a ((.(i).#a93) : (t93 array, _) idx_mut) next_el.#a93;
    mark_test_run 1035;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1035 failed %d %d" size i;
    (* .#b93 *)
    let el = #{ el with b93 = next_el.#b93 } in
    set_idx_mut a ((.(i).#b93) : (t93 array, _) idx_mut) next_el.#b93;
    mark_test_run 1036;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1036 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*****************************)
  (*   t13 = #{ int64; int }   *)
  (*****************************)
  let eq = (fun (#{ a13 = a131; b13 = b131 } : t13) (#{ a13 = a132; b13 = b132 } : t13) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a131 a132 && (fun a b -> Int.equal a b) b131 b132) in
  let mk_value i = (#{ a13 = Int64.of_int (i + 0); b13 = (i + 1) } : t13) in
  (* 1. Create an array of size [size] *)
  let a : t13 array = makearray_dynamic_local size (#{ a13 = 0L; b13 = 1 } : t13) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1037;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1037 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1038;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1038 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a13 *)
    let el = #{ el with a13 = next_el.#a13 } in
    set_idx_mut a ((.(i).#a13) : (t13 array, _) idx_mut) next_el.#a13;
    mark_test_run 1039;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1039 failed %d %d" size i;
    (* .#b13 *)
    let el = #{ el with b13 = next_el.#b13 } in
    set_idx_mut a ((.(i).#b13) : (t13 array, _) idx_mut) next_el.#b13;
    mark_test_run 1040;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1040 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*******************************)
  (*   t14 = #{ int64; int64 }   *)
  (*******************************)
  let eq = (fun (#{ a14 = a141; b14 = b141 } : t14) (#{ a14 = a142; b14 = b142 } : t14) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a141 a142 && (fun a b -> Int64.equal (globalize a) (globalize b)) b141 b142) in
  let mk_value i = (#{ a14 = Int64.of_int (i + 0); b14 = Int64.of_int (i + 1) } : t14) in
  (* 1. Create an array of size [size] *)
  let a : t14 array = makearray_dynamic_local size (#{ a14 = 0L; b14 = 1L } : t14) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1041;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1041 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1042;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1042 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a14 *)
    let el = #{ el with a14 = next_el.#a14 } in
    set_idx_mut a ((.(i).#a14) : (t14 array, _) idx_mut) next_el.#a14;
    mark_test_run 1043;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1043 failed %d %d" size i;
    (* .#b14 *)
    let el = #{ el with b14 = next_el.#b14 } in
    set_idx_mut a ((.(i).#b14) : (t14 array, _) idx_mut) next_el.#b14;
    mark_test_run 1044;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1044 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*******************************)
  (*   t15 = #{ int64; float }   *)
  (*******************************)
  let eq = (fun (#{ a15 = a151; b15 = b151 } : t15) (#{ a15 = a152; b15 = b152 } : t15) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a151 a152 && (fun a b -> Float.equal (globalize a) (globalize b)) b151 b152) in
  let mk_value i = (#{ a15 = Int64.of_int (i + 0); b15 = Float.of_int (i + 1) } : t15) in
  (* 1. Create an array of size [size] *)
  let a : t15 array = makearray_dynamic_local size (#{ a15 = 0L; b15 = 1. } : t15) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1045;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1045 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1046;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1046 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a15 *)
    let el = #{ el with a15 = next_el.#a15 } in
    set_idx_mut a ((.(i).#a15) : (t15 array, _) idx_mut) next_el.#a15;
    mark_test_run 1047;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1047 failed %d %d" size i;
    (* .#b15 *)
    let el = #{ el with b15 = next_el.#b15 } in
    set_idx_mut a ((.(i).#b15) : (t15 array, _) idx_mut) next_el.#b15;
    mark_test_run 1048;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1048 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*********************************)
  (*   t16 = #{ int32#; int32# }   *)
  (*********************************)
  let eq = (fun (#{ a16 = a161; b16 = b161 } : t16) (#{ a16 = a162; b16 = b162 } : t16) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a161 a162 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b161 b162) in
  let mk_value i = (#{ a16 = Int32_u.of_int (i + 0); b16 = Int32_u.of_int (i + 1) } : t16) in
  (* 1. Create an array of size [size] *)
  let a : t16 array = makearray_dynamic_local size (#{ a16 = #0l; b16 = #1l } : t16) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1049;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1049 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1050;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1050 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a16 *)
    let el = #{ el with a16 = next_el.#a16 } in
    set_idx_mut a ((.(i).#a16) : (t16 array, _) idx_mut) next_el.#a16;
    mark_test_run 1051;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1051 failed %d %d" size i;
    (* .#b16 *)
    let el = #{ el with b16 = next_el.#b16 } in
    set_idx_mut a ((.(i).#b16) : (t16 array, _) idx_mut) next_el.#b16;
    mark_test_run 1052;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1052 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*********************************)
  (*   t94 = #{ int32#; int64# }   *)
  (*********************************)
  let eq = (fun (#{ a94 = a941; b94 = b941 } : t94) (#{ a94 = a942; b94 = b942 } : t94) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a941 a942 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b941 b942) in
  let mk_value i = (#{ a94 = Int32_u.of_int (i + 0); b94 = Int64_u.of_int (i + 1) } : t94) in
  (* 1. Create an array of size [size] *)
  let a : t94 array = makearray_dynamic_local size (#{ a94 = #0l; b94 = #1L } : t94) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1053;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1053 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1054;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1054 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a94 *)
    let el = #{ el with a94 = next_el.#a94 } in
    set_idx_mut a ((.(i).#a94) : (t94 array, _) idx_mut) next_el.#a94;
    mark_test_run 1055;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1055 failed %d %d" size i;
    (* .#b94 *)
    let el = #{ el with b94 = next_el.#b94 } in
    set_idx_mut a ((.(i).#b94) : (t94 array, _) idx_mut) next_el.#b94;
    mark_test_run 1056;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1056 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*************************************)
  (*   t95 = #{ int32#; nativeint# }   *)
  (*************************************)
  let eq = (fun (#{ a95 = a951; b95 = b951 } : t95) (#{ a95 = a952; b95 = b952 } : t95) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a951 a952 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b951 b952) in
  let mk_value i = (#{ a95 = Int32_u.of_int (i + 0); b95 = Nativeint_u.of_int (i + 1) } : t95) in
  (* 1. Create an array of size [size] *)
  let a : t95 array = makearray_dynamic_local size (#{ a95 = #0l; b95 = #1n } : t95) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1057;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1057 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1058;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1058 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a95 *)
    let el = #{ el with a95 = next_el.#a95 } in
    set_idx_mut a ((.(i).#a95) : (t95 array, _) idx_mut) next_el.#a95;
    mark_test_run 1059;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1059 failed %d %d" size i;
    (* .#b95 *)
    let el = #{ el with b95 = next_el.#b95 } in
    set_idx_mut a ((.(i).#b95) : (t95 array, _) idx_mut) next_el.#b95;
    mark_test_run 1060;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1060 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*****************************)
  (*   t17 = #{ float; int }   *)
  (*****************************)
  let eq = (fun (#{ a17 = a171; b17 = b171 } : t17) (#{ a17 = a172; b17 = b172 } : t17) -> (fun a b -> Float.equal (globalize a) (globalize b)) a171 a172 && (fun a b -> Int.equal a b) b171 b172) in
  let mk_value i = (#{ a17 = Float.of_int (i + 0); b17 = (i + 1) } : t17) in
  (* 1. Create an array of size [size] *)
  let a : t17 array = makearray_dynamic_local size (#{ a17 = 0.; b17 = 1 } : t17) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1061;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1061 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1062;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1062 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a17 *)
    let el = #{ el with a17 = next_el.#a17 } in
    set_idx_mut a ((.(i).#a17) : (t17 array, _) idx_mut) next_el.#a17;
    mark_test_run 1063;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1063 failed %d %d" size i;
    (* .#b17 *)
    let el = #{ el with b17 = next_el.#b17 } in
    set_idx_mut a ((.(i).#b17) : (t17 array, _) idx_mut) next_el.#b17;
    mark_test_run 1064;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1064 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*******************************)
  (*   t18 = #{ float; int64 }   *)
  (*******************************)
  let eq = (fun (#{ a18 = a181; b18 = b181 } : t18) (#{ a18 = a182; b18 = b182 } : t18) -> (fun a b -> Float.equal (globalize a) (globalize b)) a181 a182 && (fun a b -> Int64.equal (globalize a) (globalize b)) b181 b182) in
  let mk_value i = (#{ a18 = Float.of_int (i + 0); b18 = Int64.of_int (i + 1) } : t18) in
  (* 1. Create an array of size [size] *)
  let a : t18 array = makearray_dynamic_local size (#{ a18 = 0.; b18 = 1L } : t18) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1065;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1065 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1066;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1066 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a18 *)
    let el = #{ el with a18 = next_el.#a18 } in
    set_idx_mut a ((.(i).#a18) : (t18 array, _) idx_mut) next_el.#a18;
    mark_test_run 1067;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1067 failed %d %d" size i;
    (* .#b18 *)
    let el = #{ el with b18 = next_el.#b18 } in
    set_idx_mut a ((.(i).#b18) : (t18 array, _) idx_mut) next_el.#b18;
    mark_test_run 1068;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1068 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*******************************)
  (*   t19 = #{ float; float }   *)
  (*******************************)
  let eq = (fun (#{ a19 = a191; b19 = b191 } : t19) (#{ a19 = a192; b19 = b192 } : t19) -> (fun a b -> Float.equal (globalize a) (globalize b)) a191 a192 && (fun a b -> Float.equal (globalize a) (globalize b)) b191 b192) in
  let mk_value i = (#{ a19 = Float.of_int (i + 0); b19 = Float.of_int (i + 1) } : t19) in
  (* 1. Create an array of size [size] *)
  let a : t19 array = makearray_dynamic_local size (#{ a19 = 0.; b19 = 1. } : t19) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1069;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1069 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1070;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1070 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a19 *)
    let el = #{ el with a19 = next_el.#a19 } in
    set_idx_mut a ((.(i).#a19) : (t19 array, _) idx_mut) next_el.#a19;
    mark_test_run 1071;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1071 failed %d %d" size i;
    (* .#b19 *)
    let el = #{ el with b19 = next_el.#b19 } in
    set_idx_mut a ((.(i).#b19) : (t19 array, _) idx_mut) next_el.#b19;
    mark_test_run 1072;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1072 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*********************************)
  (*   t96 = #{ int64#; int32# }   *)
  (*********************************)
  let eq = (fun (#{ a96 = a961; b96 = b961 } : t96) (#{ a96 = a962; b96 = b962 } : t96) -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a961 a962 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b961 b962) in
  let mk_value i = (#{ a96 = Int64_u.of_int (i + 0); b96 = Int32_u.of_int (i + 1) } : t96) in
  (* 1. Create an array of size [size] *)
  let a : t96 array = makearray_dynamic_local size (#{ a96 = #0L; b96 = #1l } : t96) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1073;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1073 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1074;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1074 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a96 *)
    let el = #{ el with a96 = next_el.#a96 } in
    set_idx_mut a ((.(i).#a96) : (t96 array, _) idx_mut) next_el.#a96;
    mark_test_run 1075;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1075 failed %d %d" size i;
    (* .#b96 *)
    let el = #{ el with b96 = next_el.#b96 } in
    set_idx_mut a ((.(i).#b96) : (t96 array, _) idx_mut) next_el.#b96;
    mark_test_run 1076;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1076 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (********************************)
  (*   t0 = #{ int64#; int64# }   *)
  (********************************)
  let eq = (fun (#{ a0 = a01; b0 = b01 } : t0) (#{ a0 = a02; b0 = b02 } : t0) -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a01 a02 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b01 b02) in
  let mk_value i = (#{ a0 = Int64_u.of_int (i + 0); b0 = Int64_u.of_int (i + 1) } : t0) in
  (* 1. Create an array of size [size] *)
  let a : t0 array = makearray_dynamic_local size (#{ a0 = #0L; b0 = #1L } : t0) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1077;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1077 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1078;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1078 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a0 *)
    let el = #{ el with a0 = next_el.#a0 } in
    set_idx_mut a ((.(i).#a0) : (t0 array, _) idx_mut) next_el.#a0;
    mark_test_run 1079;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1079 failed %d %d" size i;
    (* .#b0 *)
    let el = #{ el with b0 = next_el.#b0 } in
    set_idx_mut a ((.(i).#b0) : (t0 array, _) idx_mut) next_el.#b0;
    mark_test_run 1080;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1080 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*************************************)
  (*   t97 = #{ int64#; nativeint# }   *)
  (*************************************)
  let eq = (fun (#{ a97 = a971; b97 = b971 } : t97) (#{ a97 = a972; b97 = b972 } : t97) -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a971 a972 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b971 b972) in
  let mk_value i = (#{ a97 = Int64_u.of_int (i + 0); b97 = Nativeint_u.of_int (i + 1) } : t97) in
  (* 1. Create an array of size [size] *)
  let a : t97 array = makearray_dynamic_local size (#{ a97 = #0L; b97 = #1n } : t97) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1081;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1081 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1082;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1082 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a97 *)
    let el = #{ el with a97 = next_el.#a97 } in
    set_idx_mut a ((.(i).#a97) : (t97 array, _) idx_mut) next_el.#a97;
    mark_test_run 1083;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1083 failed %d %d" size i;
    (* .#b97 *)
    let el = #{ el with b97 = next_el.#b97 } in
    set_idx_mut a ((.(i).#b97) : (t97 array, _) idx_mut) next_el.#b97;
    mark_test_run 1084;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1084 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*************************************)
  (*   t98 = #{ nativeint#; int32# }   *)
  (*************************************)
  let eq = (fun (#{ a98 = a981; b98 = b981 } : t98) (#{ a98 = a982; b98 = b982 } : t98) -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a981 a982 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b981 b982) in
  let mk_value i = (#{ a98 = Nativeint_u.of_int (i + 0); b98 = Int32_u.of_int (i + 1) } : t98) in
  (* 1. Create an array of size [size] *)
  let a : t98 array = makearray_dynamic_local size (#{ a98 = #0n; b98 = #1l } : t98) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1085;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1085 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1086;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1086 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a98 *)
    let el = #{ el with a98 = next_el.#a98 } in
    set_idx_mut a ((.(i).#a98) : (t98 array, _) idx_mut) next_el.#a98;
    mark_test_run 1087;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1087 failed %d %d" size i;
    (* .#b98 *)
    let el = #{ el with b98 = next_el.#b98 } in
    set_idx_mut a ((.(i).#b98) : (t98 array, _) idx_mut) next_el.#b98;
    mark_test_run 1088;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1088 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*************************************)
  (*   t99 = #{ nativeint#; int64# }   *)
  (*************************************)
  let eq = (fun (#{ a99 = a991; b99 = b991 } : t99) (#{ a99 = a992; b99 = b992 } : t99) -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a991 a992 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b991 b992) in
  let mk_value i = (#{ a99 = Nativeint_u.of_int (i + 0); b99 = Int64_u.of_int (i + 1) } : t99) in
  (* 1. Create an array of size [size] *)
  let a : t99 array = makearray_dynamic_local size (#{ a99 = #0n; b99 = #1L } : t99) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1089;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1089 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1090;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1090 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a99 *)
    let el = #{ el with a99 = next_el.#a99 } in
    set_idx_mut a ((.(i).#a99) : (t99 array, _) idx_mut) next_el.#a99;
    mark_test_run 1091;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1091 failed %d %d" size i;
    (* .#b99 *)
    let el = #{ el with b99 = next_el.#b99 } in
    set_idx_mut a ((.(i).#b99) : (t99 array, _) idx_mut) next_el.#b99;
    mark_test_run 1092;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1092 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (******************************************)
  (*   t100 = #{ nativeint#; nativeint# }   *)
  (******************************************)
  let eq = (fun (#{ a100 = a1001; b100 = b1001 } : t100) (#{ a100 = a1002; b100 = b1002 } : t100) -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a1001 a1002 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b1001 b1002) in
  let mk_value i = (#{ a100 = Nativeint_u.of_int (i + 0); b100 = Nativeint_u.of_int (i + 1) } : t100) in
  (* 1. Create an array of size [size] *)
  let a : t100 array = makearray_dynamic_local size (#{ a100 = #0n; b100 = #1n } : t100) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1093;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1093 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1094;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1094 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a100 *)
    let el = #{ el with a100 = next_el.#a100 } in
    set_idx_mut a ((.(i).#a100) : (t100 array, _) idx_mut) next_el.#a100;
    mark_test_run 1095;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1095 failed %d %d" size i;
    (* .#b100 *)
    let el = #{ el with b100 = next_el.#b100 } in
    set_idx_mut a ((.(i).#b100) : (t100 array, _) idx_mut) next_el.#b100;
    mark_test_run 1096;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1096 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (***************************)
  (*   t20 = #{ #{ int } }   *)
  (***************************)
  let eq = (fun (#{ a20 = a201 } : t20) (#{ a20 = a202 } : t20) -> (fun (#{ a6 = a61 } : t6) (#{ a6 = a62 } : t6) -> (fun a b -> Int.equal a b) a61 a62) a201 a202) in
  let mk_value i = (#{ a20 = (#{ a6 = (i + 0) } : t6) } : t20) in
  (* 1. Create an array of size [size] *)
  let a : t20 array = makearray_dynamic_local size (#{ a20 = (#{ a6 = 0 } : t6) } : t20) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1097;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1097 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1098;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1098 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a20 *)
    let el = #{ el with a20 = next_el.#a20 } in
    set_idx_mut a ((.(i).#a20) : (t20 array, _) idx_mut) next_el.#a20;
    mark_test_run 1099;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1099 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a20.#a6 *)
    let el = #{ el with a20 = #{ el.#a20 with a6 = next_el.#a20.#a6 } } in
    set_idx_mut a ((.(i).#a20.#a6) : (t20 array, _) idx_mut) next_el.#a20.#a6;
    mark_test_run 1100;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1100 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*****************************)
  (*   t21 = #{ #{ int64 } }   *)
  (*****************************)
  let eq = (fun (#{ a21 = a211 } : t21) (#{ a21 = a212 } : t21) -> (fun (#{ a7 = a71 } : t7) (#{ a7 = a72 } : t7) -> (fun a b -> Int64.equal (globalize a) (globalize b)) a71 a72) a211 a212) in
  let mk_value i = (#{ a21 = (#{ a7 = Int64.of_int (i + 0) } : t7) } : t21) in
  (* 1. Create an array of size [size] *)
  let a : t21 array = makearray_dynamic_local size (#{ a21 = (#{ a7 = 0L } : t7) } : t21) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1101;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1101 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1102;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1102 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a21 *)
    let el = #{ el with a21 = next_el.#a21 } in
    set_idx_mut a ((.(i).#a21) : (t21 array, _) idx_mut) next_el.#a21;
    mark_test_run 1103;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1103 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a21.#a7 *)
    let el = #{ el with a21 = #{ el.#a21 with a7 = next_el.#a21.#a7 } } in
    set_idx_mut a ((.(i).#a21.#a7) : (t21 array, _) idx_mut) next_el.#a21.#a7;
    mark_test_run 1104;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1104 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (******************************)
  (*   t22 = #{ #{ int32# } }   *)
  (******************************)
  let eq = (fun (#{ a22 = a221 } : t22) (#{ a22 = a222 } : t22) -> (fun (#{ a8 = a81 } : t8) (#{ a8 = a82 } : t8) -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a81 a82) a221 a222) in
  let mk_value i = (#{ a22 = (#{ a8 = Int32_u.of_int (i + 0) } : t8) } : t22) in
  (* 1. Create an array of size [size] *)
  let a : t22 array = makearray_dynamic_local size (#{ a22 = (#{ a8 = #0l } : t8) } : t22) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1105;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1105 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1106;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1106 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a22 *)
    let el = #{ el with a22 = next_el.#a22 } in
    set_idx_mut a ((.(i).#a22) : (t22 array, _) idx_mut) next_el.#a22;
    mark_test_run 1107;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1107 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a22.#a8 *)
    let el = #{ el with a22 = #{ el.#a22 with a8 = next_el.#a22.#a8 } } in
    set_idx_mut a ((.(i).#a22.#a8) : (t22 array, _) idx_mut) next_el.#a22.#a8;
    mark_test_run 1108;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1108 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*******************************)
  (*   t101 = #{ #{ int64# } }   *)
  (*******************************)
  let eq = (fun (#{ a101 = a1011 } : t101) (#{ a101 = a1012 } : t101) -> (fun (#{ a90 = a901 } : t90) (#{ a90 = a902 } : t90) -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a901 a902) a1011 a1012) in
  let mk_value i = (#{ a101 = (#{ a90 = Int64_u.of_int (i + 0) } : t90) } : t101) in
  (* 1. Create an array of size [size] *)
  let a : t101 array = makearray_dynamic_local size (#{ a101 = (#{ a90 = #0L } : t90) } : t101) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1109;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1109 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1110;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1110 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a101 *)
    let el = #{ el with a101 = next_el.#a101 } in
    set_idx_mut a ((.(i).#a101) : (t101 array, _) idx_mut) next_el.#a101;
    mark_test_run 1111;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1111 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a101.#a90 *)
    let el = #{ el with a101 = #{ el.#a101 with a90 = next_el.#a101.#a90 } } in
    set_idx_mut a ((.(i).#a101.#a90) : (t101 array, _) idx_mut) next_el.#a101.#a90;
    mark_test_run 1112;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1112 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (***********************************)
  (*   t102 = #{ #{ nativeint# } }   *)
  (***********************************)
  let eq = (fun (#{ a102 = a1021 } : t102) (#{ a102 = a1022 } : t102) -> (fun (#{ a91 = a911 } : t91) (#{ a91 = a912 } : t91) -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a911 a912) a1021 a1022) in
  let mk_value i = (#{ a102 = (#{ a91 = Nativeint_u.of_int (i + 0) } : t91) } : t102) in
  (* 1. Create an array of size [size] *)
  let a : t102 array = makearray_dynamic_local size (#{ a102 = (#{ a91 = #0n } : t91) } : t102) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1113;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1113 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1114;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1114 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a102 *)
    let el = #{ el with a102 = next_el.#a102 } in
    set_idx_mut a ((.(i).#a102) : (t102 array, _) idx_mut) next_el.#a102;
    mark_test_run 1115;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1115 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a102.#a91 *)
    let el = #{ el with a102 = #{ el.#a102 with a91 = next_el.#a102.#a91 } } in
    set_idx_mut a ((.(i).#a102.#a91) : (t102 array, _) idx_mut) next_el.#a102.#a91;
    mark_test_run 1116;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1116 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  (*********************************************************)
  (*   t104 = #{ #{ int; int64# }; #{ int64#; float# } }   *)
  (*********************************************************)
  let eq = (fun (#{ a104 = a1041; b104 = b1041 } : t104) (#{ a104 = a1042; b104 = b1042 } : t104) -> (fun (#{ a92 = a921; b92 = b921 } : t92) (#{ a92 = a922; b92 = b922 } : t92) -> (fun a b -> Int.equal a b) a921 a922 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b921 b922) a1041 a1042 && (fun (#{ a103 = a1031; b103 = b1031 } : t103) (#{ a103 = a1032; b103 = b1032 } : t103) -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a1031 a1032 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1031 b1032) b1041 b1042) in
  let mk_value i = (#{ a104 = (#{ a92 = (i + 0); b92 = Int64_u.of_int (i + 1) } : t92); b104 = (#{ a103 = Int64_u.of_int (i + 2); b103 = Float_u.of_int (i + 3) } : t103) } : t104) in
  (* 1. Create an array of size [size] *)
  let a : t104 array = makearray_dynamic_local size (#{ a104 = (#{ a92 = 0; b92 = #1L } : t92); b104 = (#{ a103 = #2L; b103 = #3. } : t103) } : t104) in
  (* 3. Fill [a] with distinct values using block indices *)
  for i = 0 to size - 1 do
    set_idx_mut a (.(i)) (mk_value i);
  done;
  Gc.compact ();
  for i = 0 to size - 1 do
    mark_test_run 1117;
    let test = eq (get a i) (mk_value i) in
    if not test then failwithf "test 1117 failed %d %d" size i;
  done;
  (* Also read back those values with block indices *)
  for i = 0 to size - 1 do
    mark_test_run 1118;
    let test = eq (get_idx_mut a (.(i))) (mk_value i) in
    if not test then failwithf "test 1118 failed %d %d" size i;
  done;
  for i = 0 to size - 1 do
    (* Paths of depth 1 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 1) in
    (* .#a104 *)
    let el = #{ el with a104 = next_el.#a104 } in
    set_idx_mut a ((.(i).#a104) : (t104 array, _) idx_mut) next_el.#a104;
    mark_test_run 1119;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1119 failed %d %d" size i;
    (* .#b104 *)
    let el = #{ el with b104 = next_el.#b104 } in
    set_idx_mut a ((.(i).#b104) : (t104 array, _) idx_mut) next_el.#b104;
    mark_test_run 1120;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1120 failed %d %d" size i;
    (* Paths of depth 2 *)
    let el = get a i in
    let next_el = mk_value (i + 100 * 2) in
    (* .#a104.#a92 *)
    let el = #{ el with a104 = #{ el.#a104 with a92 = next_el.#a104.#a92 } } in
    set_idx_mut a ((.(i).#a104.#a92) : (t104 array, _) idx_mut) next_el.#a104.#a92;
    mark_test_run 1121;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1121 failed %d %d" size i;
    (* .#a104.#b92 *)
    let el = #{ el with a104 = #{ el.#a104 with b92 = next_el.#a104.#b92 } } in
    set_idx_mut a ((.(i).#a104.#b92) : (t104 array, _) idx_mut) next_el.#a104.#b92;
    mark_test_run 1122;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1122 failed %d %d" size i;
    (* .#b104.#a103 *)
    let el = #{ el with b104 = #{ el.#b104 with a103 = next_el.#b104.#a103 } } in
    set_idx_mut a ((.(i).#b104.#a103) : (t104 array, _) idx_mut) next_el.#b104.#a103;
    mark_test_run 1123;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1123 failed %d %d" size i;
    (* .#b104.#b103 *)
    let el = #{ el with b104 = #{ el.#b104 with b103 = next_el.#b104.#b103 } } in
    set_idx_mut a ((.(i).#b104.#b103) : (t104 array, _) idx_mut) next_el.#b104.#b103;
    mark_test_run 1124;
    let test = eq (get_idx_mut a (.(i))) el in
    if not test then failwithf "test 1124 failed %d %d" size i;
    ()
  done;
  Gc.compact ();

  ()

(* Test array idx deepening *)
let () =
  (*********************************************)
  (*   t1 = #{ int64#; #{ int64#; int64# } }   *)
  (*********************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t1 array, _) idx_mut = (.(i)) in
    let shallow : (t1 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1125;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1125 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t1 array, _) idx_mut = (.(i).#a1) in
    let shallow : (t1 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a1) in
    mark_test_run 1126;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1126 failed";
    let shallow : (t1 array, _) idx_mut = (.(i).#a1) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1127;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1127 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t1 array, _) idx_mut = (.(i).#b1) in
    let shallow : (t1 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b1) in
    mark_test_run 1128;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1128 failed";
    let shallow : (t1 array, _) idx_mut = (.(i).#b1) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1129;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1129 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t1 array, _) idx_mut = (.(i).#b1.#a0) in
    let shallow : (t1 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b1.#a0) in
    mark_test_run 1130;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1130 failed";
    let shallow : (t1 array, _) idx_mut = (.(i).#b1) in
    let deepened = (.idx_mut(shallow).#a0) in
    mark_test_run 1131;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1131 failed";
    let shallow : (t1 array, _) idx_mut = (.(i).#b1.#a0) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1132;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1132 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t1 array, _) idx_mut = (.(i).#b1.#b0) in
    let shallow : (t1 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b1.#b0) in
    mark_test_run 1133;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1133 failed";
    let shallow : (t1 array, _) idx_mut = (.(i).#b1) in
    let deepened = (.idx_mut(shallow).#b0) in
    mark_test_run 1134;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1134 failed";
    let shallow : (t1 array, _) idx_mut = (.(i).#b1.#b0) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1135;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1135 failed";
  );

  (*********************************************)
  (*   t3 = #{ string; #{ string; string } }   *)
  (*********************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t3 array, _) idx_mut = (.(i)) in
    let shallow : (t3 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1136;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1136 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t3 array, _) idx_mut = (.(i).#a3) in
    let shallow : (t3 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a3) in
    mark_test_run 1137;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1137 failed";
    let shallow : (t3 array, _) idx_mut = (.(i).#a3) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1138;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1138 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t3 array, _) idx_mut = (.(i).#b3) in
    let shallow : (t3 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b3) in
    mark_test_run 1139;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1139 failed";
    let shallow : (t3 array, _) idx_mut = (.(i).#b3) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1140;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1140 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t3 array, _) idx_mut = (.(i).#b3.#a2) in
    let shallow : (t3 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b3.#a2) in
    mark_test_run 1141;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1141 failed";
    let shallow : (t3 array, _) idx_mut = (.(i).#b3) in
    let deepened = (.idx_mut(shallow).#a2) in
    mark_test_run 1142;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1142 failed";
    let shallow : (t3 array, _) idx_mut = (.(i).#b3.#a2) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1143;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1143 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t3 array, _) idx_mut = (.(i).#b3.#b2) in
    let shallow : (t3 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b3.#b2) in
    mark_test_run 1144;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1144 failed";
    let shallow : (t3 array, _) idx_mut = (.(i).#b3) in
    let deepened = (.idx_mut(shallow).#b2) in
    mark_test_run 1145;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1145 failed";
    let shallow : (t3 array, _) idx_mut = (.(i).#b3.#b2) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1146;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1146 failed";
  );

  (*********************************************)
  (*   t4 = #{ #{ int64#; int64# }; int64# }   *)
  (*********************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t4 array, _) idx_mut = (.(i)) in
    let shallow : (t4 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1147;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1147 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t4 array, _) idx_mut = (.(i).#a4) in
    let shallow : (t4 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a4) in
    mark_test_run 1148;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1148 failed";
    let shallow : (t4 array, _) idx_mut = (.(i).#a4) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1149;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1149 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t4 array, _) idx_mut = (.(i).#b4) in
    let shallow : (t4 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b4) in
    mark_test_run 1150;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1150 failed";
    let shallow : (t4 array, _) idx_mut = (.(i).#b4) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1151;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1151 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t4 array, _) idx_mut = (.(i).#a4.#a0) in
    let shallow : (t4 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a4.#a0) in
    mark_test_run 1152;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1152 failed";
    let shallow : (t4 array, _) idx_mut = (.(i).#a4) in
    let deepened = (.idx_mut(shallow).#a0) in
    mark_test_run 1153;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1153 failed";
    let shallow : (t4 array, _) idx_mut = (.(i).#a4.#a0) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1154;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1154 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t4 array, _) idx_mut = (.(i).#a4.#b0) in
    let shallow : (t4 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a4.#b0) in
    mark_test_run 1155;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1155 failed";
    let shallow : (t4 array, _) idx_mut = (.(i).#a4) in
    let deepened = (.idx_mut(shallow).#b0) in
    mark_test_run 1156;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1156 failed";
    let shallow : (t4 array, _) idx_mut = (.(i).#a4.#b0) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1157;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1157 failed";
  );

  (*********************************************)
  (*   t5 = #{ #{ string; string }; string }   *)
  (*********************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t5 array, _) idx_mut = (.(i)) in
    let shallow : (t5 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1158;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1158 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t5 array, _) idx_mut = (.(i).#a5) in
    let shallow : (t5 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a5) in
    mark_test_run 1159;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1159 failed";
    let shallow : (t5 array, _) idx_mut = (.(i).#a5) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1160;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1160 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t5 array, _) idx_mut = (.(i).#b5) in
    let shallow : (t5 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b5) in
    mark_test_run 1161;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1161 failed";
    let shallow : (t5 array, _) idx_mut = (.(i).#b5) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1162;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1162 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t5 array, _) idx_mut = (.(i).#a5.#a2) in
    let shallow : (t5 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a5.#a2) in
    mark_test_run 1163;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1163 failed";
    let shallow : (t5 array, _) idx_mut = (.(i).#a5) in
    let deepened = (.idx_mut(shallow).#a2) in
    mark_test_run 1164;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1164 failed";
    let shallow : (t5 array, _) idx_mut = (.(i).#a5.#a2) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1165;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1165 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t5 array, _) idx_mut = (.(i).#a5.#b2) in
    let shallow : (t5 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a5.#b2) in
    mark_test_run 1166;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1166 failed";
    let shallow : (t5 array, _) idx_mut = (.(i).#a5) in
    let deepened = (.idx_mut(shallow).#b2) in
    mark_test_run 1167;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1167 failed";
    let shallow : (t5 array, _) idx_mut = (.(i).#a5.#b2) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1168;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1168 failed";
  );

  (***********)
  (*   int   *)
  (***********)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (int array, _) idx_mut = (.(i)) in
    let shallow : (int array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1169;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1169 failed";
  );

  (*************)
  (*   int64   *)
  (*************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (int64 array, _) idx_mut = (.(i)) in
    let shallow : (int64 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1170;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1170 failed";
  );

  (**************)
  (*   int32#   *)
  (**************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (int32# array, _) idx_mut = (.(i)) in
    let shallow : (int32# array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1171;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1171 failed";
  );

  (*********************)
  (*   t6 = #{ int }   *)
  (*********************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t6 array, _) idx_mut = (.(i)) in
    let shallow : (t6 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1172;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1172 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t6 array, _) idx_mut = (.(i).#a6) in
    let shallow : (t6 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a6) in
    mark_test_run 1173;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1173 failed";
    let shallow : (t6 array, _) idx_mut = (.(i).#a6) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1174;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1174 failed";
  );

  (***********************)
  (*   t7 = #{ int64 }   *)
  (***********************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t7 array, _) idx_mut = (.(i)) in
    let shallow : (t7 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1175;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1175 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t7 array, _) idx_mut = (.(i).#a7) in
    let shallow : (t7 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a7) in
    mark_test_run 1176;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1176 failed";
    let shallow : (t7 array, _) idx_mut = (.(i).#a7) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1177;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1177 failed";
  );

  (************************)
  (*   t8 = #{ int32# }   *)
  (************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t8 array, _) idx_mut = (.(i)) in
    let shallow : (t8 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1178;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1178 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t8 array, _) idx_mut = (.(i).#a8) in
    let shallow : (t8 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a8) in
    mark_test_run 1179;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1179 failed";
    let shallow : (t8 array, _) idx_mut = (.(i).#a8) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1180;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1180 failed";
  );

  (**************************)
  (*   t9 = #{ int; int }   *)
  (**************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t9 array, _) idx_mut = (.(i)) in
    let shallow : (t9 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1181;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1181 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t9 array, _) idx_mut = (.(i).#a9) in
    let shallow : (t9 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a9) in
    mark_test_run 1182;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1182 failed";
    let shallow : (t9 array, _) idx_mut = (.(i).#a9) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1183;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1183 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t9 array, _) idx_mut = (.(i).#b9) in
    let shallow : (t9 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b9) in
    mark_test_run 1184;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1184 failed";
    let shallow : (t9 array, _) idx_mut = (.(i).#b9) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1185;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1185 failed";
  );

  (*****************************)
  (*   t10 = #{ int; int64 }   *)
  (*****************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t10 array, _) idx_mut = (.(i)) in
    let shallow : (t10 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1186;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1186 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t10 array, _) idx_mut = (.(i).#a10) in
    let shallow : (t10 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a10) in
    mark_test_run 1187;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1187 failed";
    let shallow : (t10 array, _) idx_mut = (.(i).#a10) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1188;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1188 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t10 array, _) idx_mut = (.(i).#b10) in
    let shallow : (t10 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b10) in
    mark_test_run 1189;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1189 failed";
    let shallow : (t10 array, _) idx_mut = (.(i).#b10) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1190;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1190 failed";
  );

  (******************************)
  (*   t11 = #{ int; int32# }   *)
  (******************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t11 array, _) idx_mut = (.(i)) in
    let shallow : (t11 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1191;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1191 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t11 array, _) idx_mut = (.(i).#a11) in
    let shallow : (t11 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a11) in
    mark_test_run 1192;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1192 failed";
    let shallow : (t11 array, _) idx_mut = (.(i).#a11) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1193;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1193 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t11 array, _) idx_mut = (.(i).#b11) in
    let shallow : (t11 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b11) in
    mark_test_run 1194;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1194 failed";
    let shallow : (t11 array, _) idx_mut = (.(i).#b11) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1195;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1195 failed";
  );

  (*****************************)
  (*   t12 = #{ int; float }   *)
  (*****************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t12 array, _) idx_mut = (.(i)) in
    let shallow : (t12 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1196;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1196 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t12 array, _) idx_mut = (.(i).#a12) in
    let shallow : (t12 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a12) in
    mark_test_run 1197;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1197 failed";
    let shallow : (t12 array, _) idx_mut = (.(i).#a12) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1198;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1198 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t12 array, _) idx_mut = (.(i).#b12) in
    let shallow : (t12 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b12) in
    mark_test_run 1199;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1199 failed";
    let shallow : (t12 array, _) idx_mut = (.(i).#b12) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1200;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1200 failed";
  );

  (*****************************)
  (*   t13 = #{ int64; int }   *)
  (*****************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t13 array, _) idx_mut = (.(i)) in
    let shallow : (t13 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1201;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1201 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t13 array, _) idx_mut = (.(i).#a13) in
    let shallow : (t13 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a13) in
    mark_test_run 1202;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1202 failed";
    let shallow : (t13 array, _) idx_mut = (.(i).#a13) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1203;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1203 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t13 array, _) idx_mut = (.(i).#b13) in
    let shallow : (t13 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b13) in
    mark_test_run 1204;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1204 failed";
    let shallow : (t13 array, _) idx_mut = (.(i).#b13) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1205;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1205 failed";
  );

  (*******************************)
  (*   t14 = #{ int64; int64 }   *)
  (*******************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t14 array, _) idx_mut = (.(i)) in
    let shallow : (t14 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1206;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1206 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t14 array, _) idx_mut = (.(i).#a14) in
    let shallow : (t14 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a14) in
    mark_test_run 1207;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1207 failed";
    let shallow : (t14 array, _) idx_mut = (.(i).#a14) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1208;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1208 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t14 array, _) idx_mut = (.(i).#b14) in
    let shallow : (t14 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b14) in
    mark_test_run 1209;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1209 failed";
    let shallow : (t14 array, _) idx_mut = (.(i).#b14) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1210;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1210 failed";
  );

  (*******************************)
  (*   t15 = #{ int64; float }   *)
  (*******************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t15 array, _) idx_mut = (.(i)) in
    let shallow : (t15 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1211;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1211 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t15 array, _) idx_mut = (.(i).#a15) in
    let shallow : (t15 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a15) in
    mark_test_run 1212;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1212 failed";
    let shallow : (t15 array, _) idx_mut = (.(i).#a15) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1213;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1213 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t15 array, _) idx_mut = (.(i).#b15) in
    let shallow : (t15 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b15) in
    mark_test_run 1214;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1214 failed";
    let shallow : (t15 array, _) idx_mut = (.(i).#b15) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1215;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1215 failed";
  );

  (*********************************)
  (*   t16 = #{ int32#; int32# }   *)
  (*********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t16 array, _) idx_mut = (.(i)) in
    let shallow : (t16 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1216;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1216 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t16 array, _) idx_mut = (.(i).#a16) in
    let shallow : (t16 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a16) in
    mark_test_run 1217;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1217 failed";
    let shallow : (t16 array, _) idx_mut = (.(i).#a16) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1218;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1218 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t16 array, _) idx_mut = (.(i).#b16) in
    let shallow : (t16 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b16) in
    mark_test_run 1219;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1219 failed";
    let shallow : (t16 array, _) idx_mut = (.(i).#b16) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1220;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1220 failed";
  );

  (*****************************)
  (*   t17 = #{ float; int }   *)
  (*****************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t17 array, _) idx_mut = (.(i)) in
    let shallow : (t17 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1221;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1221 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t17 array, _) idx_mut = (.(i).#a17) in
    let shallow : (t17 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a17) in
    mark_test_run 1222;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1222 failed";
    let shallow : (t17 array, _) idx_mut = (.(i).#a17) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1223;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1223 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t17 array, _) idx_mut = (.(i).#b17) in
    let shallow : (t17 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b17) in
    mark_test_run 1224;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1224 failed";
    let shallow : (t17 array, _) idx_mut = (.(i).#b17) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1225;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1225 failed";
  );

  (*******************************)
  (*   t18 = #{ float; int64 }   *)
  (*******************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t18 array, _) idx_mut = (.(i)) in
    let shallow : (t18 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1226;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1226 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t18 array, _) idx_mut = (.(i).#a18) in
    let shallow : (t18 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a18) in
    mark_test_run 1227;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1227 failed";
    let shallow : (t18 array, _) idx_mut = (.(i).#a18) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1228;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1228 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t18 array, _) idx_mut = (.(i).#b18) in
    let shallow : (t18 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b18) in
    mark_test_run 1229;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1229 failed";
    let shallow : (t18 array, _) idx_mut = (.(i).#b18) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1230;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1230 failed";
  );

  (*******************************)
  (*   t19 = #{ float; float }   *)
  (*******************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t19 array, _) idx_mut = (.(i)) in
    let shallow : (t19 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1231;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1231 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t19 array, _) idx_mut = (.(i).#a19) in
    let shallow : (t19 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a19) in
    mark_test_run 1232;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1232 failed";
    let shallow : (t19 array, _) idx_mut = (.(i).#a19) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1233;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1233 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t19 array, _) idx_mut = (.(i).#b19) in
    let shallow : (t19 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b19) in
    mark_test_run 1234;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1234 failed";
    let shallow : (t19 array, _) idx_mut = (.(i).#b19) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1235;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1235 failed";
  );

  (***************************)
  (*   t20 = #{ #{ int } }   *)
  (***************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t20 array, _) idx_mut = (.(i)) in
    let shallow : (t20 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1236;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1236 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t20 array, _) idx_mut = (.(i).#a20) in
    let shallow : (t20 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a20) in
    mark_test_run 1237;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1237 failed";
    let shallow : (t20 array, _) idx_mut = (.(i).#a20) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1238;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1238 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t20 array, _) idx_mut = (.(i).#a20.#a6) in
    let shallow : (t20 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a20.#a6) in
    mark_test_run 1239;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1239 failed";
    let shallow : (t20 array, _) idx_mut = (.(i).#a20) in
    let deepened = (.idx_mut(shallow).#a6) in
    mark_test_run 1240;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1240 failed";
    let shallow : (t20 array, _) idx_mut = (.(i).#a20.#a6) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1241;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1241 failed";
  );

  (*****************************)
  (*   t21 = #{ #{ int64 } }   *)
  (*****************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t21 array, _) idx_mut = (.(i)) in
    let shallow : (t21 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1242;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1242 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t21 array, _) idx_mut = (.(i).#a21) in
    let shallow : (t21 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a21) in
    mark_test_run 1243;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1243 failed";
    let shallow : (t21 array, _) idx_mut = (.(i).#a21) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1244;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1244 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t21 array, _) idx_mut = (.(i).#a21.#a7) in
    let shallow : (t21 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a21.#a7) in
    mark_test_run 1245;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1245 failed";
    let shallow : (t21 array, _) idx_mut = (.(i).#a21) in
    let deepened = (.idx_mut(shallow).#a7) in
    mark_test_run 1246;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1246 failed";
    let shallow : (t21 array, _) idx_mut = (.(i).#a21.#a7) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1247;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1247 failed";
  );

  (******************************)
  (*   t22 = #{ #{ int32# } }   *)
  (******************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t22 array, _) idx_mut = (.(i)) in
    let shallow : (t22 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1248;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1248 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t22 array, _) idx_mut = (.(i).#a22) in
    let shallow : (t22 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a22) in
    mark_test_run 1249;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1249 failed";
    let shallow : (t22 array, _) idx_mut = (.(i).#a22) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1250;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1250 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t22 array, _) idx_mut = (.(i).#a22.#a8) in
    let shallow : (t22 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a22.#a8) in
    mark_test_run 1251;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1251 failed";
    let shallow : (t22 array, _) idx_mut = (.(i).#a22) in
    let deepened = (.idx_mut(shallow).#a8) in
    mark_test_run 1252;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1252 failed";
    let shallow : (t22 array, _) idx_mut = (.(i).#a22.#a8) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1253;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1253 failed";
  );

  (********************************)
  (*   t23 = #{ int; int; int }   *)
  (********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t23 array, _) idx_mut = (.(i)) in
    let shallow : (t23 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1254;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1254 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t23 array, _) idx_mut = (.(i).#a23) in
    let shallow : (t23 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a23) in
    mark_test_run 1255;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1255 failed";
    let shallow : (t23 array, _) idx_mut = (.(i).#a23) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1256;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1256 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t23 array, _) idx_mut = (.(i).#b23) in
    let shallow : (t23 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b23) in
    mark_test_run 1257;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1257 failed";
    let shallow : (t23 array, _) idx_mut = (.(i).#b23) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1258;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1258 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t23 array, _) idx_mut = (.(i).#c23) in
    let shallow : (t23 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c23) in
    mark_test_run 1259;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1259 failed";
    let shallow : (t23 array, _) idx_mut = (.(i).#c23) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1260;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1260 failed";
  );

  (**********************************)
  (*   t24 = #{ int; int; int64 }   *)
  (**********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t24 array, _) idx_mut = (.(i)) in
    let shallow : (t24 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1261;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1261 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t24 array, _) idx_mut = (.(i).#a24) in
    let shallow : (t24 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a24) in
    mark_test_run 1262;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1262 failed";
    let shallow : (t24 array, _) idx_mut = (.(i).#a24) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1263;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1263 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t24 array, _) idx_mut = (.(i).#b24) in
    let shallow : (t24 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b24) in
    mark_test_run 1264;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1264 failed";
    let shallow : (t24 array, _) idx_mut = (.(i).#b24) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1265;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1265 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t24 array, _) idx_mut = (.(i).#c24) in
    let shallow : (t24 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c24) in
    mark_test_run 1266;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1266 failed";
    let shallow : (t24 array, _) idx_mut = (.(i).#c24) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1267;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1267 failed";
  );

  (***********************************)
  (*   t25 = #{ int; int; int32# }   *)
  (***********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t25 array, _) idx_mut = (.(i)) in
    let shallow : (t25 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1268;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1268 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t25 array, _) idx_mut = (.(i).#a25) in
    let shallow : (t25 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a25) in
    mark_test_run 1269;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1269 failed";
    let shallow : (t25 array, _) idx_mut = (.(i).#a25) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1270;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1270 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t25 array, _) idx_mut = (.(i).#b25) in
    let shallow : (t25 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b25) in
    mark_test_run 1271;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1271 failed";
    let shallow : (t25 array, _) idx_mut = (.(i).#b25) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1272;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1272 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t25 array, _) idx_mut = (.(i).#c25) in
    let shallow : (t25 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c25) in
    mark_test_run 1273;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1273 failed";
    let shallow : (t25 array, _) idx_mut = (.(i).#c25) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1274;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1274 failed";
  );

  (**********************************)
  (*   t26 = #{ int; int; float }   *)
  (**********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t26 array, _) idx_mut = (.(i)) in
    let shallow : (t26 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1275;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1275 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t26 array, _) idx_mut = (.(i).#a26) in
    let shallow : (t26 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a26) in
    mark_test_run 1276;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1276 failed";
    let shallow : (t26 array, _) idx_mut = (.(i).#a26) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1277;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1277 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t26 array, _) idx_mut = (.(i).#b26) in
    let shallow : (t26 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b26) in
    mark_test_run 1278;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1278 failed";
    let shallow : (t26 array, _) idx_mut = (.(i).#b26) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1279;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1279 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t26 array, _) idx_mut = (.(i).#c26) in
    let shallow : (t26 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c26) in
    mark_test_run 1280;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1280 failed";
    let shallow : (t26 array, _) idx_mut = (.(i).#c26) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1281;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1281 failed";
  );

  (**********************************)
  (*   t27 = #{ int; int64; int }   *)
  (**********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t27 array, _) idx_mut = (.(i)) in
    let shallow : (t27 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1282;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1282 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t27 array, _) idx_mut = (.(i).#a27) in
    let shallow : (t27 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a27) in
    mark_test_run 1283;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1283 failed";
    let shallow : (t27 array, _) idx_mut = (.(i).#a27) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1284;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1284 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t27 array, _) idx_mut = (.(i).#b27) in
    let shallow : (t27 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b27) in
    mark_test_run 1285;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1285 failed";
    let shallow : (t27 array, _) idx_mut = (.(i).#b27) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1286;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1286 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t27 array, _) idx_mut = (.(i).#c27) in
    let shallow : (t27 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c27) in
    mark_test_run 1287;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1287 failed";
    let shallow : (t27 array, _) idx_mut = (.(i).#c27) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1288;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1288 failed";
  );

  (************************************)
  (*   t28 = #{ int; int64; int64 }   *)
  (************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t28 array, _) idx_mut = (.(i)) in
    let shallow : (t28 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1289;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1289 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t28 array, _) idx_mut = (.(i).#a28) in
    let shallow : (t28 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a28) in
    mark_test_run 1290;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1290 failed";
    let shallow : (t28 array, _) idx_mut = (.(i).#a28) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1291;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1291 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t28 array, _) idx_mut = (.(i).#b28) in
    let shallow : (t28 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b28) in
    mark_test_run 1292;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1292 failed";
    let shallow : (t28 array, _) idx_mut = (.(i).#b28) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1293;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1293 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t28 array, _) idx_mut = (.(i).#c28) in
    let shallow : (t28 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c28) in
    mark_test_run 1294;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1294 failed";
    let shallow : (t28 array, _) idx_mut = (.(i).#c28) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1295;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1295 failed";
  );

  (************************************)
  (*   t29 = #{ int; int64; float }   *)
  (************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t29 array, _) idx_mut = (.(i)) in
    let shallow : (t29 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1296;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1296 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t29 array, _) idx_mut = (.(i).#a29) in
    let shallow : (t29 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a29) in
    mark_test_run 1297;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1297 failed";
    let shallow : (t29 array, _) idx_mut = (.(i).#a29) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1298;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1298 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t29 array, _) idx_mut = (.(i).#b29) in
    let shallow : (t29 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b29) in
    mark_test_run 1299;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1299 failed";
    let shallow : (t29 array, _) idx_mut = (.(i).#b29) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1300;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1300 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t29 array, _) idx_mut = (.(i).#c29) in
    let shallow : (t29 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c29) in
    mark_test_run 1301;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1301 failed";
    let shallow : (t29 array, _) idx_mut = (.(i).#c29) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1302;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1302 failed";
  );

  (**************************************)
  (*   t30 = #{ int; int32#; int32# }   *)
  (**************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t30 array, _) idx_mut = (.(i)) in
    let shallow : (t30 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1303;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1303 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t30 array, _) idx_mut = (.(i).#a30) in
    let shallow : (t30 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a30) in
    mark_test_run 1304;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1304 failed";
    let shallow : (t30 array, _) idx_mut = (.(i).#a30) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1305;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1305 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t30 array, _) idx_mut = (.(i).#b30) in
    let shallow : (t30 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b30) in
    mark_test_run 1306;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1306 failed";
    let shallow : (t30 array, _) idx_mut = (.(i).#b30) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1307;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1307 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t30 array, _) idx_mut = (.(i).#c30) in
    let shallow : (t30 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c30) in
    mark_test_run 1308;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1308 failed";
    let shallow : (t30 array, _) idx_mut = (.(i).#c30) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1309;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1309 failed";
  );

  (**********************************)
  (*   t31 = #{ int; float; int }   *)
  (**********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t31 array, _) idx_mut = (.(i)) in
    let shallow : (t31 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1310;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1310 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t31 array, _) idx_mut = (.(i).#a31) in
    let shallow : (t31 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a31) in
    mark_test_run 1311;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1311 failed";
    let shallow : (t31 array, _) idx_mut = (.(i).#a31) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1312;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1312 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t31 array, _) idx_mut = (.(i).#b31) in
    let shallow : (t31 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b31) in
    mark_test_run 1313;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1313 failed";
    let shallow : (t31 array, _) idx_mut = (.(i).#b31) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1314;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1314 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t31 array, _) idx_mut = (.(i).#c31) in
    let shallow : (t31 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c31) in
    mark_test_run 1315;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1315 failed";
    let shallow : (t31 array, _) idx_mut = (.(i).#c31) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1316;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1316 failed";
  );

  (************************************)
  (*   t32 = #{ int; float; int64 }   *)
  (************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t32 array, _) idx_mut = (.(i)) in
    let shallow : (t32 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1317;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1317 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t32 array, _) idx_mut = (.(i).#a32) in
    let shallow : (t32 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a32) in
    mark_test_run 1318;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1318 failed";
    let shallow : (t32 array, _) idx_mut = (.(i).#a32) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1319;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1319 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t32 array, _) idx_mut = (.(i).#b32) in
    let shallow : (t32 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b32) in
    mark_test_run 1320;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1320 failed";
    let shallow : (t32 array, _) idx_mut = (.(i).#b32) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1321;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1321 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t32 array, _) idx_mut = (.(i).#c32) in
    let shallow : (t32 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c32) in
    mark_test_run 1322;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1322 failed";
    let shallow : (t32 array, _) idx_mut = (.(i).#c32) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1323;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1323 failed";
  );

  (************************************)
  (*   t33 = #{ int; float; float }   *)
  (************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t33 array, _) idx_mut = (.(i)) in
    let shallow : (t33 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1324;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1324 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t33 array, _) idx_mut = (.(i).#a33) in
    let shallow : (t33 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a33) in
    mark_test_run 1325;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1325 failed";
    let shallow : (t33 array, _) idx_mut = (.(i).#a33) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1326;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1326 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t33 array, _) idx_mut = (.(i).#b33) in
    let shallow : (t33 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b33) in
    mark_test_run 1327;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1327 failed";
    let shallow : (t33 array, _) idx_mut = (.(i).#b33) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1328;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1328 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t33 array, _) idx_mut = (.(i).#c33) in
    let shallow : (t33 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c33) in
    mark_test_run 1329;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1329 failed";
    let shallow : (t33 array, _) idx_mut = (.(i).#c33) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1330;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1330 failed";
  );

  (**********************************)
  (*   t34 = #{ int64; int; int }   *)
  (**********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t34 array, _) idx_mut = (.(i)) in
    let shallow : (t34 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1331;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1331 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t34 array, _) idx_mut = (.(i).#a34) in
    let shallow : (t34 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a34) in
    mark_test_run 1332;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1332 failed";
    let shallow : (t34 array, _) idx_mut = (.(i).#a34) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1333;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1333 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t34 array, _) idx_mut = (.(i).#b34) in
    let shallow : (t34 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b34) in
    mark_test_run 1334;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1334 failed";
    let shallow : (t34 array, _) idx_mut = (.(i).#b34) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1335;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1335 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t34 array, _) idx_mut = (.(i).#c34) in
    let shallow : (t34 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c34) in
    mark_test_run 1336;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1336 failed";
    let shallow : (t34 array, _) idx_mut = (.(i).#c34) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1337;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1337 failed";
  );

  (************************************)
  (*   t35 = #{ int64; int; int64 }   *)
  (************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t35 array, _) idx_mut = (.(i)) in
    let shallow : (t35 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1338;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1338 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t35 array, _) idx_mut = (.(i).#a35) in
    let shallow : (t35 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a35) in
    mark_test_run 1339;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1339 failed";
    let shallow : (t35 array, _) idx_mut = (.(i).#a35) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1340;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1340 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t35 array, _) idx_mut = (.(i).#b35) in
    let shallow : (t35 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b35) in
    mark_test_run 1341;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1341 failed";
    let shallow : (t35 array, _) idx_mut = (.(i).#b35) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1342;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1342 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t35 array, _) idx_mut = (.(i).#c35) in
    let shallow : (t35 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c35) in
    mark_test_run 1343;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1343 failed";
    let shallow : (t35 array, _) idx_mut = (.(i).#c35) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1344;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1344 failed";
  );

  (************************************)
  (*   t36 = #{ int64; int; float }   *)
  (************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t36 array, _) idx_mut = (.(i)) in
    let shallow : (t36 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1345;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1345 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t36 array, _) idx_mut = (.(i).#a36) in
    let shallow : (t36 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a36) in
    mark_test_run 1346;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1346 failed";
    let shallow : (t36 array, _) idx_mut = (.(i).#a36) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1347;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1347 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t36 array, _) idx_mut = (.(i).#b36) in
    let shallow : (t36 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b36) in
    mark_test_run 1348;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1348 failed";
    let shallow : (t36 array, _) idx_mut = (.(i).#b36) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1349;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1349 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t36 array, _) idx_mut = (.(i).#c36) in
    let shallow : (t36 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c36) in
    mark_test_run 1350;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1350 failed";
    let shallow : (t36 array, _) idx_mut = (.(i).#c36) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1351;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1351 failed";
  );

  (************************************)
  (*   t37 = #{ int64; int64; int }   *)
  (************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t37 array, _) idx_mut = (.(i)) in
    let shallow : (t37 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1352;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1352 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t37 array, _) idx_mut = (.(i).#a37) in
    let shallow : (t37 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a37) in
    mark_test_run 1353;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1353 failed";
    let shallow : (t37 array, _) idx_mut = (.(i).#a37) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1354;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1354 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t37 array, _) idx_mut = (.(i).#b37) in
    let shallow : (t37 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b37) in
    mark_test_run 1355;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1355 failed";
    let shallow : (t37 array, _) idx_mut = (.(i).#b37) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1356;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1356 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t37 array, _) idx_mut = (.(i).#c37) in
    let shallow : (t37 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c37) in
    mark_test_run 1357;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1357 failed";
    let shallow : (t37 array, _) idx_mut = (.(i).#c37) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1358;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1358 failed";
  );

  (**************************************)
  (*   t38 = #{ int64; int64; int64 }   *)
  (**************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t38 array, _) idx_mut = (.(i)) in
    let shallow : (t38 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1359;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1359 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t38 array, _) idx_mut = (.(i).#a38) in
    let shallow : (t38 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a38) in
    mark_test_run 1360;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1360 failed";
    let shallow : (t38 array, _) idx_mut = (.(i).#a38) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1361;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1361 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t38 array, _) idx_mut = (.(i).#b38) in
    let shallow : (t38 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b38) in
    mark_test_run 1362;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1362 failed";
    let shallow : (t38 array, _) idx_mut = (.(i).#b38) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1363;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1363 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t38 array, _) idx_mut = (.(i).#c38) in
    let shallow : (t38 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c38) in
    mark_test_run 1364;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1364 failed";
    let shallow : (t38 array, _) idx_mut = (.(i).#c38) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1365;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1365 failed";
  );

  (**************************************)
  (*   t39 = #{ int64; int64; float }   *)
  (**************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t39 array, _) idx_mut = (.(i)) in
    let shallow : (t39 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1366;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1366 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t39 array, _) idx_mut = (.(i).#a39) in
    let shallow : (t39 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a39) in
    mark_test_run 1367;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1367 failed";
    let shallow : (t39 array, _) idx_mut = (.(i).#a39) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1368;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1368 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t39 array, _) idx_mut = (.(i).#b39) in
    let shallow : (t39 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b39) in
    mark_test_run 1369;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1369 failed";
    let shallow : (t39 array, _) idx_mut = (.(i).#b39) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1370;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1370 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t39 array, _) idx_mut = (.(i).#c39) in
    let shallow : (t39 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c39) in
    mark_test_run 1371;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1371 failed";
    let shallow : (t39 array, _) idx_mut = (.(i).#c39) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1372;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1372 failed";
  );

  (************************************)
  (*   t40 = #{ int64; float; int }   *)
  (************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t40 array, _) idx_mut = (.(i)) in
    let shallow : (t40 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1373;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1373 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t40 array, _) idx_mut = (.(i).#a40) in
    let shallow : (t40 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a40) in
    mark_test_run 1374;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1374 failed";
    let shallow : (t40 array, _) idx_mut = (.(i).#a40) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1375;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1375 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t40 array, _) idx_mut = (.(i).#b40) in
    let shallow : (t40 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b40) in
    mark_test_run 1376;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1376 failed";
    let shallow : (t40 array, _) idx_mut = (.(i).#b40) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1377;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1377 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t40 array, _) idx_mut = (.(i).#c40) in
    let shallow : (t40 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c40) in
    mark_test_run 1378;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1378 failed";
    let shallow : (t40 array, _) idx_mut = (.(i).#c40) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1379;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1379 failed";
  );

  (**************************************)
  (*   t41 = #{ int64; float; int64 }   *)
  (**************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t41 array, _) idx_mut = (.(i)) in
    let shallow : (t41 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1380;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1380 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t41 array, _) idx_mut = (.(i).#a41) in
    let shallow : (t41 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a41) in
    mark_test_run 1381;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1381 failed";
    let shallow : (t41 array, _) idx_mut = (.(i).#a41) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1382;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1382 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t41 array, _) idx_mut = (.(i).#b41) in
    let shallow : (t41 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b41) in
    mark_test_run 1383;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1383 failed";
    let shallow : (t41 array, _) idx_mut = (.(i).#b41) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1384;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1384 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t41 array, _) idx_mut = (.(i).#c41) in
    let shallow : (t41 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c41) in
    mark_test_run 1385;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1385 failed";
    let shallow : (t41 array, _) idx_mut = (.(i).#c41) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1386;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1386 failed";
  );

  (**************************************)
  (*   t42 = #{ int64; float; float }   *)
  (**************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t42 array, _) idx_mut = (.(i)) in
    let shallow : (t42 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1387;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1387 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t42 array, _) idx_mut = (.(i).#a42) in
    let shallow : (t42 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a42) in
    mark_test_run 1388;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1388 failed";
    let shallow : (t42 array, _) idx_mut = (.(i).#a42) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1389;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1389 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t42 array, _) idx_mut = (.(i).#b42) in
    let shallow : (t42 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b42) in
    mark_test_run 1390;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1390 failed";
    let shallow : (t42 array, _) idx_mut = (.(i).#b42) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1391;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1391 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t42 array, _) idx_mut = (.(i).#c42) in
    let shallow : (t42 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c42) in
    mark_test_run 1392;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1392 failed";
    let shallow : (t42 array, _) idx_mut = (.(i).#c42) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1393;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1393 failed";
  );

  (*****************************************)
  (*   t43 = #{ int32#; int32#; int32# }   *)
  (*****************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t43 array, _) idx_mut = (.(i)) in
    let shallow : (t43 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1394;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1394 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t43 array, _) idx_mut = (.(i).#a43) in
    let shallow : (t43 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a43) in
    mark_test_run 1395;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1395 failed";
    let shallow : (t43 array, _) idx_mut = (.(i).#a43) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1396;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1396 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t43 array, _) idx_mut = (.(i).#b43) in
    let shallow : (t43 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b43) in
    mark_test_run 1397;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1397 failed";
    let shallow : (t43 array, _) idx_mut = (.(i).#b43) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1398;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1398 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t43 array, _) idx_mut = (.(i).#c43) in
    let shallow : (t43 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c43) in
    mark_test_run 1399;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1399 failed";
    let shallow : (t43 array, _) idx_mut = (.(i).#c43) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1400;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1400 failed";
  );

  (**********************************)
  (*   t44 = #{ float; int; int }   *)
  (**********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t44 array, _) idx_mut = (.(i)) in
    let shallow : (t44 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1401;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1401 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t44 array, _) idx_mut = (.(i).#a44) in
    let shallow : (t44 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a44) in
    mark_test_run 1402;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1402 failed";
    let shallow : (t44 array, _) idx_mut = (.(i).#a44) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1403;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1403 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t44 array, _) idx_mut = (.(i).#b44) in
    let shallow : (t44 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b44) in
    mark_test_run 1404;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1404 failed";
    let shallow : (t44 array, _) idx_mut = (.(i).#b44) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1405;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1405 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t44 array, _) idx_mut = (.(i).#c44) in
    let shallow : (t44 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c44) in
    mark_test_run 1406;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1406 failed";
    let shallow : (t44 array, _) idx_mut = (.(i).#c44) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1407;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1407 failed";
  );

  (************************************)
  (*   t45 = #{ float; int; int64 }   *)
  (************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t45 array, _) idx_mut = (.(i)) in
    let shallow : (t45 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1408;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1408 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t45 array, _) idx_mut = (.(i).#a45) in
    let shallow : (t45 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a45) in
    mark_test_run 1409;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1409 failed";
    let shallow : (t45 array, _) idx_mut = (.(i).#a45) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1410;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1410 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t45 array, _) idx_mut = (.(i).#b45) in
    let shallow : (t45 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b45) in
    mark_test_run 1411;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1411 failed";
    let shallow : (t45 array, _) idx_mut = (.(i).#b45) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1412;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1412 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t45 array, _) idx_mut = (.(i).#c45) in
    let shallow : (t45 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c45) in
    mark_test_run 1413;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1413 failed";
    let shallow : (t45 array, _) idx_mut = (.(i).#c45) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1414;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1414 failed";
  );

  (************************************)
  (*   t46 = #{ float; int; float }   *)
  (************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t46 array, _) idx_mut = (.(i)) in
    let shallow : (t46 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1415;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1415 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t46 array, _) idx_mut = (.(i).#a46) in
    let shallow : (t46 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a46) in
    mark_test_run 1416;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1416 failed";
    let shallow : (t46 array, _) idx_mut = (.(i).#a46) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1417;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1417 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t46 array, _) idx_mut = (.(i).#b46) in
    let shallow : (t46 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b46) in
    mark_test_run 1418;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1418 failed";
    let shallow : (t46 array, _) idx_mut = (.(i).#b46) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1419;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1419 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t46 array, _) idx_mut = (.(i).#c46) in
    let shallow : (t46 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c46) in
    mark_test_run 1420;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1420 failed";
    let shallow : (t46 array, _) idx_mut = (.(i).#c46) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1421;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1421 failed";
  );

  (************************************)
  (*   t47 = #{ float; int64; int }   *)
  (************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t47 array, _) idx_mut = (.(i)) in
    let shallow : (t47 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1422;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1422 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t47 array, _) idx_mut = (.(i).#a47) in
    let shallow : (t47 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a47) in
    mark_test_run 1423;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1423 failed";
    let shallow : (t47 array, _) idx_mut = (.(i).#a47) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1424;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1424 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t47 array, _) idx_mut = (.(i).#b47) in
    let shallow : (t47 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b47) in
    mark_test_run 1425;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1425 failed";
    let shallow : (t47 array, _) idx_mut = (.(i).#b47) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1426;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1426 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t47 array, _) idx_mut = (.(i).#c47) in
    let shallow : (t47 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c47) in
    mark_test_run 1427;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1427 failed";
    let shallow : (t47 array, _) idx_mut = (.(i).#c47) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1428;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1428 failed";
  );

  (**************************************)
  (*   t48 = #{ float; int64; int64 }   *)
  (**************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t48 array, _) idx_mut = (.(i)) in
    let shallow : (t48 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1429;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1429 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t48 array, _) idx_mut = (.(i).#a48) in
    let shallow : (t48 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a48) in
    mark_test_run 1430;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1430 failed";
    let shallow : (t48 array, _) idx_mut = (.(i).#a48) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1431;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1431 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t48 array, _) idx_mut = (.(i).#b48) in
    let shallow : (t48 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b48) in
    mark_test_run 1432;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1432 failed";
    let shallow : (t48 array, _) idx_mut = (.(i).#b48) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1433;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1433 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t48 array, _) idx_mut = (.(i).#c48) in
    let shallow : (t48 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c48) in
    mark_test_run 1434;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1434 failed";
    let shallow : (t48 array, _) idx_mut = (.(i).#c48) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1435;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1435 failed";
  );

  (**************************************)
  (*   t49 = #{ float; int64; float }   *)
  (**************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t49 array, _) idx_mut = (.(i)) in
    let shallow : (t49 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1436;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1436 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t49 array, _) idx_mut = (.(i).#a49) in
    let shallow : (t49 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a49) in
    mark_test_run 1437;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1437 failed";
    let shallow : (t49 array, _) idx_mut = (.(i).#a49) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1438;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1438 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t49 array, _) idx_mut = (.(i).#b49) in
    let shallow : (t49 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b49) in
    mark_test_run 1439;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1439 failed";
    let shallow : (t49 array, _) idx_mut = (.(i).#b49) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1440;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1440 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t49 array, _) idx_mut = (.(i).#c49) in
    let shallow : (t49 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c49) in
    mark_test_run 1441;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1441 failed";
    let shallow : (t49 array, _) idx_mut = (.(i).#c49) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1442;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1442 failed";
  );

  (************************************)
  (*   t50 = #{ float; float; int }   *)
  (************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t50 array, _) idx_mut = (.(i)) in
    let shallow : (t50 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1443;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1443 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t50 array, _) idx_mut = (.(i).#a50) in
    let shallow : (t50 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a50) in
    mark_test_run 1444;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1444 failed";
    let shallow : (t50 array, _) idx_mut = (.(i).#a50) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1445;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1445 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t50 array, _) idx_mut = (.(i).#b50) in
    let shallow : (t50 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b50) in
    mark_test_run 1446;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1446 failed";
    let shallow : (t50 array, _) idx_mut = (.(i).#b50) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1447;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1447 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t50 array, _) idx_mut = (.(i).#c50) in
    let shallow : (t50 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c50) in
    mark_test_run 1448;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1448 failed";
    let shallow : (t50 array, _) idx_mut = (.(i).#c50) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1449;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1449 failed";
  );

  (**************************************)
  (*   t51 = #{ float; float; int64 }   *)
  (**************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t51 array, _) idx_mut = (.(i)) in
    let shallow : (t51 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1450;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1450 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t51 array, _) idx_mut = (.(i).#a51) in
    let shallow : (t51 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a51) in
    mark_test_run 1451;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1451 failed";
    let shallow : (t51 array, _) idx_mut = (.(i).#a51) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1452;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1452 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t51 array, _) idx_mut = (.(i).#b51) in
    let shallow : (t51 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b51) in
    mark_test_run 1453;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1453 failed";
    let shallow : (t51 array, _) idx_mut = (.(i).#b51) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1454;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1454 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t51 array, _) idx_mut = (.(i).#c51) in
    let shallow : (t51 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c51) in
    mark_test_run 1455;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1455 failed";
    let shallow : (t51 array, _) idx_mut = (.(i).#c51) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1456;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1456 failed";
  );

  (**************************************)
  (*   t52 = #{ float; float; float }   *)
  (**************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t52 array, _) idx_mut = (.(i)) in
    let shallow : (t52 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1457;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1457 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t52 array, _) idx_mut = (.(i).#a52) in
    let shallow : (t52 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a52) in
    mark_test_run 1458;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1458 failed";
    let shallow : (t52 array, _) idx_mut = (.(i).#a52) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1459;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1459 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t52 array, _) idx_mut = (.(i).#b52) in
    let shallow : (t52 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b52) in
    mark_test_run 1460;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1460 failed";
    let shallow : (t52 array, _) idx_mut = (.(i).#b52) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1461;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1461 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t52 array, _) idx_mut = (.(i).#c52) in
    let shallow : (t52 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#c52) in
    mark_test_run 1462;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1462 failed";
    let shallow : (t52 array, _) idx_mut = (.(i).#c52) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1463;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1463 failed";
  );

  (********************************)
  (*   t53 = #{ int; #{ int } }   *)
  (********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t53 array, _) idx_mut = (.(i)) in
    let shallow : (t53 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1464;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1464 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t53 array, _) idx_mut = (.(i).#a53) in
    let shallow : (t53 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a53) in
    mark_test_run 1465;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1465 failed";
    let shallow : (t53 array, _) idx_mut = (.(i).#a53) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1466;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1466 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t53 array, _) idx_mut = (.(i).#b53) in
    let shallow : (t53 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b53) in
    mark_test_run 1467;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1467 failed";
    let shallow : (t53 array, _) idx_mut = (.(i).#b53) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1468;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1468 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t53 array, _) idx_mut = (.(i).#b53.#a6) in
    let shallow : (t53 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b53.#a6) in
    mark_test_run 1469;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1469 failed";
    let shallow : (t53 array, _) idx_mut = (.(i).#b53) in
    let deepened = (.idx_mut(shallow).#a6) in
    mark_test_run 1470;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1470 failed";
    let shallow : (t53 array, _) idx_mut = (.(i).#b53.#a6) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1471;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1471 failed";
  );

  (**********************************)
  (*   t54 = #{ int; #{ int64 } }   *)
  (**********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t54 array, _) idx_mut = (.(i)) in
    let shallow : (t54 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1472;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1472 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t54 array, _) idx_mut = (.(i).#a54) in
    let shallow : (t54 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a54) in
    mark_test_run 1473;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1473 failed";
    let shallow : (t54 array, _) idx_mut = (.(i).#a54) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1474;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1474 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t54 array, _) idx_mut = (.(i).#b54) in
    let shallow : (t54 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b54) in
    mark_test_run 1475;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1475 failed";
    let shallow : (t54 array, _) idx_mut = (.(i).#b54) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1476;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1476 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t54 array, _) idx_mut = (.(i).#b54.#a7) in
    let shallow : (t54 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b54.#a7) in
    mark_test_run 1477;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1477 failed";
    let shallow : (t54 array, _) idx_mut = (.(i).#b54) in
    let deepened = (.idx_mut(shallow).#a7) in
    mark_test_run 1478;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1478 failed";
    let shallow : (t54 array, _) idx_mut = (.(i).#b54.#a7) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1479;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1479 failed";
  );

  (***********************************)
  (*   t55 = #{ int; #{ int32# } }   *)
  (***********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t55 array, _) idx_mut = (.(i)) in
    let shallow : (t55 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1480;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1480 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t55 array, _) idx_mut = (.(i).#a55) in
    let shallow : (t55 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a55) in
    mark_test_run 1481;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1481 failed";
    let shallow : (t55 array, _) idx_mut = (.(i).#a55) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1482;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1482 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t55 array, _) idx_mut = (.(i).#b55) in
    let shallow : (t55 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b55) in
    mark_test_run 1483;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1483 failed";
    let shallow : (t55 array, _) idx_mut = (.(i).#b55) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1484;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1484 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t55 array, _) idx_mut = (.(i).#b55.#a8) in
    let shallow : (t55 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b55.#a8) in
    mark_test_run 1485;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1485 failed";
    let shallow : (t55 array, _) idx_mut = (.(i).#b55) in
    let deepened = (.idx_mut(shallow).#a8) in
    mark_test_run 1486;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1486 failed";
    let shallow : (t55 array, _) idx_mut = (.(i).#b55.#a8) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1487;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1487 failed";
  );

  (**********************************)
  (*   t57 = #{ int; #{ float } }   *)
  (**********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t57 array, _) idx_mut = (.(i)) in
    let shallow : (t57 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1488;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1488 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t57 array, _) idx_mut = (.(i).#a57) in
    let shallow : (t57 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a57) in
    mark_test_run 1489;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1489 failed";
    let shallow : (t57 array, _) idx_mut = (.(i).#a57) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1490;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1490 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t57 array, _) idx_mut = (.(i).#b57) in
    let shallow : (t57 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b57) in
    mark_test_run 1491;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1491 failed";
    let shallow : (t57 array, _) idx_mut = (.(i).#b57) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1492;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1492 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t57 array, _) idx_mut = (.(i).#b57.#a56) in
    let shallow : (t57 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b57.#a56) in
    mark_test_run 1493;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1493 failed";
    let shallow : (t57 array, _) idx_mut = (.(i).#b57) in
    let deepened = (.idx_mut(shallow).#a56) in
    mark_test_run 1494;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1494 failed";
    let shallow : (t57 array, _) idx_mut = (.(i).#b57.#a56) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1495;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1495 failed";
  );

  (**********************************)
  (*   t58 = #{ int64; #{ int } }   *)
  (**********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t58 array, _) idx_mut = (.(i)) in
    let shallow : (t58 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1496;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1496 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t58 array, _) idx_mut = (.(i).#a58) in
    let shallow : (t58 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a58) in
    mark_test_run 1497;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1497 failed";
    let shallow : (t58 array, _) idx_mut = (.(i).#a58) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1498;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1498 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t58 array, _) idx_mut = (.(i).#b58) in
    let shallow : (t58 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b58) in
    mark_test_run 1499;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1499 failed";
    let shallow : (t58 array, _) idx_mut = (.(i).#b58) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1500;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1500 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t58 array, _) idx_mut = (.(i).#b58.#a6) in
    let shallow : (t58 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b58.#a6) in
    mark_test_run 1501;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1501 failed";
    let shallow : (t58 array, _) idx_mut = (.(i).#b58) in
    let deepened = (.idx_mut(shallow).#a6) in
    mark_test_run 1502;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1502 failed";
    let shallow : (t58 array, _) idx_mut = (.(i).#b58.#a6) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1503;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1503 failed";
  );

  (************************************)
  (*   t59 = #{ int64; #{ int64 } }   *)
  (************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t59 array, _) idx_mut = (.(i)) in
    let shallow : (t59 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1504;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1504 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t59 array, _) idx_mut = (.(i).#a59) in
    let shallow : (t59 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a59) in
    mark_test_run 1505;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1505 failed";
    let shallow : (t59 array, _) idx_mut = (.(i).#a59) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1506;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1506 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t59 array, _) idx_mut = (.(i).#b59) in
    let shallow : (t59 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b59) in
    mark_test_run 1507;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1507 failed";
    let shallow : (t59 array, _) idx_mut = (.(i).#b59) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1508;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1508 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t59 array, _) idx_mut = (.(i).#b59.#a7) in
    let shallow : (t59 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b59.#a7) in
    mark_test_run 1509;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1509 failed";
    let shallow : (t59 array, _) idx_mut = (.(i).#b59) in
    let deepened = (.idx_mut(shallow).#a7) in
    mark_test_run 1510;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1510 failed";
    let shallow : (t59 array, _) idx_mut = (.(i).#b59.#a7) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1511;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1511 failed";
  );

  (************************************)
  (*   t60 = #{ int64; #{ float } }   *)
  (************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t60 array, _) idx_mut = (.(i)) in
    let shallow : (t60 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1512;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1512 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t60 array, _) idx_mut = (.(i).#a60) in
    let shallow : (t60 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a60) in
    mark_test_run 1513;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1513 failed";
    let shallow : (t60 array, _) idx_mut = (.(i).#a60) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1514;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1514 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t60 array, _) idx_mut = (.(i).#b60) in
    let shallow : (t60 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b60) in
    mark_test_run 1515;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1515 failed";
    let shallow : (t60 array, _) idx_mut = (.(i).#b60) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1516;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1516 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t60 array, _) idx_mut = (.(i).#b60.#a56) in
    let shallow : (t60 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b60.#a56) in
    mark_test_run 1517;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1517 failed";
    let shallow : (t60 array, _) idx_mut = (.(i).#b60) in
    let deepened = (.idx_mut(shallow).#a56) in
    mark_test_run 1518;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1518 failed";
    let shallow : (t60 array, _) idx_mut = (.(i).#b60.#a56) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1519;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1519 failed";
  );

  (**************************************)
  (*   t61 = #{ int32#; #{ int32# } }   *)
  (**************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t61 array, _) idx_mut = (.(i)) in
    let shallow : (t61 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1520;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1520 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t61 array, _) idx_mut = (.(i).#a61) in
    let shallow : (t61 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a61) in
    mark_test_run 1521;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1521 failed";
    let shallow : (t61 array, _) idx_mut = (.(i).#a61) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1522;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1522 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t61 array, _) idx_mut = (.(i).#b61) in
    let shallow : (t61 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b61) in
    mark_test_run 1523;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1523 failed";
    let shallow : (t61 array, _) idx_mut = (.(i).#b61) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1524;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1524 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t61 array, _) idx_mut = (.(i).#b61.#a8) in
    let shallow : (t61 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b61.#a8) in
    mark_test_run 1525;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1525 failed";
    let shallow : (t61 array, _) idx_mut = (.(i).#b61) in
    let deepened = (.idx_mut(shallow).#a8) in
    mark_test_run 1526;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1526 failed";
    let shallow : (t61 array, _) idx_mut = (.(i).#b61.#a8) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1527;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1527 failed";
  );

  (**********************************)
  (*   t62 = #{ float; #{ int } }   *)
  (**********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t62 array, _) idx_mut = (.(i)) in
    let shallow : (t62 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1528;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1528 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t62 array, _) idx_mut = (.(i).#a62) in
    let shallow : (t62 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a62) in
    mark_test_run 1529;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1529 failed";
    let shallow : (t62 array, _) idx_mut = (.(i).#a62) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1530;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1530 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t62 array, _) idx_mut = (.(i).#b62) in
    let shallow : (t62 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b62) in
    mark_test_run 1531;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1531 failed";
    let shallow : (t62 array, _) idx_mut = (.(i).#b62) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1532;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1532 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t62 array, _) idx_mut = (.(i).#b62.#a6) in
    let shallow : (t62 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b62.#a6) in
    mark_test_run 1533;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1533 failed";
    let shallow : (t62 array, _) idx_mut = (.(i).#b62) in
    let deepened = (.idx_mut(shallow).#a6) in
    mark_test_run 1534;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1534 failed";
    let shallow : (t62 array, _) idx_mut = (.(i).#b62.#a6) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1535;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1535 failed";
  );

  (************************************)
  (*   t63 = #{ float; #{ int64 } }   *)
  (************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t63 array, _) idx_mut = (.(i)) in
    let shallow : (t63 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1536;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1536 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t63 array, _) idx_mut = (.(i).#a63) in
    let shallow : (t63 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a63) in
    mark_test_run 1537;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1537 failed";
    let shallow : (t63 array, _) idx_mut = (.(i).#a63) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1538;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1538 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t63 array, _) idx_mut = (.(i).#b63) in
    let shallow : (t63 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b63) in
    mark_test_run 1539;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1539 failed";
    let shallow : (t63 array, _) idx_mut = (.(i).#b63) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1540;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1540 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t63 array, _) idx_mut = (.(i).#b63.#a7) in
    let shallow : (t63 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b63.#a7) in
    mark_test_run 1541;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1541 failed";
    let shallow : (t63 array, _) idx_mut = (.(i).#b63) in
    let deepened = (.idx_mut(shallow).#a7) in
    mark_test_run 1542;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1542 failed";
    let shallow : (t63 array, _) idx_mut = (.(i).#b63.#a7) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1543;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1543 failed";
  );

  (************************************)
  (*   t64 = #{ float; #{ float } }   *)
  (************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t64 array, _) idx_mut = (.(i)) in
    let shallow : (t64 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1544;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1544 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t64 array, _) idx_mut = (.(i).#a64) in
    let shallow : (t64 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a64) in
    mark_test_run 1545;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1545 failed";
    let shallow : (t64 array, _) idx_mut = (.(i).#a64) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1546;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1546 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t64 array, _) idx_mut = (.(i).#b64) in
    let shallow : (t64 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b64) in
    mark_test_run 1547;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1547 failed";
    let shallow : (t64 array, _) idx_mut = (.(i).#b64) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1548;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1548 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t64 array, _) idx_mut = (.(i).#b64.#a56) in
    let shallow : (t64 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b64.#a56) in
    mark_test_run 1549;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1549 failed";
    let shallow : (t64 array, _) idx_mut = (.(i).#b64) in
    let deepened = (.idx_mut(shallow).#a56) in
    mark_test_run 1550;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1550 failed";
    let shallow : (t64 array, _) idx_mut = (.(i).#b64.#a56) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1551;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1551 failed";
  );

  (********************************)
  (*   t65 = #{ #{ int }; int }   *)
  (********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t65 array, _) idx_mut = (.(i)) in
    let shallow : (t65 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1552;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1552 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t65 array, _) idx_mut = (.(i).#a65) in
    let shallow : (t65 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a65) in
    mark_test_run 1553;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1553 failed";
    let shallow : (t65 array, _) idx_mut = (.(i).#a65) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1554;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1554 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t65 array, _) idx_mut = (.(i).#b65) in
    let shallow : (t65 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b65) in
    mark_test_run 1555;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1555 failed";
    let shallow : (t65 array, _) idx_mut = (.(i).#b65) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1556;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1556 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t65 array, _) idx_mut = (.(i).#a65.#a6) in
    let shallow : (t65 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a65.#a6) in
    mark_test_run 1557;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1557 failed";
    let shallow : (t65 array, _) idx_mut = (.(i).#a65) in
    let deepened = (.idx_mut(shallow).#a6) in
    mark_test_run 1558;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1558 failed";
    let shallow : (t65 array, _) idx_mut = (.(i).#a65.#a6) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1559;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1559 failed";
  );

  (**********************************)
  (*   t66 = #{ #{ int }; int64 }   *)
  (**********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t66 array, _) idx_mut = (.(i)) in
    let shallow : (t66 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1560;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1560 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t66 array, _) idx_mut = (.(i).#a66) in
    let shallow : (t66 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a66) in
    mark_test_run 1561;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1561 failed";
    let shallow : (t66 array, _) idx_mut = (.(i).#a66) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1562;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1562 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t66 array, _) idx_mut = (.(i).#b66) in
    let shallow : (t66 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b66) in
    mark_test_run 1563;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1563 failed";
    let shallow : (t66 array, _) idx_mut = (.(i).#b66) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1564;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1564 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t66 array, _) idx_mut = (.(i).#a66.#a6) in
    let shallow : (t66 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a66.#a6) in
    mark_test_run 1565;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1565 failed";
    let shallow : (t66 array, _) idx_mut = (.(i).#a66) in
    let deepened = (.idx_mut(shallow).#a6) in
    mark_test_run 1566;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1566 failed";
    let shallow : (t66 array, _) idx_mut = (.(i).#a66.#a6) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1567;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1567 failed";
  );

  (***********************************)
  (*   t67 = #{ #{ int }; int32# }   *)
  (***********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t67 array, _) idx_mut = (.(i)) in
    let shallow : (t67 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1568;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1568 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t67 array, _) idx_mut = (.(i).#a67) in
    let shallow : (t67 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a67) in
    mark_test_run 1569;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1569 failed";
    let shallow : (t67 array, _) idx_mut = (.(i).#a67) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1570;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1570 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t67 array, _) idx_mut = (.(i).#b67) in
    let shallow : (t67 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b67) in
    mark_test_run 1571;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1571 failed";
    let shallow : (t67 array, _) idx_mut = (.(i).#b67) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1572;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1572 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t67 array, _) idx_mut = (.(i).#a67.#a6) in
    let shallow : (t67 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a67.#a6) in
    mark_test_run 1573;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1573 failed";
    let shallow : (t67 array, _) idx_mut = (.(i).#a67) in
    let deepened = (.idx_mut(shallow).#a6) in
    mark_test_run 1574;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1574 failed";
    let shallow : (t67 array, _) idx_mut = (.(i).#a67.#a6) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1575;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1575 failed";
  );

  (**********************************)
  (*   t68 = #{ #{ int }; float }   *)
  (**********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t68 array, _) idx_mut = (.(i)) in
    let shallow : (t68 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1576;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1576 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t68 array, _) idx_mut = (.(i).#a68) in
    let shallow : (t68 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a68) in
    mark_test_run 1577;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1577 failed";
    let shallow : (t68 array, _) idx_mut = (.(i).#a68) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1578;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1578 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t68 array, _) idx_mut = (.(i).#b68) in
    let shallow : (t68 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b68) in
    mark_test_run 1579;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1579 failed";
    let shallow : (t68 array, _) idx_mut = (.(i).#b68) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1580;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1580 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t68 array, _) idx_mut = (.(i).#a68.#a6) in
    let shallow : (t68 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a68.#a6) in
    mark_test_run 1581;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1581 failed";
    let shallow : (t68 array, _) idx_mut = (.(i).#a68) in
    let deepened = (.idx_mut(shallow).#a6) in
    mark_test_run 1582;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1582 failed";
    let shallow : (t68 array, _) idx_mut = (.(i).#a68.#a6) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1583;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1583 failed";
  );

  (**********************************)
  (*   t69 = #{ #{ int64 }; int }   *)
  (**********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t69 array, _) idx_mut = (.(i)) in
    let shallow : (t69 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1584;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1584 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t69 array, _) idx_mut = (.(i).#a69) in
    let shallow : (t69 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a69) in
    mark_test_run 1585;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1585 failed";
    let shallow : (t69 array, _) idx_mut = (.(i).#a69) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1586;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1586 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t69 array, _) idx_mut = (.(i).#b69) in
    let shallow : (t69 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b69) in
    mark_test_run 1587;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1587 failed";
    let shallow : (t69 array, _) idx_mut = (.(i).#b69) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1588;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1588 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t69 array, _) idx_mut = (.(i).#a69.#a7) in
    let shallow : (t69 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a69.#a7) in
    mark_test_run 1589;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1589 failed";
    let shallow : (t69 array, _) idx_mut = (.(i).#a69) in
    let deepened = (.idx_mut(shallow).#a7) in
    mark_test_run 1590;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1590 failed";
    let shallow : (t69 array, _) idx_mut = (.(i).#a69.#a7) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1591;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1591 failed";
  );

  (************************************)
  (*   t70 = #{ #{ int64 }; int64 }   *)
  (************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t70 array, _) idx_mut = (.(i)) in
    let shallow : (t70 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1592;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1592 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t70 array, _) idx_mut = (.(i).#a70) in
    let shallow : (t70 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a70) in
    mark_test_run 1593;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1593 failed";
    let shallow : (t70 array, _) idx_mut = (.(i).#a70) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1594;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1594 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t70 array, _) idx_mut = (.(i).#b70) in
    let shallow : (t70 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b70) in
    mark_test_run 1595;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1595 failed";
    let shallow : (t70 array, _) idx_mut = (.(i).#b70) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1596;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1596 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t70 array, _) idx_mut = (.(i).#a70.#a7) in
    let shallow : (t70 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a70.#a7) in
    mark_test_run 1597;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1597 failed";
    let shallow : (t70 array, _) idx_mut = (.(i).#a70) in
    let deepened = (.idx_mut(shallow).#a7) in
    mark_test_run 1598;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1598 failed";
    let shallow : (t70 array, _) idx_mut = (.(i).#a70.#a7) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1599;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1599 failed";
  );

  (************************************)
  (*   t71 = #{ #{ int64 }; float }   *)
  (************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t71 array, _) idx_mut = (.(i)) in
    let shallow : (t71 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1600;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1600 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t71 array, _) idx_mut = (.(i).#a71) in
    let shallow : (t71 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a71) in
    mark_test_run 1601;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1601 failed";
    let shallow : (t71 array, _) idx_mut = (.(i).#a71) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1602;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1602 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t71 array, _) idx_mut = (.(i).#b71) in
    let shallow : (t71 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b71) in
    mark_test_run 1603;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1603 failed";
    let shallow : (t71 array, _) idx_mut = (.(i).#b71) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1604;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1604 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t71 array, _) idx_mut = (.(i).#a71.#a7) in
    let shallow : (t71 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a71.#a7) in
    mark_test_run 1605;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1605 failed";
    let shallow : (t71 array, _) idx_mut = (.(i).#a71) in
    let deepened = (.idx_mut(shallow).#a7) in
    mark_test_run 1606;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1606 failed";
    let shallow : (t71 array, _) idx_mut = (.(i).#a71.#a7) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1607;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1607 failed";
  );

  (**************************************)
  (*   t72 = #{ #{ int32# }; int32# }   *)
  (**************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t72 array, _) idx_mut = (.(i)) in
    let shallow : (t72 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1608;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1608 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t72 array, _) idx_mut = (.(i).#a72) in
    let shallow : (t72 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a72) in
    mark_test_run 1609;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1609 failed";
    let shallow : (t72 array, _) idx_mut = (.(i).#a72) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1610;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1610 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t72 array, _) idx_mut = (.(i).#b72) in
    let shallow : (t72 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b72) in
    mark_test_run 1611;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1611 failed";
    let shallow : (t72 array, _) idx_mut = (.(i).#b72) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1612;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1612 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t72 array, _) idx_mut = (.(i).#a72.#a8) in
    let shallow : (t72 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a72.#a8) in
    mark_test_run 1613;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1613 failed";
    let shallow : (t72 array, _) idx_mut = (.(i).#a72) in
    let deepened = (.idx_mut(shallow).#a8) in
    mark_test_run 1614;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1614 failed";
    let shallow : (t72 array, _) idx_mut = (.(i).#a72.#a8) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1615;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1615 failed";
  );

  (**********************************)
  (*   t73 = #{ #{ float }; int }   *)
  (**********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t73 array, _) idx_mut = (.(i)) in
    let shallow : (t73 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1616;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1616 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t73 array, _) idx_mut = (.(i).#a73) in
    let shallow : (t73 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a73) in
    mark_test_run 1617;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1617 failed";
    let shallow : (t73 array, _) idx_mut = (.(i).#a73) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1618;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1618 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t73 array, _) idx_mut = (.(i).#b73) in
    let shallow : (t73 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b73) in
    mark_test_run 1619;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1619 failed";
    let shallow : (t73 array, _) idx_mut = (.(i).#b73) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1620;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1620 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t73 array, _) idx_mut = (.(i).#a73.#a56) in
    let shallow : (t73 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a73.#a56) in
    mark_test_run 1621;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1621 failed";
    let shallow : (t73 array, _) idx_mut = (.(i).#a73) in
    let deepened = (.idx_mut(shallow).#a56) in
    mark_test_run 1622;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1622 failed";
    let shallow : (t73 array, _) idx_mut = (.(i).#a73.#a56) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1623;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1623 failed";
  );

  (************************************)
  (*   t74 = #{ #{ float }; int64 }   *)
  (************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t74 array, _) idx_mut = (.(i)) in
    let shallow : (t74 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1624;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1624 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t74 array, _) idx_mut = (.(i).#a74) in
    let shallow : (t74 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a74) in
    mark_test_run 1625;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1625 failed";
    let shallow : (t74 array, _) idx_mut = (.(i).#a74) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1626;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1626 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t74 array, _) idx_mut = (.(i).#b74) in
    let shallow : (t74 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b74) in
    mark_test_run 1627;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1627 failed";
    let shallow : (t74 array, _) idx_mut = (.(i).#b74) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1628;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1628 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t74 array, _) idx_mut = (.(i).#a74.#a56) in
    let shallow : (t74 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a74.#a56) in
    mark_test_run 1629;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1629 failed";
    let shallow : (t74 array, _) idx_mut = (.(i).#a74) in
    let deepened = (.idx_mut(shallow).#a56) in
    mark_test_run 1630;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1630 failed";
    let shallow : (t74 array, _) idx_mut = (.(i).#a74.#a56) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1631;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1631 failed";
  );

  (************************************)
  (*   t75 = #{ #{ float }; float }   *)
  (************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t75 array, _) idx_mut = (.(i)) in
    let shallow : (t75 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1632;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1632 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t75 array, _) idx_mut = (.(i).#a75) in
    let shallow : (t75 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a75) in
    mark_test_run 1633;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1633 failed";
    let shallow : (t75 array, _) idx_mut = (.(i).#a75) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1634;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1634 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t75 array, _) idx_mut = (.(i).#b75) in
    let shallow : (t75 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b75) in
    mark_test_run 1635;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1635 failed";
    let shallow : (t75 array, _) idx_mut = (.(i).#b75) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1636;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1636 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t75 array, _) idx_mut = (.(i).#a75.#a56) in
    let shallow : (t75 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a75.#a56) in
    mark_test_run 1637;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1637 failed";
    let shallow : (t75 array, _) idx_mut = (.(i).#a75) in
    let deepened = (.idx_mut(shallow).#a56) in
    mark_test_run 1638;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1638 failed";
    let shallow : (t75 array, _) idx_mut = (.(i).#a75.#a56) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1639;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1639 failed";
  );

  (********************************)
  (*   t76 = #{ #{ int; int } }   *)
  (********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t76 array, _) idx_mut = (.(i)) in
    let shallow : (t76 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1640;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1640 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t76 array, _) idx_mut = (.(i).#a76) in
    let shallow : (t76 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a76) in
    mark_test_run 1641;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1641 failed";
    let shallow : (t76 array, _) idx_mut = (.(i).#a76) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1642;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1642 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t76 array, _) idx_mut = (.(i).#a76.#a9) in
    let shallow : (t76 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a76.#a9) in
    mark_test_run 1643;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1643 failed";
    let shallow : (t76 array, _) idx_mut = (.(i).#a76) in
    let deepened = (.idx_mut(shallow).#a9) in
    mark_test_run 1644;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1644 failed";
    let shallow : (t76 array, _) idx_mut = (.(i).#a76.#a9) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1645;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1645 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t76 array, _) idx_mut = (.(i).#a76.#b9) in
    let shallow : (t76 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a76.#b9) in
    mark_test_run 1646;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1646 failed";
    let shallow : (t76 array, _) idx_mut = (.(i).#a76) in
    let deepened = (.idx_mut(shallow).#b9) in
    mark_test_run 1647;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1647 failed";
    let shallow : (t76 array, _) idx_mut = (.(i).#a76.#b9) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1648;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1648 failed";
  );

  (**********************************)
  (*   t77 = #{ #{ int; int64 } }   *)
  (**********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t77 array, _) idx_mut = (.(i)) in
    let shallow : (t77 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1649;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1649 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t77 array, _) idx_mut = (.(i).#a77) in
    let shallow : (t77 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a77) in
    mark_test_run 1650;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1650 failed";
    let shallow : (t77 array, _) idx_mut = (.(i).#a77) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1651;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1651 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t77 array, _) idx_mut = (.(i).#a77.#a10) in
    let shallow : (t77 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a77.#a10) in
    mark_test_run 1652;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1652 failed";
    let shallow : (t77 array, _) idx_mut = (.(i).#a77) in
    let deepened = (.idx_mut(shallow).#a10) in
    mark_test_run 1653;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1653 failed";
    let shallow : (t77 array, _) idx_mut = (.(i).#a77.#a10) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1654;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1654 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t77 array, _) idx_mut = (.(i).#a77.#b10) in
    let shallow : (t77 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a77.#b10) in
    mark_test_run 1655;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1655 failed";
    let shallow : (t77 array, _) idx_mut = (.(i).#a77) in
    let deepened = (.idx_mut(shallow).#b10) in
    mark_test_run 1656;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1656 failed";
    let shallow : (t77 array, _) idx_mut = (.(i).#a77.#b10) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1657;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1657 failed";
  );

  (***********************************)
  (*   t78 = #{ #{ int; int32# } }   *)
  (***********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t78 array, _) idx_mut = (.(i)) in
    let shallow : (t78 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1658;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1658 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t78 array, _) idx_mut = (.(i).#a78) in
    let shallow : (t78 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a78) in
    mark_test_run 1659;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1659 failed";
    let shallow : (t78 array, _) idx_mut = (.(i).#a78) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1660;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1660 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t78 array, _) idx_mut = (.(i).#a78.#a11) in
    let shallow : (t78 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a78.#a11) in
    mark_test_run 1661;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1661 failed";
    let shallow : (t78 array, _) idx_mut = (.(i).#a78) in
    let deepened = (.idx_mut(shallow).#a11) in
    mark_test_run 1662;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1662 failed";
    let shallow : (t78 array, _) idx_mut = (.(i).#a78.#a11) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1663;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1663 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t78 array, _) idx_mut = (.(i).#a78.#b11) in
    let shallow : (t78 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a78.#b11) in
    mark_test_run 1664;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1664 failed";
    let shallow : (t78 array, _) idx_mut = (.(i).#a78) in
    let deepened = (.idx_mut(shallow).#b11) in
    mark_test_run 1665;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1665 failed";
    let shallow : (t78 array, _) idx_mut = (.(i).#a78.#b11) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1666;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1666 failed";
  );

  (**********************************)
  (*   t79 = #{ #{ int; float } }   *)
  (**********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t79 array, _) idx_mut = (.(i)) in
    let shallow : (t79 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1667;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1667 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t79 array, _) idx_mut = (.(i).#a79) in
    let shallow : (t79 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a79) in
    mark_test_run 1668;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1668 failed";
    let shallow : (t79 array, _) idx_mut = (.(i).#a79) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1669;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1669 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t79 array, _) idx_mut = (.(i).#a79.#a12) in
    let shallow : (t79 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a79.#a12) in
    mark_test_run 1670;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1670 failed";
    let shallow : (t79 array, _) idx_mut = (.(i).#a79) in
    let deepened = (.idx_mut(shallow).#a12) in
    mark_test_run 1671;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1671 failed";
    let shallow : (t79 array, _) idx_mut = (.(i).#a79.#a12) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1672;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1672 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t79 array, _) idx_mut = (.(i).#a79.#b12) in
    let shallow : (t79 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a79.#b12) in
    mark_test_run 1673;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1673 failed";
    let shallow : (t79 array, _) idx_mut = (.(i).#a79) in
    let deepened = (.idx_mut(shallow).#b12) in
    mark_test_run 1674;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1674 failed";
    let shallow : (t79 array, _) idx_mut = (.(i).#a79.#b12) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1675;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1675 failed";
  );

  (**********************************)
  (*   t80 = #{ #{ int64; int } }   *)
  (**********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t80 array, _) idx_mut = (.(i)) in
    let shallow : (t80 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1676;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1676 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t80 array, _) idx_mut = (.(i).#a80) in
    let shallow : (t80 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a80) in
    mark_test_run 1677;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1677 failed";
    let shallow : (t80 array, _) idx_mut = (.(i).#a80) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1678;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1678 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t80 array, _) idx_mut = (.(i).#a80.#a13) in
    let shallow : (t80 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a80.#a13) in
    mark_test_run 1679;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1679 failed";
    let shallow : (t80 array, _) idx_mut = (.(i).#a80) in
    let deepened = (.idx_mut(shallow).#a13) in
    mark_test_run 1680;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1680 failed";
    let shallow : (t80 array, _) idx_mut = (.(i).#a80.#a13) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1681;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1681 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t80 array, _) idx_mut = (.(i).#a80.#b13) in
    let shallow : (t80 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a80.#b13) in
    mark_test_run 1682;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1682 failed";
    let shallow : (t80 array, _) idx_mut = (.(i).#a80) in
    let deepened = (.idx_mut(shallow).#b13) in
    mark_test_run 1683;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1683 failed";
    let shallow : (t80 array, _) idx_mut = (.(i).#a80.#b13) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1684;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1684 failed";
  );

  (************************************)
  (*   t81 = #{ #{ int64; int64 } }   *)
  (************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t81 array, _) idx_mut = (.(i)) in
    let shallow : (t81 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1685;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1685 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t81 array, _) idx_mut = (.(i).#a81) in
    let shallow : (t81 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a81) in
    mark_test_run 1686;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1686 failed";
    let shallow : (t81 array, _) idx_mut = (.(i).#a81) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1687;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1687 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t81 array, _) idx_mut = (.(i).#a81.#a14) in
    let shallow : (t81 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a81.#a14) in
    mark_test_run 1688;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1688 failed";
    let shallow : (t81 array, _) idx_mut = (.(i).#a81) in
    let deepened = (.idx_mut(shallow).#a14) in
    mark_test_run 1689;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1689 failed";
    let shallow : (t81 array, _) idx_mut = (.(i).#a81.#a14) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1690;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1690 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t81 array, _) idx_mut = (.(i).#a81.#b14) in
    let shallow : (t81 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a81.#b14) in
    mark_test_run 1691;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1691 failed";
    let shallow : (t81 array, _) idx_mut = (.(i).#a81) in
    let deepened = (.idx_mut(shallow).#b14) in
    mark_test_run 1692;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1692 failed";
    let shallow : (t81 array, _) idx_mut = (.(i).#a81.#b14) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1693;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1693 failed";
  );

  (************************************)
  (*   t82 = #{ #{ int64; float } }   *)
  (************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t82 array, _) idx_mut = (.(i)) in
    let shallow : (t82 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1694;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1694 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t82 array, _) idx_mut = (.(i).#a82) in
    let shallow : (t82 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a82) in
    mark_test_run 1695;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1695 failed";
    let shallow : (t82 array, _) idx_mut = (.(i).#a82) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1696;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1696 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t82 array, _) idx_mut = (.(i).#a82.#a15) in
    let shallow : (t82 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a82.#a15) in
    mark_test_run 1697;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1697 failed";
    let shallow : (t82 array, _) idx_mut = (.(i).#a82) in
    let deepened = (.idx_mut(shallow).#a15) in
    mark_test_run 1698;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1698 failed";
    let shallow : (t82 array, _) idx_mut = (.(i).#a82.#a15) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1699;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1699 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t82 array, _) idx_mut = (.(i).#a82.#b15) in
    let shallow : (t82 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a82.#b15) in
    mark_test_run 1700;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1700 failed";
    let shallow : (t82 array, _) idx_mut = (.(i).#a82) in
    let deepened = (.idx_mut(shallow).#b15) in
    mark_test_run 1701;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1701 failed";
    let shallow : (t82 array, _) idx_mut = (.(i).#a82.#b15) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1702;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1702 failed";
  );

  (**************************************)
  (*   t83 = #{ #{ int32#; int32# } }   *)
  (**************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t83 array, _) idx_mut = (.(i)) in
    let shallow : (t83 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1703;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1703 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t83 array, _) idx_mut = (.(i).#a83) in
    let shallow : (t83 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a83) in
    mark_test_run 1704;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1704 failed";
    let shallow : (t83 array, _) idx_mut = (.(i).#a83) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1705;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1705 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t83 array, _) idx_mut = (.(i).#a83.#a16) in
    let shallow : (t83 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a83.#a16) in
    mark_test_run 1706;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1706 failed";
    let shallow : (t83 array, _) idx_mut = (.(i).#a83) in
    let deepened = (.idx_mut(shallow).#a16) in
    mark_test_run 1707;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1707 failed";
    let shallow : (t83 array, _) idx_mut = (.(i).#a83.#a16) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1708;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1708 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t83 array, _) idx_mut = (.(i).#a83.#b16) in
    let shallow : (t83 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a83.#b16) in
    mark_test_run 1709;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1709 failed";
    let shallow : (t83 array, _) idx_mut = (.(i).#a83) in
    let deepened = (.idx_mut(shallow).#b16) in
    mark_test_run 1710;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1710 failed";
    let shallow : (t83 array, _) idx_mut = (.(i).#a83.#b16) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1711;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1711 failed";
  );

  (**********************************)
  (*   t84 = #{ #{ float; int } }   *)
  (**********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t84 array, _) idx_mut = (.(i)) in
    let shallow : (t84 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1712;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1712 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t84 array, _) idx_mut = (.(i).#a84) in
    let shallow : (t84 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a84) in
    mark_test_run 1713;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1713 failed";
    let shallow : (t84 array, _) idx_mut = (.(i).#a84) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1714;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1714 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t84 array, _) idx_mut = (.(i).#a84.#a17) in
    let shallow : (t84 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a84.#a17) in
    mark_test_run 1715;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1715 failed";
    let shallow : (t84 array, _) idx_mut = (.(i).#a84) in
    let deepened = (.idx_mut(shallow).#a17) in
    mark_test_run 1716;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1716 failed";
    let shallow : (t84 array, _) idx_mut = (.(i).#a84.#a17) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1717;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1717 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t84 array, _) idx_mut = (.(i).#a84.#b17) in
    let shallow : (t84 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a84.#b17) in
    mark_test_run 1718;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1718 failed";
    let shallow : (t84 array, _) idx_mut = (.(i).#a84) in
    let deepened = (.idx_mut(shallow).#b17) in
    mark_test_run 1719;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1719 failed";
    let shallow : (t84 array, _) idx_mut = (.(i).#a84.#b17) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1720;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1720 failed";
  );

  (************************************)
  (*   t85 = #{ #{ float; int64 } }   *)
  (************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t85 array, _) idx_mut = (.(i)) in
    let shallow : (t85 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1721;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1721 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t85 array, _) idx_mut = (.(i).#a85) in
    let shallow : (t85 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a85) in
    mark_test_run 1722;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1722 failed";
    let shallow : (t85 array, _) idx_mut = (.(i).#a85) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1723;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1723 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t85 array, _) idx_mut = (.(i).#a85.#a18) in
    let shallow : (t85 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a85.#a18) in
    mark_test_run 1724;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1724 failed";
    let shallow : (t85 array, _) idx_mut = (.(i).#a85) in
    let deepened = (.idx_mut(shallow).#a18) in
    mark_test_run 1725;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1725 failed";
    let shallow : (t85 array, _) idx_mut = (.(i).#a85.#a18) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1726;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1726 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t85 array, _) idx_mut = (.(i).#a85.#b18) in
    let shallow : (t85 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a85.#b18) in
    mark_test_run 1727;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1727 failed";
    let shallow : (t85 array, _) idx_mut = (.(i).#a85) in
    let deepened = (.idx_mut(shallow).#b18) in
    mark_test_run 1728;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1728 failed";
    let shallow : (t85 array, _) idx_mut = (.(i).#a85.#b18) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1729;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1729 failed";
  );

  (************************************)
  (*   t86 = #{ #{ float; float } }   *)
  (************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t86 array, _) idx_mut = (.(i)) in
    let shallow : (t86 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1730;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1730 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t86 array, _) idx_mut = (.(i).#a86) in
    let shallow : (t86 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a86) in
    mark_test_run 1731;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1731 failed";
    let shallow : (t86 array, _) idx_mut = (.(i).#a86) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1732;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1732 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t86 array, _) idx_mut = (.(i).#a86.#a19) in
    let shallow : (t86 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a86.#a19) in
    mark_test_run 1733;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1733 failed";
    let shallow : (t86 array, _) idx_mut = (.(i).#a86) in
    let deepened = (.idx_mut(shallow).#a19) in
    mark_test_run 1734;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1734 failed";
    let shallow : (t86 array, _) idx_mut = (.(i).#a86.#a19) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1735;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1735 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t86 array, _) idx_mut = (.(i).#a86.#b19) in
    let shallow : (t86 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a86.#b19) in
    mark_test_run 1736;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1736 failed";
    let shallow : (t86 array, _) idx_mut = (.(i).#a86) in
    let deepened = (.idx_mut(shallow).#b19) in
    mark_test_run 1737;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1737 failed";
    let shallow : (t86 array, _) idx_mut = (.(i).#a86.#b19) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1738;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1738 failed";
  );

  (********************************)
  (*   t87 = #{ #{ #{ int } } }   *)
  (********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t87 array, _) idx_mut = (.(i)) in
    let shallow : (t87 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1739;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1739 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t87 array, _) idx_mut = (.(i).#a87) in
    let shallow : (t87 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a87) in
    mark_test_run 1740;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1740 failed";
    let shallow : (t87 array, _) idx_mut = (.(i).#a87) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1741;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1741 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t87 array, _) idx_mut = (.(i).#a87.#a20) in
    let shallow : (t87 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a87.#a20) in
    mark_test_run 1742;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1742 failed";
    let shallow : (t87 array, _) idx_mut = (.(i).#a87) in
    let deepened = (.idx_mut(shallow).#a20) in
    mark_test_run 1743;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1743 failed";
    let shallow : (t87 array, _) idx_mut = (.(i).#a87.#a20) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1744;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1744 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t87 array, _) idx_mut = (.(i).#a87.#a20.#a6) in
    let shallow : (t87 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a87.#a20.#a6) in
    mark_test_run 1745;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1745 failed";
    let shallow : (t87 array, _) idx_mut = (.(i).#a87) in
    let deepened = (.idx_mut(shallow).#a20.#a6) in
    mark_test_run 1746;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1746 failed";
    let shallow : (t87 array, _) idx_mut = (.(i).#a87.#a20) in
    let deepened = (.idx_mut(shallow).#a6) in
    mark_test_run 1747;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1747 failed";
    let shallow : (t87 array, _) idx_mut = (.(i).#a87.#a20.#a6) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1748;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1748 failed";
  );

  (**********************************)
  (*   t88 = #{ #{ #{ int64 } } }   *)
  (**********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t88 array, _) idx_mut = (.(i)) in
    let shallow : (t88 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1749;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1749 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t88 array, _) idx_mut = (.(i).#a88) in
    let shallow : (t88 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a88) in
    mark_test_run 1750;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1750 failed";
    let shallow : (t88 array, _) idx_mut = (.(i).#a88) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1751;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1751 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t88 array, _) idx_mut = (.(i).#a88.#a21) in
    let shallow : (t88 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a88.#a21) in
    mark_test_run 1752;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1752 failed";
    let shallow : (t88 array, _) idx_mut = (.(i).#a88) in
    let deepened = (.idx_mut(shallow).#a21) in
    mark_test_run 1753;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1753 failed";
    let shallow : (t88 array, _) idx_mut = (.(i).#a88.#a21) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1754;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1754 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t88 array, _) idx_mut = (.(i).#a88.#a21.#a7) in
    let shallow : (t88 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a88.#a21.#a7) in
    mark_test_run 1755;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1755 failed";
    let shallow : (t88 array, _) idx_mut = (.(i).#a88) in
    let deepened = (.idx_mut(shallow).#a21.#a7) in
    mark_test_run 1756;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1756 failed";
    let shallow : (t88 array, _) idx_mut = (.(i).#a88.#a21) in
    let deepened = (.idx_mut(shallow).#a7) in
    mark_test_run 1757;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1757 failed";
    let shallow : (t88 array, _) idx_mut = (.(i).#a88.#a21.#a7) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1758;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1758 failed";
  );

  (***********************************)
  (*   t89 = #{ #{ #{ int32# } } }   *)
  (***********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t89 array, _) idx_mut = (.(i)) in
    let shallow : (t89 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1759;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1759 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t89 array, _) idx_mut = (.(i).#a89) in
    let shallow : (t89 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a89) in
    mark_test_run 1760;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1760 failed";
    let shallow : (t89 array, _) idx_mut = (.(i).#a89) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1761;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1761 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t89 array, _) idx_mut = (.(i).#a89.#a22) in
    let shallow : (t89 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a89.#a22) in
    mark_test_run 1762;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1762 failed";
    let shallow : (t89 array, _) idx_mut = (.(i).#a89) in
    let deepened = (.idx_mut(shallow).#a22) in
    mark_test_run 1763;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1763 failed";
    let shallow : (t89 array, _) idx_mut = (.(i).#a89.#a22) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1764;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1764 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t89 array, _) idx_mut = (.(i).#a89.#a22.#a8) in
    let shallow : (t89 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a89.#a22.#a8) in
    mark_test_run 1765;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1765 failed";
    let shallow : (t89 array, _) idx_mut = (.(i).#a89) in
    let deepened = (.idx_mut(shallow).#a22.#a8) in
    mark_test_run 1766;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1766 failed";
    let shallow : (t89 array, _) idx_mut = (.(i).#a89.#a22) in
    let deepened = (.idx_mut(shallow).#a8) in
    mark_test_run 1767;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1767 failed";
    let shallow : (t89 array, _) idx_mut = (.(i).#a89.#a22.#a8) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1768;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1768 failed";
  );

  (***********)
  (*   int   *)
  (***********)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (int array, _) idx_mut = (.(i)) in
    let shallow : (int array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1769;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1769 failed";
  );

  (*************)
  (*   int64   *)
  (*************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (int64 array, _) idx_mut = (.(i)) in
    let shallow : (int64 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1770;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1770 failed";
  );

  (**************)
  (*   int32#   *)
  (**************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (int32# array, _) idx_mut = (.(i)) in
    let shallow : (int32# array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1771;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1771 failed";
  );

  (**************)
  (*   int64#   *)
  (**************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (int64# array, _) idx_mut = (.(i)) in
    let shallow : (int64# array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1772;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1772 failed";
  );

  (******************)
  (*   nativeint#   *)
  (******************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (nativeint# array, _) idx_mut = (.(i)) in
    let shallow : (nativeint# array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1773;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1773 failed";
  );

  (*********************)
  (*   t6 = #{ int }   *)
  (*********************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t6 array, _) idx_mut = (.(i)) in
    let shallow : (t6 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1774;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1774 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t6 array, _) idx_mut = (.(i).#a6) in
    let shallow : (t6 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a6) in
    mark_test_run 1775;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1775 failed";
    let shallow : (t6 array, _) idx_mut = (.(i).#a6) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1776;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1776 failed";
  );

  (***********************)
  (*   t7 = #{ int64 }   *)
  (***********************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t7 array, _) idx_mut = (.(i)) in
    let shallow : (t7 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1777;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1777 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t7 array, _) idx_mut = (.(i).#a7) in
    let shallow : (t7 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a7) in
    mark_test_run 1778;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1778 failed";
    let shallow : (t7 array, _) idx_mut = (.(i).#a7) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1779;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1779 failed";
  );

  (************************)
  (*   t8 = #{ int32# }   *)
  (************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t8 array, _) idx_mut = (.(i)) in
    let shallow : (t8 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1780;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1780 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t8 array, _) idx_mut = (.(i).#a8) in
    let shallow : (t8 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a8) in
    mark_test_run 1781;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1781 failed";
    let shallow : (t8 array, _) idx_mut = (.(i).#a8) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1782;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1782 failed";
  );

  (*************************)
  (*   t90 = #{ int64# }   *)
  (*************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t90 array, _) idx_mut = (.(i)) in
    let shallow : (t90 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1783;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1783 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t90 array, _) idx_mut = (.(i).#a90) in
    let shallow : (t90 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a90) in
    mark_test_run 1784;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1784 failed";
    let shallow : (t90 array, _) idx_mut = (.(i).#a90) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1785;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1785 failed";
  );

  (*****************************)
  (*   t91 = #{ nativeint# }   *)
  (*****************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t91 array, _) idx_mut = (.(i)) in
    let shallow : (t91 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1786;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1786 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t91 array, _) idx_mut = (.(i).#a91) in
    let shallow : (t91 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a91) in
    mark_test_run 1787;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1787 failed";
    let shallow : (t91 array, _) idx_mut = (.(i).#a91) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1788;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1788 failed";
  );

  (**************************)
  (*   t9 = #{ int; int }   *)
  (**************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t9 array, _) idx_mut = (.(i)) in
    let shallow : (t9 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1789;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1789 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t9 array, _) idx_mut = (.(i).#a9) in
    let shallow : (t9 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a9) in
    mark_test_run 1790;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1790 failed";
    let shallow : (t9 array, _) idx_mut = (.(i).#a9) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1791;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1791 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t9 array, _) idx_mut = (.(i).#b9) in
    let shallow : (t9 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b9) in
    mark_test_run 1792;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1792 failed";
    let shallow : (t9 array, _) idx_mut = (.(i).#b9) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1793;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1793 failed";
  );

  (*****************************)
  (*   t10 = #{ int; int64 }   *)
  (*****************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t10 array, _) idx_mut = (.(i)) in
    let shallow : (t10 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1794;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1794 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t10 array, _) idx_mut = (.(i).#a10) in
    let shallow : (t10 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a10) in
    mark_test_run 1795;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1795 failed";
    let shallow : (t10 array, _) idx_mut = (.(i).#a10) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1796;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1796 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t10 array, _) idx_mut = (.(i).#b10) in
    let shallow : (t10 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b10) in
    mark_test_run 1797;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1797 failed";
    let shallow : (t10 array, _) idx_mut = (.(i).#b10) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1798;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1798 failed";
  );

  (******************************)
  (*   t11 = #{ int; int32# }   *)
  (******************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t11 array, _) idx_mut = (.(i)) in
    let shallow : (t11 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1799;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1799 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t11 array, _) idx_mut = (.(i).#a11) in
    let shallow : (t11 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a11) in
    mark_test_run 1800;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1800 failed";
    let shallow : (t11 array, _) idx_mut = (.(i).#a11) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1801;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1801 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t11 array, _) idx_mut = (.(i).#b11) in
    let shallow : (t11 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b11) in
    mark_test_run 1802;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1802 failed";
    let shallow : (t11 array, _) idx_mut = (.(i).#b11) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1803;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1803 failed";
  );

  (*****************************)
  (*   t12 = #{ int; float }   *)
  (*****************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t12 array, _) idx_mut = (.(i)) in
    let shallow : (t12 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1804;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1804 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t12 array, _) idx_mut = (.(i).#a12) in
    let shallow : (t12 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a12) in
    mark_test_run 1805;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1805 failed";
    let shallow : (t12 array, _) idx_mut = (.(i).#a12) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1806;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1806 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t12 array, _) idx_mut = (.(i).#b12) in
    let shallow : (t12 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b12) in
    mark_test_run 1807;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1807 failed";
    let shallow : (t12 array, _) idx_mut = (.(i).#b12) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1808;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1808 failed";
  );

  (******************************)
  (*   t92 = #{ int; int64# }   *)
  (******************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t92 array, _) idx_mut = (.(i)) in
    let shallow : (t92 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1809;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1809 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t92 array, _) idx_mut = (.(i).#a92) in
    let shallow : (t92 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a92) in
    mark_test_run 1810;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1810 failed";
    let shallow : (t92 array, _) idx_mut = (.(i).#a92) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1811;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1811 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t92 array, _) idx_mut = (.(i).#b92) in
    let shallow : (t92 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b92) in
    mark_test_run 1812;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1812 failed";
    let shallow : (t92 array, _) idx_mut = (.(i).#b92) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1813;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1813 failed";
  );

  (**********************************)
  (*   t93 = #{ int; nativeint# }   *)
  (**********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t93 array, _) idx_mut = (.(i)) in
    let shallow : (t93 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1814;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1814 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t93 array, _) idx_mut = (.(i).#a93) in
    let shallow : (t93 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a93) in
    mark_test_run 1815;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1815 failed";
    let shallow : (t93 array, _) idx_mut = (.(i).#a93) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1816;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1816 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t93 array, _) idx_mut = (.(i).#b93) in
    let shallow : (t93 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b93) in
    mark_test_run 1817;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1817 failed";
    let shallow : (t93 array, _) idx_mut = (.(i).#b93) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1818;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1818 failed";
  );

  (*****************************)
  (*   t13 = #{ int64; int }   *)
  (*****************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t13 array, _) idx_mut = (.(i)) in
    let shallow : (t13 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1819;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1819 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t13 array, _) idx_mut = (.(i).#a13) in
    let shallow : (t13 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a13) in
    mark_test_run 1820;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1820 failed";
    let shallow : (t13 array, _) idx_mut = (.(i).#a13) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1821;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1821 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t13 array, _) idx_mut = (.(i).#b13) in
    let shallow : (t13 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b13) in
    mark_test_run 1822;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1822 failed";
    let shallow : (t13 array, _) idx_mut = (.(i).#b13) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1823;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1823 failed";
  );

  (*******************************)
  (*   t14 = #{ int64; int64 }   *)
  (*******************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t14 array, _) idx_mut = (.(i)) in
    let shallow : (t14 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1824;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1824 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t14 array, _) idx_mut = (.(i).#a14) in
    let shallow : (t14 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a14) in
    mark_test_run 1825;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1825 failed";
    let shallow : (t14 array, _) idx_mut = (.(i).#a14) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1826;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1826 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t14 array, _) idx_mut = (.(i).#b14) in
    let shallow : (t14 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b14) in
    mark_test_run 1827;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1827 failed";
    let shallow : (t14 array, _) idx_mut = (.(i).#b14) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1828;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1828 failed";
  );

  (*******************************)
  (*   t15 = #{ int64; float }   *)
  (*******************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t15 array, _) idx_mut = (.(i)) in
    let shallow : (t15 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1829;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1829 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t15 array, _) idx_mut = (.(i).#a15) in
    let shallow : (t15 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a15) in
    mark_test_run 1830;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1830 failed";
    let shallow : (t15 array, _) idx_mut = (.(i).#a15) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1831;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1831 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t15 array, _) idx_mut = (.(i).#b15) in
    let shallow : (t15 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b15) in
    mark_test_run 1832;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1832 failed";
    let shallow : (t15 array, _) idx_mut = (.(i).#b15) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1833;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1833 failed";
  );

  (*********************************)
  (*   t16 = #{ int32#; int32# }   *)
  (*********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t16 array, _) idx_mut = (.(i)) in
    let shallow : (t16 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1834;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1834 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t16 array, _) idx_mut = (.(i).#a16) in
    let shallow : (t16 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a16) in
    mark_test_run 1835;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1835 failed";
    let shallow : (t16 array, _) idx_mut = (.(i).#a16) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1836;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1836 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t16 array, _) idx_mut = (.(i).#b16) in
    let shallow : (t16 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b16) in
    mark_test_run 1837;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1837 failed";
    let shallow : (t16 array, _) idx_mut = (.(i).#b16) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1838;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1838 failed";
  );

  (*********************************)
  (*   t94 = #{ int32#; int64# }   *)
  (*********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t94 array, _) idx_mut = (.(i)) in
    let shallow : (t94 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1839;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1839 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t94 array, _) idx_mut = (.(i).#a94) in
    let shallow : (t94 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a94) in
    mark_test_run 1840;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1840 failed";
    let shallow : (t94 array, _) idx_mut = (.(i).#a94) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1841;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1841 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t94 array, _) idx_mut = (.(i).#b94) in
    let shallow : (t94 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b94) in
    mark_test_run 1842;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1842 failed";
    let shallow : (t94 array, _) idx_mut = (.(i).#b94) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1843;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1843 failed";
  );

  (*************************************)
  (*   t95 = #{ int32#; nativeint# }   *)
  (*************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t95 array, _) idx_mut = (.(i)) in
    let shallow : (t95 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1844;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1844 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t95 array, _) idx_mut = (.(i).#a95) in
    let shallow : (t95 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a95) in
    mark_test_run 1845;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1845 failed";
    let shallow : (t95 array, _) idx_mut = (.(i).#a95) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1846;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1846 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t95 array, _) idx_mut = (.(i).#b95) in
    let shallow : (t95 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b95) in
    mark_test_run 1847;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1847 failed";
    let shallow : (t95 array, _) idx_mut = (.(i).#b95) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1848;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1848 failed";
  );

  (*****************************)
  (*   t17 = #{ float; int }   *)
  (*****************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t17 array, _) idx_mut = (.(i)) in
    let shallow : (t17 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1849;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1849 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t17 array, _) idx_mut = (.(i).#a17) in
    let shallow : (t17 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a17) in
    mark_test_run 1850;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1850 failed";
    let shallow : (t17 array, _) idx_mut = (.(i).#a17) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1851;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1851 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t17 array, _) idx_mut = (.(i).#b17) in
    let shallow : (t17 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b17) in
    mark_test_run 1852;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1852 failed";
    let shallow : (t17 array, _) idx_mut = (.(i).#b17) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1853;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1853 failed";
  );

  (*******************************)
  (*   t18 = #{ float; int64 }   *)
  (*******************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t18 array, _) idx_mut = (.(i)) in
    let shallow : (t18 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1854;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1854 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t18 array, _) idx_mut = (.(i).#a18) in
    let shallow : (t18 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a18) in
    mark_test_run 1855;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1855 failed";
    let shallow : (t18 array, _) idx_mut = (.(i).#a18) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1856;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1856 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t18 array, _) idx_mut = (.(i).#b18) in
    let shallow : (t18 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b18) in
    mark_test_run 1857;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1857 failed";
    let shallow : (t18 array, _) idx_mut = (.(i).#b18) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1858;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1858 failed";
  );

  (*******************************)
  (*   t19 = #{ float; float }   *)
  (*******************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t19 array, _) idx_mut = (.(i)) in
    let shallow : (t19 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1859;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1859 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t19 array, _) idx_mut = (.(i).#a19) in
    let shallow : (t19 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a19) in
    mark_test_run 1860;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1860 failed";
    let shallow : (t19 array, _) idx_mut = (.(i).#a19) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1861;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1861 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t19 array, _) idx_mut = (.(i).#b19) in
    let shallow : (t19 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b19) in
    mark_test_run 1862;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1862 failed";
    let shallow : (t19 array, _) idx_mut = (.(i).#b19) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1863;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1863 failed";
  );

  (*********************************)
  (*   t96 = #{ int64#; int32# }   *)
  (*********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t96 array, _) idx_mut = (.(i)) in
    let shallow : (t96 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1864;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1864 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t96 array, _) idx_mut = (.(i).#a96) in
    let shallow : (t96 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a96) in
    mark_test_run 1865;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1865 failed";
    let shallow : (t96 array, _) idx_mut = (.(i).#a96) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1866;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1866 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t96 array, _) idx_mut = (.(i).#b96) in
    let shallow : (t96 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b96) in
    mark_test_run 1867;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1867 failed";
    let shallow : (t96 array, _) idx_mut = (.(i).#b96) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1868;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1868 failed";
  );

  (********************************)
  (*   t0 = #{ int64#; int64# }   *)
  (********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t0 array, _) idx_mut = (.(i)) in
    let shallow : (t0 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1869;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1869 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t0 array, _) idx_mut = (.(i).#a0) in
    let shallow : (t0 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a0) in
    mark_test_run 1870;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1870 failed";
    let shallow : (t0 array, _) idx_mut = (.(i).#a0) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1871;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1871 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t0 array, _) idx_mut = (.(i).#b0) in
    let shallow : (t0 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b0) in
    mark_test_run 1872;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1872 failed";
    let shallow : (t0 array, _) idx_mut = (.(i).#b0) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1873;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1873 failed";
  );

  (*************************************)
  (*   t97 = #{ int64#; nativeint# }   *)
  (*************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t97 array, _) idx_mut = (.(i)) in
    let shallow : (t97 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1874;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1874 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t97 array, _) idx_mut = (.(i).#a97) in
    let shallow : (t97 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a97) in
    mark_test_run 1875;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1875 failed";
    let shallow : (t97 array, _) idx_mut = (.(i).#a97) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1876;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1876 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t97 array, _) idx_mut = (.(i).#b97) in
    let shallow : (t97 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b97) in
    mark_test_run 1877;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1877 failed";
    let shallow : (t97 array, _) idx_mut = (.(i).#b97) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1878;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1878 failed";
  );

  (*************************************)
  (*   t98 = #{ nativeint#; int32# }   *)
  (*************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t98 array, _) idx_mut = (.(i)) in
    let shallow : (t98 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1879;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1879 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t98 array, _) idx_mut = (.(i).#a98) in
    let shallow : (t98 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a98) in
    mark_test_run 1880;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1880 failed";
    let shallow : (t98 array, _) idx_mut = (.(i).#a98) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1881;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1881 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t98 array, _) idx_mut = (.(i).#b98) in
    let shallow : (t98 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b98) in
    mark_test_run 1882;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1882 failed";
    let shallow : (t98 array, _) idx_mut = (.(i).#b98) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1883;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1883 failed";
  );

  (*************************************)
  (*   t99 = #{ nativeint#; int64# }   *)
  (*************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t99 array, _) idx_mut = (.(i)) in
    let shallow : (t99 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1884;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1884 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t99 array, _) idx_mut = (.(i).#a99) in
    let shallow : (t99 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a99) in
    mark_test_run 1885;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1885 failed";
    let shallow : (t99 array, _) idx_mut = (.(i).#a99) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1886;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1886 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t99 array, _) idx_mut = (.(i).#b99) in
    let shallow : (t99 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b99) in
    mark_test_run 1887;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1887 failed";
    let shallow : (t99 array, _) idx_mut = (.(i).#b99) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1888;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1888 failed";
  );

  (******************************************)
  (*   t100 = #{ nativeint#; nativeint# }   *)
  (******************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t100 array, _) idx_mut = (.(i)) in
    let shallow : (t100 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1889;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1889 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t100 array, _) idx_mut = (.(i).#a100) in
    let shallow : (t100 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a100) in
    mark_test_run 1890;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1890 failed";
    let shallow : (t100 array, _) idx_mut = (.(i).#a100) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1891;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1891 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t100 array, _) idx_mut = (.(i).#b100) in
    let shallow : (t100 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b100) in
    mark_test_run 1892;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1892 failed";
    let shallow : (t100 array, _) idx_mut = (.(i).#b100) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1893;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1893 failed";
  );

  (***************************)
  (*   t20 = #{ #{ int } }   *)
  (***************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t20 array, _) idx_mut = (.(i)) in
    let shallow : (t20 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1894;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1894 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t20 array, _) idx_mut = (.(i).#a20) in
    let shallow : (t20 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a20) in
    mark_test_run 1895;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1895 failed";
    let shallow : (t20 array, _) idx_mut = (.(i).#a20) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1896;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1896 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t20 array, _) idx_mut = (.(i).#a20.#a6) in
    let shallow : (t20 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a20.#a6) in
    mark_test_run 1897;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1897 failed";
    let shallow : (t20 array, _) idx_mut = (.(i).#a20) in
    let deepened = (.idx_mut(shallow).#a6) in
    mark_test_run 1898;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1898 failed";
    let shallow : (t20 array, _) idx_mut = (.(i).#a20.#a6) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1899;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1899 failed";
  );

  (*****************************)
  (*   t21 = #{ #{ int64 } }   *)
  (*****************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t21 array, _) idx_mut = (.(i)) in
    let shallow : (t21 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1900;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1900 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t21 array, _) idx_mut = (.(i).#a21) in
    let shallow : (t21 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a21) in
    mark_test_run 1901;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1901 failed";
    let shallow : (t21 array, _) idx_mut = (.(i).#a21) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1902;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1902 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t21 array, _) idx_mut = (.(i).#a21.#a7) in
    let shallow : (t21 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a21.#a7) in
    mark_test_run 1903;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1903 failed";
    let shallow : (t21 array, _) idx_mut = (.(i).#a21) in
    let deepened = (.idx_mut(shallow).#a7) in
    mark_test_run 1904;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1904 failed";
    let shallow : (t21 array, _) idx_mut = (.(i).#a21.#a7) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1905;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1905 failed";
  );

  (******************************)
  (*   t22 = #{ #{ int32# } }   *)
  (******************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t22 array, _) idx_mut = (.(i)) in
    let shallow : (t22 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1906;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1906 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t22 array, _) idx_mut = (.(i).#a22) in
    let shallow : (t22 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a22) in
    mark_test_run 1907;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1907 failed";
    let shallow : (t22 array, _) idx_mut = (.(i).#a22) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1908;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1908 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t22 array, _) idx_mut = (.(i).#a22.#a8) in
    let shallow : (t22 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a22.#a8) in
    mark_test_run 1909;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1909 failed";
    let shallow : (t22 array, _) idx_mut = (.(i).#a22) in
    let deepened = (.idx_mut(shallow).#a8) in
    mark_test_run 1910;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1910 failed";
    let shallow : (t22 array, _) idx_mut = (.(i).#a22.#a8) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1911;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1911 failed";
  );

  (*******************************)
  (*   t101 = #{ #{ int64# } }   *)
  (*******************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t101 array, _) idx_mut = (.(i)) in
    let shallow : (t101 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1912;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1912 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t101 array, _) idx_mut = (.(i).#a101) in
    let shallow : (t101 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a101) in
    mark_test_run 1913;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1913 failed";
    let shallow : (t101 array, _) idx_mut = (.(i).#a101) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1914;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1914 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t101 array, _) idx_mut = (.(i).#a101.#a90) in
    let shallow : (t101 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a101.#a90) in
    mark_test_run 1915;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1915 failed";
    let shallow : (t101 array, _) idx_mut = (.(i).#a101) in
    let deepened = (.idx_mut(shallow).#a90) in
    mark_test_run 1916;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1916 failed";
    let shallow : (t101 array, _) idx_mut = (.(i).#a101.#a90) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1917;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1917 failed";
  );

  (***********************************)
  (*   t102 = #{ #{ nativeint# } }   *)
  (***********************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t102 array, _) idx_mut = (.(i)) in
    let shallow : (t102 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1918;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1918 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t102 array, _) idx_mut = (.(i).#a102) in
    let shallow : (t102 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a102) in
    mark_test_run 1919;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1919 failed";
    let shallow : (t102 array, _) idx_mut = (.(i).#a102) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1920;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1920 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t102 array, _) idx_mut = (.(i).#a102.#a91) in
    let shallow : (t102 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a102.#a91) in
    mark_test_run 1921;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1921 failed";
    let shallow : (t102 array, _) idx_mut = (.(i).#a102) in
    let deepened = (.idx_mut(shallow).#a91) in
    mark_test_run 1922;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1922 failed";
    let shallow : (t102 array, _) idx_mut = (.(i).#a102.#a91) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1923;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1923 failed";
  );

  (*********************************************************)
  (*   t104 = #{ #{ int; int64# }; #{ int64#; float# } }   *)
  (*********************************************************)
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t104 array, _) idx_mut = (.(i)) in
    let shallow : (t104 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1924;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1924 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t104 array, _) idx_mut = (.(i).#a104) in
    let shallow : (t104 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a104) in
    mark_test_run 1925;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1925 failed";
    let shallow : (t104 array, _) idx_mut = (.(i).#a104) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1926;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1926 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t104 array, _) idx_mut = (.(i).#b104) in
    let shallow : (t104 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b104) in
    mark_test_run 1927;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1927 failed";
    let shallow : (t104 array, _) idx_mut = (.(i).#b104) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1928;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1928 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t104 array, _) idx_mut = (.(i).#a104.#a92) in
    let shallow : (t104 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a104.#a92) in
    mark_test_run 1929;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1929 failed";
    let shallow : (t104 array, _) idx_mut = (.(i).#a104) in
    let deepened = (.idx_mut(shallow).#a92) in
    mark_test_run 1930;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1930 failed";
    let shallow : (t104 array, _) idx_mut = (.(i).#a104.#a92) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1931;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1931 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t104 array, _) idx_mut = (.(i).#a104.#b92) in
    let shallow : (t104 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#a104.#b92) in
    mark_test_run 1932;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1932 failed";
    let shallow : (t104 array, _) idx_mut = (.(i).#a104) in
    let deepened = (.idx_mut(shallow).#b92) in
    mark_test_run 1933;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1933 failed";
    let shallow : (t104 array, _) idx_mut = (.(i).#a104.#b92) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1934;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1934 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t104 array, _) idx_mut = (.(i).#b104.#a103) in
    let shallow : (t104 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b104.#a103) in
    mark_test_run 1935;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1935 failed";
    let shallow : (t104 array, _) idx_mut = (.(i).#b104) in
    let deepened = (.idx_mut(shallow).#a103) in
    mark_test_run 1936;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1936 failed";
    let shallow : (t104 array, _) idx_mut = (.(i).#b104.#a103) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1937;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1937 failed";
  );
  iter indices_in_deepening_tests ~f:(fun i ->
    let unboxed_path : (t104 array, _) idx_mut = (.(i).#b104.#b103) in
    let shallow : (t104 array, _) idx_mut = (.(i)) in
    let deepened = (.idx_mut(shallow).#b104.#b103) in
    mark_test_run 1938;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1938 failed";
    let shallow : (t104 array, _) idx_mut = (.(i).#b104) in
    let deepened = (.idx_mut(shallow).#b103) in
    mark_test_run 1939;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1939 failed";
    let shallow : (t104 array, _) idx_mut = (.(i).#b104.#b103) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1940;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut unboxed_path) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1940 failed";
  );

  ()
(* *)
let () =
  print_endline "test_array_idx_with_makearray_dynamic";
  iter sizes ~f:test_array_idx_with_makearray_dynamic;
  print_endline "test_array_idx_with_makearray_dynamic_local";
  iter sizes ~f:test_array_idx_with_makearray_dynamic_local;
  ()
;;

for i = 1 to 1940 do
  if not (Int_set.mem i !tests_run) then failwithf "test %d not run" i
done;;
let () = Printf.printf "All tests passed.%!\n";;
