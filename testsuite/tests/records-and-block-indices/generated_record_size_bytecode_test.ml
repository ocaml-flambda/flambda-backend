(* TEST
 include stdlib_stable;
 include stdlib_upstream_compatible;
 flags = "-extension layouts_alpha";
 bytecode;
*)
(** This is code generated by [test_generation.ml]. *)

[@@@warning "-23"]
external globalize : local_ 'a -> 'a = "%obj_dup";;
let int64x2_u_equal (_ : int64x2#) (_ : int64x2#) = failwith "should not be called from bytecode"

open Stdlib_upstream_compatible
open Stdlib_stable

external[@layout_poly] makearray_dynamic_local :
  ('a : any_non_null) . int -> 'a -> 'a array @ local =
  "%makearray_dynamic"

external[@layout_poly] makearray_dynamic :
  ('a : any_non_null) . int -> 'a -> 'a array =
  "%makearray_dynamic"

external[@layout_poly] get :
  ('a : any_non_null) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a =
  "%array_safe_get"

external[@layout_poly] set :
  ('a : any_non_null) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a -> unit =
  "%array_safe_set"

external[@layout_poly] get_idx_imm :
  'a ('b : any). ('a [@local_opt]) -> ('a, 'b) idx_imm -> ('b [@local_opt]) =
  "%unsafe_get_idx_imm"

external[@layout_poly] get_idx_mut :
  'a ('b : any). ('a [@local_opt]) -> ('a, 'b) idx_mut -> ('b [@local_opt]) =
  "%unsafe_get_idx"

external[@layout_poly] set_idx_mut :
  'a ('b : any).
    ('a [@local_opt]) -> ('a, 'b) idx_mut -> ('b [@local_opt]) -> unit =
  "%unsafe_set_idx"

module Idx_repr : sig
  type t
  val of_idx_imm : 'a ('b : any). ('a, 'b) idx_imm -> t
  val of_idx_mut : 'a ('b : any). ('a, 'b) idx_mut -> t
  val equal : t -> t -> bool
  val debug_string : t -> string
end = struct
  (* See Note [Representation of block indices] in [lambda/translcore.ml] *)
  type t =
    | Bytecode of { path : int list }
    | Native of { offset : int; gap : int }

  external magic_box_bits64 : ('a : bits64) 'b . 'a -> 'b =
    "%box_int64"
  external lessthan_if_bytecode : int -> int -> bool =
    "caml_lessthan" "caml_greaterthan"

  let of_idx idx =
    let is_bytecode = lessthan_if_bytecode 0 1 in
    if is_bytecode then
      let r = Obj.repr (magic_box_bits64 idx) in
      let nth_idx n : int = Obj.magic (Obj.field r n) in
      let path = List.init (Obj.size r) nth_idx in
      Bytecode { path }
    else
      let i : int64 = magic_box_bits64 idx in
      let offset =
        Int64.(logand (sub (shift_left one 48) one)) i
        |> Int64.to_int
      in
      let gap =
        Int64.shift_right i 48
        |> Int64.to_int
      in
      Native { offset; gap }

  let of_idx_imm = of_idx
  let of_idx_mut = of_idx

  let equal t1 t2 =
    match t1, t2 with
    | Bytecode { path = path1 }, Bytecode { path = path2 } ->
      List.equal Int.equal path1 path2
    | Native { gap = gap1; offset = offset1 },
      Native { gap = gap2; offset = offset2 } ->
      Int.equal gap1 gap2 && Int.equal offset1 offset2
    | Bytecode _, Native _ | Native _, Bytecode _ -> assert false

  let debug_string = function
    | Bytecode { path } ->
      Printf.sprintf "{ %s }"
        (String.concat "; " (List.map Int.to_string path))
    | Native { offset; gap } ->
      Printf.sprintf "offset %d; gap %d" offset gap
end

let failwithf fmt = Printf.ksprintf failwith fmt

(* Redefine iter to infer locality *)
let rec iter ~f = function
    [] -> ()
  | a::l -> f a; iter ~f l

module Int_set = Set.Make(Int)

let tests_run = ref Int_set.empty

let mark_test_run test_id =
  tests_run := Int_set.add test_id !tests_run

(* Various interesting values *)

let sizes = [ 0; 1; 2; 30 ]

let indices_in_deepening_tests = [0; 100_000]

type packed = P : 'a -> packed
let ref_to_force_heap_allocation : packed ref = ref (P 0)

type t0 = { mutable a0 : int }
type t1 = { mutable a1 : int; mutable b1 : int }
type t2 = { mutable a2 : int; mutable b2 : int; mutable c2 : int }
type t3 = { mutable a3 : int; mutable b3 : int; mutable c3 : int32# }
type t4 = { mutable a4 : int; mutable b4 : int; mutable c4 : float }
type t5 = { mutable a5 : int; mutable b5 : int64 }
type t6 = { mutable a6 : int; mutable b6 : int64# }
type t7 = { mutable a7 : int; mutable b7 : int32# }
type t8 = { mutable a8 : int; mutable b8 : int32#; mutable c8 : int }
type t9 = { mutable a9 : int; mutable b9 : int32#; mutable c9 : int32# }
type t10 = { mutable a10 : int; mutable b10 : nativeint# }
type t11 = { mutable a11 : int; mutable b11 : float }
type t12 = { mutable a12 : int; mutable b12 : float; mutable c12 : int }
type t13 = { mutable a13 : int; mutable b13 : float; mutable c13 : float }
type t14 = #{ a14 : int }
type t15 = { mutable a15 : int; mutable b15 : t14 }
type t16 = #{ a16 : int; b16 : int }
type t17 = { mutable a17 : int; mutable b17 : t16 }
type t18 = #{ a18 : int; b18 : int32# }
type t19 = { mutable a19 : int; mutable b19 : t18 }
type t20 = #{ a20 : int; b20 : float }
type t21 = { mutable a21 : int; mutable b21 : t20 }
type t22 = #{ a22 : int32# }
type t23 = { mutable a23 : int; mutable b23 : t22 }
type t24 = #{ a24 : int32#; b24 : int }
type t25 = { mutable a25 : int; mutable b25 : t24 }
type t26 = #{ a26 : int32#; b26 : int32# }
type t27 = { mutable a27 : int; mutable b27 : t26 }
type t28 = #{ a28 : float }
type t29 = { mutable a29 : int; mutable b29 : t28 }
type t30 = #{ a30 : float; b30 : int }
type t31 = { mutable a31 : int; mutable b31 : t30 }
type t32 = #{ a32 : float; b32 : float }
type t33 = { mutable a33 : int; mutable b33 : t32 }
type t34 = { mutable a34 : int64 }
type t35 = { mutable a35 : int64; mutable b35 : int }
type t36 = { mutable a36 : int64; mutable b36 : int64 }
type t37 = { mutable a37 : int64; mutable b37 : int64# }
type t38 = { mutable a38 : int64; mutable b38 : int32# }
type t39 = { mutable a39 : int64; mutable b39 : nativeint# }
type t40 = { mutable a40 : int64; mutable b40 : float }
type t41 = { mutable a41 : int64# }
type t42 = { mutable a42 : int64#; mutable b42 : int }
type t43 = { mutable a43 : int64#; mutable b43 : int64 }
type t44 = { mutable a44 : int64#; mutable b44 : int64# }
type t45 = { mutable a45 : int64#; mutable b45 : int32# }
type t46 = { mutable a46 : int64#; mutable b46 : nativeint# }
type t47 = { mutable a47 : int64#; mutable b47 : float }
type t48 = { mutable a48 : int32# }
type t49 = { mutable a49 : int32#; mutable b49 : int }
type t50 = { mutable a50 : int32#; mutable b50 : int; mutable c50 : int }
type t51 = { mutable a51 : int32#; mutable b51 : int; mutable c51 : int32# }
type t52 = { mutable a52 : int32#; mutable b52 : int64 }
type t53 = { mutable a53 : int32#; mutable b53 : int64# }
type t54 = { mutable a54 : int32#; mutable b54 : int32# }
type t55 = { mutable a55 : int32#; mutable b55 : int32#; mutable c55 : int }
type t56 = { mutable a56 : int32#; mutable b56 : int32#; mutable c56 : int32# }
type t57 = { mutable a57 : int32#; mutable b57 : nativeint# }
type t58 = { mutable a58 : int32#; mutable b58 : float }
type t59 = { mutable a59 : int32#; mutable b59 : t14 }
type t60 = { mutable a60 : int32#; mutable b60 : t16 }
type t61 = { mutable a61 : int32#; mutable b61 : t18 }
type t62 = { mutable a62 : int32#; mutable b62 : t22 }
type t63 = { mutable a63 : int32#; mutable b63 : t24 }
type t64 = { mutable a64 : int32#; mutable b64 : t26 }
type t65 = { mutable a65 : nativeint# }
type t66 = { mutable a66 : nativeint#; mutable b66 : int }
type t67 = { mutable a67 : nativeint#; mutable b67 : int64 }
type t68 = { mutable a68 : nativeint#; mutable b68 : int64# }
type t69 = { mutable a69 : nativeint#; mutable b69 : int32# }
type t70 = { mutable a70 : nativeint#; mutable b70 : nativeint# }
type t71 = { mutable a71 : nativeint#; mutable b71 : float }
type t72 = { mutable a72 : float }
type t73 = { mutable a73 : float; mutable b73 : int }
type t74 = { mutable a74 : float; mutable b74 : int; mutable c74 : int }
type t75 = { mutable a75 : float; mutable b75 : int; mutable c75 : float }
type t76 = { mutable a76 : float; mutable b76 : int64 }
type t77 = { mutable a77 : float; mutable b77 : int64# }
type t78 = { mutable a78 : float; mutable b78 : int32# }
type t79 = { mutable a79 : float; mutable b79 : nativeint# }
type t80 = { mutable a80 : float; mutable b80 : float }
type t81 = { mutable a81 : float; mutable b81 : float; mutable c81 : int }
type t82 = { mutable a82 : float; mutable b82 : float; mutable c82 : float }
type t83 = { mutable a83 : float; mutable b83 : t14 }
type t84 = { mutable a84 : float; mutable b84 : t16 }
type t85 = { mutable a85 : float; mutable b85 : t20 }
type t86 = { mutable a86 : float; mutable b86 : t28 }
type t87 = { mutable a87 : float; mutable b87 : t30 }
type t88 = { mutable a88 : float; mutable b88 : t32 }
type t89 = { mutable a89 : t14 }
type t90 = { mutable a90 : t14; mutable b90 : int }
type t91 = { mutable a91 : t14; mutable b91 : int32# }
type t92 = { mutable a92 : t14; mutable b92 : float }
type t93 = { mutable a93 : t16 }
type t94 = { mutable a94 : t16; mutable b94 : int }
type t95 = { mutable a95 : t16; mutable b95 : int32# }
type t96 = { mutable a96 : t16; mutable b96 : float }
type t97 = { mutable a97 : t18 }
type t98 = { mutable a98 : t18; mutable b98 : int }
type t99 = { mutable a99 : t18; mutable b99 : int32# }
type t100 = { mutable a100 : t20 }
type t101 = { mutable a101 : t20; mutable b101 : int }
type t102 = { mutable a102 : t20; mutable b102 : float }
type t103 = #{ a103 : int64; b103 : int64# }
type t104 = #{ a104 : int64#; b104 : float# }
type t105 = { mutable a105 : t103; mutable b105 : t104 }
type t106 = #{ a106 : int64; b106 : string }
type t107 = #{ a107 : int64#; b107 : string }
type t108 = { mutable a108 : t106; mutable b108 : t107 }
type t109 = #{ a109 : int64#; b109 : int64 }
type t110 = #{ a110 : int64; b110 : int64 }
type t111 = { mutable a111 : t109; mutable b111 : t110 }
type t112 = #{ a112 : float32#; b112 : float }
type t113 = { mutable a113 : t109; mutable b113 : t112 }
type t114 = { mutable a114 : t22 }
type t115 = { mutable a115 : t22; mutable b115 : int }
type t116 = { mutable a116 : t22; mutable b116 : int32# }
type t117 = { mutable a117 : t24 }
type t118 = { mutable a118 : t24; mutable b118 : int }
type t119 = { mutable a119 : t24; mutable b119 : int32# }
type t120 = { mutable a120 : t26 }
type t121 = { mutable a121 : t26; mutable b121 : int }
type t122 = { mutable a122 : t26; mutable b122 : int32# }
type t123 = { mutable a123 : t28 }
type t124 = { mutable a124 : t28; mutable b124 : int }
type t125 = { mutable a125 : t28; mutable b125 : float }
type t126 = { mutable a126 : t30 }
type t127 = { mutable a127 : t30; mutable b127 : int }
type t128 = { mutable a128 : t30; mutable b128 : float }
type t129 = { mutable a129 : t32 }
type t130 = { mutable a130 : t32; mutable b130 : int }
type t131 = { mutable a131 : t32; mutable b131 : float }
type t132 = #{ a132 : float32#; b132 : int64# }
type t133 = #{ a133 : string; b133 : int64# }
type t134 = { mutable a134 : t132; mutable b134 : t133 }

let () =
  (********************)
  (*   t0 = { int }   *)
  (********************)
  let r = { a0 = 0 } in
  mark_test_run 1;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 1 failed";

  (*************************)
  (*   t1 = { int; int }   *)
  (*************************)
  let r = { a1 = 0; b1 = 1 } in
  mark_test_run 2;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 2 failed";

  (******************************)
  (*   t2 = { int; int; int }   *)
  (******************************)
  let r = { a2 = 0; b2 = 1; c2 = 2 } in
  mark_test_run 3;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 3 failed";

  (*********************************)
  (*   t3 = { int; int; int32# }   *)
  (*********************************)
  let r = { a3 = 0; b3 = 1; c3 = #2l } in
  mark_test_run 4;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 4 failed";

  (********************************)
  (*   t4 = { int; int; float }   *)
  (********************************)
  let r = { a4 = 0; b4 = 1; c4 = 2. } in
  mark_test_run 5;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 5 failed";

  (***************************)
  (*   t5 = { int; int64 }   *)
  (***************************)
  let r = { a5 = 0; b5 = 1L } in
  mark_test_run 6;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 6 failed";

  (****************************)
  (*   t6 = { int; int64# }   *)
  (****************************)
  let r = { a6 = 0; b6 = #1L } in
  mark_test_run 7;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 7 failed";

  (****************************)
  (*   t7 = { int; int32# }   *)
  (****************************)
  let r = { a7 = 0; b7 = #1l } in
  mark_test_run 8;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 8 failed";

  (*********************************)
  (*   t8 = { int; int32#; int }   *)
  (*********************************)
  let r = { a8 = 0; b8 = #1l; c8 = 2 } in
  mark_test_run 9;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 9 failed";

  (************************************)
  (*   t9 = { int; int32#; int32# }   *)
  (************************************)
  let r = { a9 = 0; b9 = #1l; c9 = #2l } in
  mark_test_run 10;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 10 failed";

  (*********************************)
  (*   t10 = { int; nativeint# }   *)
  (*********************************)
  let r = { a10 = 0; b10 = #1n } in
  mark_test_run 11;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 11 failed";

  (****************************)
  (*   t11 = { int; float }   *)
  (****************************)
  let r = { a11 = 0; b11 = 1. } in
  mark_test_run 12;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 12 failed";

  (*********************************)
  (*   t12 = { int; float; int }   *)
  (*********************************)
  let r = { a12 = 0; b12 = 1.; c12 = 2 } in
  mark_test_run 13;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 13 failed";

  (***********************************)
  (*   t13 = { int; float; float }   *)
  (***********************************)
  let r = { a13 = 0; b13 = 1.; c13 = 2. } in
  mark_test_run 14;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 14 failed";

  (*******************************)
  (*   t15 = { int; #{ int } }   *)
  (*******************************)
  let r = { a15 = 0; b15 = #{ a14 = 1 } } in
  mark_test_run 15;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 15 failed";

  (************************************)
  (*   t17 = { int; #{ int; int } }   *)
  (************************************)
  let r = { a17 = 0; b17 = #{ a16 = 1; b16 = 2 } } in
  mark_test_run 16;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 16 failed";

  (***************************************)
  (*   t19 = { int; #{ int; int32# } }   *)
  (***************************************)
  let r = { a19 = 0; b19 = #{ a18 = 1; b18 = #2l } } in
  mark_test_run 17;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 17 failed";

  (**************************************)
  (*   t21 = { int; #{ int; float } }   *)
  (**************************************)
  let r = { a21 = 0; b21 = #{ a20 = 1; b20 = 2. } } in
  mark_test_run 18;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 18 failed";

  (**********************************)
  (*   t23 = { int; #{ int32# } }   *)
  (**********************************)
  let r = { a23 = 0; b23 = #{ a22 = #1l } } in
  mark_test_run 19;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 19 failed";

  (***************************************)
  (*   t25 = { int; #{ int32#; int } }   *)
  (***************************************)
  let r = { a25 = 0; b25 = #{ a24 = #1l; b24 = 2 } } in
  mark_test_run 20;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 20 failed";

  (******************************************)
  (*   t27 = { int; #{ int32#; int32# } }   *)
  (******************************************)
  let r = { a27 = 0; b27 = #{ a26 = #1l; b26 = #2l } } in
  mark_test_run 21;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 21 failed";

  (*********************************)
  (*   t29 = { int; #{ float } }   *)
  (*********************************)
  let r = { a29 = 0; b29 = #{ a28 = 1. } } in
  mark_test_run 22;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 22 failed";

  (**************************************)
  (*   t31 = { int; #{ float; int } }   *)
  (**************************************)
  let r = { a31 = 0; b31 = #{ a30 = 1.; b30 = 2 } } in
  mark_test_run 23;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 23 failed";

  (****************************************)
  (*   t33 = { int; #{ float; float } }   *)
  (****************************************)
  let r = { a33 = 0; b33 = #{ a32 = 1.; b32 = 2. } } in
  mark_test_run 24;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 24 failed";

  (***********************)
  (*   t34 = { int64 }   *)
  (***********************)
  let r = { a34 = 0L } in
  mark_test_run 25;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 25 failed";

  (****************************)
  (*   t35 = { int64; int }   *)
  (****************************)
  let r = { a35 = 0L; b35 = 1 } in
  mark_test_run 26;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 26 failed";

  (******************************)
  (*   t36 = { int64; int64 }   *)
  (******************************)
  let r = { a36 = 0L; b36 = 1L } in
  mark_test_run 27;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 27 failed";

  (*******************************)
  (*   t37 = { int64; int64# }   *)
  (*******************************)
  let r = { a37 = 0L; b37 = #1L } in
  mark_test_run 28;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 28 failed";

  (*******************************)
  (*   t38 = { int64; int32# }   *)
  (*******************************)
  let r = { a38 = 0L; b38 = #1l } in
  mark_test_run 29;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 29 failed";

  (***********************************)
  (*   t39 = { int64; nativeint# }   *)
  (***********************************)
  let r = { a39 = 0L; b39 = #1n } in
  mark_test_run 30;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 30 failed";

  (******************************)
  (*   t40 = { int64; float }   *)
  (******************************)
  let r = { a40 = 0L; b40 = 1. } in
  mark_test_run 31;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 31 failed";

  (************************)
  (*   t41 = { int64# }   *)
  (************************)
  let r = { a41 = #0L } in
  mark_test_run 32;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 32 failed";

  (*****************************)
  (*   t42 = { int64#; int }   *)
  (*****************************)
  let r = { a42 = #0L; b42 = 1 } in
  mark_test_run 33;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 33 failed";

  (*******************************)
  (*   t43 = { int64#; int64 }   *)
  (*******************************)
  let r = { a43 = #0L; b43 = 1L } in
  mark_test_run 34;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 34 failed";

  (********************************)
  (*   t44 = { int64#; int64# }   *)
  (********************************)
  let r = { a44 = #0L; b44 = #1L } in
  mark_test_run 35;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 35 failed";

  (********************************)
  (*   t45 = { int64#; int32# }   *)
  (********************************)
  let r = { a45 = #0L; b45 = #1l } in
  mark_test_run 36;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 36 failed";

  (************************************)
  (*   t46 = { int64#; nativeint# }   *)
  (************************************)
  let r = { a46 = #0L; b46 = #1n } in
  mark_test_run 37;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 37 failed";

  (*******************************)
  (*   t47 = { int64#; float }   *)
  (*******************************)
  let r = { a47 = #0L; b47 = 1. } in
  mark_test_run 38;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 38 failed";

  (************************)
  (*   t48 = { int32# }   *)
  (************************)
  let r = { a48 = #0l } in
  mark_test_run 39;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 39 failed";

  (*****************************)
  (*   t49 = { int32#; int }   *)
  (*****************************)
  let r = { a49 = #0l; b49 = 1 } in
  mark_test_run 40;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 40 failed";

  (**********************************)
  (*   t50 = { int32#; int; int }   *)
  (**********************************)
  let r = { a50 = #0l; b50 = 1; c50 = 2 } in
  mark_test_run 41;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 41 failed";

  (*************************************)
  (*   t51 = { int32#; int; int32# }   *)
  (*************************************)
  let r = { a51 = #0l; b51 = 1; c51 = #2l } in
  mark_test_run 42;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 42 failed";

  (*******************************)
  (*   t52 = { int32#; int64 }   *)
  (*******************************)
  let r = { a52 = #0l; b52 = 1L } in
  mark_test_run 43;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 43 failed";

  (********************************)
  (*   t53 = { int32#; int64# }   *)
  (********************************)
  let r = { a53 = #0l; b53 = #1L } in
  mark_test_run 44;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 44 failed";

  (********************************)
  (*   t54 = { int32#; int32# }   *)
  (********************************)
  let r = { a54 = #0l; b54 = #1l } in
  mark_test_run 45;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 45 failed";

  (*************************************)
  (*   t55 = { int32#; int32#; int }   *)
  (*************************************)
  let r = { a55 = #0l; b55 = #1l; c55 = 2 } in
  mark_test_run 46;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 46 failed";

  (****************************************)
  (*   t56 = { int32#; int32#; int32# }   *)
  (****************************************)
  let r = { a56 = #0l; b56 = #1l; c56 = #2l } in
  mark_test_run 47;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 47 failed";

  (************************************)
  (*   t57 = { int32#; nativeint# }   *)
  (************************************)
  let r = { a57 = #0l; b57 = #1n } in
  mark_test_run 48;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 48 failed";

  (*******************************)
  (*   t58 = { int32#; float }   *)
  (*******************************)
  let r = { a58 = #0l; b58 = 1. } in
  mark_test_run 49;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 49 failed";

  (**********************************)
  (*   t59 = { int32#; #{ int } }   *)
  (**********************************)
  let r = { a59 = #0l; b59 = #{ a14 = 1 } } in
  mark_test_run 50;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 50 failed";

  (***************************************)
  (*   t60 = { int32#; #{ int; int } }   *)
  (***************************************)
  let r = { a60 = #0l; b60 = #{ a16 = 1; b16 = 2 } } in
  mark_test_run 51;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 51 failed";

  (******************************************)
  (*   t61 = { int32#; #{ int; int32# } }   *)
  (******************************************)
  let r = { a61 = #0l; b61 = #{ a18 = 1; b18 = #2l } } in
  mark_test_run 52;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 52 failed";

  (*************************************)
  (*   t62 = { int32#; #{ int32# } }   *)
  (*************************************)
  let r = { a62 = #0l; b62 = #{ a22 = #1l } } in
  mark_test_run 53;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 53 failed";

  (******************************************)
  (*   t63 = { int32#; #{ int32#; int } }   *)
  (******************************************)
  let r = { a63 = #0l; b63 = #{ a24 = #1l; b24 = 2 } } in
  mark_test_run 54;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 54 failed";

  (*********************************************)
  (*   t64 = { int32#; #{ int32#; int32# } }   *)
  (*********************************************)
  let r = { a64 = #0l; b64 = #{ a26 = #1l; b26 = #2l } } in
  mark_test_run 55;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 55 failed";

  (****************************)
  (*   t65 = { nativeint# }   *)
  (****************************)
  let r = { a65 = #0n } in
  mark_test_run 56;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 56 failed";

  (*********************************)
  (*   t66 = { nativeint#; int }   *)
  (*********************************)
  let r = { a66 = #0n; b66 = 1 } in
  mark_test_run 57;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 57 failed";

  (***********************************)
  (*   t67 = { nativeint#; int64 }   *)
  (***********************************)
  let r = { a67 = #0n; b67 = 1L } in
  mark_test_run 58;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 58 failed";

  (************************************)
  (*   t68 = { nativeint#; int64# }   *)
  (************************************)
  let r = { a68 = #0n; b68 = #1L } in
  mark_test_run 59;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 59 failed";

  (************************************)
  (*   t69 = { nativeint#; int32# }   *)
  (************************************)
  let r = { a69 = #0n; b69 = #1l } in
  mark_test_run 60;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 60 failed";

  (****************************************)
  (*   t70 = { nativeint#; nativeint# }   *)
  (****************************************)
  let r = { a70 = #0n; b70 = #1n } in
  mark_test_run 61;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 61 failed";

  (***********************************)
  (*   t71 = { nativeint#; float }   *)
  (***********************************)
  let r = { a71 = #0n; b71 = 1. } in
  mark_test_run 62;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 62 failed";

  (***********************)
  (*   t72 = { float }   *)
  (***********************)
  let r = { a72 = 0. } in
  mark_test_run 63;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 63 failed";

  (****************************)
  (*   t73 = { float; int }   *)
  (****************************)
  let r = { a73 = 0.; b73 = 1 } in
  mark_test_run 64;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 64 failed";

  (*********************************)
  (*   t74 = { float; int; int }   *)
  (*********************************)
  let r = { a74 = 0.; b74 = 1; c74 = 2 } in
  mark_test_run 65;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 65 failed";

  (***********************************)
  (*   t75 = { float; int; float }   *)
  (***********************************)
  let r = { a75 = 0.; b75 = 1; c75 = 2. } in
  mark_test_run 66;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 66 failed";

  (******************************)
  (*   t76 = { float; int64 }   *)
  (******************************)
  let r = { a76 = 0.; b76 = 1L } in
  mark_test_run 67;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 67 failed";

  (*******************************)
  (*   t77 = { float; int64# }   *)
  (*******************************)
  let r = { a77 = 0.; b77 = #1L } in
  mark_test_run 68;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 68 failed";

  (*******************************)
  (*   t78 = { float; int32# }   *)
  (*******************************)
  let r = { a78 = 0.; b78 = #1l } in
  mark_test_run 69;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 69 failed";

  (***********************************)
  (*   t79 = { float; nativeint# }   *)
  (***********************************)
  let r = { a79 = 0.; b79 = #1n } in
  mark_test_run 70;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 70 failed";

  (******************************)
  (*   t80 = { float; float }   *)
  (******************************)
  let r = { a80 = 0.; b80 = 1. } in
  mark_test_run 71;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 71 failed";

  (***********************************)
  (*   t81 = { float; float; int }   *)
  (***********************************)
  let r = { a81 = 0.; b81 = 1.; c81 = 2 } in
  mark_test_run 72;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 72 failed";

  (*************************************)
  (*   t82 = { float; float; float }   *)
  (*************************************)
  let r = { a82 = 0.; b82 = 1.; c82 = 2. } in
  mark_test_run 73;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 73 failed";

  (*********************************)
  (*   t83 = { float; #{ int } }   *)
  (*********************************)
  let r = { a83 = 0.; b83 = #{ a14 = 1 } } in
  mark_test_run 74;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 74 failed";

  (**************************************)
  (*   t84 = { float; #{ int; int } }   *)
  (**************************************)
  let r = { a84 = 0.; b84 = #{ a16 = 1; b16 = 2 } } in
  mark_test_run 75;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 75 failed";

  (****************************************)
  (*   t85 = { float; #{ int; float } }   *)
  (****************************************)
  let r = { a85 = 0.; b85 = #{ a20 = 1; b20 = 2. } } in
  mark_test_run 76;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 76 failed";

  (***********************************)
  (*   t86 = { float; #{ float } }   *)
  (***********************************)
  let r = { a86 = 0.; b86 = #{ a28 = 1. } } in
  mark_test_run 77;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 77 failed";

  (****************************************)
  (*   t87 = { float; #{ float; int } }   *)
  (****************************************)
  let r = { a87 = 0.; b87 = #{ a30 = 1.; b30 = 2 } } in
  mark_test_run 78;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 78 failed";

  (******************************************)
  (*   t88 = { float; #{ float; float } }   *)
  (******************************************)
  let r = { a88 = 0.; b88 = #{ a32 = 1.; b32 = 2. } } in
  mark_test_run 79;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 79 failed";

  (**************************)
  (*   t89 = { #{ int } }   *)
  (**************************)
  let r = { a89 = #{ a14 = 0 } } in
  mark_test_run 80;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 80 failed";

  (*******************************)
  (*   t90 = { #{ int }; int }   *)
  (*******************************)
  let r = { a90 = #{ a14 = 0 }; b90 = 1 } in
  mark_test_run 81;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 81 failed";

  (**********************************)
  (*   t91 = { #{ int }; int32# }   *)
  (**********************************)
  let r = { a91 = #{ a14 = 0 }; b91 = #1l } in
  mark_test_run 82;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 82 failed";

  (*********************************)
  (*   t92 = { #{ int }; float }   *)
  (*********************************)
  let r = { a92 = #{ a14 = 0 }; b92 = 1. } in
  mark_test_run 83;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 83 failed";

  (*******************************)
  (*   t93 = { #{ int; int } }   *)
  (*******************************)
  let r = { a93 = #{ a16 = 0; b16 = 1 } } in
  mark_test_run 84;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 84 failed";

  (************************************)
  (*   t94 = { #{ int; int }; int }   *)
  (************************************)
  let r = { a94 = #{ a16 = 0; b16 = 1 }; b94 = 2 } in
  mark_test_run 85;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 85 failed";

  (***************************************)
  (*   t95 = { #{ int; int }; int32# }   *)
  (***************************************)
  let r = { a95 = #{ a16 = 0; b16 = 1 }; b95 = #2l } in
  mark_test_run 86;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 86 failed";

  (**************************************)
  (*   t96 = { #{ int; int }; float }   *)
  (**************************************)
  let r = { a96 = #{ a16 = 0; b16 = 1 }; b96 = 2. } in
  mark_test_run 87;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 87 failed";

  (**********************************)
  (*   t97 = { #{ int; int32# } }   *)
  (**********************************)
  let r = { a97 = #{ a18 = 0; b18 = #1l } } in
  mark_test_run 88;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 88 failed";

  (***************************************)
  (*   t98 = { #{ int; int32# }; int }   *)
  (***************************************)
  let r = { a98 = #{ a18 = 0; b18 = #1l }; b98 = 2 } in
  mark_test_run 89;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 89 failed";

  (******************************************)
  (*   t99 = { #{ int; int32# }; int32# }   *)
  (******************************************)
  let r = { a99 = #{ a18 = 0; b18 = #1l }; b99 = #2l } in
  mark_test_run 90;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 90 failed";

  (**********************************)
  (*   t100 = { #{ int; float } }   *)
  (**********************************)
  let r = { a100 = #{ a20 = 0; b20 = 1. } } in
  mark_test_run 91;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 91 failed";

  (***************************************)
  (*   t101 = { #{ int; float }; int }   *)
  (***************************************)
  let r = { a101 = #{ a20 = 0; b20 = 1. }; b101 = 2 } in
  mark_test_run 92;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 92 failed";

  (*****************************************)
  (*   t102 = { #{ int; float }; float }   *)
  (*****************************************)
  let r = { a102 = #{ a20 = 0; b20 = 1. }; b102 = 2. } in
  mark_test_run 93;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 93 failed";

  (**********************************************************)
  (*   t105 = { #{ int64; int64# }; #{ int64#; float# } }   *)
  (**********************************************************)
  let r = { a105 = #{ a103 = 0L; b103 = #1L }; b105 = #{ a104 = #2L; b104 = #3. } } in
  mark_test_run 94;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 94 failed";

  (**********************************************************)
  (*   t108 = { #{ int64; string }; #{ int64#; string } }   *)
  (**********************************************************)
  let r = { a108 = #{ a106 = 0L; b106 = "1" }; b108 = #{ a107 = #2L; b107 = "3" } } in
  mark_test_run 95;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 95 failed";

  (********************************************************)
  (*   t111 = { #{ int64#; int64 }; #{ int64; int64 } }   *)
  (********************************************************)
  let r = { a111 = #{ a109 = #0L; b109 = 1L }; b111 = #{ a110 = 2L; b110 = 3L } } in
  mark_test_run 96;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 96 failed";

  (***********************************************************)
  (*   t113 = { #{ int64#; int64 }; #{ float32#; float } }   *)
  (***********************************************************)
  let r = { a113 = #{ a109 = #0L; b109 = 1L }; b113 = #{ a112 = #2.s; b112 = 3. } } in
  mark_test_run 97;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 97 failed";

  (******************************)
  (*   t114 = { #{ int32# } }   *)
  (******************************)
  let r = { a114 = #{ a22 = #0l } } in
  mark_test_run 98;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 98 failed";

  (***********************************)
  (*   t115 = { #{ int32# }; int }   *)
  (***********************************)
  let r = { a115 = #{ a22 = #0l }; b115 = 1 } in
  mark_test_run 99;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 99 failed";

  (**************************************)
  (*   t116 = { #{ int32# }; int32# }   *)
  (**************************************)
  let r = { a116 = #{ a22 = #0l }; b116 = #1l } in
  mark_test_run 100;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 100 failed";

  (***********************************)
  (*   t117 = { #{ int32#; int } }   *)
  (***********************************)
  let r = { a117 = #{ a24 = #0l; b24 = 1 } } in
  mark_test_run 101;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 101 failed";

  (****************************************)
  (*   t118 = { #{ int32#; int }; int }   *)
  (****************************************)
  let r = { a118 = #{ a24 = #0l; b24 = 1 }; b118 = 2 } in
  mark_test_run 102;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 102 failed";

  (*******************************************)
  (*   t119 = { #{ int32#; int }; int32# }   *)
  (*******************************************)
  let r = { a119 = #{ a24 = #0l; b24 = 1 }; b119 = #2l } in
  mark_test_run 103;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 103 failed";

  (**************************************)
  (*   t120 = { #{ int32#; int32# } }   *)
  (**************************************)
  let r = { a120 = #{ a26 = #0l; b26 = #1l } } in
  mark_test_run 104;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 104 failed";

  (*******************************************)
  (*   t121 = { #{ int32#; int32# }; int }   *)
  (*******************************************)
  let r = { a121 = #{ a26 = #0l; b26 = #1l }; b121 = 2 } in
  mark_test_run 105;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 105 failed";

  (**********************************************)
  (*   t122 = { #{ int32#; int32# }; int32# }   *)
  (**********************************************)
  let r = { a122 = #{ a26 = #0l; b26 = #1l }; b122 = #2l } in
  mark_test_run 106;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 106 failed";

  (*****************************)
  (*   t123 = { #{ float } }   *)
  (*****************************)
  let r = { a123 = #{ a28 = 0. } } in
  mark_test_run 107;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 107 failed";

  (**********************************)
  (*   t124 = { #{ float }; int }   *)
  (**********************************)
  let r = { a124 = #{ a28 = 0. }; b124 = 1 } in
  mark_test_run 108;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 108 failed";

  (************************************)
  (*   t125 = { #{ float }; float }   *)
  (************************************)
  let r = { a125 = #{ a28 = 0. }; b125 = 1. } in
  mark_test_run 109;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 109 failed";

  (**********************************)
  (*   t126 = { #{ float; int } }   *)
  (**********************************)
  let r = { a126 = #{ a30 = 0.; b30 = 1 } } in
  mark_test_run 110;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 110 failed";

  (***************************************)
  (*   t127 = { #{ float; int }; int }   *)
  (***************************************)
  let r = { a127 = #{ a30 = 0.; b30 = 1 }; b127 = 2 } in
  mark_test_run 111;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 111 failed";

  (*****************************************)
  (*   t128 = { #{ float; int }; float }   *)
  (*****************************************)
  let r = { a128 = #{ a30 = 0.; b30 = 1 }; b128 = 2. } in
  mark_test_run 112;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 112 failed";

  (************************************)
  (*   t129 = { #{ float; float } }   *)
  (************************************)
  let r = { a129 = #{ a32 = 0.; b32 = 1. } } in
  mark_test_run 113;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 113 failed";

  (*****************************************)
  (*   t130 = { #{ float; float }; int }   *)
  (*****************************************)
  let r = { a130 = #{ a32 = 0.; b32 = 1. }; b130 = 2 } in
  mark_test_run 114;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 114 failed";

  (*******************************************)
  (*   t131 = { #{ float; float }; float }   *)
  (*******************************************)
  let r = { a131 = #{ a32 = 0.; b32 = 1. }; b131 = 2. } in
  mark_test_run 115;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 115 failed";

  (*************************************************************)
  (*   t134 = { #{ float32#; int64# }; #{ string; int64# } }   *)
  (*************************************************************)
  let r = { a134 = #{ a132 = #0.s; b132 = #1L }; b134 = #{ a133 = "2"; b133 = #3L } } in
  mark_test_run 116;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 116 failed";

  ()
;;

for i = 1 to 116 do
  if not (Int_set.mem i !tests_run) then failwithf "test %d not run" i
done;;
let () = Printf.printf "All tests passed.%!\n";;
