(* TEST
 include stdlib_stable;
 include stdlib_beta;
 include stdlib_upstream_compatible;
 flags = "-extension layouts_alpha";
 bytecode;
*)
(** This is code generated by [test_generation.ml]. *)

[@@@warning "-23"]
external globalize : local_ 'a -> 'a = "%obj_dup";;
let int64x2_u_equal (_ : int64x2#) (_ : int64x2#) = failwith "should not be called from bytecode"

open Stdlib_upstream_compatible
open Stdlib_stable
open Stdlib_beta

external[@layout_poly] makearray_dynamic_local :
  ('a : any_non_null) . int -> 'a -> 'a array @ local =
  "%makearray_dynamic"

external[@layout_poly] makearray_dynamic :
  ('a : any_non_null) . int -> 'a -> 'a array =
  "%makearray_dynamic"

external[@layout_poly] get :
  ('a : any_non_null) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a =
  "%array_safe_get"

external[@layout_poly] set :
  ('a : any_non_null) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a -> unit =
  "%array_safe_set"

module Idx_repr : sig
  type t
  val of_idx_imm : 'a ('b : any). ('a, 'b) idx_imm -> t
  val of_idx_mut : 'a ('b : any). ('a, 'b) idx_mut -> t
  val equal : t -> t -> bool
  val debug_string : t -> string
end = struct
  (* See [jane/doc/extensions/_02-unboxed-types/block-indices.md] *)
  type t =
    | Bytecode of { path : int list }
    | Native of { offset : int; gap : int }

  external magic_box_bits64 : ('a : bits64) 'b . 'a -> 'b =
    "%box_int64"
  external lessthan_if_bytecode : int -> int -> bool =
    "caml_lessthan" "caml_greaterthan"

  let of_idx idx =
    let is_bytecode = lessthan_if_bytecode 0 1 in
    if is_bytecode then
      let r = Obj.repr (magic_box_bits64 idx) in
      let nth_idx n : int = Obj.magic (Obj.field r n) in
      let path = List.init (Obj.size r) nth_idx in
      Bytecode { path }
    else
      let i : int64 = magic_box_bits64 idx in
      let offset =
        Int64.(logand (sub (shift_left one 48) one)) i
        |> Int64.to_int
      in
      let gap =
        Int64.shift_right i 48
        |> Int64.to_int
      in
      Native { offset; gap }

  let of_idx_imm = of_idx
  let of_idx_mut = of_idx

  let equal t1 t2 =
    match t1, t2 with
    | Bytecode { path = path1 }, Bytecode { path = path2 } ->
      List.equal Int.equal path1 path2
    | Native { gap = gap1; offset = offset1 },
      Native { gap = gap2; offset = offset2 } ->
      Int.equal gap1 gap2 && Int.equal offset1 offset2
    | Bytecode _, Native _ | Native _, Bytecode _ -> assert false

  let debug_string = function
    | Bytecode { path } ->
      Printf.sprintf "{ %s }"
        (String.concat "; " (List.map Int.to_string path))
    | Native { offset; gap } ->
      Printf.sprintf "offset %d; gap %d" offset gap
end

let failwithf fmt = Printf.ksprintf failwith fmt

(* Redefine iter to infer locality *)
let rec iter ~f = function
    [] -> ()
  | a::l -> f a; iter ~f l

module Int_set = Set.Make(Int)

let tests_run = ref Int_set.empty

let mark_test_run test_id =
  tests_run := Int_set.add test_id !tests_run

(* Various interesting values *)

let sizes = [ 0; 1; 2; 30 ]

let indices_in_deepening_tests = [0; 100_000]

type packed = P : 'a -> packed
let ref_to_force_heap_allocation : packed ref = ref (P 0)

type t0 = { mutable a0 : int } (* { int } *)
type t1 = { mutable a1 : int; mutable b1 : int } (* { int; int } *)
type t2 = { mutable a2 : int; mutable b2 : int; mutable c2 : int } (* { int; int; int } *)
type t3 = { mutable a3 : int; mutable b3 : int; mutable c3 : int32# } (* { int; int; int32# } *)
type t4 = { mutable a4 : int; mutable b4 : int; mutable c4 : float } (* { int; int; float } *)
type t5 = { mutable a5 : int; mutable b5 : int64 } (* { int; int64 } *)
type t6 = { mutable a6 : int; mutable b6 : int64# } (* { int; int64# } *)
type t7 = { mutable a7 : int; mutable b7 : int32# } (* { int; int32# } *)
type t8 = { mutable a8 : int; mutable b8 : int32#; mutable c8 : int } (* { int; int32#; int } *)
type t9 = { mutable a9 : int; mutable b9 : int32#; mutable c9 : int32# } (* { int; int32#; int32# } *)
type t10 = { mutable a10 : int; mutable b10 : nativeint# } (* { int; nativeint# } *)
type t11 = { mutable a11 : int; mutable b11 : unit_u } (* { int; unit_u } *)
type t12 = { mutable a12 : int; mutable b12 : float } (* { int; float } *)
type t13 = { mutable a13 : int; mutable b13 : float; mutable c13 : int } (* { int; float; int } *)
type t14 = { mutable a14 : int; mutable b14 : float; mutable c14 : float } (* { int; float; float } *)
type t15 = #{ a15 : int } (* #{ int } *)
type t16 = { mutable a16 : int; mutable b16 : t15 } (* { int; #{ int } } *)
type t17 = #{ a17 : int; b17 : int } (* #{ int; int } *)
type t18 = { mutable a18 : int; mutable b18 : t17 } (* { int; #{ int; int } } *)
type t19 = #{ a19 : int; b19 : int32# } (* #{ int; int32# } *)
type t20 = { mutable a20 : int; mutable b20 : t19 } (* { int; #{ int; int32# } } *)
type t21 = #{ a21 : int; b21 : float } (* #{ int; float } *)
type t22 = { mutable a22 : int; mutable b22 : t21 } (* { int; #{ int; float } } *)
type t23 = #{ a23 : int32# } (* #{ int32# } *)
type t24 = { mutable a24 : int; mutable b24 : t23 } (* { int; #{ int32# } } *)
type t25 = #{ a25 : int32#; b25 : int } (* #{ int32#; int } *)
type t26 = { mutable a26 : int; mutable b26 : t25 } (* { int; #{ int32#; int } } *)
type t27 = #{ a27 : int32#; b27 : int32# } (* #{ int32#; int32# } *)
type t28 = { mutable a28 : int; mutable b28 : t27 } (* { int; #{ int32#; int32# } } *)
type t29 = #{ a29 : float } (* #{ float } *)
type t30 = { mutable a30 : int; mutable b30 : t29 } (* { int; #{ float } } *)
type t31 = #{ a31 : float; b31 : int } (* #{ float; int } *)
type t32 = { mutable a32 : int; mutable b32 : t31 } (* { int; #{ float; int } } *)
type t33 = #{ a33 : float; b33 : float } (* #{ float; float } *)
type t34 = { mutable a34 : int; mutable b34 : t33 } (* { int; #{ float; float } } *)
type t35 = { mutable a35 : int64 } (* { int64 } *)
type t36 = { mutable a36 : int64; mutable b36 : int } (* { int64; int } *)
type t37 = { mutable a37 : int64; mutable b37 : int64 } (* { int64; int64 } *)
type t38 = { mutable a38 : int64; mutable b38 : int64# } (* { int64; int64# } *)
type t39 = { mutable a39 : int64; mutable b39 : int32# } (* { int64; int32# } *)
type t40 = { mutable a40 : int64; mutable b40 : nativeint# } (* { int64; nativeint# } *)
type t41 = { mutable a41 : int64; mutable b41 : unit_u } (* { int64; unit_u } *)
type t42 = { mutable a42 : int64; mutable b42 : float } (* { int64; float } *)
type t43 = { mutable a43 : int64# } (* { int64# } *)
type t44 = { mutable a44 : int64#; mutable b44 : int } (* { int64#; int } *)
type t45 = { mutable a45 : int64#; mutable b45 : int64 } (* { int64#; int64 } *)
type t46 = { mutable a46 : int64#; mutable b46 : int64# } (* { int64#; int64# } *)
type t47 = { mutable a47 : int64#; mutable b47 : int32# } (* { int64#; int32# } *)
type t48 = { mutable a48 : int64#; mutable b48 : nativeint# } (* { int64#; nativeint# } *)
type t49 = { mutable a49 : int64#; mutable b49 : unit_u } (* { int64#; unit_u } *)
type t50 = { mutable a50 : int64#; mutable b50 : float } (* { int64#; float } *)
type t51 = { mutable a51 : int32# } (* { int32# } *)
type t52 = { mutable a52 : int32#; mutable b52 : int } (* { int32#; int } *)
type t53 = { mutable a53 : int32#; mutable b53 : int; mutable c53 : int } (* { int32#; int; int } *)
type t54 = { mutable a54 : int32#; mutable b54 : int; mutable c54 : int32# } (* { int32#; int; int32# } *)
type t55 = { mutable a55 : int32#; mutable b55 : int64 } (* { int32#; int64 } *)
type t56 = { mutable a56 : int32#; mutable b56 : int64# } (* { int32#; int64# } *)
type t57 = { mutable a57 : int32#; mutable b57 : int32# } (* { int32#; int32# } *)
type t58 = { mutable a58 : int32#; mutable b58 : int32#; mutable c58 : int } (* { int32#; int32#; int } *)
type t59 = { mutable a59 : int32#; mutable b59 : int32#; mutable c59 : int32# } (* { int32#; int32#; int32# } *)
type t60 = { mutable a60 : int32#; mutable b60 : nativeint# } (* { int32#; nativeint# } *)
type t61 = { mutable a61 : int32#; mutable b61 : unit_u } (* { int32#; unit_u } *)
type t62 = { mutable a62 : int32#; mutable b62 : float } (* { int32#; float } *)
type t63 = { mutable a63 : int32#; mutable b63 : t15 } (* { int32#; #{ int } } *)
type t64 = { mutable a64 : int32#; mutable b64 : t17 } (* { int32#; #{ int; int } } *)
type t65 = { mutable a65 : int32#; mutable b65 : t19 } (* { int32#; #{ int; int32# } } *)
type t66 = { mutable a66 : int32#; mutable b66 : t23 } (* { int32#; #{ int32# } } *)
type t67 = { mutable a67 : int32#; mutable b67 : t25 } (* { int32#; #{ int32#; int } } *)
type t68 = { mutable a68 : int32#; mutable b68 : t27 } (* { int32#; #{ int32#; int32# } } *)
type t69 = { mutable a69 : nativeint# } (* { nativeint# } *)
type t70 = { mutable a70 : nativeint#; mutable b70 : int } (* { nativeint#; int } *)
type t71 = { mutable a71 : nativeint#; mutable b71 : int64 } (* { nativeint#; int64 } *)
type t72 = { mutable a72 : nativeint#; mutable b72 : int64# } (* { nativeint#; int64# } *)
type t73 = { mutable a73 : nativeint#; mutable b73 : int32# } (* { nativeint#; int32# } *)
type t74 = { mutable a74 : nativeint#; mutable b74 : nativeint# } (* { nativeint#; nativeint# } *)
type t75 = { mutable a75 : nativeint#; mutable b75 : unit_u } (* { nativeint#; unit_u } *)
type t76 = { mutable a76 : nativeint#; mutable b76 : float } (* { nativeint#; float } *)
type t77 = { mutable a77 : unit_u } (* { unit_u } *)
type t78 = { mutable a78 : unit_u; mutable b78 : int } (* { unit_u; int } *)
type t79 = { mutable a79 : unit_u; mutable b79 : int64 } (* { unit_u; int64 } *)
type t80 = { mutable a80 : unit_u; mutable b80 : int64# } (* { unit_u; int64# } *)
type t81 = { mutable a81 : unit_u; mutable b81 : int32# } (* { unit_u; int32# } *)
type t82 = { mutable a82 : unit_u; mutable b82 : nativeint# } (* { unit_u; nativeint# } *)
type t83 = { mutable a83 : unit_u; mutable b83 : unit_u } (* { unit_u; unit_u } *)
type t84 = { mutable a84 : unit_u; mutable b84 : float } (* { unit_u; float } *)
type t85 = { mutable a85 : float } (* { float } *)
type t86 = { mutable a86 : float; mutable b86 : int } (* { float; int } *)
type t87 = { mutable a87 : float; mutable b87 : int; mutable c87 : int } (* { float; int; int } *)
type t88 = { mutable a88 : float; mutable b88 : int; mutable c88 : float } (* { float; int; float } *)
type t89 = { mutable a89 : float; mutable b89 : int64 } (* { float; int64 } *)
type t90 = { mutable a90 : float; mutable b90 : int64# } (* { float; int64# } *)
type t91 = { mutable a91 : float; mutable b91 : int32# } (* { float; int32# } *)
type t92 = { mutable a92 : float; mutable b92 : nativeint# } (* { float; nativeint# } *)
type t93 = { mutable a93 : float; mutable b93 : unit_u } (* { float; unit_u } *)
type t94 = { mutable a94 : float; mutable b94 : float } (* { float; float } *)
type t95 = { mutable a95 : float; mutable b95 : float; mutable c95 : int } (* { float; float; int } *)
type t96 = { mutable a96 : float; mutable b96 : float; mutable c96 : float } (* { float; float; float } *)
type t97 = { mutable a97 : float; mutable b97 : float; mutable c97 : float# } (* { float; float; float# } *)
type t98 = { mutable a98 : float; mutable b98 : float# } (* { float; float# } *)
type t99 = { mutable a99 : float; mutable b99 : float#; mutable c99 : float } (* { float; float#; float } *)
type t100 = { mutable a100 : float; mutable b100 : float#; mutable c100 : float# } (* { float; float#; float# } *)
type t101 = { mutable a101 : float; mutable b101 : t15 } (* { float; #{ int } } *)
type t102 = { mutable a102 : float; mutable b102 : t17 } (* { float; #{ int; int } } *)
type t103 = { mutable a103 : float; mutable b103 : t21 } (* { float; #{ int; float } } *)
type t104 = { mutable a104 : float; mutable b104 : t29 } (* { float; #{ float } } *)
type t105 = { mutable a105 : float; mutable b105 : t31 } (* { float; #{ float; int } } *)
type t106 = { mutable a106 : float; mutable b106 : t33 } (* { float; #{ float; float } } *)
type t107 = #{ a107 : float; b107 : float# } (* #{ float; float# } *)
type t108 = { mutable a108 : float; mutable b108 : t107 } (* { float; #{ float; float# } } *)
type t109 = #{ a109 : float# } (* #{ float# } *)
type t110 = { mutable a110 : float; mutable b110 : t109 } (* { float; #{ float# } } *)
type t111 = #{ a111 : float#; b111 : float } (* #{ float#; float } *)
type t112 = { mutable a112 : float; mutable b112 : t111 } (* { float; #{ float#; float } } *)
type t113 = #{ a113 : float#; b113 : float# } (* #{ float#; float# } *)
type t114 = { mutable a114 : float; mutable b114 : t113 } (* { float; #{ float#; float# } } *)
type t115 = { mutable a115 : float# } (* { float# } *)
type t116 = { mutable a116 : float#; mutable b116 : float } (* { float#; float } *)
type t117 = { mutable a117 : float#; mutable b117 : float; mutable c117 : float } (* { float#; float; float } *)
type t118 = { mutable a118 : float#; mutable b118 : float; mutable c118 : float# } (* { float#; float; float# } *)
type t119 = { mutable a119 : float#; mutable b119 : float# } (* { float#; float# } *)
type t120 = { mutable a120 : float#; mutable b120 : float#; mutable c120 : float } (* { float#; float#; float } *)
type t121 = { mutable a121 : float#; mutable b121 : float#; mutable c121 : float# } (* { float#; float#; float# } *)
type t122 = { mutable a122 : float#; mutable b122 : t29 } (* { float#; #{ float } } *)
type t123 = { mutable a123 : float#; mutable b123 : t33 } (* { float#; #{ float; float } } *)
type t124 = { mutable a124 : float#; mutable b124 : t107 } (* { float#; #{ float; float# } } *)
type t125 = { mutable a125 : float#; mutable b125 : t109 } (* { float#; #{ float# } } *)
type t126 = { mutable a126 : float#; mutable b126 : t111 } (* { float#; #{ float#; float } } *)
type t127 = { mutable a127 : float#; mutable b127 : t113 } (* { float#; #{ float#; float# } } *)
type t128 = { mutable a128 : t15 } (* { #{ int } } *)
type t129 = { mutable a129 : t15; mutable b129 : int } (* { #{ int }; int } *)
type t130 = { mutable a130 : t15; mutable b130 : int32# } (* { #{ int }; int32# } *)
type t131 = { mutable a131 : t15; mutable b131 : float } (* { #{ int }; float } *)
type t132 = { mutable a132 : t17 } (* { #{ int; int } } *)
type t133 = { mutable a133 : t17; mutable b133 : int } (* { #{ int; int }; int } *)
type t134 = { mutable a134 : t17; mutable b134 : int32# } (* { #{ int; int }; int32# } *)
type t135 = { mutable a135 : t17; mutable b135 : float } (* { #{ int; int }; float } *)
type t136 = { mutable a136 : t19 } (* { #{ int; int32# } } *)
type t137 = { mutable a137 : t19; mutable b137 : int } (* { #{ int; int32# }; int } *)
type t138 = { mutable a138 : t19; mutable b138 : int32# } (* { #{ int; int32# }; int32# } *)
type t139 = { mutable a139 : t21 } (* { #{ int; float } } *)
type t140 = { mutable a140 : t21; mutable b140 : int } (* { #{ int; float }; int } *)
type t141 = { mutable a141 : t21; mutable b141 : float } (* { #{ int; float }; float } *)
type t142 = #{ a142 : int64; b142 : int64# } (* #{ int64; int64# } *)
type t143 = #{ a143 : int64#; b143 : float# } (* #{ int64#; float# } *)
type t144 = { mutable a144 : t142; mutable b144 : t143 } (* { #{ int64; int64# }; #{ int64#; float# } } *)
type t145 = #{ a145 : int64; b145 : string } (* #{ int64; string } *)
type t146 = #{ a146 : int64#; b146 : string } (* #{ int64#; string } *)
type t147 = { mutable a147 : t145; mutable b147 : t146 } (* { #{ int64; string }; #{ int64#; string } } *)
type t148 = #{ a148 : int64#; b148 : int64 } (* #{ int64#; int64 } *)
type t149 = #{ a149 : int64; b149 : int64 } (* #{ int64; int64 } *)
type t150 = { mutable a150 : t148; mutable b150 : t149 } (* { #{ int64#; int64 }; #{ int64; int64 } } *)
type t151 = #{ a151 : float32#; b151 : float } (* #{ float32#; float } *)
type t152 = { mutable a152 : t148; mutable b152 : t151 } (* { #{ int64#; int64 }; #{ float32#; float } } *)
type t153 = { mutable a153 : t23 } (* { #{ int32# } } *)
type t154 = { mutable a154 : t23; mutable b154 : int } (* { #{ int32# }; int } *)
type t155 = { mutable a155 : t23; mutable b155 : int32# } (* { #{ int32# }; int32# } *)
type t156 = { mutable a156 : t25 } (* { #{ int32#; int } } *)
type t157 = { mutable a157 : t25; mutable b157 : int } (* { #{ int32#; int }; int } *)
type t158 = { mutable a158 : t25; mutable b158 : int32# } (* { #{ int32#; int }; int32# } *)
type t159 = { mutable a159 : t27 } (* { #{ int32#; int32# } } *)
type t160 = { mutable a160 : t27; mutable b160 : int } (* { #{ int32#; int32# }; int } *)
type t161 = { mutable a161 : t27; mutable b161 : int32# } (* { #{ int32#; int32# }; int32# } *)
type t162 = { mutable a162 : t29 } (* { #{ float } } *)
type t163 = { mutable a163 : t29; mutable b163 : int } (* { #{ float }; int } *)
type t164 = { mutable a164 : t29; mutable b164 : float } (* { #{ float }; float } *)
type t165 = { mutable a165 : t29; mutable b165 : float# } (* { #{ float }; float# } *)
type t166 = { mutable a166 : t31 } (* { #{ float; int } } *)
type t167 = { mutable a167 : t31; mutable b167 : int } (* { #{ float; int }; int } *)
type t168 = { mutable a168 : t31; mutable b168 : float } (* { #{ float; int }; float } *)
type t169 = { mutable a169 : t33 } (* { #{ float; float } } *)
type t170 = { mutable a170 : t33; mutable b170 : int } (* { #{ float; float }; int } *)
type t171 = { mutable a171 : t33; mutable b171 : float } (* { #{ float; float }; float } *)
type t172 = { mutable a172 : t33; mutable b172 : float# } (* { #{ float; float }; float# } *)
type t173 = { mutable a173 : t107 } (* { #{ float; float# } } *)
type t174 = { mutable a174 : t107; mutable b174 : float } (* { #{ float; float# }; float } *)
type t175 = { mutable a175 : t107; mutable b175 : float# } (* { #{ float; float# }; float# } *)
type t176 = { mutable a176 : t109 } (* { #{ float# } } *)
type t177 = { mutable a177 : t109; mutable b177 : float } (* { #{ float# }; float } *)
type t178 = { mutable a178 : t109; mutable b178 : float# } (* { #{ float# }; float# } *)
type t179 = { mutable a179 : t111 } (* { #{ float#; float } } *)
type t180 = { mutable a180 : t111; mutable b180 : float } (* { #{ float#; float }; float } *)
type t181 = { mutable a181 : t111; mutable b181 : float# } (* { #{ float#; float }; float# } *)
type t182 = { mutable a182 : t113 } (* { #{ float#; float# } } *)
type t183 = { mutable a183 : t113; mutable b183 : float } (* { #{ float#; float# }; float } *)
type t184 = { mutable a184 : t113; mutable b184 : float# } (* { #{ float#; float# }; float# } *)
type t185 = #{ a185 : float32#; b185 : int64# } (* #{ float32#; int64# } *)
type t186 = #{ a186 : string; b186 : int64# } (* #{ string; int64# } *)
type t187 = { mutable a187 : t185; mutable b187 : t186 } (* { #{ float32#; int64# }; #{ string; int64# } } *)

let () =
  (********************)
  (*   t0 = { int }   *)
  (********************)
  let r = { a0 = 0 } in
  mark_test_run 1;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 1 failed";

  (*************************)
  (*   t1 = { int; int }   *)
  (*************************)
  let r = { a1 = 0; b1 = 1 } in
  mark_test_run 2;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 2 failed";

  (******************************)
  (*   t2 = { int; int; int }   *)
  (******************************)
  let r = { a2 = 0; b2 = 1; c2 = 2 } in
  mark_test_run 3;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 3 failed";

  (*********************************)
  (*   t3 = { int; int; int32# }   *)
  (*********************************)
  let r = { a3 = 0; b3 = 1; c3 = #2l } in
  mark_test_run 4;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 4 failed";

  (********************************)
  (*   t4 = { int; int; float }   *)
  (********************************)
  let r = { a4 = 0; b4 = 1; c4 = 2. } in
  mark_test_run 5;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 5 failed";

  (***************************)
  (*   t5 = { int; int64 }   *)
  (***************************)
  let r = { a5 = 0; b5 = 1L } in
  mark_test_run 6;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 6 failed";

  (****************************)
  (*   t6 = { int; int64# }   *)
  (****************************)
  let r = { a6 = 0; b6 = #1L } in
  mark_test_run 7;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 7 failed";

  (****************************)
  (*   t7 = { int; int32# }   *)
  (****************************)
  let r = { a7 = 0; b7 = #1l } in
  mark_test_run 8;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 8 failed";

  (*********************************)
  (*   t8 = { int; int32#; int }   *)
  (*********************************)
  let r = { a8 = 0; b8 = #1l; c8 = 2 } in
  mark_test_run 9;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 9 failed";

  (************************************)
  (*   t9 = { int; int32#; int32# }   *)
  (************************************)
  let r = { a9 = 0; b9 = #1l; c9 = #2l } in
  mark_test_run 10;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 10 failed";

  (*********************************)
  (*   t10 = { int; nativeint# }   *)
  (*********************************)
  let r = { a10 = 0; b10 = #1n } in
  mark_test_run 11;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 11 failed";

  (*****************************)
  (*   t11 = { int; unit_u }   *)
  (*****************************)
  let r = { a11 = 0; b11 = (unbox_unit ()) } in
  mark_test_run 12;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 12 failed";

  (****************************)
  (*   t12 = { int; float }   *)
  (****************************)
  let r = { a12 = 0; b12 = 1. } in
  mark_test_run 13;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 13 failed";

  (*********************************)
  (*   t13 = { int; float; int }   *)
  (*********************************)
  let r = { a13 = 0; b13 = 1.; c13 = 2 } in
  mark_test_run 14;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 14 failed";

  (***********************************)
  (*   t14 = { int; float; float }   *)
  (***********************************)
  let r = { a14 = 0; b14 = 1.; c14 = 2. } in
  mark_test_run 15;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 15 failed";

  (*******************************)
  (*   t16 = { int; #{ int } }   *)
  (*******************************)
  let r = { a16 = 0; b16 = #{ a15 = 1 } } in
  mark_test_run 16;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 16 failed";

  (************************************)
  (*   t18 = { int; #{ int; int } }   *)
  (************************************)
  let r = { a18 = 0; b18 = #{ a17 = 1; b17 = 2 } } in
  mark_test_run 17;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 17 failed";

  (***************************************)
  (*   t20 = { int; #{ int; int32# } }   *)
  (***************************************)
  let r = { a20 = 0; b20 = #{ a19 = 1; b19 = #2l } } in
  mark_test_run 18;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 18 failed";

  (**************************************)
  (*   t22 = { int; #{ int; float } }   *)
  (**************************************)
  let r = { a22 = 0; b22 = #{ a21 = 1; b21 = 2. } } in
  mark_test_run 19;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 19 failed";

  (**********************************)
  (*   t24 = { int; #{ int32# } }   *)
  (**********************************)
  let r = { a24 = 0; b24 = #{ a23 = #1l } } in
  mark_test_run 20;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 20 failed";

  (***************************************)
  (*   t26 = { int; #{ int32#; int } }   *)
  (***************************************)
  let r = { a26 = 0; b26 = #{ a25 = #1l; b25 = 2 } } in
  mark_test_run 21;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 21 failed";

  (******************************************)
  (*   t28 = { int; #{ int32#; int32# } }   *)
  (******************************************)
  let r = { a28 = 0; b28 = #{ a27 = #1l; b27 = #2l } } in
  mark_test_run 22;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 22 failed";

  (*********************************)
  (*   t30 = { int; #{ float } }   *)
  (*********************************)
  let r = { a30 = 0; b30 = #{ a29 = 1. } } in
  mark_test_run 23;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 23 failed";

  (**************************************)
  (*   t32 = { int; #{ float; int } }   *)
  (**************************************)
  let r = { a32 = 0; b32 = #{ a31 = 1.; b31 = 2 } } in
  mark_test_run 24;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 24 failed";

  (****************************************)
  (*   t34 = { int; #{ float; float } }   *)
  (****************************************)
  let r = { a34 = 0; b34 = #{ a33 = 1.; b33 = 2. } } in
  mark_test_run 25;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 25 failed";

  (***********************)
  (*   t35 = { int64 }   *)
  (***********************)
  let r = { a35 = 0L } in
  mark_test_run 26;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 26 failed";

  (****************************)
  (*   t36 = { int64; int }   *)
  (****************************)
  let r = { a36 = 0L; b36 = 1 } in
  mark_test_run 27;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 27 failed";

  (******************************)
  (*   t37 = { int64; int64 }   *)
  (******************************)
  let r = { a37 = 0L; b37 = 1L } in
  mark_test_run 28;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 28 failed";

  (*******************************)
  (*   t38 = { int64; int64# }   *)
  (*******************************)
  let r = { a38 = 0L; b38 = #1L } in
  mark_test_run 29;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 29 failed";

  (*******************************)
  (*   t39 = { int64; int32# }   *)
  (*******************************)
  let r = { a39 = 0L; b39 = #1l } in
  mark_test_run 30;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 30 failed";

  (***********************************)
  (*   t40 = { int64; nativeint# }   *)
  (***********************************)
  let r = { a40 = 0L; b40 = #1n } in
  mark_test_run 31;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 31 failed";

  (*******************************)
  (*   t41 = { int64; unit_u }   *)
  (*******************************)
  let r = { a41 = 0L; b41 = (unbox_unit ()) } in
  mark_test_run 32;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 32 failed";

  (******************************)
  (*   t42 = { int64; float }   *)
  (******************************)
  let r = { a42 = 0L; b42 = 1. } in
  mark_test_run 33;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 33 failed";

  (************************)
  (*   t43 = { int64# }   *)
  (************************)
  let r = { a43 = #0L } in
  mark_test_run 34;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 34 failed";

  (*****************************)
  (*   t44 = { int64#; int }   *)
  (*****************************)
  let r = { a44 = #0L; b44 = 1 } in
  mark_test_run 35;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 35 failed";

  (*******************************)
  (*   t45 = { int64#; int64 }   *)
  (*******************************)
  let r = { a45 = #0L; b45 = 1L } in
  mark_test_run 36;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 36 failed";

  (********************************)
  (*   t46 = { int64#; int64# }   *)
  (********************************)
  let r = { a46 = #0L; b46 = #1L } in
  mark_test_run 37;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 37 failed";

  (********************************)
  (*   t47 = { int64#; int32# }   *)
  (********************************)
  let r = { a47 = #0L; b47 = #1l } in
  mark_test_run 38;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 38 failed";

  (************************************)
  (*   t48 = { int64#; nativeint# }   *)
  (************************************)
  let r = { a48 = #0L; b48 = #1n } in
  mark_test_run 39;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 39 failed";

  (********************************)
  (*   t49 = { int64#; unit_u }   *)
  (********************************)
  let r = { a49 = #0L; b49 = (unbox_unit ()) } in
  mark_test_run 40;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 40 failed";

  (*******************************)
  (*   t50 = { int64#; float }   *)
  (*******************************)
  let r = { a50 = #0L; b50 = 1. } in
  mark_test_run 41;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 41 failed";

  (************************)
  (*   t51 = { int32# }   *)
  (************************)
  let r = { a51 = #0l } in
  mark_test_run 42;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 42 failed";

  (*****************************)
  (*   t52 = { int32#; int }   *)
  (*****************************)
  let r = { a52 = #0l; b52 = 1 } in
  mark_test_run 43;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 43 failed";

  (**********************************)
  (*   t53 = { int32#; int; int }   *)
  (**********************************)
  let r = { a53 = #0l; b53 = 1; c53 = 2 } in
  mark_test_run 44;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 44 failed";

  (*************************************)
  (*   t54 = { int32#; int; int32# }   *)
  (*************************************)
  let r = { a54 = #0l; b54 = 1; c54 = #2l } in
  mark_test_run 45;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 45 failed";

  (*******************************)
  (*   t55 = { int32#; int64 }   *)
  (*******************************)
  let r = { a55 = #0l; b55 = 1L } in
  mark_test_run 46;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 46 failed";

  (********************************)
  (*   t56 = { int32#; int64# }   *)
  (********************************)
  let r = { a56 = #0l; b56 = #1L } in
  mark_test_run 47;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 47 failed";

  (********************************)
  (*   t57 = { int32#; int32# }   *)
  (********************************)
  let r = { a57 = #0l; b57 = #1l } in
  mark_test_run 48;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 48 failed";

  (*************************************)
  (*   t58 = { int32#; int32#; int }   *)
  (*************************************)
  let r = { a58 = #0l; b58 = #1l; c58 = 2 } in
  mark_test_run 49;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 49 failed";

  (****************************************)
  (*   t59 = { int32#; int32#; int32# }   *)
  (****************************************)
  let r = { a59 = #0l; b59 = #1l; c59 = #2l } in
  mark_test_run 50;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 50 failed";

  (************************************)
  (*   t60 = { int32#; nativeint# }   *)
  (************************************)
  let r = { a60 = #0l; b60 = #1n } in
  mark_test_run 51;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 51 failed";

  (********************************)
  (*   t61 = { int32#; unit_u }   *)
  (********************************)
  let r = { a61 = #0l; b61 = (unbox_unit ()) } in
  mark_test_run 52;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 52 failed";

  (*******************************)
  (*   t62 = { int32#; float }   *)
  (*******************************)
  let r = { a62 = #0l; b62 = 1. } in
  mark_test_run 53;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 53 failed";

  (**********************************)
  (*   t63 = { int32#; #{ int } }   *)
  (**********************************)
  let r = { a63 = #0l; b63 = #{ a15 = 1 } } in
  mark_test_run 54;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 54 failed";

  (***************************************)
  (*   t64 = { int32#; #{ int; int } }   *)
  (***************************************)
  let r = { a64 = #0l; b64 = #{ a17 = 1; b17 = 2 } } in
  mark_test_run 55;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 55 failed";

  (******************************************)
  (*   t65 = { int32#; #{ int; int32# } }   *)
  (******************************************)
  let r = { a65 = #0l; b65 = #{ a19 = 1; b19 = #2l } } in
  mark_test_run 56;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 56 failed";

  (*************************************)
  (*   t66 = { int32#; #{ int32# } }   *)
  (*************************************)
  let r = { a66 = #0l; b66 = #{ a23 = #1l } } in
  mark_test_run 57;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 57 failed";

  (******************************************)
  (*   t67 = { int32#; #{ int32#; int } }   *)
  (******************************************)
  let r = { a67 = #0l; b67 = #{ a25 = #1l; b25 = 2 } } in
  mark_test_run 58;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 58 failed";

  (*********************************************)
  (*   t68 = { int32#; #{ int32#; int32# } }   *)
  (*********************************************)
  let r = { a68 = #0l; b68 = #{ a27 = #1l; b27 = #2l } } in
  mark_test_run 59;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 59 failed";

  (****************************)
  (*   t69 = { nativeint# }   *)
  (****************************)
  let r = { a69 = #0n } in
  mark_test_run 60;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 60 failed";

  (*********************************)
  (*   t70 = { nativeint#; int }   *)
  (*********************************)
  let r = { a70 = #0n; b70 = 1 } in
  mark_test_run 61;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 61 failed";

  (***********************************)
  (*   t71 = { nativeint#; int64 }   *)
  (***********************************)
  let r = { a71 = #0n; b71 = 1L } in
  mark_test_run 62;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 62 failed";

  (************************************)
  (*   t72 = { nativeint#; int64# }   *)
  (************************************)
  let r = { a72 = #0n; b72 = #1L } in
  mark_test_run 63;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 63 failed";

  (************************************)
  (*   t73 = { nativeint#; int32# }   *)
  (************************************)
  let r = { a73 = #0n; b73 = #1l } in
  mark_test_run 64;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 64 failed";

  (****************************************)
  (*   t74 = { nativeint#; nativeint# }   *)
  (****************************************)
  let r = { a74 = #0n; b74 = #1n } in
  mark_test_run 65;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 65 failed";

  (************************************)
  (*   t75 = { nativeint#; unit_u }   *)
  (************************************)
  let r = { a75 = #0n; b75 = (unbox_unit ()) } in
  mark_test_run 66;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 66 failed";

  (***********************************)
  (*   t76 = { nativeint#; float }   *)
  (***********************************)
  let r = { a76 = #0n; b76 = 1. } in
  mark_test_run 67;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 67 failed";

  (************************)
  (*   t77 = { unit_u }   *)
  (************************)
  let r = { a77 = (unbox_unit ()) } in
  mark_test_run 68;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 68 failed";

  (*****************************)
  (*   t78 = { unit_u; int }   *)
  (*****************************)
  let r = { a78 = (unbox_unit ()); b78 = 0 } in
  mark_test_run 69;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 69 failed";

  (*******************************)
  (*   t79 = { unit_u; int64 }   *)
  (*******************************)
  let r = { a79 = (unbox_unit ()); b79 = 0L } in
  mark_test_run 70;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 70 failed";

  (********************************)
  (*   t80 = { unit_u; int64# }   *)
  (********************************)
  let r = { a80 = (unbox_unit ()); b80 = #0L } in
  mark_test_run 71;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 71 failed";

  (********************************)
  (*   t81 = { unit_u; int32# }   *)
  (********************************)
  let r = { a81 = (unbox_unit ()); b81 = #0l } in
  mark_test_run 72;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 72 failed";

  (************************************)
  (*   t82 = { unit_u; nativeint# }   *)
  (************************************)
  let r = { a82 = (unbox_unit ()); b82 = #0n } in
  mark_test_run 73;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 73 failed";

  (********************************)
  (*   t83 = { unit_u; unit_u }   *)
  (********************************)
  let r = { a83 = (unbox_unit ()); b83 = (unbox_unit ()) } in
  mark_test_run 74;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 74 failed";

  (*******************************)
  (*   t84 = { unit_u; float }   *)
  (*******************************)
  let r = { a84 = (unbox_unit ()); b84 = 0. } in
  mark_test_run 75;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 75 failed";

  (***********************)
  (*   t85 = { float }   *)
  (***********************)
  let r = { a85 = 0. } in
  mark_test_run 76;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 76 failed";

  (****************************)
  (*   t86 = { float; int }   *)
  (****************************)
  let r = { a86 = 0.; b86 = 1 } in
  mark_test_run 77;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 77 failed";

  (*********************************)
  (*   t87 = { float; int; int }   *)
  (*********************************)
  let r = { a87 = 0.; b87 = 1; c87 = 2 } in
  mark_test_run 78;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 78 failed";

  (***********************************)
  (*   t88 = { float; int; float }   *)
  (***********************************)
  let r = { a88 = 0.; b88 = 1; c88 = 2. } in
  mark_test_run 79;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 79 failed";

  (******************************)
  (*   t89 = { float; int64 }   *)
  (******************************)
  let r = { a89 = 0.; b89 = 1L } in
  mark_test_run 80;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 80 failed";

  (*******************************)
  (*   t90 = { float; int64# }   *)
  (*******************************)
  let r = { a90 = 0.; b90 = #1L } in
  mark_test_run 81;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 81 failed";

  (*******************************)
  (*   t91 = { float; int32# }   *)
  (*******************************)
  let r = { a91 = 0.; b91 = #1l } in
  mark_test_run 82;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 82 failed";

  (***********************************)
  (*   t92 = { float; nativeint# }   *)
  (***********************************)
  let r = { a92 = 0.; b92 = #1n } in
  mark_test_run 83;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 83 failed";

  (*******************************)
  (*   t93 = { float; unit_u }   *)
  (*******************************)
  let r = { a93 = 0.; b93 = (unbox_unit ()) } in
  mark_test_run 84;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 84 failed";

  (******************************)
  (*   t94 = { float; float }   *)
  (******************************)
  let r = { a94 = 0.; b94 = 1. } in
  mark_test_run 85;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 85 failed";

  (***********************************)
  (*   t95 = { float; float; int }   *)
  (***********************************)
  let r = { a95 = 0.; b95 = 1.; c95 = 2 } in
  mark_test_run 86;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 86 failed";

  (*************************************)
  (*   t96 = { float; float; float }   *)
  (*************************************)
  let r = { a96 = 0.; b96 = 1.; c96 = 2. } in
  mark_test_run 87;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 87 failed";

  (**************************************)
  (*   t97 = { float; float; float# }   *)
  (**************************************)
  let r = { a97 = 0.; b97 = 1.; c97 = #2. } in
  mark_test_run 88;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 88 failed";

  (*******************************)
  (*   t98 = { float; float# }   *)
  (*******************************)
  let r = { a98 = 0.; b98 = #1. } in
  mark_test_run 89;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 89 failed";

  (**************************************)
  (*   t99 = { float; float#; float }   *)
  (**************************************)
  let r = { a99 = 0.; b99 = #1.; c99 = 2. } in
  mark_test_run 90;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 90 failed";

  (****************************************)
  (*   t100 = { float; float#; float# }   *)
  (****************************************)
  let r = { a100 = 0.; b100 = #1.; c100 = #2. } in
  mark_test_run 91;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 91 failed";

  (**********************************)
  (*   t101 = { float; #{ int } }   *)
  (**********************************)
  let r = { a101 = 0.; b101 = #{ a15 = 1 } } in
  mark_test_run 92;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 92 failed";

  (***************************************)
  (*   t102 = { float; #{ int; int } }   *)
  (***************************************)
  let r = { a102 = 0.; b102 = #{ a17 = 1; b17 = 2 } } in
  mark_test_run 93;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 93 failed";

  (*****************************************)
  (*   t103 = { float; #{ int; float } }   *)
  (*****************************************)
  let r = { a103 = 0.; b103 = #{ a21 = 1; b21 = 2. } } in
  mark_test_run 94;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 94 failed";

  (************************************)
  (*   t104 = { float; #{ float } }   *)
  (************************************)
  let r = { a104 = 0.; b104 = #{ a29 = 1. } } in
  mark_test_run 95;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 95 failed";

  (*****************************************)
  (*   t105 = { float; #{ float; int } }   *)
  (*****************************************)
  let r = { a105 = 0.; b105 = #{ a31 = 1.; b31 = 2 } } in
  mark_test_run 96;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 96 failed";

  (*******************************************)
  (*   t106 = { float; #{ float; float } }   *)
  (*******************************************)
  let r = { a106 = 0.; b106 = #{ a33 = 1.; b33 = 2. } } in
  mark_test_run 97;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 97 failed";

  (********************************************)
  (*   t108 = { float; #{ float; float# } }   *)
  (********************************************)
  let r = { a108 = 0.; b108 = #{ a107 = 1.; b107 = #2. } } in
  mark_test_run 98;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 98 failed";

  (*************************************)
  (*   t110 = { float; #{ float# } }   *)
  (*************************************)
  let r = { a110 = 0.; b110 = #{ a109 = #1. } } in
  mark_test_run 99;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 99 failed";

  (********************************************)
  (*   t112 = { float; #{ float#; float } }   *)
  (********************************************)
  let r = { a112 = 0.; b112 = #{ a111 = #1.; b111 = 2. } } in
  mark_test_run 100;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 100 failed";

  (*********************************************)
  (*   t114 = { float; #{ float#; float# } }   *)
  (*********************************************)
  let r = { a114 = 0.; b114 = #{ a113 = #1.; b113 = #2. } } in
  mark_test_run 101;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 101 failed";

  (*************************)
  (*   t115 = { float# }   *)
  (*************************)
  let r = { a115 = #0. } in
  mark_test_run 102;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 102 failed";

  (********************************)
  (*   t116 = { float#; float }   *)
  (********************************)
  let r = { a116 = #0.; b116 = 1. } in
  mark_test_run 103;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 103 failed";

  (***************************************)
  (*   t117 = { float#; float; float }   *)
  (***************************************)
  let r = { a117 = #0.; b117 = 1.; c117 = 2. } in
  mark_test_run 104;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 104 failed";

  (****************************************)
  (*   t118 = { float#; float; float# }   *)
  (****************************************)
  let r = { a118 = #0.; b118 = 1.; c118 = #2. } in
  mark_test_run 105;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 105 failed";

  (*********************************)
  (*   t119 = { float#; float# }   *)
  (*********************************)
  let r = { a119 = #0.; b119 = #1. } in
  mark_test_run 106;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 106 failed";

  (****************************************)
  (*   t120 = { float#; float#; float }   *)
  (****************************************)
  let r = { a120 = #0.; b120 = #1.; c120 = 2. } in
  mark_test_run 107;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 107 failed";

  (*****************************************)
  (*   t121 = { float#; float#; float# }   *)
  (*****************************************)
  let r = { a121 = #0.; b121 = #1.; c121 = #2. } in
  mark_test_run 108;
  let test = Int.equal (Obj.size (Obj.repr r)) 3 in
  if not test then failwithf "test 108 failed";

  (*************************************)
  (*   t122 = { float#; #{ float } }   *)
  (*************************************)
  let r = { a122 = #0.; b122 = #{ a29 = 1. } } in
  mark_test_run 109;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 109 failed";

  (********************************************)
  (*   t123 = { float#; #{ float; float } }   *)
  (********************************************)
  let r = { a123 = #0.; b123 = #{ a33 = 1.; b33 = 2. } } in
  mark_test_run 110;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 110 failed";

  (*********************************************)
  (*   t124 = { float#; #{ float; float# } }   *)
  (*********************************************)
  let r = { a124 = #0.; b124 = #{ a107 = 1.; b107 = #2. } } in
  mark_test_run 111;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 111 failed";

  (**************************************)
  (*   t125 = { float#; #{ float# } }   *)
  (**************************************)
  let r = { a125 = #0.; b125 = #{ a109 = #1. } } in
  mark_test_run 112;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 112 failed";

  (*********************************************)
  (*   t126 = { float#; #{ float#; float } }   *)
  (*********************************************)
  let r = { a126 = #0.; b126 = #{ a111 = #1.; b111 = 2. } } in
  mark_test_run 113;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 113 failed";

  (**********************************************)
  (*   t127 = { float#; #{ float#; float# } }   *)
  (**********************************************)
  let r = { a127 = #0.; b127 = #{ a113 = #1.; b113 = #2. } } in
  mark_test_run 114;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 114 failed";

  (***************************)
  (*   t128 = { #{ int } }   *)
  (***************************)
  let r = { a128 = #{ a15 = 0 } } in
  mark_test_run 115;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 115 failed";

  (********************************)
  (*   t129 = { #{ int }; int }   *)
  (********************************)
  let r = { a129 = #{ a15 = 0 }; b129 = 1 } in
  mark_test_run 116;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 116 failed";

  (***********************************)
  (*   t130 = { #{ int }; int32# }   *)
  (***********************************)
  let r = { a130 = #{ a15 = 0 }; b130 = #1l } in
  mark_test_run 117;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 117 failed";

  (**********************************)
  (*   t131 = { #{ int }; float }   *)
  (**********************************)
  let r = { a131 = #{ a15 = 0 }; b131 = 1. } in
  mark_test_run 118;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 118 failed";

  (********************************)
  (*   t132 = { #{ int; int } }   *)
  (********************************)
  let r = { a132 = #{ a17 = 0; b17 = 1 } } in
  mark_test_run 119;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 119 failed";

  (*************************************)
  (*   t133 = { #{ int; int }; int }   *)
  (*************************************)
  let r = { a133 = #{ a17 = 0; b17 = 1 }; b133 = 2 } in
  mark_test_run 120;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 120 failed";

  (****************************************)
  (*   t134 = { #{ int; int }; int32# }   *)
  (****************************************)
  let r = { a134 = #{ a17 = 0; b17 = 1 }; b134 = #2l } in
  mark_test_run 121;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 121 failed";

  (***************************************)
  (*   t135 = { #{ int; int }; float }   *)
  (***************************************)
  let r = { a135 = #{ a17 = 0; b17 = 1 }; b135 = 2. } in
  mark_test_run 122;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 122 failed";

  (***********************************)
  (*   t136 = { #{ int; int32# } }   *)
  (***********************************)
  let r = { a136 = #{ a19 = 0; b19 = #1l } } in
  mark_test_run 123;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 123 failed";

  (****************************************)
  (*   t137 = { #{ int; int32# }; int }   *)
  (****************************************)
  let r = { a137 = #{ a19 = 0; b19 = #1l }; b137 = 2 } in
  mark_test_run 124;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 124 failed";

  (*******************************************)
  (*   t138 = { #{ int; int32# }; int32# }   *)
  (*******************************************)
  let r = { a138 = #{ a19 = 0; b19 = #1l }; b138 = #2l } in
  mark_test_run 125;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 125 failed";

  (**********************************)
  (*   t139 = { #{ int; float } }   *)
  (**********************************)
  let r = { a139 = #{ a21 = 0; b21 = 1. } } in
  mark_test_run 126;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 126 failed";

  (***************************************)
  (*   t140 = { #{ int; float }; int }   *)
  (***************************************)
  let r = { a140 = #{ a21 = 0; b21 = 1. }; b140 = 2 } in
  mark_test_run 127;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 127 failed";

  (*****************************************)
  (*   t141 = { #{ int; float }; float }   *)
  (*****************************************)
  let r = { a141 = #{ a21 = 0; b21 = 1. }; b141 = 2. } in
  mark_test_run 128;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 128 failed";

  (**********************************************************)
  (*   t144 = { #{ int64; int64# }; #{ int64#; float# } }   *)
  (**********************************************************)
  let r = { a144 = #{ a142 = 0L; b142 = #1L }; b144 = #{ a143 = #2L; b143 = #3. } } in
  mark_test_run 129;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 129 failed";

  (**********************************************************)
  (*   t147 = { #{ int64; string }; #{ int64#; string } }   *)
  (**********************************************************)
  let r = { a147 = #{ a145 = 0L; b145 = "1" }; b147 = #{ a146 = #2L; b146 = "3" } } in
  mark_test_run 130;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 130 failed";

  (********************************************************)
  (*   t150 = { #{ int64#; int64 }; #{ int64; int64 } }   *)
  (********************************************************)
  let r = { a150 = #{ a148 = #0L; b148 = 1L }; b150 = #{ a149 = 2L; b149 = 3L } } in
  mark_test_run 131;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 131 failed";

  (***********************************************************)
  (*   t152 = { #{ int64#; int64 }; #{ float32#; float } }   *)
  (***********************************************************)
  let r = { a152 = #{ a148 = #0L; b148 = 1L }; b152 = #{ a151 = #2.s; b151 = 3. } } in
  mark_test_run 132;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 132 failed";

  (******************************)
  (*   t153 = { #{ int32# } }   *)
  (******************************)
  let r = { a153 = #{ a23 = #0l } } in
  mark_test_run 133;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 133 failed";

  (***********************************)
  (*   t154 = { #{ int32# }; int }   *)
  (***********************************)
  let r = { a154 = #{ a23 = #0l }; b154 = 1 } in
  mark_test_run 134;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 134 failed";

  (**************************************)
  (*   t155 = { #{ int32# }; int32# }   *)
  (**************************************)
  let r = { a155 = #{ a23 = #0l }; b155 = #1l } in
  mark_test_run 135;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 135 failed";

  (***********************************)
  (*   t156 = { #{ int32#; int } }   *)
  (***********************************)
  let r = { a156 = #{ a25 = #0l; b25 = 1 } } in
  mark_test_run 136;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 136 failed";

  (****************************************)
  (*   t157 = { #{ int32#; int }; int }   *)
  (****************************************)
  let r = { a157 = #{ a25 = #0l; b25 = 1 }; b157 = 2 } in
  mark_test_run 137;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 137 failed";

  (*******************************************)
  (*   t158 = { #{ int32#; int }; int32# }   *)
  (*******************************************)
  let r = { a158 = #{ a25 = #0l; b25 = 1 }; b158 = #2l } in
  mark_test_run 138;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 138 failed";

  (**************************************)
  (*   t159 = { #{ int32#; int32# } }   *)
  (**************************************)
  let r = { a159 = #{ a27 = #0l; b27 = #1l } } in
  mark_test_run 139;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 139 failed";

  (*******************************************)
  (*   t160 = { #{ int32#; int32# }; int }   *)
  (*******************************************)
  let r = { a160 = #{ a27 = #0l; b27 = #1l }; b160 = 2 } in
  mark_test_run 140;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 140 failed";

  (**********************************************)
  (*   t161 = { #{ int32#; int32# }; int32# }   *)
  (**********************************************)
  let r = { a161 = #{ a27 = #0l; b27 = #1l }; b161 = #2l } in
  mark_test_run 141;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 141 failed";

  (*****************************)
  (*   t162 = { #{ float } }   *)
  (*****************************)
  let r = { a162 = #{ a29 = 0. } } in
  mark_test_run 142;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 142 failed";

  (**********************************)
  (*   t163 = { #{ float }; int }   *)
  (**********************************)
  let r = { a163 = #{ a29 = 0. }; b163 = 1 } in
  mark_test_run 143;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 143 failed";

  (************************************)
  (*   t164 = { #{ float }; float }   *)
  (************************************)
  let r = { a164 = #{ a29 = 0. }; b164 = 1. } in
  mark_test_run 144;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 144 failed";

  (*************************************)
  (*   t165 = { #{ float }; float# }   *)
  (*************************************)
  let r = { a165 = #{ a29 = 0. }; b165 = #1. } in
  mark_test_run 145;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 145 failed";

  (**********************************)
  (*   t166 = { #{ float; int } }   *)
  (**********************************)
  let r = { a166 = #{ a31 = 0.; b31 = 1 } } in
  mark_test_run 146;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 146 failed";

  (***************************************)
  (*   t167 = { #{ float; int }; int }   *)
  (***************************************)
  let r = { a167 = #{ a31 = 0.; b31 = 1 }; b167 = 2 } in
  mark_test_run 147;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 147 failed";

  (*****************************************)
  (*   t168 = { #{ float; int }; float }   *)
  (*****************************************)
  let r = { a168 = #{ a31 = 0.; b31 = 1 }; b168 = 2. } in
  mark_test_run 148;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 148 failed";

  (************************************)
  (*   t169 = { #{ float; float } }   *)
  (************************************)
  let r = { a169 = #{ a33 = 0.; b33 = 1. } } in
  mark_test_run 149;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 149 failed";

  (*****************************************)
  (*   t170 = { #{ float; float }; int }   *)
  (*****************************************)
  let r = { a170 = #{ a33 = 0.; b33 = 1. }; b170 = 2 } in
  mark_test_run 150;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 150 failed";

  (*******************************************)
  (*   t171 = { #{ float; float }; float }   *)
  (*******************************************)
  let r = { a171 = #{ a33 = 0.; b33 = 1. }; b171 = 2. } in
  mark_test_run 151;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 151 failed";

  (********************************************)
  (*   t172 = { #{ float; float }; float# }   *)
  (********************************************)
  let r = { a172 = #{ a33 = 0.; b33 = 1. }; b172 = #2. } in
  mark_test_run 152;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 152 failed";

  (*************************************)
  (*   t173 = { #{ float; float# } }   *)
  (*************************************)
  let r = { a173 = #{ a107 = 0.; b107 = #1. } } in
  mark_test_run 153;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 153 failed";

  (********************************************)
  (*   t174 = { #{ float; float# }; float }   *)
  (********************************************)
  let r = { a174 = #{ a107 = 0.; b107 = #1. }; b174 = 2. } in
  mark_test_run 154;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 154 failed";

  (*********************************************)
  (*   t175 = { #{ float; float# }; float# }   *)
  (*********************************************)
  let r = { a175 = #{ a107 = 0.; b107 = #1. }; b175 = #2. } in
  mark_test_run 155;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 155 failed";

  (******************************)
  (*   t176 = { #{ float# } }   *)
  (******************************)
  let r = { a176 = #{ a109 = #0. } } in
  mark_test_run 156;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 156 failed";

  (*************************************)
  (*   t177 = { #{ float# }; float }   *)
  (*************************************)
  let r = { a177 = #{ a109 = #0. }; b177 = 1. } in
  mark_test_run 157;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 157 failed";

  (**************************************)
  (*   t178 = { #{ float# }; float# }   *)
  (**************************************)
  let r = { a178 = #{ a109 = #0. }; b178 = #1. } in
  mark_test_run 158;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 158 failed";

  (*************************************)
  (*   t179 = { #{ float#; float } }   *)
  (*************************************)
  let r = { a179 = #{ a111 = #0.; b111 = 1. } } in
  mark_test_run 159;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 159 failed";

  (********************************************)
  (*   t180 = { #{ float#; float }; float }   *)
  (********************************************)
  let r = { a180 = #{ a111 = #0.; b111 = 1. }; b180 = 2. } in
  mark_test_run 160;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 160 failed";

  (*********************************************)
  (*   t181 = { #{ float#; float }; float# }   *)
  (*********************************************)
  let r = { a181 = #{ a111 = #0.; b111 = 1. }; b181 = #2. } in
  mark_test_run 161;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 161 failed";

  (**************************************)
  (*   t182 = { #{ float#; float# } }   *)
  (**************************************)
  let r = { a182 = #{ a113 = #0.; b113 = #1. } } in
  mark_test_run 162;
  let test = Int.equal (Obj.size (Obj.repr r)) 1 in
  if not test then failwithf "test 162 failed";

  (*********************************************)
  (*   t183 = { #{ float#; float# }; float }   *)
  (*********************************************)
  let r = { a183 = #{ a113 = #0.; b113 = #1. }; b183 = 2. } in
  mark_test_run 163;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 163 failed";

  (**********************************************)
  (*   t184 = { #{ float#; float# }; float# }   *)
  (**********************************************)
  let r = { a184 = #{ a113 = #0.; b113 = #1. }; b184 = #2. } in
  mark_test_run 164;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 164 failed";

  (*************************************************************)
  (*   t187 = { #{ float32#; int64# }; #{ string; int64# } }   *)
  (*************************************************************)
  let r = { a187 = #{ a185 = #0.s; b185 = #1L }; b187 = #{ a186 = "2"; b186 = #3L } } in
  mark_test_run 165;
  let test = Int.equal (Obj.size (Obj.repr r)) 2 in
  if not test then failwithf "test 165 failed";

  ()
;;

for i = 1 to 165 do
  if not (Int_set.mem i !tests_run) then failwithf "test %d not run" i
done;;
let () = Printf.printf "All tests passed.%!\n";;
