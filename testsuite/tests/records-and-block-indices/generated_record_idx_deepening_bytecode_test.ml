(* TEST
 include stdlib_stable;
 include stdlib_upstream_compatible;
 flags = "-extension layouts_alpha";
 bytecode;
*)
(** This is code generated by [test_generation.ml]. *)

[@@@warning "-23"]
external globalize : local_ 'a -> 'a = "%obj_dup";;
let int64x2_u_equal (_ : int64x2#) (_ : int64x2#) = failwith "should not be called from bytecode"

open Stdlib_upstream_compatible
open Stdlib_stable

external[@layout_poly] makearray_dynamic_local :
  ('a : any_non_null) . int -> 'a -> 'a array @ local =
  "%makearray_dynamic"

external[@layout_poly] makearray_dynamic :
  ('a : any_non_null) . int -> 'a -> 'a array =
  "%makearray_dynamic"

external[@layout_poly] get :
  ('a : any_non_null) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a =
  "%array_safe_get"

external[@layout_poly] set :
  ('a : any_non_null) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a -> unit =
  "%array_safe_set"

external[@layout_poly] get_idx_imm :
  'a ('b : any). ('a [@local_opt]) -> ('a, 'b) idx_imm -> ('b [@local_opt]) =
  "%unsafe_get_idx_imm"

external[@layout_poly] get_idx_mut :
  'a ('b : any). ('a [@local_opt]) -> ('a, 'b) idx_mut -> ('b [@local_opt]) =
  "%unsafe_get_idx"

external[@layout_poly] set_idx_mut :
  'a ('b : any).
    ('a [@local_opt]) -> ('a, 'b) idx_mut -> ('b [@local_opt]) -> unit =
  "%unsafe_set_idx"

module Idx_repr : sig
  type t
  val of_idx_imm : 'a ('b : any). ('a, 'b) idx_imm -> t
  val of_idx_mut : 'a ('b : any). ('a, 'b) idx_mut -> t
  val equal : t -> t -> bool
  val debug_string : t -> string
end = struct
  (* See Note [Representation of block indices] in [lambda/translcore.ml] *)
  type t =
    | Bytecode of { path : int list }
    | Native of { offset : int; gap : int }

  external magic_box_bits64 : ('a : bits64) 'b . 'a -> 'b =
    "%box_int64"
  external lessthan_if_bytecode : int -> int -> bool =
    "caml_lessthan" "caml_greaterthan"

  let of_idx idx =
    let is_bytecode = lessthan_if_bytecode 0 1 in
    if is_bytecode then
      let r = Obj.repr (magic_box_bits64 idx) in
      let nth_idx n : int = Obj.magic (Obj.field r n) in
      let path = List.init (Obj.size r) nth_idx in
      Bytecode { path }
    else
      let i : int64 = magic_box_bits64 idx in
      let offset =
        Int64.(logand (sub (shift_left one 48) one)) i
        |> Int64.to_int
      in
      let gap =
        Int64.shift_right i 48
        |> Int64.to_int
      in
      Native { offset; gap }

  let of_idx_imm = of_idx
  let of_idx_mut = of_idx

  let equal t1 t2 =
    match t1, t2 with
    | Bytecode { path = path1 }, Bytecode { path = path2 } ->
      List.equal Int.equal path1 path2
    | Native { gap = gap1; offset = offset1 },
      Native { gap = gap2; offset = offset2 } ->
      Int.equal gap1 gap2 && Int.equal offset1 offset2
    | Bytecode _, Native _ | Native _, Bytecode _ -> assert false

  let debug_string = function
    | Bytecode { path } ->
      Printf.sprintf "{ %s }"
        (String.concat "; " (List.map Int.to_string path))
    | Native { offset; gap } ->
      Printf.sprintf "offset %d; gap %d" offset gap
end

let failwithf fmt = Printf.ksprintf failwith fmt

(* Redefine iter to infer locality *)
let rec iter ~f = function
    [] -> ()
  | a::l -> f a; iter ~f l

module Int_set = Set.Make(Int)

let tests_run = ref Int_set.empty

let mark_test_run test_id =
  tests_run := Int_set.add test_id !tests_run

(* Various interesting values *)

let sizes = [ 0; 1; 2; 30 ]

let indices_in_deepening_tests = [0; 100_000]


type t0 = { mutable a0 : int }
type t1 = { mutable a1 : int; mutable b1 : int }
type t2 = { mutable a2 : int; mutable b2 : int; mutable c2 : int }
type t3 = { mutable a3 : int; mutable b3 : int; mutable c3 : int32# }
type t4 = { mutable a4 : int; mutable b4 : int; mutable c4 : float }
type t5 = { mutable a5 : int; mutable b5 : int64 }
type t6 = { mutable a6 : int; mutable b6 : int64# }
type t7 = { mutable a7 : int; mutable b7 : int32# }
type t8 = { mutable a8 : int; mutable b8 : int32#; mutable c8 : int }
type t9 = { mutable a9 : int; mutable b9 : int32#; mutable c9 : int32# }
type t10 = { mutable a10 : int; mutable b10 : nativeint# }
type t11 = { mutable a11 : int; mutable b11 : float }
type t12 = { mutable a12 : int; mutable b12 : float; mutable c12 : int }
type t13 = { mutable a13 : int; mutable b13 : float; mutable c13 : float }
type t14 = #{ a14 : int }
type t15 = { mutable a15 : int; mutable b15 : t14 }
type t16 = #{ a16 : int; b16 : int }
type t17 = { mutable a17 : int; mutable b17 : t16 }
type t18 = #{ a18 : int; b18 : int32# }
type t19 = { mutable a19 : int; mutable b19 : t18 }
type t20 = #{ a20 : int; b20 : float }
type t21 = { mutable a21 : int; mutable b21 : t20 }
type t22 = #{ a22 : int32# }
type t23 = { mutable a23 : int; mutable b23 : t22 }
type t24 = #{ a24 : int32#; b24 : int }
type t25 = { mutable a25 : int; mutable b25 : t24 }
type t26 = #{ a26 : int32#; b26 : int32# }
type t27 = { mutable a27 : int; mutable b27 : t26 }
type t28 = #{ a28 : float }
type t29 = { mutable a29 : int; mutable b29 : t28 }
type t30 = #{ a30 : float; b30 : int }
type t31 = { mutable a31 : int; mutable b31 : t30 }
type t32 = #{ a32 : float; b32 : float }
type t33 = { mutable a33 : int; mutable b33 : t32 }
type t34 = { mutable a34 : int64 }
type t35 = { mutable a35 : int64; mutable b35 : int }
type t36 = { mutable a36 : int64; mutable b36 : int64 }
type t37 = { mutable a37 : int64; mutable b37 : int64# }
type t38 = { mutable a38 : int64; mutable b38 : int32# }
type t39 = { mutable a39 : int64; mutable b39 : nativeint# }
type t40 = { mutable a40 : int64; mutable b40 : float }
type t41 = { mutable a41 : int64# }
type t42 = { mutable a42 : int64#; mutable b42 : int }
type t43 = { mutable a43 : int64#; mutable b43 : int64 }
type t44 = { mutable a44 : int64#; mutable b44 : int64# }
type t45 = { mutable a45 : int64#; mutable b45 : int32# }
type t46 = { mutable a46 : int64#; mutable b46 : nativeint# }
type t47 = { mutable a47 : int64#; mutable b47 : float }
type t48 = { mutable a48 : int32# }
type t49 = { mutable a49 : int32#; mutable b49 : int }
type t50 = { mutable a50 : int32#; mutable b50 : int; mutable c50 : int }
type t51 = { mutable a51 : int32#; mutable b51 : int; mutable c51 : int32# }
type t52 = { mutable a52 : int32#; mutable b52 : int64 }
type t53 = { mutable a53 : int32#; mutable b53 : int64# }
type t54 = { mutable a54 : int32#; mutable b54 : int32# }
type t55 = { mutable a55 : int32#; mutable b55 : int32#; mutable c55 : int }
type t56 = { mutable a56 : int32#; mutable b56 : int32#; mutable c56 : int32# }
type t57 = { mutable a57 : int32#; mutable b57 : nativeint# }
type t58 = { mutable a58 : int32#; mutable b58 : float }
type t59 = { mutable a59 : int32#; mutable b59 : t14 }
type t60 = { mutable a60 : int32#; mutable b60 : t16 }
type t61 = { mutable a61 : int32#; mutable b61 : t18 }
type t62 = { mutable a62 : int32#; mutable b62 : t22 }
type t63 = { mutable a63 : int32#; mutable b63 : t24 }
type t64 = { mutable a64 : int32#; mutable b64 : t26 }
type t65 = { mutable a65 : nativeint# }
type t66 = { mutable a66 : nativeint#; mutable b66 : int }
type t67 = { mutable a67 : nativeint#; mutable b67 : int64 }
type t68 = { mutable a68 : nativeint#; mutable b68 : int64# }
type t69 = { mutable a69 : nativeint#; mutable b69 : int32# }
type t70 = { mutable a70 : nativeint#; mutable b70 : nativeint# }
type t71 = { mutable a71 : nativeint#; mutable b71 : float }
type t72 = { mutable a72 : float }
type t73 = { mutable a73 : float; mutable b73 : int }
type t74 = { mutable a74 : float; mutable b74 : int; mutable c74 : int }
type t75 = { mutable a75 : float; mutable b75 : int; mutable c75 : float }
type t76 = { mutable a76 : float; mutable b76 : int64 }
type t77 = { mutable a77 : float; mutable b77 : int64# }
type t78 = { mutable a78 : float; mutable b78 : int32# }
type t79 = { mutable a79 : float; mutable b79 : nativeint# }
type t80 = { mutable a80 : float; mutable b80 : float }
type t81 = { mutable a81 : float; mutable b81 : float; mutable c81 : int }
type t82 = { mutable a82 : float; mutable b82 : float; mutable c82 : float }
type t83 = { mutable a83 : float; mutable b83 : t14 }
type t84 = { mutable a84 : float; mutable b84 : t16 }
type t85 = { mutable a85 : float; mutable b85 : t20 }
type t86 = { mutable a86 : float; mutable b86 : t28 }
type t87 = { mutable a87 : float; mutable b87 : t30 }
type t88 = { mutable a88 : float; mutable b88 : t32 }
type t89 = { mutable a89 : t14 }
type t90 = { mutable a90 : t14; mutable b90 : int }
type t91 = { mutable a91 : t14; mutable b91 : int32# }
type t92 = { mutable a92 : t14; mutable b92 : float }
type t93 = { mutable a93 : t16 }
type t94 = { mutable a94 : t16; mutable b94 : int }
type t95 = { mutable a95 : t16; mutable b95 : int32# }
type t96 = { mutable a96 : t16; mutable b96 : float }
type t97 = { mutable a97 : t18 }
type t98 = { mutable a98 : t18; mutable b98 : int }
type t99 = { mutable a99 : t18; mutable b99 : int32# }
type t100 = { mutable a100 : t20 }
type t101 = { mutable a101 : t20; mutable b101 : int }
type t102 = { mutable a102 : t20; mutable b102 : float }
type t103 = #{ a103 : int64; b103 : int64# }
type t104 = #{ a104 : int64#; b104 : float# }
type t105 = { mutable a105 : t103; mutable b105 : t104 }
type t106 = #{ a106 : int64; b106 : string }
type t107 = #{ a107 : int64#; b107 : string }
type t108 = { mutable a108 : t106; mutable b108 : t107 }
type t109 = #{ a109 : int64#; b109 : int64 }
type t110 = #{ a110 : int64; b110 : int64 }
type t111 = { mutable a111 : t109; mutable b111 : t110 }
type t112 = #{ a112 : float32#; b112 : float }
type t113 = { mutable a113 : t109; mutable b113 : t112 }
type t114 = { mutable a114 : t22 }
type t115 = { mutable a115 : t22; mutable b115 : int }
type t116 = { mutable a116 : t22; mutable b116 : int32# }
type t117 = { mutable a117 : t24 }
type t118 = { mutable a118 : t24; mutable b118 : int }
type t119 = { mutable a119 : t24; mutable b119 : int32# }
type t120 = { mutable a120 : t26 }
type t121 = { mutable a121 : t26; mutable b121 : int }
type t122 = { mutable a122 : t26; mutable b122 : int32# }
type t123 = { mutable a123 : t28 }
type t124 = { mutable a124 : t28; mutable b124 : int }
type t125 = { mutable a125 : t28; mutable b125 : float }
type t126 = { mutable a126 : t30 }
type t127 = { mutable a127 : t30; mutable b127 : int }
type t128 = { mutable a128 : t30; mutable b128 : float }
type t129 = { mutable a129 : t32 }
type t130 = { mutable a130 : t32; mutable b130 : int }
type t131 = { mutable a131 : t32; mutable b131 : float }
type t132 = #{ a132 : float32#; b132 : int64# }
type t133 = #{ a133 : string; b133 : int64# }
type t134 = { mutable a134 : t132; mutable b134 : t133 }

let () =
  (********************)
  (*   t0 = { int }   *)
  (********************)
  (*************************)
  (*   t1 = { int; int }   *)
  (*************************)
  (******************************)
  (*   t2 = { int; int; int }   *)
  (******************************)
  (*********************************)
  (*   t3 = { int; int; int32# }   *)
  (*********************************)
  (********************************)
  (*   t4 = { int; int; float }   *)
  (********************************)
  (***************************)
  (*   t5 = { int; int64 }   *)
  (***************************)
  (****************************)
  (*   t6 = { int; int64# }   *)
  (****************************)
  (****************************)
  (*   t7 = { int; int32# }   *)
  (****************************)
  (*********************************)
  (*   t8 = { int; int32#; int }   *)
  (*********************************)
  (************************************)
  (*   t9 = { int; int32#; int32# }   *)
  (************************************)
  (*********************************)
  (*   t10 = { int; nativeint# }   *)
  (*********************************)
  (****************************)
  (*   t11 = { int; float }   *)
  (****************************)
  (*********************************)
  (*   t12 = { int; float; int }   *)
  (*********************************)
  (***********************************)
  (*   t13 = { int; float; float }   *)
  (***********************************)
  (*******************************)
  (*   t15 = { int; #{ int } }   *)
  (*******************************)
  (************************************)
  (*   t17 = { int; #{ int; int } }   *)
  (************************************)
  (***************************************)
  (*   t19 = { int; #{ int; int32# } }   *)
  (***************************************)
  (**************************************)
  (*   t21 = { int; #{ int; float } }   *)
  (**************************************)
  (**********************************)
  (*   t23 = { int; #{ int32# } }   *)
  (**********************************)
  (***************************************)
  (*   t25 = { int; #{ int32#; int } }   *)
  (***************************************)
  (******************************************)
  (*   t27 = { int; #{ int32#; int32# } }   *)
  (******************************************)
  (*********************************)
  (*   t29 = { int; #{ float } }   *)
  (*********************************)
  (**************************************)
  (*   t31 = { int; #{ float; int } }   *)
  (**************************************)
  (****************************************)
  (*   t33 = { int; #{ float; float } }   *)
  (****************************************)
  (***********************)
  (*   t34 = { int64 }   *)
  (***********************)
  (****************************)
  (*   t35 = { int64; int }   *)
  (****************************)
  (******************************)
  (*   t36 = { int64; int64 }   *)
  (******************************)
  (*******************************)
  (*   t37 = { int64; int64# }   *)
  (*******************************)
  (*******************************)
  (*   t38 = { int64; int32# }   *)
  (*******************************)
  (***********************************)
  (*   t39 = { int64; nativeint# }   *)
  (***********************************)
  (******************************)
  (*   t40 = { int64; float }   *)
  (******************************)
  (************************)
  (*   t41 = { int64# }   *)
  (************************)
  (*****************************)
  (*   t42 = { int64#; int }   *)
  (*****************************)
  (*******************************)
  (*   t43 = { int64#; int64 }   *)
  (*******************************)
  (********************************)
  (*   t44 = { int64#; int64# }   *)
  (********************************)
  (********************************)
  (*   t45 = { int64#; int32# }   *)
  (********************************)
  (************************************)
  (*   t46 = { int64#; nativeint# }   *)
  (************************************)
  (*******************************)
  (*   t47 = { int64#; float }   *)
  (*******************************)
  (************************)
  (*   t48 = { int32# }   *)
  (************************)
  (*****************************)
  (*   t49 = { int32#; int }   *)
  (*****************************)
  (**********************************)
  (*   t50 = { int32#; int; int }   *)
  (**********************************)
  (*************************************)
  (*   t51 = { int32#; int; int32# }   *)
  (*************************************)
  (*******************************)
  (*   t52 = { int32#; int64 }   *)
  (*******************************)
  (********************************)
  (*   t53 = { int32#; int64# }   *)
  (********************************)
  (********************************)
  (*   t54 = { int32#; int32# }   *)
  (********************************)
  (*************************************)
  (*   t55 = { int32#; int32#; int }   *)
  (*************************************)
  (****************************************)
  (*   t56 = { int32#; int32#; int32# }   *)
  (****************************************)
  (************************************)
  (*   t57 = { int32#; nativeint# }   *)
  (************************************)
  (*******************************)
  (*   t58 = { int32#; float }   *)
  (*******************************)
  (**********************************)
  (*   t59 = { int32#; #{ int } }   *)
  (**********************************)
  (***************************************)
  (*   t60 = { int32#; #{ int; int } }   *)
  (***************************************)
  (******************************************)
  (*   t61 = { int32#; #{ int; int32# } }   *)
  (******************************************)
  (*************************************)
  (*   t62 = { int32#; #{ int32# } }   *)
  (*************************************)
  (******************************************)
  (*   t63 = { int32#; #{ int32#; int } }   *)
  (******************************************)
  (*********************************************)
  (*   t64 = { int32#; #{ int32#; int32# } }   *)
  (*********************************************)
  (****************************)
  (*   t65 = { nativeint# }   *)
  (****************************)
  (*********************************)
  (*   t66 = { nativeint#; int }   *)
  (*********************************)
  (***********************************)
  (*   t67 = { nativeint#; int64 }   *)
  (***********************************)
  (************************************)
  (*   t68 = { nativeint#; int64# }   *)
  (************************************)
  (************************************)
  (*   t69 = { nativeint#; int32# }   *)
  (************************************)
  (****************************************)
  (*   t70 = { nativeint#; nativeint# }   *)
  (****************************************)
  (***********************************)
  (*   t71 = { nativeint#; float }   *)
  (***********************************)
  (***********************)
  (*   t72 = { float }   *)
  (***********************)
  (****************************)
  (*   t73 = { float; int }   *)
  (****************************)
  (*********************************)
  (*   t74 = { float; int; int }   *)
  (*********************************)
  (***********************************)
  (*   t75 = { float; int; float }   *)
  (***********************************)
  (******************************)
  (*   t76 = { float; int64 }   *)
  (******************************)
  (*******************************)
  (*   t77 = { float; int64# }   *)
  (*******************************)
  (*******************************)
  (*   t78 = { float; int32# }   *)
  (*******************************)
  (***********************************)
  (*   t79 = { float; nativeint# }   *)
  (***********************************)
  (******************************)
  (*   t80 = { float; float }   *)
  (******************************)
  (***********************************)
  (*   t81 = { float; float; int }   *)
  (***********************************)
  (*************************************)
  (*   t82 = { float; float; float }   *)
  (*************************************)
  (*********************************)
  (*   t83 = { float; #{ int } }   *)
  (*********************************)
  (**************************************)
  (*   t84 = { float; #{ int; int } }   *)
  (**************************************)
  (****************************************)
  (*   t85 = { float; #{ int; float } }   *)
  (****************************************)
  (***********************************)
  (*   t86 = { float; #{ float } }   *)
  (***********************************)
  (****************************************)
  (*   t87 = { float; #{ float; int } }   *)
  (****************************************)
  (******************************************)
  (*   t88 = { float; #{ float; float } }   *)
  (******************************************)
  (**************************)
  (*   t89 = { #{ int } }   *)
  (**************************)
  (*******************************)
  (*   t90 = { #{ int }; int }   *)
  (*******************************)
  (**********************************)
  (*   t91 = { #{ int }; int32# }   *)
  (**********************************)
  (*********************************)
  (*   t92 = { #{ int }; float }   *)
  (*********************************)
  (*******************************)
  (*   t93 = { #{ int; int } }   *)
  (*******************************)
  (************************************)
  (*   t94 = { #{ int; int }; int }   *)
  (************************************)
  (***************************************)
  (*   t95 = { #{ int; int }; int32# }   *)
  (***************************************)
  (**************************************)
  (*   t96 = { #{ int; int }; float }   *)
  (**************************************)
  (**********************************)
  (*   t97 = { #{ int; int32# } }   *)
  (**********************************)
  (***************************************)
  (*   t98 = { #{ int; int32# }; int }   *)
  (***************************************)
  (******************************************)
  (*   t99 = { #{ int; int32# }; int32# }   *)
  (******************************************)
  (**********************************)
  (*   t100 = { #{ int; float } }   *)
  (**********************************)
  (***************************************)
  (*   t101 = { #{ int; float }; int }   *)
  (***************************************)
  (*****************************************)
  (*   t102 = { #{ int; float }; float }   *)
  (*****************************************)
  (**********************************************************)
  (*   t105 = { #{ int64; int64# }; #{ int64#; float# } }   *)
  (**********************************************************)
  (**********************************************************)
  (*   t108 = { #{ int64; string }; #{ int64#; string } }   *)
  (**********************************************************)
  (********************************************************)
  (*   t111 = { #{ int64#; int64 }; #{ int64; int64 } }   *)
  (********************************************************)
  (***********************************************************)
  (*   t113 = { #{ int64#; int64 }; #{ float32#; float } }   *)
  (***********************************************************)
  (******************************)
  (*   t114 = { #{ int32# } }   *)
  (******************************)
  (***********************************)
  (*   t115 = { #{ int32# }; int }   *)
  (***********************************)
  (**************************************)
  (*   t116 = { #{ int32# }; int32# }   *)
  (**************************************)
  (***********************************)
  (*   t117 = { #{ int32#; int } }   *)
  (***********************************)
  (****************************************)
  (*   t118 = { #{ int32#; int }; int }   *)
  (****************************************)
  (*******************************************)
  (*   t119 = { #{ int32#; int }; int32# }   *)
  (*******************************************)
  (**************************************)
  (*   t120 = { #{ int32#; int32# } }   *)
  (**************************************)
  (*******************************************)
  (*   t121 = { #{ int32#; int32# }; int }   *)
  (*******************************************)
  (**********************************************)
  (*   t122 = { #{ int32#; int32# }; int32# }   *)
  (**********************************************)
  (*****************************)
  (*   t123 = { #{ float } }   *)
  (*****************************)
  (**********************************)
  (*   t124 = { #{ float }; int }   *)
  (**********************************)
  (************************************)
  (*   t125 = { #{ float }; float }   *)
  (************************************)
  (**********************************)
  (*   t126 = { #{ float; int } }   *)
  (**********************************)
  (***************************************)
  (*   t127 = { #{ float; int }; int }   *)
  (***************************************)
  (*****************************************)
  (*   t128 = { #{ float; int }; float }   *)
  (*****************************************)
  (************************************)
  (*   t129 = { #{ float; float } }   *)
  (************************************)
  (*****************************************)
  (*   t130 = { #{ float; float }; int }   *)
  (*****************************************)
  (*******************************************)
  (*   t131 = { #{ float; float }; float }   *)
  (*******************************************)
  (*************************************************************)
  (*   t134 = { #{ float32#; int64# }; #{ string; int64# } }   *)
  (*************************************************************)
  ()
;;

for i = 1 to 0 do
  if not (Int_set.mem i !tests_run) then failwithf "test %d not run" i
done;;
let () = Printf.printf "All tests passed.%!\n";;
