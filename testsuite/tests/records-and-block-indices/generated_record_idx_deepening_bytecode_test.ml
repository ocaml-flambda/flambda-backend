(* TEST
 include stdlib_stable;
 include stdlib_beta;
 include stdlib_upstream_compatible;
 flags = "-extension layouts_alpha";
 bytecode;
*)
(** This is code generated by [test_generation.ml]. *)

[@@@warning "-23"]
external globalize : local_ 'a -> 'a = "%obj_dup";;
let int64x2_u_equal (_ : int64x2#) (_ : int64x2#) = failwith "should not be called from bytecode"

open Stdlib_upstream_compatible
open Stdlib_stable
open Stdlib_beta

external[@layout_poly] makearray_dynamic_local :
  ('a : any_non_null) . int -> 'a -> 'a array @ local =
  "%makearray_dynamic"

external[@layout_poly] makearray_dynamic :
  ('a : any_non_null) . int -> 'a -> 'a array =
  "%makearray_dynamic"

external[@layout_poly] get :
  ('a : any_non_null) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a =
  "%array_safe_get"

external[@layout_poly] set :
  ('a : any_non_null) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a -> unit =
  "%array_safe_set"

module Idx_repr : sig
  type t
  val of_idx_imm : 'a ('b : any). ('a, 'b) idx_imm -> t
  val of_idx_mut : 'a ('b : any). ('a, 'b) idx_mut -> t
  val equal : t -> t -> bool
  val debug_string : t -> string
end = struct
  (* See [jane/doc/extensions/_02-unboxed-types/block-indices.md] *)
  type t =
    | Bytecode of { path : int list }
    | Native of { offset : int; gap : int }

  external magic_box_bits64 : ('a : bits64) 'b . 'a -> 'b =
    "%box_int64"
  external lessthan_if_bytecode : int -> int -> bool =
    "caml_lessthan" "caml_greaterthan"

  let of_idx idx =
    let is_bytecode = lessthan_if_bytecode 0 1 in
    if is_bytecode then
      let r = Obj.repr (magic_box_bits64 idx) in
      let nth_idx n : int = Obj.magic (Obj.field r n) in
      let path = List.init (Obj.size r) nth_idx in
      Bytecode { path }
    else
      let i : int64 = magic_box_bits64 idx in
      let offset =
        Int64.(logand (sub (shift_left one 48) one)) i
        |> Int64.to_int
      in
      let gap =
        Int64.shift_right i 48
        |> Int64.to_int
      in
      Native { offset; gap }

  let of_idx_imm = of_idx
  let of_idx_mut = of_idx

  let equal t1 t2 =
    match t1, t2 with
    | Bytecode { path = path1 }, Bytecode { path = path2 } ->
      List.equal Int.equal path1 path2
    | Native { gap = gap1; offset = offset1 },
      Native { gap = gap2; offset = offset2 } ->
      Int.equal gap1 gap2 && Int.equal offset1 offset2
    | Bytecode _, Native _ | Native _, Bytecode _ -> assert false

  let debug_string = function
    | Bytecode { path } ->
      Printf.sprintf "{ %s }"
        (String.concat "; " (List.map Int.to_string path))
    | Native { offset; gap } ->
      Printf.sprintf "offset %d; gap %d" offset gap
end

let failwithf fmt = Printf.ksprintf failwith fmt

(* Redefine iter to infer locality *)
let rec iter ~f = function
    [] -> ()
  | a::l -> f a; iter ~f l

module Int_set = Set.Make(Int)

let tests_run = ref Int_set.empty

let mark_test_run test_id =
  tests_run := Int_set.add test_id !tests_run

(* Various interesting values *)

let sizes = [ 0; 1; 2; 30 ]

let indices_in_deepening_tests = [0; 100_000]

type packed = P : 'a -> packed
let ref_to_force_heap_allocation : packed ref = ref (P 0)

type t0 = { mutable a0 : int } (* { int } *)
type t1 = { mutable a1 : int; mutable b1 : int } (* { int; int } *)
type t2 = { mutable a2 : int; mutable b2 : int; mutable c2 : int } (* { int; int; int } *)
type t3 = { mutable a3 : int; mutable b3 : int; mutable c3 : int32# } (* { int; int; int32# } *)
type t4 = { mutable a4 : int; mutable b4 : int; mutable c4 : float } (* { int; int; float } *)
type t5 = { mutable a5 : int; mutable b5 : int64 } (* { int; int64 } *)
type t6 = { mutable a6 : int; mutable b6 : int64# } (* { int; int64# } *)
type t7 = { mutable a7 : int; mutable b7 : int32# } (* { int; int32# } *)
type t8 = { mutable a8 : int; mutable b8 : int32#; mutable c8 : int } (* { int; int32#; int } *)
type t9 = { mutable a9 : int; mutable b9 : int32#; mutable c9 : int32# } (* { int; int32#; int32# } *)
type t10 = { mutable a10 : int; mutable b10 : nativeint# } (* { int; nativeint# } *)
type t11 = { mutable a11 : int; mutable b11 : float } (* { int; float } *)
type t12 = { mutable a12 : int; mutable b12 : float; mutable c12 : int } (* { int; float; int } *)
type t13 = { mutable a13 : int; mutable b13 : float; mutable c13 : float } (* { int; float; float } *)
type t14 = #{ a14 : int } (* #{ int } *)
type t15 = { mutable a15 : int; mutable b15 : t14 } (* { int; #{ int } } *)
type t16 = #{ a16 : int; b16 : int } (* #{ int; int } *)
type t17 = { mutable a17 : int; mutable b17 : t16 } (* { int; #{ int; int } } *)
type t18 = #{ a18 : int; b18 : int32# } (* #{ int; int32# } *)
type t19 = { mutable a19 : int; mutable b19 : t18 } (* { int; #{ int; int32# } } *)
type t20 = #{ a20 : int; b20 : float } (* #{ int; float } *)
type t21 = { mutable a21 : int; mutable b21 : t20 } (* { int; #{ int; float } } *)
type t22 = #{ a22 : int32# } (* #{ int32# } *)
type t23 = { mutable a23 : int; mutable b23 : t22 } (* { int; #{ int32# } } *)
type t24 = #{ a24 : int32#; b24 : int } (* #{ int32#; int } *)
type t25 = { mutable a25 : int; mutable b25 : t24 } (* { int; #{ int32#; int } } *)
type t26 = #{ a26 : int32#; b26 : int32# } (* #{ int32#; int32# } *)
type t27 = { mutable a27 : int; mutable b27 : t26 } (* { int; #{ int32#; int32# } } *)
type t28 = #{ a28 : float } (* #{ float } *)
type t29 = { mutable a29 : int; mutable b29 : t28 } (* { int; #{ float } } *)
type t30 = #{ a30 : float; b30 : int } (* #{ float; int } *)
type t31 = { mutable a31 : int; mutable b31 : t30 } (* { int; #{ float; int } } *)
type t32 = #{ a32 : float; b32 : float } (* #{ float; float } *)
type t33 = { mutable a33 : int; mutable b33 : t32 } (* { int; #{ float; float } } *)
type t34 = { mutable a34 : int64 } (* { int64 } *)
type t35 = { mutable a35 : int64; mutable b35 : int } (* { int64; int } *)
type t36 = { mutable a36 : int64; mutable b36 : int64 } (* { int64; int64 } *)
type t37 = { mutable a37 : int64; mutable b37 : int64# } (* { int64; int64# } *)
type t38 = { mutable a38 : int64; mutable b38 : int32# } (* { int64; int32# } *)
type t39 = { mutable a39 : int64; mutable b39 : nativeint# } (* { int64; nativeint# } *)
type t40 = { mutable a40 : int64; mutable b40 : float } (* { int64; float } *)
type t41 = { mutable a41 : int64# } (* { int64# } *)
type t42 = { mutable a42 : int64#; mutable b42 : int } (* { int64#; int } *)
type t43 = { mutable a43 : int64#; mutable b43 : int64 } (* { int64#; int64 } *)
type t44 = { mutable a44 : int64#; mutable b44 : int64# } (* { int64#; int64# } *)
type t45 = { mutable a45 : int64#; mutable b45 : int32# } (* { int64#; int32# } *)
type t46 = { mutable a46 : int64#; mutable b46 : nativeint# } (* { int64#; nativeint# } *)
type t47 = { mutable a47 : int64#; mutable b47 : float } (* { int64#; float } *)
type t48 = { mutable a48 : int32# } (* { int32# } *)
type t49 = { mutable a49 : int32#; mutable b49 : int } (* { int32#; int } *)
type t50 = { mutable a50 : int32#; mutable b50 : int; mutable c50 : int } (* { int32#; int; int } *)
type t51 = { mutable a51 : int32#; mutable b51 : int; mutable c51 : int32# } (* { int32#; int; int32# } *)
type t52 = { mutable a52 : int32#; mutable b52 : int64 } (* { int32#; int64 } *)
type t53 = { mutable a53 : int32#; mutable b53 : int64# } (* { int32#; int64# } *)
type t54 = { mutable a54 : int32#; mutable b54 : int32# } (* { int32#; int32# } *)
type t55 = { mutable a55 : int32#; mutable b55 : int32#; mutable c55 : int } (* { int32#; int32#; int } *)
type t56 = { mutable a56 : int32#; mutable b56 : int32#; mutable c56 : int32# } (* { int32#; int32#; int32# } *)
type t57 = { mutable a57 : int32#; mutable b57 : nativeint# } (* { int32#; nativeint# } *)
type t58 = { mutable a58 : int32#; mutable b58 : float } (* { int32#; float } *)
type t59 = { mutable a59 : int32#; mutable b59 : t14 } (* { int32#; #{ int } } *)
type t60 = { mutable a60 : int32#; mutable b60 : t16 } (* { int32#; #{ int; int } } *)
type t61 = { mutable a61 : int32#; mutable b61 : t18 } (* { int32#; #{ int; int32# } } *)
type t62 = { mutable a62 : int32#; mutable b62 : t22 } (* { int32#; #{ int32# } } *)
type t63 = { mutable a63 : int32#; mutable b63 : t24 } (* { int32#; #{ int32#; int } } *)
type t64 = { mutable a64 : int32#; mutable b64 : t26 } (* { int32#; #{ int32#; int32# } } *)
type t65 = { mutable a65 : nativeint# } (* { nativeint# } *)
type t66 = { mutable a66 : nativeint#; mutable b66 : int } (* { nativeint#; int } *)
type t67 = { mutable a67 : nativeint#; mutable b67 : int64 } (* { nativeint#; int64 } *)
type t68 = { mutable a68 : nativeint#; mutable b68 : int64# } (* { nativeint#; int64# } *)
type t69 = { mutable a69 : nativeint#; mutable b69 : int32# } (* { nativeint#; int32# } *)
type t70 = { mutable a70 : nativeint#; mutable b70 : nativeint# } (* { nativeint#; nativeint# } *)
type t71 = { mutable a71 : nativeint#; mutable b71 : float } (* { nativeint#; float } *)
type t72 = { mutable a72 : float } (* { float } *)
type t73 = { mutable a73 : float; mutable b73 : int } (* { float; int } *)
type t74 = { mutable a74 : float; mutable b74 : int; mutable c74 : int } (* { float; int; int } *)
type t75 = { mutable a75 : float; mutable b75 : int; mutable c75 : float } (* { float; int; float } *)
type t76 = { mutable a76 : float; mutable b76 : int64 } (* { float; int64 } *)
type t77 = { mutable a77 : float; mutable b77 : int64# } (* { float; int64# } *)
type t78 = { mutable a78 : float; mutable b78 : int32# } (* { float; int32# } *)
type t79 = { mutable a79 : float; mutable b79 : nativeint# } (* { float; nativeint# } *)
type t80 = { mutable a80 : float; mutable b80 : float } (* { float; float } *)
type t81 = { mutable a81 : float; mutable b81 : float; mutable c81 : int } (* { float; float; int } *)
type t82 = { mutable a82 : float; mutable b82 : float; mutable c82 : float } (* { float; float; float } *)
type t83 = { mutable a83 : float; mutable b83 : float; mutable c83 : float# } (* { float; float; float# } *)
type t84 = { mutable a84 : float; mutable b84 : float# } (* { float; float# } *)
type t85 = { mutable a85 : float; mutable b85 : float#; mutable c85 : float } (* { float; float#; float } *)
type t86 = { mutable a86 : float; mutable b86 : float#; mutable c86 : float# } (* { float; float#; float# } *)
type t87 = { mutable a87 : float; mutable b87 : t14 } (* { float; #{ int } } *)
type t88 = { mutable a88 : float; mutable b88 : t16 } (* { float; #{ int; int } } *)
type t89 = { mutable a89 : float; mutable b89 : t20 } (* { float; #{ int; float } } *)
type t90 = { mutable a90 : float; mutable b90 : t28 } (* { float; #{ float } } *)
type t91 = { mutable a91 : float; mutable b91 : t30 } (* { float; #{ float; int } } *)
type t92 = { mutable a92 : float; mutable b92 : t32 } (* { float; #{ float; float } } *)
type t93 = #{ a93 : float; b93 : float# } (* #{ float; float# } *)
type t94 = { mutable a94 : float; mutable b94 : t93 } (* { float; #{ float; float# } } *)
type t95 = #{ a95 : float# } (* #{ float# } *)
type t96 = { mutable a96 : float; mutable b96 : t95 } (* { float; #{ float# } } *)
type t97 = #{ a97 : float#; b97 : float } (* #{ float#; float } *)
type t98 = { mutable a98 : float; mutable b98 : t97 } (* { float; #{ float#; float } } *)
type t99 = #{ a99 : float#; b99 : float# } (* #{ float#; float# } *)
type t100 = { mutable a100 : float; mutable b100 : t99 } (* { float; #{ float#; float# } } *)
type t101 = { mutable a101 : float# } (* { float# } *)
type t102 = { mutable a102 : float#; mutable b102 : float } (* { float#; float } *)
type t103 = { mutable a103 : float#; mutable b103 : float; mutable c103 : float } (* { float#; float; float } *)
type t104 = { mutable a104 : float#; mutable b104 : float; mutable c104 : float# } (* { float#; float; float# } *)
type t105 = { mutable a105 : float#; mutable b105 : float# } (* { float#; float# } *)
type t106 = { mutable a106 : float#; mutable b106 : float#; mutable c106 : float } (* { float#; float#; float } *)
type t107 = { mutable a107 : float#; mutable b107 : float#; mutable c107 : float# } (* { float#; float#; float# } *)
type t108 = { mutable a108 : float#; mutable b108 : t28 } (* { float#; #{ float } } *)
type t109 = { mutable a109 : float#; mutable b109 : t32 } (* { float#; #{ float; float } } *)
type t110 = { mutable a110 : float#; mutable b110 : t93 } (* { float#; #{ float; float# } } *)
type t111 = { mutable a111 : float#; mutable b111 : t95 } (* { float#; #{ float# } } *)
type t112 = { mutable a112 : float#; mutable b112 : t97 } (* { float#; #{ float#; float } } *)
type t113 = { mutable a113 : float#; mutable b113 : t99 } (* { float#; #{ float#; float# } } *)
type t114 = { mutable a114 : t14 } (* { #{ int } } *)
type t115 = { mutable a115 : t14; mutable b115 : int } (* { #{ int }; int } *)
type t116 = { mutable a116 : t14; mutable b116 : int32# } (* { #{ int }; int32# } *)
type t117 = { mutable a117 : t14; mutable b117 : float } (* { #{ int }; float } *)
type t118 = { mutable a118 : t16 } (* { #{ int; int } } *)
type t119 = { mutable a119 : t16; mutable b119 : int } (* { #{ int; int }; int } *)
type t120 = { mutable a120 : t16; mutable b120 : int32# } (* { #{ int; int }; int32# } *)
type t121 = { mutable a121 : t16; mutable b121 : float } (* { #{ int; int }; float } *)
type t122 = { mutable a122 : t18 } (* { #{ int; int32# } } *)
type t123 = { mutable a123 : t18; mutable b123 : int } (* { #{ int; int32# }; int } *)
type t124 = { mutable a124 : t18; mutable b124 : int32# } (* { #{ int; int32# }; int32# } *)
type t125 = { mutable a125 : t20 } (* { #{ int; float } } *)
type t126 = { mutable a126 : t20; mutable b126 : int } (* { #{ int; float }; int } *)
type t127 = { mutable a127 : t20; mutable b127 : float } (* { #{ int; float }; float } *)
type t128 = #{ a128 : int64; b128 : int64# } (* #{ int64; int64# } *)
type t129 = #{ a129 : int64#; b129 : float# } (* #{ int64#; float# } *)
type t130 = { mutable a130 : t128; mutable b130 : t129 } (* { #{ int64; int64# }; #{ int64#; float# } } *)
type t131 = #{ a131 : int64; b131 : string } (* #{ int64; string } *)
type t132 = #{ a132 : int64#; b132 : string } (* #{ int64#; string } *)
type t133 = { mutable a133 : t131; mutable b133 : t132 } (* { #{ int64; string }; #{ int64#; string } } *)
type t134 = #{ a134 : int64#; b134 : int64 } (* #{ int64#; int64 } *)
type t135 = #{ a135 : int64; b135 : int64 } (* #{ int64; int64 } *)
type t136 = { mutable a136 : t134; mutable b136 : t135 } (* { #{ int64#; int64 }; #{ int64; int64 } } *)
type t137 = #{ a137 : float32#; b137 : float } (* #{ float32#; float } *)
type t138 = { mutable a138 : t134; mutable b138 : t137 } (* { #{ int64#; int64 }; #{ float32#; float } } *)
type t139 = { mutable a139 : t22 } (* { #{ int32# } } *)
type t140 = { mutable a140 : t22; mutable b140 : int } (* { #{ int32# }; int } *)
type t141 = { mutable a141 : t22; mutable b141 : int32# } (* { #{ int32# }; int32# } *)
type t142 = { mutable a142 : t24 } (* { #{ int32#; int } } *)
type t143 = { mutable a143 : t24; mutable b143 : int } (* { #{ int32#; int }; int } *)
type t144 = { mutable a144 : t24; mutable b144 : int32# } (* { #{ int32#; int }; int32# } *)
type t145 = { mutable a145 : t26 } (* { #{ int32#; int32# } } *)
type t146 = { mutable a146 : t26; mutable b146 : int } (* { #{ int32#; int32# }; int } *)
type t147 = { mutable a147 : t26; mutable b147 : int32# } (* { #{ int32#; int32# }; int32# } *)
type t148 = { mutable a148 : t28 } (* { #{ float } } *)
type t149 = { mutable a149 : t28; mutable b149 : int } (* { #{ float }; int } *)
type t150 = { mutable a150 : t28; mutable b150 : float } (* { #{ float }; float } *)
type t151 = { mutable a151 : t28; mutable b151 : float# } (* { #{ float }; float# } *)
type t152 = { mutable a152 : t30 } (* { #{ float; int } } *)
type t153 = { mutable a153 : t30; mutable b153 : int } (* { #{ float; int }; int } *)
type t154 = { mutable a154 : t30; mutable b154 : float } (* { #{ float; int }; float } *)
type t155 = { mutable a155 : t32 } (* { #{ float; float } } *)
type t156 = { mutable a156 : t32; mutable b156 : int } (* { #{ float; float }; int } *)
type t157 = { mutable a157 : t32; mutable b157 : float } (* { #{ float; float }; float } *)
type t158 = { mutable a158 : t32; mutable b158 : float# } (* { #{ float; float }; float# } *)
type t159 = { mutable a159 : t93 } (* { #{ float; float# } } *)
type t160 = { mutable a160 : t93; mutable b160 : float } (* { #{ float; float# }; float } *)
type t161 = { mutable a161 : t93; mutable b161 : float# } (* { #{ float; float# }; float# } *)
type t162 = { mutable a162 : t95 } (* { #{ float# } } *)
type t163 = { mutable a163 : t95; mutable b163 : float } (* { #{ float# }; float } *)
type t164 = { mutable a164 : t95; mutable b164 : float# } (* { #{ float# }; float# } *)
type t165 = { mutable a165 : t97 } (* { #{ float#; float } } *)
type t166 = { mutable a166 : t97; mutable b166 : float } (* { #{ float#; float }; float } *)
type t167 = { mutable a167 : t97; mutable b167 : float# } (* { #{ float#; float }; float# } *)
type t168 = { mutable a168 : t99 } (* { #{ float#; float# } } *)
type t169 = { mutable a169 : t99; mutable b169 : float } (* { #{ float#; float# }; float } *)
type t170 = { mutable a170 : t99; mutable b170 : float# } (* { #{ float#; float# }; float# } *)
type t171 = #{ a171 : float32#; b171 : int64# } (* #{ float32#; int64# } *)
type t172 = #{ a172 : string; b172 : int64# } (* #{ string; int64# } *)
type t173 = { mutable a173 : t171; mutable b173 : t172 } (* { #{ float32#; int64# }; #{ string; int64# } } *)

let () =
  (********************)
  (*   t0 = { int }   *)
  (********************)
  (* Deepening to (.a0) *)
  let idx : (t0, _) idx_mut = (.a0) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a0) *)
    let shallow : (t0, _) idx_mut = (.a0) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 1;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 1 failed %d" i;
  );

  (*************************)
  (*   t1 = { int; int }   *)
  (*************************)
  (* Deepening to (.a1) *)
  let idx : (t1, _) idx_mut = (.a1) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a1) *)
    let shallow : (t1, _) idx_mut = (.a1) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 2;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 2 failed %d" i;
  );
  (* Deepening to (.b1) *)
  let idx : (t1, _) idx_mut = (.b1) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b1) *)
    let shallow : (t1, _) idx_mut = (.b1) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 3;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 3 failed %d" i;
  );

  (******************************)
  (*   t2 = { int; int; int }   *)
  (******************************)
  (* Deepening to (.a2) *)
  let idx : (t2, _) idx_mut = (.a2) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a2) *)
    let shallow : (t2, _) idx_mut = (.a2) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 4;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 4 failed %d" i;
  );
  (* Deepening to (.b2) *)
  let idx : (t2, _) idx_mut = (.b2) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b2) *)
    let shallow : (t2, _) idx_mut = (.b2) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 5;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 5 failed %d" i;
  );
  (* Deepening to (.c2) *)
  let idx : (t2, _) idx_mut = (.c2) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c2) *)
    let shallow : (t2, _) idx_mut = (.c2) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 6;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 6 failed %d" i;
  );

  (*********************************)
  (*   t3 = { int; int; int32# }   *)
  (*********************************)
  (* Deepening to (.a3) *)
  let idx : (t3, _) idx_mut = (.a3) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a3) *)
    let shallow : (t3, _) idx_mut = (.a3) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 7;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 7 failed %d" i;
  );
  (* Deepening to (.b3) *)
  let idx : (t3, _) idx_mut = (.b3) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b3) *)
    let shallow : (t3, _) idx_mut = (.b3) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 8;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 8 failed %d" i;
  );
  (* Deepening to (.c3) *)
  let idx : (t3, _) idx_mut = (.c3) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c3) *)
    let shallow : (t3, _) idx_mut = (.c3) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 9;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 9 failed %d" i;
  );

  (********************************)
  (*   t4 = { int; int; float }   *)
  (********************************)
  (* Deepening to (.a4) *)
  let idx : (t4, _) idx_mut = (.a4) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a4) *)
    let shallow : (t4, _) idx_mut = (.a4) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 10;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 10 failed %d" i;
  );
  (* Deepening to (.b4) *)
  let idx : (t4, _) idx_mut = (.b4) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b4) *)
    let shallow : (t4, _) idx_mut = (.b4) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 11;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 11 failed %d" i;
  );
  (* Deepening to (.c4) *)
  let idx : (t4, _) idx_mut = (.c4) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c4) *)
    let shallow : (t4, _) idx_mut = (.c4) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 12;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 12 failed %d" i;
  );

  (***************************)
  (*   t5 = { int; int64 }   *)
  (***************************)
  (* Deepening to (.a5) *)
  let idx : (t5, _) idx_mut = (.a5) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a5) *)
    let shallow : (t5, _) idx_mut = (.a5) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 13;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 13 failed %d" i;
  );
  (* Deepening to (.b5) *)
  let idx : (t5, _) idx_mut = (.b5) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b5) *)
    let shallow : (t5, _) idx_mut = (.b5) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 14;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 14 failed %d" i;
  );

  (****************************)
  (*   t6 = { int; int64# }   *)
  (****************************)
  (* Deepening to (.a6) *)
  let idx : (t6, _) idx_mut = (.a6) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a6) *)
    let shallow : (t6, _) idx_mut = (.a6) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 15;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 15 failed %d" i;
  );
  (* Deepening to (.b6) *)
  let idx : (t6, _) idx_mut = (.b6) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b6) *)
    let shallow : (t6, _) idx_mut = (.b6) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 16;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 16 failed %d" i;
  );

  (****************************)
  (*   t7 = { int; int32# }   *)
  (****************************)
  (* Deepening to (.a7) *)
  let idx : (t7, _) idx_mut = (.a7) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a7) *)
    let shallow : (t7, _) idx_mut = (.a7) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 17;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 17 failed %d" i;
  );
  (* Deepening to (.b7) *)
  let idx : (t7, _) idx_mut = (.b7) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b7) *)
    let shallow : (t7, _) idx_mut = (.b7) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 18;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 18 failed %d" i;
  );

  (*********************************)
  (*   t8 = { int; int32#; int }   *)
  (*********************************)
  (* Deepening to (.a8) *)
  let idx : (t8, _) idx_mut = (.a8) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a8) *)
    let shallow : (t8, _) idx_mut = (.a8) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 19;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 19 failed %d" i;
  );
  (* Deepening to (.b8) *)
  let idx : (t8, _) idx_mut = (.b8) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b8) *)
    let shallow : (t8, _) idx_mut = (.b8) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 20;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 20 failed %d" i;
  );
  (* Deepening to (.c8) *)
  let idx : (t8, _) idx_mut = (.c8) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c8) *)
    let shallow : (t8, _) idx_mut = (.c8) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 21;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 21 failed %d" i;
  );

  (************************************)
  (*   t9 = { int; int32#; int32# }   *)
  (************************************)
  (* Deepening to (.a9) *)
  let idx : (t9, _) idx_mut = (.a9) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a9) *)
    let shallow : (t9, _) idx_mut = (.a9) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 22;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 22 failed %d" i;
  );
  (* Deepening to (.b9) *)
  let idx : (t9, _) idx_mut = (.b9) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b9) *)
    let shallow : (t9, _) idx_mut = (.b9) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 23;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 23 failed %d" i;
  );
  (* Deepening to (.c9) *)
  let idx : (t9, _) idx_mut = (.c9) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c9) *)
    let shallow : (t9, _) idx_mut = (.c9) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 24;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 24 failed %d" i;
  );

  (*********************************)
  (*   t10 = { int; nativeint# }   *)
  (*********************************)
  (* Deepening to (.a10) *)
  let idx : (t10, _) idx_mut = (.a10) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a10) *)
    let shallow : (t10, _) idx_mut = (.a10) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 25;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 25 failed %d" i;
  );
  (* Deepening to (.b10) *)
  let idx : (t10, _) idx_mut = (.b10) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b10) *)
    let shallow : (t10, _) idx_mut = (.b10) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 26;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 26 failed %d" i;
  );

  (****************************)
  (*   t11 = { int; float }   *)
  (****************************)
  (* Deepening to (.a11) *)
  let idx : (t11, _) idx_mut = (.a11) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a11) *)
    let shallow : (t11, _) idx_mut = (.a11) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 27;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 27 failed %d" i;
  );
  (* Deepening to (.b11) *)
  let idx : (t11, _) idx_mut = (.b11) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b11) *)
    let shallow : (t11, _) idx_mut = (.b11) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 28;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 28 failed %d" i;
  );

  (*********************************)
  (*   t12 = { int; float; int }   *)
  (*********************************)
  (* Deepening to (.a12) *)
  let idx : (t12, _) idx_mut = (.a12) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a12) *)
    let shallow : (t12, _) idx_mut = (.a12) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 29;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 29 failed %d" i;
  );
  (* Deepening to (.b12) *)
  let idx : (t12, _) idx_mut = (.b12) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b12) *)
    let shallow : (t12, _) idx_mut = (.b12) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 30;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 30 failed %d" i;
  );
  (* Deepening to (.c12) *)
  let idx : (t12, _) idx_mut = (.c12) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c12) *)
    let shallow : (t12, _) idx_mut = (.c12) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 31;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 31 failed %d" i;
  );

  (***********************************)
  (*   t13 = { int; float; float }   *)
  (***********************************)
  (* Deepening to (.a13) *)
  let idx : (t13, _) idx_mut = (.a13) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a13) *)
    let shallow : (t13, _) idx_mut = (.a13) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 32;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 32 failed %d" i;
  );
  (* Deepening to (.b13) *)
  let idx : (t13, _) idx_mut = (.b13) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b13) *)
    let shallow : (t13, _) idx_mut = (.b13) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 33;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 33 failed %d" i;
  );
  (* Deepening to (.c13) *)
  let idx : (t13, _) idx_mut = (.c13) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c13) *)
    let shallow : (t13, _) idx_mut = (.c13) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 34;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 34 failed %d" i;
  );

  (*******************************)
  (*   t15 = { int; #{ int } }   *)
  (*******************************)
  (* Deepening to (.a15) *)
  let idx : (t15, _) idx_mut = (.a15) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a15) *)
    let shallow : (t15, _) idx_mut = (.a15) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 35;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 35 failed %d" i;
  );
  (* Deepening to (.b15) *)
  let idx : (t15, _) idx_mut = (.b15) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b15) *)
    let shallow : (t15, _) idx_mut = (.b15) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 36;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 36 failed %d" i;
  );
  (* Deepening to (.b15.#a14) *)
  let idx : (t15, _) idx_mut = (.b15.#a14) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b15) *)
    let shallow : (t15, _) idx_mut = (.b15) in
    let deepened = (.idx_mut(shallow).#a14) in
    mark_test_run 37;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 37 failed %d" i;
    (* from (.b15.#a14) *)
    let shallow : (t15, _) idx_mut = (.b15.#a14) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 38;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 38 failed %d" i;
  );

  (************************************)
  (*   t17 = { int; #{ int; int } }   *)
  (************************************)
  (* Deepening to (.a17) *)
  let idx : (t17, _) idx_mut = (.a17) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a17) *)
    let shallow : (t17, _) idx_mut = (.a17) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 39;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 39 failed %d" i;
  );
  (* Deepening to (.b17) *)
  let idx : (t17, _) idx_mut = (.b17) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b17) *)
    let shallow : (t17, _) idx_mut = (.b17) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 40;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 40 failed %d" i;
  );
  (* Deepening to (.b17.#a16) *)
  let idx : (t17, _) idx_mut = (.b17.#a16) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b17) *)
    let shallow : (t17, _) idx_mut = (.b17) in
    let deepened = (.idx_mut(shallow).#a16) in
    mark_test_run 41;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 41 failed %d" i;
    (* from (.b17.#a16) *)
    let shallow : (t17, _) idx_mut = (.b17.#a16) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 42;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 42 failed %d" i;
  );
  (* Deepening to (.b17.#b16) *)
  let idx : (t17, _) idx_mut = (.b17.#b16) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b17) *)
    let shallow : (t17, _) idx_mut = (.b17) in
    let deepened = (.idx_mut(shallow).#b16) in
    mark_test_run 43;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 43 failed %d" i;
    (* from (.b17.#b16) *)
    let shallow : (t17, _) idx_mut = (.b17.#b16) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 44;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 44 failed %d" i;
  );

  (***************************************)
  (*   t19 = { int; #{ int; int32# } }   *)
  (***************************************)
  (* Deepening to (.a19) *)
  let idx : (t19, _) idx_mut = (.a19) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a19) *)
    let shallow : (t19, _) idx_mut = (.a19) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 45;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 45 failed %d" i;
  );
  (* Deepening to (.b19) *)
  let idx : (t19, _) idx_mut = (.b19) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b19) *)
    let shallow : (t19, _) idx_mut = (.b19) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 46;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 46 failed %d" i;
  );
  (* Deepening to (.b19.#a18) *)
  let idx : (t19, _) idx_mut = (.b19.#a18) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b19) *)
    let shallow : (t19, _) idx_mut = (.b19) in
    let deepened = (.idx_mut(shallow).#a18) in
    mark_test_run 47;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 47 failed %d" i;
    (* from (.b19.#a18) *)
    let shallow : (t19, _) idx_mut = (.b19.#a18) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 48;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 48 failed %d" i;
  );
  (* Deepening to (.b19.#b18) *)
  let idx : (t19, _) idx_mut = (.b19.#b18) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b19) *)
    let shallow : (t19, _) idx_mut = (.b19) in
    let deepened = (.idx_mut(shallow).#b18) in
    mark_test_run 49;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 49 failed %d" i;
    (* from (.b19.#b18) *)
    let shallow : (t19, _) idx_mut = (.b19.#b18) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 50;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 50 failed %d" i;
  );

  (**************************************)
  (*   t21 = { int; #{ int; float } }   *)
  (**************************************)
  (* Deepening to (.a21) *)
  let idx : (t21, _) idx_mut = (.a21) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a21) *)
    let shallow : (t21, _) idx_mut = (.a21) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 51;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 51 failed %d" i;
  );
  (* Deepening to (.b21) *)
  let idx : (t21, _) idx_mut = (.b21) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b21) *)
    let shallow : (t21, _) idx_mut = (.b21) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 52;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 52 failed %d" i;
  );
  (* Deepening to (.b21.#a20) *)
  let idx : (t21, _) idx_mut = (.b21.#a20) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b21) *)
    let shallow : (t21, _) idx_mut = (.b21) in
    let deepened = (.idx_mut(shallow).#a20) in
    mark_test_run 53;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 53 failed %d" i;
    (* from (.b21.#a20) *)
    let shallow : (t21, _) idx_mut = (.b21.#a20) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 54;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 54 failed %d" i;
  );
  (* Deepening to (.b21.#b20) *)
  let idx : (t21, _) idx_mut = (.b21.#b20) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b21) *)
    let shallow : (t21, _) idx_mut = (.b21) in
    let deepened = (.idx_mut(shallow).#b20) in
    mark_test_run 55;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 55 failed %d" i;
    (* from (.b21.#b20) *)
    let shallow : (t21, _) idx_mut = (.b21.#b20) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 56;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 56 failed %d" i;
  );

  (**********************************)
  (*   t23 = { int; #{ int32# } }   *)
  (**********************************)
  (* Deepening to (.a23) *)
  let idx : (t23, _) idx_mut = (.a23) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a23) *)
    let shallow : (t23, _) idx_mut = (.a23) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 57;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 57 failed %d" i;
  );
  (* Deepening to (.b23) *)
  let idx : (t23, _) idx_mut = (.b23) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b23) *)
    let shallow : (t23, _) idx_mut = (.b23) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 58;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 58 failed %d" i;
  );
  (* Deepening to (.b23.#a22) *)
  let idx : (t23, _) idx_mut = (.b23.#a22) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b23) *)
    let shallow : (t23, _) idx_mut = (.b23) in
    let deepened = (.idx_mut(shallow).#a22) in
    mark_test_run 59;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 59 failed %d" i;
    (* from (.b23.#a22) *)
    let shallow : (t23, _) idx_mut = (.b23.#a22) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 60;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 60 failed %d" i;
  );

  (***************************************)
  (*   t25 = { int; #{ int32#; int } }   *)
  (***************************************)
  (* Deepening to (.a25) *)
  let idx : (t25, _) idx_mut = (.a25) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a25) *)
    let shallow : (t25, _) idx_mut = (.a25) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 61;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 61 failed %d" i;
  );
  (* Deepening to (.b25) *)
  let idx : (t25, _) idx_mut = (.b25) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b25) *)
    let shallow : (t25, _) idx_mut = (.b25) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 62;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 62 failed %d" i;
  );
  (* Deepening to (.b25.#a24) *)
  let idx : (t25, _) idx_mut = (.b25.#a24) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b25) *)
    let shallow : (t25, _) idx_mut = (.b25) in
    let deepened = (.idx_mut(shallow).#a24) in
    mark_test_run 63;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 63 failed %d" i;
    (* from (.b25.#a24) *)
    let shallow : (t25, _) idx_mut = (.b25.#a24) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 64;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 64 failed %d" i;
  );
  (* Deepening to (.b25.#b24) *)
  let idx : (t25, _) idx_mut = (.b25.#b24) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b25) *)
    let shallow : (t25, _) idx_mut = (.b25) in
    let deepened = (.idx_mut(shallow).#b24) in
    mark_test_run 65;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 65 failed %d" i;
    (* from (.b25.#b24) *)
    let shallow : (t25, _) idx_mut = (.b25.#b24) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 66;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 66 failed %d" i;
  );

  (******************************************)
  (*   t27 = { int; #{ int32#; int32# } }   *)
  (******************************************)
  (* Deepening to (.a27) *)
  let idx : (t27, _) idx_mut = (.a27) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a27) *)
    let shallow : (t27, _) idx_mut = (.a27) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 67;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 67 failed %d" i;
  );
  (* Deepening to (.b27) *)
  let idx : (t27, _) idx_mut = (.b27) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b27) *)
    let shallow : (t27, _) idx_mut = (.b27) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 68;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 68 failed %d" i;
  );
  (* Deepening to (.b27.#a26) *)
  let idx : (t27, _) idx_mut = (.b27.#a26) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b27) *)
    let shallow : (t27, _) idx_mut = (.b27) in
    let deepened = (.idx_mut(shallow).#a26) in
    mark_test_run 69;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 69 failed %d" i;
    (* from (.b27.#a26) *)
    let shallow : (t27, _) idx_mut = (.b27.#a26) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 70;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 70 failed %d" i;
  );
  (* Deepening to (.b27.#b26) *)
  let idx : (t27, _) idx_mut = (.b27.#b26) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b27) *)
    let shallow : (t27, _) idx_mut = (.b27) in
    let deepened = (.idx_mut(shallow).#b26) in
    mark_test_run 71;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 71 failed %d" i;
    (* from (.b27.#b26) *)
    let shallow : (t27, _) idx_mut = (.b27.#b26) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 72;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 72 failed %d" i;
  );

  (*********************************)
  (*   t29 = { int; #{ float } }   *)
  (*********************************)
  (* Deepening to (.a29) *)
  let idx : (t29, _) idx_mut = (.a29) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a29) *)
    let shallow : (t29, _) idx_mut = (.a29) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 73;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 73 failed %d" i;
  );
  (* Deepening to (.b29) *)
  let idx : (t29, _) idx_mut = (.b29) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b29) *)
    let shallow : (t29, _) idx_mut = (.b29) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 74;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 74 failed %d" i;
  );
  (* Deepening to (.b29.#a28) *)
  let idx : (t29, _) idx_mut = (.b29.#a28) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b29) *)
    let shallow : (t29, _) idx_mut = (.b29) in
    let deepened = (.idx_mut(shallow).#a28) in
    mark_test_run 75;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 75 failed %d" i;
    (* from (.b29.#a28) *)
    let shallow : (t29, _) idx_mut = (.b29.#a28) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 76;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 76 failed %d" i;
  );

  (**************************************)
  (*   t31 = { int; #{ float; int } }   *)
  (**************************************)
  (* Deepening to (.a31) *)
  let idx : (t31, _) idx_mut = (.a31) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a31) *)
    let shallow : (t31, _) idx_mut = (.a31) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 77;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 77 failed %d" i;
  );
  (* Deepening to (.b31) *)
  let idx : (t31, _) idx_mut = (.b31) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b31) *)
    let shallow : (t31, _) idx_mut = (.b31) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 78;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 78 failed %d" i;
  );
  (* Deepening to (.b31.#a30) *)
  let idx : (t31, _) idx_mut = (.b31.#a30) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b31) *)
    let shallow : (t31, _) idx_mut = (.b31) in
    let deepened = (.idx_mut(shallow).#a30) in
    mark_test_run 79;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 79 failed %d" i;
    (* from (.b31.#a30) *)
    let shallow : (t31, _) idx_mut = (.b31.#a30) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 80;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 80 failed %d" i;
  );
  (* Deepening to (.b31.#b30) *)
  let idx : (t31, _) idx_mut = (.b31.#b30) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b31) *)
    let shallow : (t31, _) idx_mut = (.b31) in
    let deepened = (.idx_mut(shallow).#b30) in
    mark_test_run 81;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 81 failed %d" i;
    (* from (.b31.#b30) *)
    let shallow : (t31, _) idx_mut = (.b31.#b30) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 82;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 82 failed %d" i;
  );

  (****************************************)
  (*   t33 = { int; #{ float; float } }   *)
  (****************************************)
  (* Deepening to (.a33) *)
  let idx : (t33, _) idx_mut = (.a33) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a33) *)
    let shallow : (t33, _) idx_mut = (.a33) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 83;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 83 failed %d" i;
  );
  (* Deepening to (.b33) *)
  let idx : (t33, _) idx_mut = (.b33) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b33) *)
    let shallow : (t33, _) idx_mut = (.b33) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 84;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 84 failed %d" i;
  );
  (* Deepening to (.b33.#a32) *)
  let idx : (t33, _) idx_mut = (.b33.#a32) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b33) *)
    let shallow : (t33, _) idx_mut = (.b33) in
    let deepened = (.idx_mut(shallow).#a32) in
    mark_test_run 85;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 85 failed %d" i;
    (* from (.b33.#a32) *)
    let shallow : (t33, _) idx_mut = (.b33.#a32) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 86;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 86 failed %d" i;
  );
  (* Deepening to (.b33.#b32) *)
  let idx : (t33, _) idx_mut = (.b33.#b32) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b33) *)
    let shallow : (t33, _) idx_mut = (.b33) in
    let deepened = (.idx_mut(shallow).#b32) in
    mark_test_run 87;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 87 failed %d" i;
    (* from (.b33.#b32) *)
    let shallow : (t33, _) idx_mut = (.b33.#b32) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 88;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 88 failed %d" i;
  );

  (***********************)
  (*   t34 = { int64 }   *)
  (***********************)
  (* Deepening to (.a34) *)
  let idx : (t34, _) idx_mut = (.a34) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a34) *)
    let shallow : (t34, _) idx_mut = (.a34) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 89;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 89 failed %d" i;
  );

  (****************************)
  (*   t35 = { int64; int }   *)
  (****************************)
  (* Deepening to (.a35) *)
  let idx : (t35, _) idx_mut = (.a35) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a35) *)
    let shallow : (t35, _) idx_mut = (.a35) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 90;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 90 failed %d" i;
  );
  (* Deepening to (.b35) *)
  let idx : (t35, _) idx_mut = (.b35) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b35) *)
    let shallow : (t35, _) idx_mut = (.b35) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 91;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 91 failed %d" i;
  );

  (******************************)
  (*   t36 = { int64; int64 }   *)
  (******************************)
  (* Deepening to (.a36) *)
  let idx : (t36, _) idx_mut = (.a36) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a36) *)
    let shallow : (t36, _) idx_mut = (.a36) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 92;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 92 failed %d" i;
  );
  (* Deepening to (.b36) *)
  let idx : (t36, _) idx_mut = (.b36) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b36) *)
    let shallow : (t36, _) idx_mut = (.b36) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 93;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 93 failed %d" i;
  );

  (*******************************)
  (*   t37 = { int64; int64# }   *)
  (*******************************)
  (* Deepening to (.a37) *)
  let idx : (t37, _) idx_mut = (.a37) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a37) *)
    let shallow : (t37, _) idx_mut = (.a37) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 94;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 94 failed %d" i;
  );
  (* Deepening to (.b37) *)
  let idx : (t37, _) idx_mut = (.b37) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b37) *)
    let shallow : (t37, _) idx_mut = (.b37) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 95;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 95 failed %d" i;
  );

  (*******************************)
  (*   t38 = { int64; int32# }   *)
  (*******************************)
  (* Deepening to (.a38) *)
  let idx : (t38, _) idx_mut = (.a38) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a38) *)
    let shallow : (t38, _) idx_mut = (.a38) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 96;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 96 failed %d" i;
  );
  (* Deepening to (.b38) *)
  let idx : (t38, _) idx_mut = (.b38) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b38) *)
    let shallow : (t38, _) idx_mut = (.b38) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 97;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 97 failed %d" i;
  );

  (***********************************)
  (*   t39 = { int64; nativeint# }   *)
  (***********************************)
  (* Deepening to (.a39) *)
  let idx : (t39, _) idx_mut = (.a39) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a39) *)
    let shallow : (t39, _) idx_mut = (.a39) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 98;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 98 failed %d" i;
  );
  (* Deepening to (.b39) *)
  let idx : (t39, _) idx_mut = (.b39) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b39) *)
    let shallow : (t39, _) idx_mut = (.b39) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 99;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 99 failed %d" i;
  );

  (******************************)
  (*   t40 = { int64; float }   *)
  (******************************)
  (* Deepening to (.a40) *)
  let idx : (t40, _) idx_mut = (.a40) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a40) *)
    let shallow : (t40, _) idx_mut = (.a40) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 100;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 100 failed %d" i;
  );
  (* Deepening to (.b40) *)
  let idx : (t40, _) idx_mut = (.b40) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b40) *)
    let shallow : (t40, _) idx_mut = (.b40) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 101;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 101 failed %d" i;
  );

  (************************)
  (*   t41 = { int64# }   *)
  (************************)
  (* Deepening to (.a41) *)
  let idx : (t41, _) idx_mut = (.a41) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a41) *)
    let shallow : (t41, _) idx_mut = (.a41) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 102;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 102 failed %d" i;
  );

  (*****************************)
  (*   t42 = { int64#; int }   *)
  (*****************************)
  (* Deepening to (.a42) *)
  let idx : (t42, _) idx_mut = (.a42) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a42) *)
    let shallow : (t42, _) idx_mut = (.a42) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 103;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 103 failed %d" i;
  );
  (* Deepening to (.b42) *)
  let idx : (t42, _) idx_mut = (.b42) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b42) *)
    let shallow : (t42, _) idx_mut = (.b42) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 104;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 104 failed %d" i;
  );

  (*******************************)
  (*   t43 = { int64#; int64 }   *)
  (*******************************)
  (* Deepening to (.a43) *)
  let idx : (t43, _) idx_mut = (.a43) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a43) *)
    let shallow : (t43, _) idx_mut = (.a43) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 105;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 105 failed %d" i;
  );
  (* Deepening to (.b43) *)
  let idx : (t43, _) idx_mut = (.b43) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b43) *)
    let shallow : (t43, _) idx_mut = (.b43) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 106;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 106 failed %d" i;
  );

  (********************************)
  (*   t44 = { int64#; int64# }   *)
  (********************************)
  (* Deepening to (.a44) *)
  let idx : (t44, _) idx_mut = (.a44) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a44) *)
    let shallow : (t44, _) idx_mut = (.a44) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 107;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 107 failed %d" i;
  );
  (* Deepening to (.b44) *)
  let idx : (t44, _) idx_mut = (.b44) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b44) *)
    let shallow : (t44, _) idx_mut = (.b44) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 108;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 108 failed %d" i;
  );

  (********************************)
  (*   t45 = { int64#; int32# }   *)
  (********************************)
  (* Deepening to (.a45) *)
  let idx : (t45, _) idx_mut = (.a45) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a45) *)
    let shallow : (t45, _) idx_mut = (.a45) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 109;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 109 failed %d" i;
  );
  (* Deepening to (.b45) *)
  let idx : (t45, _) idx_mut = (.b45) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b45) *)
    let shallow : (t45, _) idx_mut = (.b45) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 110;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 110 failed %d" i;
  );

  (************************************)
  (*   t46 = { int64#; nativeint# }   *)
  (************************************)
  (* Deepening to (.a46) *)
  let idx : (t46, _) idx_mut = (.a46) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a46) *)
    let shallow : (t46, _) idx_mut = (.a46) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 111;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 111 failed %d" i;
  );
  (* Deepening to (.b46) *)
  let idx : (t46, _) idx_mut = (.b46) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b46) *)
    let shallow : (t46, _) idx_mut = (.b46) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 112;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 112 failed %d" i;
  );

  (*******************************)
  (*   t47 = { int64#; float }   *)
  (*******************************)
  (* Deepening to (.a47) *)
  let idx : (t47, _) idx_mut = (.a47) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a47) *)
    let shallow : (t47, _) idx_mut = (.a47) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 113;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 113 failed %d" i;
  );
  (* Deepening to (.b47) *)
  let idx : (t47, _) idx_mut = (.b47) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b47) *)
    let shallow : (t47, _) idx_mut = (.b47) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 114;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 114 failed %d" i;
  );

  (************************)
  (*   t48 = { int32# }   *)
  (************************)
  (* Deepening to (.a48) *)
  let idx : (t48, _) idx_mut = (.a48) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a48) *)
    let shallow : (t48, _) idx_mut = (.a48) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 115;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 115 failed %d" i;
  );

  (*****************************)
  (*   t49 = { int32#; int }   *)
  (*****************************)
  (* Deepening to (.a49) *)
  let idx : (t49, _) idx_mut = (.a49) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a49) *)
    let shallow : (t49, _) idx_mut = (.a49) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 116;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 116 failed %d" i;
  );
  (* Deepening to (.b49) *)
  let idx : (t49, _) idx_mut = (.b49) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b49) *)
    let shallow : (t49, _) idx_mut = (.b49) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 117;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 117 failed %d" i;
  );

  (**********************************)
  (*   t50 = { int32#; int; int }   *)
  (**********************************)
  (* Deepening to (.a50) *)
  let idx : (t50, _) idx_mut = (.a50) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a50) *)
    let shallow : (t50, _) idx_mut = (.a50) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 118;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 118 failed %d" i;
  );
  (* Deepening to (.b50) *)
  let idx : (t50, _) idx_mut = (.b50) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b50) *)
    let shallow : (t50, _) idx_mut = (.b50) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 119;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 119 failed %d" i;
  );
  (* Deepening to (.c50) *)
  let idx : (t50, _) idx_mut = (.c50) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c50) *)
    let shallow : (t50, _) idx_mut = (.c50) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 120;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 120 failed %d" i;
  );

  (*************************************)
  (*   t51 = { int32#; int; int32# }   *)
  (*************************************)
  (* Deepening to (.a51) *)
  let idx : (t51, _) idx_mut = (.a51) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a51) *)
    let shallow : (t51, _) idx_mut = (.a51) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 121;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 121 failed %d" i;
  );
  (* Deepening to (.b51) *)
  let idx : (t51, _) idx_mut = (.b51) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b51) *)
    let shallow : (t51, _) idx_mut = (.b51) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 122;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 122 failed %d" i;
  );
  (* Deepening to (.c51) *)
  let idx : (t51, _) idx_mut = (.c51) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c51) *)
    let shallow : (t51, _) idx_mut = (.c51) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 123;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 123 failed %d" i;
  );

  (*******************************)
  (*   t52 = { int32#; int64 }   *)
  (*******************************)
  (* Deepening to (.a52) *)
  let idx : (t52, _) idx_mut = (.a52) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a52) *)
    let shallow : (t52, _) idx_mut = (.a52) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 124;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 124 failed %d" i;
  );
  (* Deepening to (.b52) *)
  let idx : (t52, _) idx_mut = (.b52) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b52) *)
    let shallow : (t52, _) idx_mut = (.b52) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 125;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 125 failed %d" i;
  );

  (********************************)
  (*   t53 = { int32#; int64# }   *)
  (********************************)
  (* Deepening to (.a53) *)
  let idx : (t53, _) idx_mut = (.a53) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a53) *)
    let shallow : (t53, _) idx_mut = (.a53) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 126;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 126 failed %d" i;
  );
  (* Deepening to (.b53) *)
  let idx : (t53, _) idx_mut = (.b53) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b53) *)
    let shallow : (t53, _) idx_mut = (.b53) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 127;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 127 failed %d" i;
  );

  (********************************)
  (*   t54 = { int32#; int32# }   *)
  (********************************)
  (* Deepening to (.a54) *)
  let idx : (t54, _) idx_mut = (.a54) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a54) *)
    let shallow : (t54, _) idx_mut = (.a54) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 128;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 128 failed %d" i;
  );
  (* Deepening to (.b54) *)
  let idx : (t54, _) idx_mut = (.b54) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b54) *)
    let shallow : (t54, _) idx_mut = (.b54) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 129;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 129 failed %d" i;
  );

  (*************************************)
  (*   t55 = { int32#; int32#; int }   *)
  (*************************************)
  (* Deepening to (.a55) *)
  let idx : (t55, _) idx_mut = (.a55) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a55) *)
    let shallow : (t55, _) idx_mut = (.a55) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 130;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 130 failed %d" i;
  );
  (* Deepening to (.b55) *)
  let idx : (t55, _) idx_mut = (.b55) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b55) *)
    let shallow : (t55, _) idx_mut = (.b55) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 131;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 131 failed %d" i;
  );
  (* Deepening to (.c55) *)
  let idx : (t55, _) idx_mut = (.c55) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c55) *)
    let shallow : (t55, _) idx_mut = (.c55) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 132;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 132 failed %d" i;
  );

  (****************************************)
  (*   t56 = { int32#; int32#; int32# }   *)
  (****************************************)
  (* Deepening to (.a56) *)
  let idx : (t56, _) idx_mut = (.a56) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a56) *)
    let shallow : (t56, _) idx_mut = (.a56) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 133;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 133 failed %d" i;
  );
  (* Deepening to (.b56) *)
  let idx : (t56, _) idx_mut = (.b56) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b56) *)
    let shallow : (t56, _) idx_mut = (.b56) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 134;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 134 failed %d" i;
  );
  (* Deepening to (.c56) *)
  let idx : (t56, _) idx_mut = (.c56) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c56) *)
    let shallow : (t56, _) idx_mut = (.c56) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 135;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 135 failed %d" i;
  );

  (************************************)
  (*   t57 = { int32#; nativeint# }   *)
  (************************************)
  (* Deepening to (.a57) *)
  let idx : (t57, _) idx_mut = (.a57) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a57) *)
    let shallow : (t57, _) idx_mut = (.a57) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 136;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 136 failed %d" i;
  );
  (* Deepening to (.b57) *)
  let idx : (t57, _) idx_mut = (.b57) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b57) *)
    let shallow : (t57, _) idx_mut = (.b57) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 137;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 137 failed %d" i;
  );

  (*******************************)
  (*   t58 = { int32#; float }   *)
  (*******************************)
  (* Deepening to (.a58) *)
  let idx : (t58, _) idx_mut = (.a58) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a58) *)
    let shallow : (t58, _) idx_mut = (.a58) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 138;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 138 failed %d" i;
  );
  (* Deepening to (.b58) *)
  let idx : (t58, _) idx_mut = (.b58) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b58) *)
    let shallow : (t58, _) idx_mut = (.b58) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 139;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 139 failed %d" i;
  );

  (**********************************)
  (*   t59 = { int32#; #{ int } }   *)
  (**********************************)
  (* Deepening to (.a59) *)
  let idx : (t59, _) idx_mut = (.a59) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a59) *)
    let shallow : (t59, _) idx_mut = (.a59) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 140;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 140 failed %d" i;
  );
  (* Deepening to (.b59) *)
  let idx : (t59, _) idx_mut = (.b59) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b59) *)
    let shallow : (t59, _) idx_mut = (.b59) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 141;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 141 failed %d" i;
  );
  (* Deepening to (.b59.#a14) *)
  let idx : (t59, _) idx_mut = (.b59.#a14) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b59) *)
    let shallow : (t59, _) idx_mut = (.b59) in
    let deepened = (.idx_mut(shallow).#a14) in
    mark_test_run 142;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 142 failed %d" i;
    (* from (.b59.#a14) *)
    let shallow : (t59, _) idx_mut = (.b59.#a14) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 143;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 143 failed %d" i;
  );

  (***************************************)
  (*   t60 = { int32#; #{ int; int } }   *)
  (***************************************)
  (* Deepening to (.a60) *)
  let idx : (t60, _) idx_mut = (.a60) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a60) *)
    let shallow : (t60, _) idx_mut = (.a60) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 144;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 144 failed %d" i;
  );
  (* Deepening to (.b60) *)
  let idx : (t60, _) idx_mut = (.b60) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b60) *)
    let shallow : (t60, _) idx_mut = (.b60) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 145;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 145 failed %d" i;
  );
  (* Deepening to (.b60.#a16) *)
  let idx : (t60, _) idx_mut = (.b60.#a16) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b60) *)
    let shallow : (t60, _) idx_mut = (.b60) in
    let deepened = (.idx_mut(shallow).#a16) in
    mark_test_run 146;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 146 failed %d" i;
    (* from (.b60.#a16) *)
    let shallow : (t60, _) idx_mut = (.b60.#a16) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 147;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 147 failed %d" i;
  );
  (* Deepening to (.b60.#b16) *)
  let idx : (t60, _) idx_mut = (.b60.#b16) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b60) *)
    let shallow : (t60, _) idx_mut = (.b60) in
    let deepened = (.idx_mut(shallow).#b16) in
    mark_test_run 148;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 148 failed %d" i;
    (* from (.b60.#b16) *)
    let shallow : (t60, _) idx_mut = (.b60.#b16) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 149;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 149 failed %d" i;
  );

  (******************************************)
  (*   t61 = { int32#; #{ int; int32# } }   *)
  (******************************************)
  (* Deepening to (.a61) *)
  let idx : (t61, _) idx_mut = (.a61) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a61) *)
    let shallow : (t61, _) idx_mut = (.a61) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 150;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 150 failed %d" i;
  );
  (* Deepening to (.b61) *)
  let idx : (t61, _) idx_mut = (.b61) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b61) *)
    let shallow : (t61, _) idx_mut = (.b61) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 151;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 151 failed %d" i;
  );
  (* Deepening to (.b61.#a18) *)
  let idx : (t61, _) idx_mut = (.b61.#a18) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b61) *)
    let shallow : (t61, _) idx_mut = (.b61) in
    let deepened = (.idx_mut(shallow).#a18) in
    mark_test_run 152;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 152 failed %d" i;
    (* from (.b61.#a18) *)
    let shallow : (t61, _) idx_mut = (.b61.#a18) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 153;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 153 failed %d" i;
  );
  (* Deepening to (.b61.#b18) *)
  let idx : (t61, _) idx_mut = (.b61.#b18) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b61) *)
    let shallow : (t61, _) idx_mut = (.b61) in
    let deepened = (.idx_mut(shallow).#b18) in
    mark_test_run 154;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 154 failed %d" i;
    (* from (.b61.#b18) *)
    let shallow : (t61, _) idx_mut = (.b61.#b18) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 155;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 155 failed %d" i;
  );

  (*************************************)
  (*   t62 = { int32#; #{ int32# } }   *)
  (*************************************)
  (* Deepening to (.a62) *)
  let idx : (t62, _) idx_mut = (.a62) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a62) *)
    let shallow : (t62, _) idx_mut = (.a62) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 156;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 156 failed %d" i;
  );
  (* Deepening to (.b62) *)
  let idx : (t62, _) idx_mut = (.b62) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b62) *)
    let shallow : (t62, _) idx_mut = (.b62) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 157;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 157 failed %d" i;
  );
  (* Deepening to (.b62.#a22) *)
  let idx : (t62, _) idx_mut = (.b62.#a22) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b62) *)
    let shallow : (t62, _) idx_mut = (.b62) in
    let deepened = (.idx_mut(shallow).#a22) in
    mark_test_run 158;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 158 failed %d" i;
    (* from (.b62.#a22) *)
    let shallow : (t62, _) idx_mut = (.b62.#a22) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 159;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 159 failed %d" i;
  );

  (******************************************)
  (*   t63 = { int32#; #{ int32#; int } }   *)
  (******************************************)
  (* Deepening to (.a63) *)
  let idx : (t63, _) idx_mut = (.a63) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a63) *)
    let shallow : (t63, _) idx_mut = (.a63) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 160;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 160 failed %d" i;
  );
  (* Deepening to (.b63) *)
  let idx : (t63, _) idx_mut = (.b63) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b63) *)
    let shallow : (t63, _) idx_mut = (.b63) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 161;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 161 failed %d" i;
  );
  (* Deepening to (.b63.#a24) *)
  let idx : (t63, _) idx_mut = (.b63.#a24) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b63) *)
    let shallow : (t63, _) idx_mut = (.b63) in
    let deepened = (.idx_mut(shallow).#a24) in
    mark_test_run 162;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 162 failed %d" i;
    (* from (.b63.#a24) *)
    let shallow : (t63, _) idx_mut = (.b63.#a24) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 163;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 163 failed %d" i;
  );
  (* Deepening to (.b63.#b24) *)
  let idx : (t63, _) idx_mut = (.b63.#b24) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b63) *)
    let shallow : (t63, _) idx_mut = (.b63) in
    let deepened = (.idx_mut(shallow).#b24) in
    mark_test_run 164;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 164 failed %d" i;
    (* from (.b63.#b24) *)
    let shallow : (t63, _) idx_mut = (.b63.#b24) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 165;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 165 failed %d" i;
  );

  (*********************************************)
  (*   t64 = { int32#; #{ int32#; int32# } }   *)
  (*********************************************)
  (* Deepening to (.a64) *)
  let idx : (t64, _) idx_mut = (.a64) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a64) *)
    let shallow : (t64, _) idx_mut = (.a64) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 166;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 166 failed %d" i;
  );
  (* Deepening to (.b64) *)
  let idx : (t64, _) idx_mut = (.b64) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b64) *)
    let shallow : (t64, _) idx_mut = (.b64) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 167;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 167 failed %d" i;
  );
  (* Deepening to (.b64.#a26) *)
  let idx : (t64, _) idx_mut = (.b64.#a26) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b64) *)
    let shallow : (t64, _) idx_mut = (.b64) in
    let deepened = (.idx_mut(shallow).#a26) in
    mark_test_run 168;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 168 failed %d" i;
    (* from (.b64.#a26) *)
    let shallow : (t64, _) idx_mut = (.b64.#a26) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 169;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 169 failed %d" i;
  );
  (* Deepening to (.b64.#b26) *)
  let idx : (t64, _) idx_mut = (.b64.#b26) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b64) *)
    let shallow : (t64, _) idx_mut = (.b64) in
    let deepened = (.idx_mut(shallow).#b26) in
    mark_test_run 170;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 170 failed %d" i;
    (* from (.b64.#b26) *)
    let shallow : (t64, _) idx_mut = (.b64.#b26) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 171;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 171 failed %d" i;
  );

  (****************************)
  (*   t65 = { nativeint# }   *)
  (****************************)
  (* Deepening to (.a65) *)
  let idx : (t65, _) idx_mut = (.a65) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a65) *)
    let shallow : (t65, _) idx_mut = (.a65) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 172;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 172 failed %d" i;
  );

  (*********************************)
  (*   t66 = { nativeint#; int }   *)
  (*********************************)
  (* Deepening to (.a66) *)
  let idx : (t66, _) idx_mut = (.a66) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a66) *)
    let shallow : (t66, _) idx_mut = (.a66) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 173;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 173 failed %d" i;
  );
  (* Deepening to (.b66) *)
  let idx : (t66, _) idx_mut = (.b66) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b66) *)
    let shallow : (t66, _) idx_mut = (.b66) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 174;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 174 failed %d" i;
  );

  (***********************************)
  (*   t67 = { nativeint#; int64 }   *)
  (***********************************)
  (* Deepening to (.a67) *)
  let idx : (t67, _) idx_mut = (.a67) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a67) *)
    let shallow : (t67, _) idx_mut = (.a67) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 175;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 175 failed %d" i;
  );
  (* Deepening to (.b67) *)
  let idx : (t67, _) idx_mut = (.b67) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b67) *)
    let shallow : (t67, _) idx_mut = (.b67) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 176;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 176 failed %d" i;
  );

  (************************************)
  (*   t68 = { nativeint#; int64# }   *)
  (************************************)
  (* Deepening to (.a68) *)
  let idx : (t68, _) idx_mut = (.a68) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a68) *)
    let shallow : (t68, _) idx_mut = (.a68) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 177;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 177 failed %d" i;
  );
  (* Deepening to (.b68) *)
  let idx : (t68, _) idx_mut = (.b68) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b68) *)
    let shallow : (t68, _) idx_mut = (.b68) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 178;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 178 failed %d" i;
  );

  (************************************)
  (*   t69 = { nativeint#; int32# }   *)
  (************************************)
  (* Deepening to (.a69) *)
  let idx : (t69, _) idx_mut = (.a69) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a69) *)
    let shallow : (t69, _) idx_mut = (.a69) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 179;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 179 failed %d" i;
  );
  (* Deepening to (.b69) *)
  let idx : (t69, _) idx_mut = (.b69) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b69) *)
    let shallow : (t69, _) idx_mut = (.b69) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 180;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 180 failed %d" i;
  );

  (****************************************)
  (*   t70 = { nativeint#; nativeint# }   *)
  (****************************************)
  (* Deepening to (.a70) *)
  let idx : (t70, _) idx_mut = (.a70) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a70) *)
    let shallow : (t70, _) idx_mut = (.a70) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 181;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 181 failed %d" i;
  );
  (* Deepening to (.b70) *)
  let idx : (t70, _) idx_mut = (.b70) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b70) *)
    let shallow : (t70, _) idx_mut = (.b70) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 182;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 182 failed %d" i;
  );

  (***********************************)
  (*   t71 = { nativeint#; float }   *)
  (***********************************)
  (* Deepening to (.a71) *)
  let idx : (t71, _) idx_mut = (.a71) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a71) *)
    let shallow : (t71, _) idx_mut = (.a71) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 183;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 183 failed %d" i;
  );
  (* Deepening to (.b71) *)
  let idx : (t71, _) idx_mut = (.b71) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b71) *)
    let shallow : (t71, _) idx_mut = (.b71) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 184;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 184 failed %d" i;
  );

  (***********************)
  (*   t72 = { float }   *)
  (***********************)
  (* Deepening to (.a72) *)
  let idx : (t72, _) idx_mut = (.a72) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a72) *)
    let shallow : (t72, _) idx_mut = (.a72) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 185;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 185 failed %d" i;
  );

  (****************************)
  (*   t73 = { float; int }   *)
  (****************************)
  (* Deepening to (.a73) *)
  let idx : (t73, _) idx_mut = (.a73) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a73) *)
    let shallow : (t73, _) idx_mut = (.a73) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 186;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 186 failed %d" i;
  );
  (* Deepening to (.b73) *)
  let idx : (t73, _) idx_mut = (.b73) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b73) *)
    let shallow : (t73, _) idx_mut = (.b73) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 187;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 187 failed %d" i;
  );

  (*********************************)
  (*   t74 = { float; int; int }   *)
  (*********************************)
  (* Deepening to (.a74) *)
  let idx : (t74, _) idx_mut = (.a74) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a74) *)
    let shallow : (t74, _) idx_mut = (.a74) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 188;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 188 failed %d" i;
  );
  (* Deepening to (.b74) *)
  let idx : (t74, _) idx_mut = (.b74) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b74) *)
    let shallow : (t74, _) idx_mut = (.b74) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 189;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 189 failed %d" i;
  );
  (* Deepening to (.c74) *)
  let idx : (t74, _) idx_mut = (.c74) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c74) *)
    let shallow : (t74, _) idx_mut = (.c74) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 190;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 190 failed %d" i;
  );

  (***********************************)
  (*   t75 = { float; int; float }   *)
  (***********************************)
  (* Deepening to (.a75) *)
  let idx : (t75, _) idx_mut = (.a75) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a75) *)
    let shallow : (t75, _) idx_mut = (.a75) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 191;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 191 failed %d" i;
  );
  (* Deepening to (.b75) *)
  let idx : (t75, _) idx_mut = (.b75) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b75) *)
    let shallow : (t75, _) idx_mut = (.b75) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 192;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 192 failed %d" i;
  );
  (* Deepening to (.c75) *)
  let idx : (t75, _) idx_mut = (.c75) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c75) *)
    let shallow : (t75, _) idx_mut = (.c75) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 193;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 193 failed %d" i;
  );

  (******************************)
  (*   t76 = { float; int64 }   *)
  (******************************)
  (* Deepening to (.a76) *)
  let idx : (t76, _) idx_mut = (.a76) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a76) *)
    let shallow : (t76, _) idx_mut = (.a76) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 194;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 194 failed %d" i;
  );
  (* Deepening to (.b76) *)
  let idx : (t76, _) idx_mut = (.b76) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b76) *)
    let shallow : (t76, _) idx_mut = (.b76) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 195;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 195 failed %d" i;
  );

  (*******************************)
  (*   t77 = { float; int64# }   *)
  (*******************************)
  (* Deepening to (.a77) *)
  let idx : (t77, _) idx_mut = (.a77) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a77) *)
    let shallow : (t77, _) idx_mut = (.a77) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 196;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 196 failed %d" i;
  );
  (* Deepening to (.b77) *)
  let idx : (t77, _) idx_mut = (.b77) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b77) *)
    let shallow : (t77, _) idx_mut = (.b77) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 197;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 197 failed %d" i;
  );

  (*******************************)
  (*   t78 = { float; int32# }   *)
  (*******************************)
  (* Deepening to (.a78) *)
  let idx : (t78, _) idx_mut = (.a78) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a78) *)
    let shallow : (t78, _) idx_mut = (.a78) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 198;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 198 failed %d" i;
  );
  (* Deepening to (.b78) *)
  let idx : (t78, _) idx_mut = (.b78) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b78) *)
    let shallow : (t78, _) idx_mut = (.b78) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 199;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 199 failed %d" i;
  );

  (***********************************)
  (*   t79 = { float; nativeint# }   *)
  (***********************************)
  (* Deepening to (.a79) *)
  let idx : (t79, _) idx_mut = (.a79) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a79) *)
    let shallow : (t79, _) idx_mut = (.a79) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 200;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 200 failed %d" i;
  );
  (* Deepening to (.b79) *)
  let idx : (t79, _) idx_mut = (.b79) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b79) *)
    let shallow : (t79, _) idx_mut = (.b79) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 201;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 201 failed %d" i;
  );

  (******************************)
  (*   t80 = { float; float }   *)
  (******************************)
  (* Deepening to (.a80) *)
  let idx : (t80, _) idx_mut = (.a80) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a80) *)
    let shallow : (t80, _) idx_mut = (.a80) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 202;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 202 failed %d" i;
  );
  (* Deepening to (.b80) *)
  let idx : (t80, _) idx_mut = (.b80) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b80) *)
    let shallow : (t80, _) idx_mut = (.b80) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 203;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 203 failed %d" i;
  );

  (***********************************)
  (*   t81 = { float; float; int }   *)
  (***********************************)
  (* Deepening to (.a81) *)
  let idx : (t81, _) idx_mut = (.a81) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a81) *)
    let shallow : (t81, _) idx_mut = (.a81) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 204;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 204 failed %d" i;
  );
  (* Deepening to (.b81) *)
  let idx : (t81, _) idx_mut = (.b81) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b81) *)
    let shallow : (t81, _) idx_mut = (.b81) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 205;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 205 failed %d" i;
  );
  (* Deepening to (.c81) *)
  let idx : (t81, _) idx_mut = (.c81) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c81) *)
    let shallow : (t81, _) idx_mut = (.c81) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 206;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 206 failed %d" i;
  );

  (*************************************)
  (*   t82 = { float; float; float }   *)
  (*************************************)
  (* Deepening to (.a82) *)
  let idx : (t82, _) idx_mut = (.a82) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a82) *)
    let shallow : (t82, _) idx_mut = (.a82) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 207;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 207 failed %d" i;
  );
  (* Deepening to (.b82) *)
  let idx : (t82, _) idx_mut = (.b82) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b82) *)
    let shallow : (t82, _) idx_mut = (.b82) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 208;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 208 failed %d" i;
  );
  (* Deepening to (.c82) *)
  let idx : (t82, _) idx_mut = (.c82) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c82) *)
    let shallow : (t82, _) idx_mut = (.c82) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 209;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 209 failed %d" i;
  );

  (**************************************)
  (*   t83 = { float; float; float# }   *)
  (**************************************)
  (* Deepening to (.a83) *)
  let idx : (t83, _) idx_mut = (.a83) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a83) *)
    let shallow : (t83, _) idx_mut = (.a83) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 210;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 210 failed %d" i;
  );
  (* Deepening to (.b83) *)
  let idx : (t83, _) idx_mut = (.b83) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b83) *)
    let shallow : (t83, _) idx_mut = (.b83) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 211;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 211 failed %d" i;
  );
  (* Deepening to (.c83) *)
  let idx : (t83, _) idx_mut = (.c83) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c83) *)
    let shallow : (t83, _) idx_mut = (.c83) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 212;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 212 failed %d" i;
  );

  (*******************************)
  (*   t84 = { float; float# }   *)
  (*******************************)
  (* Deepening to (.a84) *)
  let idx : (t84, _) idx_mut = (.a84) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a84) *)
    let shallow : (t84, _) idx_mut = (.a84) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 213;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 213 failed %d" i;
  );
  (* Deepening to (.b84) *)
  let idx : (t84, _) idx_mut = (.b84) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b84) *)
    let shallow : (t84, _) idx_mut = (.b84) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 214;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 214 failed %d" i;
  );

  (**************************************)
  (*   t85 = { float; float#; float }   *)
  (**************************************)
  (* Deepening to (.a85) *)
  let idx : (t85, _) idx_mut = (.a85) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a85) *)
    let shallow : (t85, _) idx_mut = (.a85) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 215;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 215 failed %d" i;
  );
  (* Deepening to (.b85) *)
  let idx : (t85, _) idx_mut = (.b85) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b85) *)
    let shallow : (t85, _) idx_mut = (.b85) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 216;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 216 failed %d" i;
  );
  (* Deepening to (.c85) *)
  let idx : (t85, _) idx_mut = (.c85) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c85) *)
    let shallow : (t85, _) idx_mut = (.c85) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 217;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 217 failed %d" i;
  );

  (***************************************)
  (*   t86 = { float; float#; float# }   *)
  (***************************************)
  (* Deepening to (.a86) *)
  let idx : (t86, _) idx_mut = (.a86) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a86) *)
    let shallow : (t86, _) idx_mut = (.a86) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 218;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 218 failed %d" i;
  );
  (* Deepening to (.b86) *)
  let idx : (t86, _) idx_mut = (.b86) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b86) *)
    let shallow : (t86, _) idx_mut = (.b86) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 219;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 219 failed %d" i;
  );
  (* Deepening to (.c86) *)
  let idx : (t86, _) idx_mut = (.c86) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c86) *)
    let shallow : (t86, _) idx_mut = (.c86) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 220;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 220 failed %d" i;
  );

  (*********************************)
  (*   t87 = { float; #{ int } }   *)
  (*********************************)
  (* Deepening to (.a87) *)
  let idx : (t87, _) idx_mut = (.a87) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a87) *)
    let shallow : (t87, _) idx_mut = (.a87) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 221;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 221 failed %d" i;
  );
  (* Deepening to (.b87) *)
  let idx : (t87, _) idx_mut = (.b87) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b87) *)
    let shallow : (t87, _) idx_mut = (.b87) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 222;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 222 failed %d" i;
  );
  (* Deepening to (.b87.#a14) *)
  let idx : (t87, _) idx_mut = (.b87.#a14) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b87) *)
    let shallow : (t87, _) idx_mut = (.b87) in
    let deepened = (.idx_mut(shallow).#a14) in
    mark_test_run 223;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 223 failed %d" i;
    (* from (.b87.#a14) *)
    let shallow : (t87, _) idx_mut = (.b87.#a14) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 224;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 224 failed %d" i;
  );

  (**************************************)
  (*   t88 = { float; #{ int; int } }   *)
  (**************************************)
  (* Deepening to (.a88) *)
  let idx : (t88, _) idx_mut = (.a88) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a88) *)
    let shallow : (t88, _) idx_mut = (.a88) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 225;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 225 failed %d" i;
  );
  (* Deepening to (.b88) *)
  let idx : (t88, _) idx_mut = (.b88) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b88) *)
    let shallow : (t88, _) idx_mut = (.b88) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 226;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 226 failed %d" i;
  );
  (* Deepening to (.b88.#a16) *)
  let idx : (t88, _) idx_mut = (.b88.#a16) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b88) *)
    let shallow : (t88, _) idx_mut = (.b88) in
    let deepened = (.idx_mut(shallow).#a16) in
    mark_test_run 227;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 227 failed %d" i;
    (* from (.b88.#a16) *)
    let shallow : (t88, _) idx_mut = (.b88.#a16) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 228;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 228 failed %d" i;
  );
  (* Deepening to (.b88.#b16) *)
  let idx : (t88, _) idx_mut = (.b88.#b16) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b88) *)
    let shallow : (t88, _) idx_mut = (.b88) in
    let deepened = (.idx_mut(shallow).#b16) in
    mark_test_run 229;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 229 failed %d" i;
    (* from (.b88.#b16) *)
    let shallow : (t88, _) idx_mut = (.b88.#b16) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 230;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 230 failed %d" i;
  );

  (****************************************)
  (*   t89 = { float; #{ int; float } }   *)
  (****************************************)
  (* Deepening to (.a89) *)
  let idx : (t89, _) idx_mut = (.a89) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a89) *)
    let shallow : (t89, _) idx_mut = (.a89) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 231;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 231 failed %d" i;
  );
  (* Deepening to (.b89) *)
  let idx : (t89, _) idx_mut = (.b89) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b89) *)
    let shallow : (t89, _) idx_mut = (.b89) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 232;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 232 failed %d" i;
  );
  (* Deepening to (.b89.#a20) *)
  let idx : (t89, _) idx_mut = (.b89.#a20) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b89) *)
    let shallow : (t89, _) idx_mut = (.b89) in
    let deepened = (.idx_mut(shallow).#a20) in
    mark_test_run 233;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 233 failed %d" i;
    (* from (.b89.#a20) *)
    let shallow : (t89, _) idx_mut = (.b89.#a20) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 234;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 234 failed %d" i;
  );
  (* Deepening to (.b89.#b20) *)
  let idx : (t89, _) idx_mut = (.b89.#b20) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b89) *)
    let shallow : (t89, _) idx_mut = (.b89) in
    let deepened = (.idx_mut(shallow).#b20) in
    mark_test_run 235;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 235 failed %d" i;
    (* from (.b89.#b20) *)
    let shallow : (t89, _) idx_mut = (.b89.#b20) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 236;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 236 failed %d" i;
  );

  (***********************************)
  (*   t90 = { float; #{ float } }   *)
  (***********************************)
  (* Deepening to (.a90) *)
  let idx : (t90, _) idx_mut = (.a90) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a90) *)
    let shallow : (t90, _) idx_mut = (.a90) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 237;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 237 failed %d" i;
  );
  (* Deepening to (.b90) *)
  let idx : (t90, _) idx_mut = (.b90) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b90) *)
    let shallow : (t90, _) idx_mut = (.b90) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 238;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 238 failed %d" i;
  );
  (* Deepening to (.b90.#a28) *)
  let idx : (t90, _) idx_mut = (.b90.#a28) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* Note: can't deepen (.b90) because it's a path to a flattened
       float, making its element type [float#] *)
    (* from (.b90.#a28) *)
    let shallow : (t90, _) idx_mut = (.b90.#a28) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 239;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 239 failed %d" i;
  );

  (****************************************)
  (*   t91 = { float; #{ float; int } }   *)
  (****************************************)
  (* Deepening to (.a91) *)
  let idx : (t91, _) idx_mut = (.a91) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a91) *)
    let shallow : (t91, _) idx_mut = (.a91) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 240;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 240 failed %d" i;
  );
  (* Deepening to (.b91) *)
  let idx : (t91, _) idx_mut = (.b91) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b91) *)
    let shallow : (t91, _) idx_mut = (.b91) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 241;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 241 failed %d" i;
  );
  (* Deepening to (.b91.#a30) *)
  let idx : (t91, _) idx_mut = (.b91.#a30) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b91) *)
    let shallow : (t91, _) idx_mut = (.b91) in
    let deepened = (.idx_mut(shallow).#a30) in
    mark_test_run 242;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 242 failed %d" i;
    (* from (.b91.#a30) *)
    let shallow : (t91, _) idx_mut = (.b91.#a30) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 243;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 243 failed %d" i;
  );
  (* Deepening to (.b91.#b30) *)
  let idx : (t91, _) idx_mut = (.b91.#b30) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b91) *)
    let shallow : (t91, _) idx_mut = (.b91) in
    let deepened = (.idx_mut(shallow).#b30) in
    mark_test_run 244;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 244 failed %d" i;
    (* from (.b91.#b30) *)
    let shallow : (t91, _) idx_mut = (.b91.#b30) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 245;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 245 failed %d" i;
  );

  (******************************************)
  (*   t92 = { float; #{ float; float } }   *)
  (******************************************)
  (* Deepening to (.a92) *)
  let idx : (t92, _) idx_mut = (.a92) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a92) *)
    let shallow : (t92, _) idx_mut = (.a92) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 246;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 246 failed %d" i;
  );
  (* Deepening to (.b92) *)
  let idx : (t92, _) idx_mut = (.b92) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b92) *)
    let shallow : (t92, _) idx_mut = (.b92) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 247;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 247 failed %d" i;
  );
  (* Deepening to (.b92.#a32) *)
  let idx : (t92, _) idx_mut = (.b92.#a32) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b92) *)
    let shallow : (t92, _) idx_mut = (.b92) in
    let deepened = (.idx_mut(shallow).#a32) in
    mark_test_run 248;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 248 failed %d" i;
    (* from (.b92.#a32) *)
    let shallow : (t92, _) idx_mut = (.b92.#a32) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 249;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 249 failed %d" i;
  );
  (* Deepening to (.b92.#b32) *)
  let idx : (t92, _) idx_mut = (.b92.#b32) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b92) *)
    let shallow : (t92, _) idx_mut = (.b92) in
    let deepened = (.idx_mut(shallow).#b32) in
    mark_test_run 250;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 250 failed %d" i;
    (* from (.b92.#b32) *)
    let shallow : (t92, _) idx_mut = (.b92.#b32) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 251;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 251 failed %d" i;
  );

  (*******************************************)
  (*   t94 = { float; #{ float; float# } }   *)
  (*******************************************)
  (* Deepening to (.a94) *)
  let idx : (t94, _) idx_mut = (.a94) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a94) *)
    let shallow : (t94, _) idx_mut = (.a94) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 252;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 252 failed %d" i;
  );
  (* Deepening to (.b94) *)
  let idx : (t94, _) idx_mut = (.b94) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b94) *)
    let shallow : (t94, _) idx_mut = (.b94) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 253;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 253 failed %d" i;
  );
  (* Deepening to (.b94.#a93) *)
  let idx : (t94, _) idx_mut = (.b94.#a93) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b94) *)
    let shallow : (t94, _) idx_mut = (.b94) in
    let deepened = (.idx_mut(shallow).#a93) in
    mark_test_run 254;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 254 failed %d" i;
    (* from (.b94.#a93) *)
    let shallow : (t94, _) idx_mut = (.b94.#a93) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 255;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 255 failed %d" i;
  );
  (* Deepening to (.b94.#b93) *)
  let idx : (t94, _) idx_mut = (.b94.#b93) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b94) *)
    let shallow : (t94, _) idx_mut = (.b94) in
    let deepened = (.idx_mut(shallow).#b93) in
    mark_test_run 256;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 256 failed %d" i;
    (* from (.b94.#b93) *)
    let shallow : (t94, _) idx_mut = (.b94.#b93) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 257;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 257 failed %d" i;
  );

  (************************************)
  (*   t96 = { float; #{ float# } }   *)
  (************************************)
  (* Deepening to (.a96) *)
  let idx : (t96, _) idx_mut = (.a96) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a96) *)
    let shallow : (t96, _) idx_mut = (.a96) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 258;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 258 failed %d" i;
  );
  (* Deepening to (.b96) *)
  let idx : (t96, _) idx_mut = (.b96) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b96) *)
    let shallow : (t96, _) idx_mut = (.b96) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 259;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 259 failed %d" i;
  );
  (* Deepening to (.b96.#a95) *)
  let idx : (t96, _) idx_mut = (.b96.#a95) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b96) *)
    let shallow : (t96, _) idx_mut = (.b96) in
    let deepened = (.idx_mut(shallow).#a95) in
    mark_test_run 260;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 260 failed %d" i;
    (* from (.b96.#a95) *)
    let shallow : (t96, _) idx_mut = (.b96.#a95) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 261;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 261 failed %d" i;
  );

  (*******************************************)
  (*   t98 = { float; #{ float#; float } }   *)
  (*******************************************)
  (* Deepening to (.a98) *)
  let idx : (t98, _) idx_mut = (.a98) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a98) *)
    let shallow : (t98, _) idx_mut = (.a98) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 262;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 262 failed %d" i;
  );
  (* Deepening to (.b98) *)
  let idx : (t98, _) idx_mut = (.b98) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b98) *)
    let shallow : (t98, _) idx_mut = (.b98) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 263;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 263 failed %d" i;
  );
  (* Deepening to (.b98.#a97) *)
  let idx : (t98, _) idx_mut = (.b98.#a97) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b98) *)
    let shallow : (t98, _) idx_mut = (.b98) in
    let deepened = (.idx_mut(shallow).#a97) in
    mark_test_run 264;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 264 failed %d" i;
    (* from (.b98.#a97) *)
    let shallow : (t98, _) idx_mut = (.b98.#a97) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 265;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 265 failed %d" i;
  );
  (* Deepening to (.b98.#b97) *)
  let idx : (t98, _) idx_mut = (.b98.#b97) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b98) *)
    let shallow : (t98, _) idx_mut = (.b98) in
    let deepened = (.idx_mut(shallow).#b97) in
    mark_test_run 266;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 266 failed %d" i;
    (* from (.b98.#b97) *)
    let shallow : (t98, _) idx_mut = (.b98.#b97) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 267;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 267 failed %d" i;
  );

  (*********************************************)
  (*   t100 = { float; #{ float#; float# } }   *)
  (*********************************************)
  (* Deepening to (.a100) *)
  let idx : (t100, _) idx_mut = (.a100) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a100) *)
    let shallow : (t100, _) idx_mut = (.a100) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 268;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 268 failed %d" i;
  );
  (* Deepening to (.b100) *)
  let idx : (t100, _) idx_mut = (.b100) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b100) *)
    let shallow : (t100, _) idx_mut = (.b100) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 269;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 269 failed %d" i;
  );
  (* Deepening to (.b100.#a99) *)
  let idx : (t100, _) idx_mut = (.b100.#a99) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b100) *)
    let shallow : (t100, _) idx_mut = (.b100) in
    let deepened = (.idx_mut(shallow).#a99) in
    mark_test_run 270;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 270 failed %d" i;
    (* from (.b100.#a99) *)
    let shallow : (t100, _) idx_mut = (.b100.#a99) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 271;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 271 failed %d" i;
  );
  (* Deepening to (.b100.#b99) *)
  let idx : (t100, _) idx_mut = (.b100.#b99) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b100) *)
    let shallow : (t100, _) idx_mut = (.b100) in
    let deepened = (.idx_mut(shallow).#b99) in
    mark_test_run 272;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 272 failed %d" i;
    (* from (.b100.#b99) *)
    let shallow : (t100, _) idx_mut = (.b100.#b99) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 273;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 273 failed %d" i;
  );

  (*************************)
  (*   t101 = { float# }   *)
  (*************************)
  (* Deepening to (.a101) *)
  let idx : (t101, _) idx_mut = (.a101) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a101) *)
    let shallow : (t101, _) idx_mut = (.a101) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 274;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 274 failed %d" i;
  );

  (********************************)
  (*   t102 = { float#; float }   *)
  (********************************)
  (* Deepening to (.a102) *)
  let idx : (t102, _) idx_mut = (.a102) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a102) *)
    let shallow : (t102, _) idx_mut = (.a102) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 275;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 275 failed %d" i;
  );
  (* Deepening to (.b102) *)
  let idx : (t102, _) idx_mut = (.b102) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b102) *)
    let shallow : (t102, _) idx_mut = (.b102) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 276;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 276 failed %d" i;
  );

  (***************************************)
  (*   t103 = { float#; float; float }   *)
  (***************************************)
  (* Deepening to (.a103) *)
  let idx : (t103, _) idx_mut = (.a103) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a103) *)
    let shallow : (t103, _) idx_mut = (.a103) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 277;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 277 failed %d" i;
  );
  (* Deepening to (.b103) *)
  let idx : (t103, _) idx_mut = (.b103) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b103) *)
    let shallow : (t103, _) idx_mut = (.b103) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 278;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 278 failed %d" i;
  );
  (* Deepening to (.c103) *)
  let idx : (t103, _) idx_mut = (.c103) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c103) *)
    let shallow : (t103, _) idx_mut = (.c103) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 279;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 279 failed %d" i;
  );

  (****************************************)
  (*   t104 = { float#; float; float# }   *)
  (****************************************)
  (* Deepening to (.a104) *)
  let idx : (t104, _) idx_mut = (.a104) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a104) *)
    let shallow : (t104, _) idx_mut = (.a104) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 280;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 280 failed %d" i;
  );
  (* Deepening to (.b104) *)
  let idx : (t104, _) idx_mut = (.b104) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b104) *)
    let shallow : (t104, _) idx_mut = (.b104) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 281;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 281 failed %d" i;
  );
  (* Deepening to (.c104) *)
  let idx : (t104, _) idx_mut = (.c104) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c104) *)
    let shallow : (t104, _) idx_mut = (.c104) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 282;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 282 failed %d" i;
  );

  (*********************************)
  (*   t105 = { float#; float# }   *)
  (*********************************)
  (* Deepening to (.a105) *)
  let idx : (t105, _) idx_mut = (.a105) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a105) *)
    let shallow : (t105, _) idx_mut = (.a105) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 283;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 283 failed %d" i;
  );
  (* Deepening to (.b105) *)
  let idx : (t105, _) idx_mut = (.b105) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b105) *)
    let shallow : (t105, _) idx_mut = (.b105) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 284;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 284 failed %d" i;
  );

  (****************************************)
  (*   t106 = { float#; float#; float }   *)
  (****************************************)
  (* Deepening to (.a106) *)
  let idx : (t106, _) idx_mut = (.a106) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a106) *)
    let shallow : (t106, _) idx_mut = (.a106) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 285;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 285 failed %d" i;
  );
  (* Deepening to (.b106) *)
  let idx : (t106, _) idx_mut = (.b106) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b106) *)
    let shallow : (t106, _) idx_mut = (.b106) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 286;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 286 failed %d" i;
  );
  (* Deepening to (.c106) *)
  let idx : (t106, _) idx_mut = (.c106) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c106) *)
    let shallow : (t106, _) idx_mut = (.c106) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 287;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 287 failed %d" i;
  );

  (*****************************************)
  (*   t107 = { float#; float#; float# }   *)
  (*****************************************)
  (* Deepening to (.a107) *)
  let idx : (t107, _) idx_mut = (.a107) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a107) *)
    let shallow : (t107, _) idx_mut = (.a107) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 288;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 288 failed %d" i;
  );
  (* Deepening to (.b107) *)
  let idx : (t107, _) idx_mut = (.b107) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b107) *)
    let shallow : (t107, _) idx_mut = (.b107) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 289;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 289 failed %d" i;
  );
  (* Deepening to (.c107) *)
  let idx : (t107, _) idx_mut = (.c107) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.c107) *)
    let shallow : (t107, _) idx_mut = (.c107) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 290;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 290 failed %d" i;
  );

  (*************************************)
  (*   t108 = { float#; #{ float } }   *)
  (*************************************)
  (* Deepening to (.a108) *)
  let idx : (t108, _) idx_mut = (.a108) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a108) *)
    let shallow : (t108, _) idx_mut = (.a108) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 291;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 291 failed %d" i;
  );
  (* Deepening to (.b108) *)
  let idx : (t108, _) idx_mut = (.b108) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b108) *)
    let shallow : (t108, _) idx_mut = (.b108) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 292;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 292 failed %d" i;
  );
  (* Deepening to (.b108.#a28) *)
  let idx : (t108, _) idx_mut = (.b108.#a28) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* Note: can't deepen (.b108) because it's a path to a flattened
       float, making its element type [float#] *)
    (* from (.b108.#a28) *)
    let shallow : (t108, _) idx_mut = (.b108.#a28) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 293;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 293 failed %d" i;
  );

  (********************************************)
  (*   t109 = { float#; #{ float; float } }   *)
  (********************************************)
  (* Deepening to (.a109) *)
  let idx : (t109, _) idx_mut = (.a109) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a109) *)
    let shallow : (t109, _) idx_mut = (.a109) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 294;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 294 failed %d" i;
  );
  (* Deepening to (.b109) *)
  let idx : (t109, _) idx_mut = (.b109) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b109) *)
    let shallow : (t109, _) idx_mut = (.b109) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 295;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 295 failed %d" i;
  );
  (* Deepening to (.b109.#a32) *)
  let idx : (t109, _) idx_mut = (.b109.#a32) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b109) *)
    let shallow : (t109, _) idx_mut = (.b109) in
    let deepened = (.idx_mut(shallow).#a32) in
    mark_test_run 296;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 296 failed %d" i;
    (* from (.b109.#a32) *)
    let shallow : (t109, _) idx_mut = (.b109.#a32) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 297;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 297 failed %d" i;
  );
  (* Deepening to (.b109.#b32) *)
  let idx : (t109, _) idx_mut = (.b109.#b32) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b109) *)
    let shallow : (t109, _) idx_mut = (.b109) in
    let deepened = (.idx_mut(shallow).#b32) in
    mark_test_run 298;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 298 failed %d" i;
    (* from (.b109.#b32) *)
    let shallow : (t109, _) idx_mut = (.b109.#b32) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 299;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 299 failed %d" i;
  );

  (*********************************************)
  (*   t110 = { float#; #{ float; float# } }   *)
  (*********************************************)
  (* Deepening to (.a110) *)
  let idx : (t110, _) idx_mut = (.a110) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a110) *)
    let shallow : (t110, _) idx_mut = (.a110) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 300;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 300 failed %d" i;
  );
  (* Deepening to (.b110) *)
  let idx : (t110, _) idx_mut = (.b110) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b110) *)
    let shallow : (t110, _) idx_mut = (.b110) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 301;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 301 failed %d" i;
  );
  (* Deepening to (.b110.#a93) *)
  let idx : (t110, _) idx_mut = (.b110.#a93) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b110) *)
    let shallow : (t110, _) idx_mut = (.b110) in
    let deepened = (.idx_mut(shallow).#a93) in
    mark_test_run 302;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 302 failed %d" i;
    (* from (.b110.#a93) *)
    let shallow : (t110, _) idx_mut = (.b110.#a93) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 303;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 303 failed %d" i;
  );
  (* Deepening to (.b110.#b93) *)
  let idx : (t110, _) idx_mut = (.b110.#b93) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b110) *)
    let shallow : (t110, _) idx_mut = (.b110) in
    let deepened = (.idx_mut(shallow).#b93) in
    mark_test_run 304;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 304 failed %d" i;
    (* from (.b110.#b93) *)
    let shallow : (t110, _) idx_mut = (.b110.#b93) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 305;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 305 failed %d" i;
  );

  (**************************************)
  (*   t111 = { float#; #{ float# } }   *)
  (**************************************)
  (* Deepening to (.a111) *)
  let idx : (t111, _) idx_mut = (.a111) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a111) *)
    let shallow : (t111, _) idx_mut = (.a111) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 306;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 306 failed %d" i;
  );
  (* Deepening to (.b111) *)
  let idx : (t111, _) idx_mut = (.b111) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b111) *)
    let shallow : (t111, _) idx_mut = (.b111) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 307;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 307 failed %d" i;
  );
  (* Deepening to (.b111.#a95) *)
  let idx : (t111, _) idx_mut = (.b111.#a95) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b111) *)
    let shallow : (t111, _) idx_mut = (.b111) in
    let deepened = (.idx_mut(shallow).#a95) in
    mark_test_run 308;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 308 failed %d" i;
    (* from (.b111.#a95) *)
    let shallow : (t111, _) idx_mut = (.b111.#a95) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 309;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 309 failed %d" i;
  );

  (*********************************************)
  (*   t112 = { float#; #{ float#; float } }   *)
  (*********************************************)
  (* Deepening to (.a112) *)
  let idx : (t112, _) idx_mut = (.a112) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a112) *)
    let shallow : (t112, _) idx_mut = (.a112) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 310;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 310 failed %d" i;
  );
  (* Deepening to (.b112) *)
  let idx : (t112, _) idx_mut = (.b112) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b112) *)
    let shallow : (t112, _) idx_mut = (.b112) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 311;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 311 failed %d" i;
  );
  (* Deepening to (.b112.#a97) *)
  let idx : (t112, _) idx_mut = (.b112.#a97) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b112) *)
    let shallow : (t112, _) idx_mut = (.b112) in
    let deepened = (.idx_mut(shallow).#a97) in
    mark_test_run 312;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 312 failed %d" i;
    (* from (.b112.#a97) *)
    let shallow : (t112, _) idx_mut = (.b112.#a97) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 313;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 313 failed %d" i;
  );
  (* Deepening to (.b112.#b97) *)
  let idx : (t112, _) idx_mut = (.b112.#b97) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b112) *)
    let shallow : (t112, _) idx_mut = (.b112) in
    let deepened = (.idx_mut(shallow).#b97) in
    mark_test_run 314;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 314 failed %d" i;
    (* from (.b112.#b97) *)
    let shallow : (t112, _) idx_mut = (.b112.#b97) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 315;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 315 failed %d" i;
  );

  (**********************************************)
  (*   t113 = { float#; #{ float#; float# } }   *)
  (**********************************************)
  (* Deepening to (.a113) *)
  let idx : (t113, _) idx_mut = (.a113) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a113) *)
    let shallow : (t113, _) idx_mut = (.a113) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 316;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 316 failed %d" i;
  );
  (* Deepening to (.b113) *)
  let idx : (t113, _) idx_mut = (.b113) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b113) *)
    let shallow : (t113, _) idx_mut = (.b113) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 317;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 317 failed %d" i;
  );
  (* Deepening to (.b113.#a99) *)
  let idx : (t113, _) idx_mut = (.b113.#a99) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b113) *)
    let shallow : (t113, _) idx_mut = (.b113) in
    let deepened = (.idx_mut(shallow).#a99) in
    mark_test_run 318;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 318 failed %d" i;
    (* from (.b113.#a99) *)
    let shallow : (t113, _) idx_mut = (.b113.#a99) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 319;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 319 failed %d" i;
  );
  (* Deepening to (.b113.#b99) *)
  let idx : (t113, _) idx_mut = (.b113.#b99) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b113) *)
    let shallow : (t113, _) idx_mut = (.b113) in
    let deepened = (.idx_mut(shallow).#b99) in
    mark_test_run 320;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 320 failed %d" i;
    (* from (.b113.#b99) *)
    let shallow : (t113, _) idx_mut = (.b113.#b99) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 321;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 321 failed %d" i;
  );

  (***************************)
  (*   t114 = { #{ int } }   *)
  (***************************)
  (* Deepening to (.a114) *)
  let idx : (t114, _) idx_mut = (.a114) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a114) *)
    let shallow : (t114, _) idx_mut = (.a114) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 322;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 322 failed %d" i;
  );
  (* Deepening to (.a114.#a14) *)
  let idx : (t114, _) idx_mut = (.a114.#a14) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a114) *)
    let shallow : (t114, _) idx_mut = (.a114) in
    let deepened = (.idx_mut(shallow).#a14) in
    mark_test_run 323;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 323 failed %d" i;
    (* from (.a114.#a14) *)
    let shallow : (t114, _) idx_mut = (.a114.#a14) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 324;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 324 failed %d" i;
  );

  (********************************)
  (*   t115 = { #{ int }; int }   *)
  (********************************)
  (* Deepening to (.a115) *)
  let idx : (t115, _) idx_mut = (.a115) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a115) *)
    let shallow : (t115, _) idx_mut = (.a115) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 325;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 325 failed %d" i;
  );
  (* Deepening to (.a115.#a14) *)
  let idx : (t115, _) idx_mut = (.a115.#a14) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a115) *)
    let shallow : (t115, _) idx_mut = (.a115) in
    let deepened = (.idx_mut(shallow).#a14) in
    mark_test_run 326;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 326 failed %d" i;
    (* from (.a115.#a14) *)
    let shallow : (t115, _) idx_mut = (.a115.#a14) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 327;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 327 failed %d" i;
  );
  (* Deepening to (.b115) *)
  let idx : (t115, _) idx_mut = (.b115) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b115) *)
    let shallow : (t115, _) idx_mut = (.b115) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 328;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 328 failed %d" i;
  );

  (***********************************)
  (*   t116 = { #{ int }; int32# }   *)
  (***********************************)
  (* Deepening to (.a116) *)
  let idx : (t116, _) idx_mut = (.a116) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a116) *)
    let shallow : (t116, _) idx_mut = (.a116) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 329;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 329 failed %d" i;
  );
  (* Deepening to (.a116.#a14) *)
  let idx : (t116, _) idx_mut = (.a116.#a14) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a116) *)
    let shallow : (t116, _) idx_mut = (.a116) in
    let deepened = (.idx_mut(shallow).#a14) in
    mark_test_run 330;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 330 failed %d" i;
    (* from (.a116.#a14) *)
    let shallow : (t116, _) idx_mut = (.a116.#a14) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 331;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 331 failed %d" i;
  );
  (* Deepening to (.b116) *)
  let idx : (t116, _) idx_mut = (.b116) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b116) *)
    let shallow : (t116, _) idx_mut = (.b116) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 332;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 332 failed %d" i;
  );

  (**********************************)
  (*   t117 = { #{ int }; float }   *)
  (**********************************)
  (* Deepening to (.a117) *)
  let idx : (t117, _) idx_mut = (.a117) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a117) *)
    let shallow : (t117, _) idx_mut = (.a117) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 333;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 333 failed %d" i;
  );
  (* Deepening to (.a117.#a14) *)
  let idx : (t117, _) idx_mut = (.a117.#a14) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a117) *)
    let shallow : (t117, _) idx_mut = (.a117) in
    let deepened = (.idx_mut(shallow).#a14) in
    mark_test_run 334;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 334 failed %d" i;
    (* from (.a117.#a14) *)
    let shallow : (t117, _) idx_mut = (.a117.#a14) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 335;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 335 failed %d" i;
  );
  (* Deepening to (.b117) *)
  let idx : (t117, _) idx_mut = (.b117) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b117) *)
    let shallow : (t117, _) idx_mut = (.b117) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 336;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 336 failed %d" i;
  );

  (********************************)
  (*   t118 = { #{ int; int } }   *)
  (********************************)
  (* Deepening to (.a118) *)
  let idx : (t118, _) idx_mut = (.a118) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a118) *)
    let shallow : (t118, _) idx_mut = (.a118) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 337;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 337 failed %d" i;
  );
  (* Deepening to (.a118.#a16) *)
  let idx : (t118, _) idx_mut = (.a118.#a16) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a118) *)
    let shallow : (t118, _) idx_mut = (.a118) in
    let deepened = (.idx_mut(shallow).#a16) in
    mark_test_run 338;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 338 failed %d" i;
    (* from (.a118.#a16) *)
    let shallow : (t118, _) idx_mut = (.a118.#a16) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 339;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 339 failed %d" i;
  );
  (* Deepening to (.a118.#b16) *)
  let idx : (t118, _) idx_mut = (.a118.#b16) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a118) *)
    let shallow : (t118, _) idx_mut = (.a118) in
    let deepened = (.idx_mut(shallow).#b16) in
    mark_test_run 340;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 340 failed %d" i;
    (* from (.a118.#b16) *)
    let shallow : (t118, _) idx_mut = (.a118.#b16) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 341;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 341 failed %d" i;
  );

  (*************************************)
  (*   t119 = { #{ int; int }; int }   *)
  (*************************************)
  (* Deepening to (.a119) *)
  let idx : (t119, _) idx_mut = (.a119) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a119) *)
    let shallow : (t119, _) idx_mut = (.a119) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 342;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 342 failed %d" i;
  );
  (* Deepening to (.a119.#a16) *)
  let idx : (t119, _) idx_mut = (.a119.#a16) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a119) *)
    let shallow : (t119, _) idx_mut = (.a119) in
    let deepened = (.idx_mut(shallow).#a16) in
    mark_test_run 343;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 343 failed %d" i;
    (* from (.a119.#a16) *)
    let shallow : (t119, _) idx_mut = (.a119.#a16) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 344;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 344 failed %d" i;
  );
  (* Deepening to (.a119.#b16) *)
  let idx : (t119, _) idx_mut = (.a119.#b16) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a119) *)
    let shallow : (t119, _) idx_mut = (.a119) in
    let deepened = (.idx_mut(shallow).#b16) in
    mark_test_run 345;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 345 failed %d" i;
    (* from (.a119.#b16) *)
    let shallow : (t119, _) idx_mut = (.a119.#b16) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 346;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 346 failed %d" i;
  );
  (* Deepening to (.b119) *)
  let idx : (t119, _) idx_mut = (.b119) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b119) *)
    let shallow : (t119, _) idx_mut = (.b119) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 347;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 347 failed %d" i;
  );

  (****************************************)
  (*   t120 = { #{ int; int }; int32# }   *)
  (****************************************)
  (* Deepening to (.a120) *)
  let idx : (t120, _) idx_mut = (.a120) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a120) *)
    let shallow : (t120, _) idx_mut = (.a120) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 348;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 348 failed %d" i;
  );
  (* Deepening to (.a120.#a16) *)
  let idx : (t120, _) idx_mut = (.a120.#a16) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a120) *)
    let shallow : (t120, _) idx_mut = (.a120) in
    let deepened = (.idx_mut(shallow).#a16) in
    mark_test_run 349;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 349 failed %d" i;
    (* from (.a120.#a16) *)
    let shallow : (t120, _) idx_mut = (.a120.#a16) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 350;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 350 failed %d" i;
  );
  (* Deepening to (.a120.#b16) *)
  let idx : (t120, _) idx_mut = (.a120.#b16) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a120) *)
    let shallow : (t120, _) idx_mut = (.a120) in
    let deepened = (.idx_mut(shallow).#b16) in
    mark_test_run 351;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 351 failed %d" i;
    (* from (.a120.#b16) *)
    let shallow : (t120, _) idx_mut = (.a120.#b16) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 352;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 352 failed %d" i;
  );
  (* Deepening to (.b120) *)
  let idx : (t120, _) idx_mut = (.b120) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b120) *)
    let shallow : (t120, _) idx_mut = (.b120) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 353;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 353 failed %d" i;
  );

  (***************************************)
  (*   t121 = { #{ int; int }; float }   *)
  (***************************************)
  (* Deepening to (.a121) *)
  let idx : (t121, _) idx_mut = (.a121) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a121) *)
    let shallow : (t121, _) idx_mut = (.a121) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 354;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 354 failed %d" i;
  );
  (* Deepening to (.a121.#a16) *)
  let idx : (t121, _) idx_mut = (.a121.#a16) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a121) *)
    let shallow : (t121, _) idx_mut = (.a121) in
    let deepened = (.idx_mut(shallow).#a16) in
    mark_test_run 355;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 355 failed %d" i;
    (* from (.a121.#a16) *)
    let shallow : (t121, _) idx_mut = (.a121.#a16) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 356;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 356 failed %d" i;
  );
  (* Deepening to (.a121.#b16) *)
  let idx : (t121, _) idx_mut = (.a121.#b16) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a121) *)
    let shallow : (t121, _) idx_mut = (.a121) in
    let deepened = (.idx_mut(shallow).#b16) in
    mark_test_run 357;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 357 failed %d" i;
    (* from (.a121.#b16) *)
    let shallow : (t121, _) idx_mut = (.a121.#b16) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 358;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 358 failed %d" i;
  );
  (* Deepening to (.b121) *)
  let idx : (t121, _) idx_mut = (.b121) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b121) *)
    let shallow : (t121, _) idx_mut = (.b121) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 359;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 359 failed %d" i;
  );

  (***********************************)
  (*   t122 = { #{ int; int32# } }   *)
  (***********************************)
  (* Deepening to (.a122) *)
  let idx : (t122, _) idx_mut = (.a122) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a122) *)
    let shallow : (t122, _) idx_mut = (.a122) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 360;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 360 failed %d" i;
  );
  (* Deepening to (.a122.#a18) *)
  let idx : (t122, _) idx_mut = (.a122.#a18) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a122) *)
    let shallow : (t122, _) idx_mut = (.a122) in
    let deepened = (.idx_mut(shallow).#a18) in
    mark_test_run 361;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 361 failed %d" i;
    (* from (.a122.#a18) *)
    let shallow : (t122, _) idx_mut = (.a122.#a18) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 362;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 362 failed %d" i;
  );
  (* Deepening to (.a122.#b18) *)
  let idx : (t122, _) idx_mut = (.a122.#b18) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a122) *)
    let shallow : (t122, _) idx_mut = (.a122) in
    let deepened = (.idx_mut(shallow).#b18) in
    mark_test_run 363;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 363 failed %d" i;
    (* from (.a122.#b18) *)
    let shallow : (t122, _) idx_mut = (.a122.#b18) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 364;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 364 failed %d" i;
  );

  (****************************************)
  (*   t123 = { #{ int; int32# }; int }   *)
  (****************************************)
  (* Deepening to (.a123) *)
  let idx : (t123, _) idx_mut = (.a123) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a123) *)
    let shallow : (t123, _) idx_mut = (.a123) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 365;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 365 failed %d" i;
  );
  (* Deepening to (.a123.#a18) *)
  let idx : (t123, _) idx_mut = (.a123.#a18) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a123) *)
    let shallow : (t123, _) idx_mut = (.a123) in
    let deepened = (.idx_mut(shallow).#a18) in
    mark_test_run 366;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 366 failed %d" i;
    (* from (.a123.#a18) *)
    let shallow : (t123, _) idx_mut = (.a123.#a18) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 367;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 367 failed %d" i;
  );
  (* Deepening to (.a123.#b18) *)
  let idx : (t123, _) idx_mut = (.a123.#b18) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a123) *)
    let shallow : (t123, _) idx_mut = (.a123) in
    let deepened = (.idx_mut(shallow).#b18) in
    mark_test_run 368;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 368 failed %d" i;
    (* from (.a123.#b18) *)
    let shallow : (t123, _) idx_mut = (.a123.#b18) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 369;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 369 failed %d" i;
  );
  (* Deepening to (.b123) *)
  let idx : (t123, _) idx_mut = (.b123) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b123) *)
    let shallow : (t123, _) idx_mut = (.b123) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 370;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 370 failed %d" i;
  );

  (*******************************************)
  (*   t124 = { #{ int; int32# }; int32# }   *)
  (*******************************************)
  (* Deepening to (.a124) *)
  let idx : (t124, _) idx_mut = (.a124) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a124) *)
    let shallow : (t124, _) idx_mut = (.a124) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 371;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 371 failed %d" i;
  );
  (* Deepening to (.a124.#a18) *)
  let idx : (t124, _) idx_mut = (.a124.#a18) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a124) *)
    let shallow : (t124, _) idx_mut = (.a124) in
    let deepened = (.idx_mut(shallow).#a18) in
    mark_test_run 372;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 372 failed %d" i;
    (* from (.a124.#a18) *)
    let shallow : (t124, _) idx_mut = (.a124.#a18) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 373;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 373 failed %d" i;
  );
  (* Deepening to (.a124.#b18) *)
  let idx : (t124, _) idx_mut = (.a124.#b18) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a124) *)
    let shallow : (t124, _) idx_mut = (.a124) in
    let deepened = (.idx_mut(shallow).#b18) in
    mark_test_run 374;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 374 failed %d" i;
    (* from (.a124.#b18) *)
    let shallow : (t124, _) idx_mut = (.a124.#b18) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 375;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 375 failed %d" i;
  );
  (* Deepening to (.b124) *)
  let idx : (t124, _) idx_mut = (.b124) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b124) *)
    let shallow : (t124, _) idx_mut = (.b124) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 376;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 376 failed %d" i;
  );

  (**********************************)
  (*   t125 = { #{ int; float } }   *)
  (**********************************)
  (* Deepening to (.a125) *)
  let idx : (t125, _) idx_mut = (.a125) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a125) *)
    let shallow : (t125, _) idx_mut = (.a125) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 377;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 377 failed %d" i;
  );
  (* Deepening to (.a125.#a20) *)
  let idx : (t125, _) idx_mut = (.a125.#a20) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a125) *)
    let shallow : (t125, _) idx_mut = (.a125) in
    let deepened = (.idx_mut(shallow).#a20) in
    mark_test_run 378;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 378 failed %d" i;
    (* from (.a125.#a20) *)
    let shallow : (t125, _) idx_mut = (.a125.#a20) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 379;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 379 failed %d" i;
  );
  (* Deepening to (.a125.#b20) *)
  let idx : (t125, _) idx_mut = (.a125.#b20) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a125) *)
    let shallow : (t125, _) idx_mut = (.a125) in
    let deepened = (.idx_mut(shallow).#b20) in
    mark_test_run 380;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 380 failed %d" i;
    (* from (.a125.#b20) *)
    let shallow : (t125, _) idx_mut = (.a125.#b20) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 381;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 381 failed %d" i;
  );

  (***************************************)
  (*   t126 = { #{ int; float }; int }   *)
  (***************************************)
  (* Deepening to (.a126) *)
  let idx : (t126, _) idx_mut = (.a126) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a126) *)
    let shallow : (t126, _) idx_mut = (.a126) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 382;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 382 failed %d" i;
  );
  (* Deepening to (.a126.#a20) *)
  let idx : (t126, _) idx_mut = (.a126.#a20) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a126) *)
    let shallow : (t126, _) idx_mut = (.a126) in
    let deepened = (.idx_mut(shallow).#a20) in
    mark_test_run 383;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 383 failed %d" i;
    (* from (.a126.#a20) *)
    let shallow : (t126, _) idx_mut = (.a126.#a20) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 384;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 384 failed %d" i;
  );
  (* Deepening to (.a126.#b20) *)
  let idx : (t126, _) idx_mut = (.a126.#b20) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a126) *)
    let shallow : (t126, _) idx_mut = (.a126) in
    let deepened = (.idx_mut(shallow).#b20) in
    mark_test_run 385;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 385 failed %d" i;
    (* from (.a126.#b20) *)
    let shallow : (t126, _) idx_mut = (.a126.#b20) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 386;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 386 failed %d" i;
  );
  (* Deepening to (.b126) *)
  let idx : (t126, _) idx_mut = (.b126) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b126) *)
    let shallow : (t126, _) idx_mut = (.b126) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 387;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 387 failed %d" i;
  );

  (*****************************************)
  (*   t127 = { #{ int; float }; float }   *)
  (*****************************************)
  (* Deepening to (.a127) *)
  let idx : (t127, _) idx_mut = (.a127) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a127) *)
    let shallow : (t127, _) idx_mut = (.a127) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 388;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 388 failed %d" i;
  );
  (* Deepening to (.a127.#a20) *)
  let idx : (t127, _) idx_mut = (.a127.#a20) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a127) *)
    let shallow : (t127, _) idx_mut = (.a127) in
    let deepened = (.idx_mut(shallow).#a20) in
    mark_test_run 389;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 389 failed %d" i;
    (* from (.a127.#a20) *)
    let shallow : (t127, _) idx_mut = (.a127.#a20) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 390;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 390 failed %d" i;
  );
  (* Deepening to (.a127.#b20) *)
  let idx : (t127, _) idx_mut = (.a127.#b20) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a127) *)
    let shallow : (t127, _) idx_mut = (.a127) in
    let deepened = (.idx_mut(shallow).#b20) in
    mark_test_run 391;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 391 failed %d" i;
    (* from (.a127.#b20) *)
    let shallow : (t127, _) idx_mut = (.a127.#b20) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 392;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 392 failed %d" i;
  );
  (* Deepening to (.b127) *)
  let idx : (t127, _) idx_mut = (.b127) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b127) *)
    let shallow : (t127, _) idx_mut = (.b127) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 393;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 393 failed %d" i;
  );

  (**********************************************************)
  (*   t130 = { #{ int64; int64# }; #{ int64#; float# } }   *)
  (**********************************************************)
  (* Deepening to (.a130) *)
  let idx : (t130, _) idx_mut = (.a130) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a130) *)
    let shallow : (t130, _) idx_mut = (.a130) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 394;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 394 failed %d" i;
  );
  (* Deepening to (.a130.#a128) *)
  let idx : (t130, _) idx_mut = (.a130.#a128) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a130) *)
    let shallow : (t130, _) idx_mut = (.a130) in
    let deepened = (.idx_mut(shallow).#a128) in
    mark_test_run 395;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 395 failed %d" i;
    (* from (.a130.#a128) *)
    let shallow : (t130, _) idx_mut = (.a130.#a128) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 396;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 396 failed %d" i;
  );
  (* Deepening to (.a130.#b128) *)
  let idx : (t130, _) idx_mut = (.a130.#b128) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a130) *)
    let shallow : (t130, _) idx_mut = (.a130) in
    let deepened = (.idx_mut(shallow).#b128) in
    mark_test_run 397;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 397 failed %d" i;
    (* from (.a130.#b128) *)
    let shallow : (t130, _) idx_mut = (.a130.#b128) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 398;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 398 failed %d" i;
  );
  (* Deepening to (.b130) *)
  let idx : (t130, _) idx_mut = (.b130) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b130) *)
    let shallow : (t130, _) idx_mut = (.b130) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 399;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 399 failed %d" i;
  );
  (* Deepening to (.b130.#a129) *)
  let idx : (t130, _) idx_mut = (.b130.#a129) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b130) *)
    let shallow : (t130, _) idx_mut = (.b130) in
    let deepened = (.idx_mut(shallow).#a129) in
    mark_test_run 400;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 400 failed %d" i;
    (* from (.b130.#a129) *)
    let shallow : (t130, _) idx_mut = (.b130.#a129) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 401;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 401 failed %d" i;
  );
  (* Deepening to (.b130.#b129) *)
  let idx : (t130, _) idx_mut = (.b130.#b129) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b130) *)
    let shallow : (t130, _) idx_mut = (.b130) in
    let deepened = (.idx_mut(shallow).#b129) in
    mark_test_run 402;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 402 failed %d" i;
    (* from (.b130.#b129) *)
    let shallow : (t130, _) idx_mut = (.b130.#b129) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 403;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 403 failed %d" i;
  );

  (**********************************************************)
  (*   t133 = { #{ int64; string }; #{ int64#; string } }   *)
  (**********************************************************)
  (* Deepening to (.a133) *)
  let idx : (t133, _) idx_mut = (.a133) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a133) *)
    let shallow : (t133, _) idx_mut = (.a133) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 404;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 404 failed %d" i;
  );
  (* Deepening to (.a133.#a131) *)
  let idx : (t133, _) idx_mut = (.a133.#a131) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a133) *)
    let shallow : (t133, _) idx_mut = (.a133) in
    let deepened = (.idx_mut(shallow).#a131) in
    mark_test_run 405;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 405 failed %d" i;
    (* from (.a133.#a131) *)
    let shallow : (t133, _) idx_mut = (.a133.#a131) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 406;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 406 failed %d" i;
  );
  (* Deepening to (.a133.#b131) *)
  let idx : (t133, _) idx_mut = (.a133.#b131) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a133) *)
    let shallow : (t133, _) idx_mut = (.a133) in
    let deepened = (.idx_mut(shallow).#b131) in
    mark_test_run 407;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 407 failed %d" i;
    (* from (.a133.#b131) *)
    let shallow : (t133, _) idx_mut = (.a133.#b131) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 408;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 408 failed %d" i;
  );
  (* Deepening to (.b133) *)
  let idx : (t133, _) idx_mut = (.b133) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b133) *)
    let shallow : (t133, _) idx_mut = (.b133) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 409;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 409 failed %d" i;
  );
  (* Deepening to (.b133.#a132) *)
  let idx : (t133, _) idx_mut = (.b133.#a132) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b133) *)
    let shallow : (t133, _) idx_mut = (.b133) in
    let deepened = (.idx_mut(shallow).#a132) in
    mark_test_run 410;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 410 failed %d" i;
    (* from (.b133.#a132) *)
    let shallow : (t133, _) idx_mut = (.b133.#a132) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 411;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 411 failed %d" i;
  );
  (* Deepening to (.b133.#b132) *)
  let idx : (t133, _) idx_mut = (.b133.#b132) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b133) *)
    let shallow : (t133, _) idx_mut = (.b133) in
    let deepened = (.idx_mut(shallow).#b132) in
    mark_test_run 412;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 412 failed %d" i;
    (* from (.b133.#b132) *)
    let shallow : (t133, _) idx_mut = (.b133.#b132) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 413;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 413 failed %d" i;
  );

  (********************************************************)
  (*   t136 = { #{ int64#; int64 }; #{ int64; int64 } }   *)
  (********************************************************)
  (* Deepening to (.a136) *)
  let idx : (t136, _) idx_mut = (.a136) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a136) *)
    let shallow : (t136, _) idx_mut = (.a136) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 414;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 414 failed %d" i;
  );
  (* Deepening to (.a136.#a134) *)
  let idx : (t136, _) idx_mut = (.a136.#a134) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a136) *)
    let shallow : (t136, _) idx_mut = (.a136) in
    let deepened = (.idx_mut(shallow).#a134) in
    mark_test_run 415;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 415 failed %d" i;
    (* from (.a136.#a134) *)
    let shallow : (t136, _) idx_mut = (.a136.#a134) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 416;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 416 failed %d" i;
  );
  (* Deepening to (.a136.#b134) *)
  let idx : (t136, _) idx_mut = (.a136.#b134) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a136) *)
    let shallow : (t136, _) idx_mut = (.a136) in
    let deepened = (.idx_mut(shallow).#b134) in
    mark_test_run 417;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 417 failed %d" i;
    (* from (.a136.#b134) *)
    let shallow : (t136, _) idx_mut = (.a136.#b134) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 418;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 418 failed %d" i;
  );
  (* Deepening to (.b136) *)
  let idx : (t136, _) idx_mut = (.b136) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b136) *)
    let shallow : (t136, _) idx_mut = (.b136) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 419;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 419 failed %d" i;
  );
  (* Deepening to (.b136.#a135) *)
  let idx : (t136, _) idx_mut = (.b136.#a135) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b136) *)
    let shallow : (t136, _) idx_mut = (.b136) in
    let deepened = (.idx_mut(shallow).#a135) in
    mark_test_run 420;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 420 failed %d" i;
    (* from (.b136.#a135) *)
    let shallow : (t136, _) idx_mut = (.b136.#a135) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 421;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 421 failed %d" i;
  );
  (* Deepening to (.b136.#b135) *)
  let idx : (t136, _) idx_mut = (.b136.#b135) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b136) *)
    let shallow : (t136, _) idx_mut = (.b136) in
    let deepened = (.idx_mut(shallow).#b135) in
    mark_test_run 422;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 422 failed %d" i;
    (* from (.b136.#b135) *)
    let shallow : (t136, _) idx_mut = (.b136.#b135) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 423;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 423 failed %d" i;
  );

  (***********************************************************)
  (*   t138 = { #{ int64#; int64 }; #{ float32#; float } }   *)
  (***********************************************************)
  (* Deepening to (.a138) *)
  let idx : (t138, _) idx_mut = (.a138) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a138) *)
    let shallow : (t138, _) idx_mut = (.a138) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 424;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 424 failed %d" i;
  );
  (* Deepening to (.a138.#a134) *)
  let idx : (t138, _) idx_mut = (.a138.#a134) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a138) *)
    let shallow : (t138, _) idx_mut = (.a138) in
    let deepened = (.idx_mut(shallow).#a134) in
    mark_test_run 425;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 425 failed %d" i;
    (* from (.a138.#a134) *)
    let shallow : (t138, _) idx_mut = (.a138.#a134) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 426;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 426 failed %d" i;
  );
  (* Deepening to (.a138.#b134) *)
  let idx : (t138, _) idx_mut = (.a138.#b134) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a138) *)
    let shallow : (t138, _) idx_mut = (.a138) in
    let deepened = (.idx_mut(shallow).#b134) in
    mark_test_run 427;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 427 failed %d" i;
    (* from (.a138.#b134) *)
    let shallow : (t138, _) idx_mut = (.a138.#b134) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 428;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 428 failed %d" i;
  );
  (* Deepening to (.b138) *)
  let idx : (t138, _) idx_mut = (.b138) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b138) *)
    let shallow : (t138, _) idx_mut = (.b138) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 429;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 429 failed %d" i;
  );
  (* Deepening to (.b138.#a137) *)
  let idx : (t138, _) idx_mut = (.b138.#a137) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b138) *)
    let shallow : (t138, _) idx_mut = (.b138) in
    let deepened = (.idx_mut(shallow).#a137) in
    mark_test_run 430;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 430 failed %d" i;
    (* from (.b138.#a137) *)
    let shallow : (t138, _) idx_mut = (.b138.#a137) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 431;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 431 failed %d" i;
  );
  (* Deepening to (.b138.#b137) *)
  let idx : (t138, _) idx_mut = (.b138.#b137) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b138) *)
    let shallow : (t138, _) idx_mut = (.b138) in
    let deepened = (.idx_mut(shallow).#b137) in
    mark_test_run 432;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 432 failed %d" i;
    (* from (.b138.#b137) *)
    let shallow : (t138, _) idx_mut = (.b138.#b137) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 433;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 433 failed %d" i;
  );

  (******************************)
  (*   t139 = { #{ int32# } }   *)
  (******************************)
  (* Deepening to (.a139) *)
  let idx : (t139, _) idx_mut = (.a139) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a139) *)
    let shallow : (t139, _) idx_mut = (.a139) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 434;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 434 failed %d" i;
  );
  (* Deepening to (.a139.#a22) *)
  let idx : (t139, _) idx_mut = (.a139.#a22) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a139) *)
    let shallow : (t139, _) idx_mut = (.a139) in
    let deepened = (.idx_mut(shallow).#a22) in
    mark_test_run 435;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 435 failed %d" i;
    (* from (.a139.#a22) *)
    let shallow : (t139, _) idx_mut = (.a139.#a22) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 436;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 436 failed %d" i;
  );

  (***********************************)
  (*   t140 = { #{ int32# }; int }   *)
  (***********************************)
  (* Deepening to (.a140) *)
  let idx : (t140, _) idx_mut = (.a140) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a140) *)
    let shallow : (t140, _) idx_mut = (.a140) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 437;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 437 failed %d" i;
  );
  (* Deepening to (.a140.#a22) *)
  let idx : (t140, _) idx_mut = (.a140.#a22) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a140) *)
    let shallow : (t140, _) idx_mut = (.a140) in
    let deepened = (.idx_mut(shallow).#a22) in
    mark_test_run 438;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 438 failed %d" i;
    (* from (.a140.#a22) *)
    let shallow : (t140, _) idx_mut = (.a140.#a22) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 439;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 439 failed %d" i;
  );
  (* Deepening to (.b140) *)
  let idx : (t140, _) idx_mut = (.b140) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b140) *)
    let shallow : (t140, _) idx_mut = (.b140) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 440;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 440 failed %d" i;
  );

  (**************************************)
  (*   t141 = { #{ int32# }; int32# }   *)
  (**************************************)
  (* Deepening to (.a141) *)
  let idx : (t141, _) idx_mut = (.a141) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a141) *)
    let shallow : (t141, _) idx_mut = (.a141) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 441;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 441 failed %d" i;
  );
  (* Deepening to (.a141.#a22) *)
  let idx : (t141, _) idx_mut = (.a141.#a22) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a141) *)
    let shallow : (t141, _) idx_mut = (.a141) in
    let deepened = (.idx_mut(shallow).#a22) in
    mark_test_run 442;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 442 failed %d" i;
    (* from (.a141.#a22) *)
    let shallow : (t141, _) idx_mut = (.a141.#a22) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 443;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 443 failed %d" i;
  );
  (* Deepening to (.b141) *)
  let idx : (t141, _) idx_mut = (.b141) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b141) *)
    let shallow : (t141, _) idx_mut = (.b141) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 444;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 444 failed %d" i;
  );

  (***********************************)
  (*   t142 = { #{ int32#; int } }   *)
  (***********************************)
  (* Deepening to (.a142) *)
  let idx : (t142, _) idx_mut = (.a142) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a142) *)
    let shallow : (t142, _) idx_mut = (.a142) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 445;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 445 failed %d" i;
  );
  (* Deepening to (.a142.#a24) *)
  let idx : (t142, _) idx_mut = (.a142.#a24) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a142) *)
    let shallow : (t142, _) idx_mut = (.a142) in
    let deepened = (.idx_mut(shallow).#a24) in
    mark_test_run 446;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 446 failed %d" i;
    (* from (.a142.#a24) *)
    let shallow : (t142, _) idx_mut = (.a142.#a24) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 447;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 447 failed %d" i;
  );
  (* Deepening to (.a142.#b24) *)
  let idx : (t142, _) idx_mut = (.a142.#b24) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a142) *)
    let shallow : (t142, _) idx_mut = (.a142) in
    let deepened = (.idx_mut(shallow).#b24) in
    mark_test_run 448;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 448 failed %d" i;
    (* from (.a142.#b24) *)
    let shallow : (t142, _) idx_mut = (.a142.#b24) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 449;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 449 failed %d" i;
  );

  (****************************************)
  (*   t143 = { #{ int32#; int }; int }   *)
  (****************************************)
  (* Deepening to (.a143) *)
  let idx : (t143, _) idx_mut = (.a143) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a143) *)
    let shallow : (t143, _) idx_mut = (.a143) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 450;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 450 failed %d" i;
  );
  (* Deepening to (.a143.#a24) *)
  let idx : (t143, _) idx_mut = (.a143.#a24) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a143) *)
    let shallow : (t143, _) idx_mut = (.a143) in
    let deepened = (.idx_mut(shallow).#a24) in
    mark_test_run 451;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 451 failed %d" i;
    (* from (.a143.#a24) *)
    let shallow : (t143, _) idx_mut = (.a143.#a24) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 452;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 452 failed %d" i;
  );
  (* Deepening to (.a143.#b24) *)
  let idx : (t143, _) idx_mut = (.a143.#b24) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a143) *)
    let shallow : (t143, _) idx_mut = (.a143) in
    let deepened = (.idx_mut(shallow).#b24) in
    mark_test_run 453;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 453 failed %d" i;
    (* from (.a143.#b24) *)
    let shallow : (t143, _) idx_mut = (.a143.#b24) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 454;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 454 failed %d" i;
  );
  (* Deepening to (.b143) *)
  let idx : (t143, _) idx_mut = (.b143) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b143) *)
    let shallow : (t143, _) idx_mut = (.b143) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 455;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 455 failed %d" i;
  );

  (*******************************************)
  (*   t144 = { #{ int32#; int }; int32# }   *)
  (*******************************************)
  (* Deepening to (.a144) *)
  let idx : (t144, _) idx_mut = (.a144) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a144) *)
    let shallow : (t144, _) idx_mut = (.a144) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 456;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 456 failed %d" i;
  );
  (* Deepening to (.a144.#a24) *)
  let idx : (t144, _) idx_mut = (.a144.#a24) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a144) *)
    let shallow : (t144, _) idx_mut = (.a144) in
    let deepened = (.idx_mut(shallow).#a24) in
    mark_test_run 457;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 457 failed %d" i;
    (* from (.a144.#a24) *)
    let shallow : (t144, _) idx_mut = (.a144.#a24) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 458;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 458 failed %d" i;
  );
  (* Deepening to (.a144.#b24) *)
  let idx : (t144, _) idx_mut = (.a144.#b24) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a144) *)
    let shallow : (t144, _) idx_mut = (.a144) in
    let deepened = (.idx_mut(shallow).#b24) in
    mark_test_run 459;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 459 failed %d" i;
    (* from (.a144.#b24) *)
    let shallow : (t144, _) idx_mut = (.a144.#b24) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 460;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 460 failed %d" i;
  );
  (* Deepening to (.b144) *)
  let idx : (t144, _) idx_mut = (.b144) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b144) *)
    let shallow : (t144, _) idx_mut = (.b144) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 461;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 461 failed %d" i;
  );

  (**************************************)
  (*   t145 = { #{ int32#; int32# } }   *)
  (**************************************)
  (* Deepening to (.a145) *)
  let idx : (t145, _) idx_mut = (.a145) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a145) *)
    let shallow : (t145, _) idx_mut = (.a145) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 462;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 462 failed %d" i;
  );
  (* Deepening to (.a145.#a26) *)
  let idx : (t145, _) idx_mut = (.a145.#a26) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a145) *)
    let shallow : (t145, _) idx_mut = (.a145) in
    let deepened = (.idx_mut(shallow).#a26) in
    mark_test_run 463;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 463 failed %d" i;
    (* from (.a145.#a26) *)
    let shallow : (t145, _) idx_mut = (.a145.#a26) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 464;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 464 failed %d" i;
  );
  (* Deepening to (.a145.#b26) *)
  let idx : (t145, _) idx_mut = (.a145.#b26) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a145) *)
    let shallow : (t145, _) idx_mut = (.a145) in
    let deepened = (.idx_mut(shallow).#b26) in
    mark_test_run 465;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 465 failed %d" i;
    (* from (.a145.#b26) *)
    let shallow : (t145, _) idx_mut = (.a145.#b26) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 466;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 466 failed %d" i;
  );

  (*******************************************)
  (*   t146 = { #{ int32#; int32# }; int }   *)
  (*******************************************)
  (* Deepening to (.a146) *)
  let idx : (t146, _) idx_mut = (.a146) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a146) *)
    let shallow : (t146, _) idx_mut = (.a146) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 467;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 467 failed %d" i;
  );
  (* Deepening to (.a146.#a26) *)
  let idx : (t146, _) idx_mut = (.a146.#a26) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a146) *)
    let shallow : (t146, _) idx_mut = (.a146) in
    let deepened = (.idx_mut(shallow).#a26) in
    mark_test_run 468;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 468 failed %d" i;
    (* from (.a146.#a26) *)
    let shallow : (t146, _) idx_mut = (.a146.#a26) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 469;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 469 failed %d" i;
  );
  (* Deepening to (.a146.#b26) *)
  let idx : (t146, _) idx_mut = (.a146.#b26) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a146) *)
    let shallow : (t146, _) idx_mut = (.a146) in
    let deepened = (.idx_mut(shallow).#b26) in
    mark_test_run 470;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 470 failed %d" i;
    (* from (.a146.#b26) *)
    let shallow : (t146, _) idx_mut = (.a146.#b26) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 471;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 471 failed %d" i;
  );
  (* Deepening to (.b146) *)
  let idx : (t146, _) idx_mut = (.b146) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b146) *)
    let shallow : (t146, _) idx_mut = (.b146) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 472;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 472 failed %d" i;
  );

  (**********************************************)
  (*   t147 = { #{ int32#; int32# }; int32# }   *)
  (**********************************************)
  (* Deepening to (.a147) *)
  let idx : (t147, _) idx_mut = (.a147) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a147) *)
    let shallow : (t147, _) idx_mut = (.a147) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 473;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 473 failed %d" i;
  );
  (* Deepening to (.a147.#a26) *)
  let idx : (t147, _) idx_mut = (.a147.#a26) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a147) *)
    let shallow : (t147, _) idx_mut = (.a147) in
    let deepened = (.idx_mut(shallow).#a26) in
    mark_test_run 474;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 474 failed %d" i;
    (* from (.a147.#a26) *)
    let shallow : (t147, _) idx_mut = (.a147.#a26) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 475;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 475 failed %d" i;
  );
  (* Deepening to (.a147.#b26) *)
  let idx : (t147, _) idx_mut = (.a147.#b26) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a147) *)
    let shallow : (t147, _) idx_mut = (.a147) in
    let deepened = (.idx_mut(shallow).#b26) in
    mark_test_run 476;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 476 failed %d" i;
    (* from (.a147.#b26) *)
    let shallow : (t147, _) idx_mut = (.a147.#b26) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 477;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 477 failed %d" i;
  );
  (* Deepening to (.b147) *)
  let idx : (t147, _) idx_mut = (.b147) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b147) *)
    let shallow : (t147, _) idx_mut = (.b147) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 478;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 478 failed %d" i;
  );

  (*****************************)
  (*   t148 = { #{ float } }   *)
  (*****************************)
  (* Deepening to (.a148) *)
  let idx : (t148, _) idx_mut = (.a148) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a148) *)
    let shallow : (t148, _) idx_mut = (.a148) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 479;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 479 failed %d" i;
  );
  (* Deepening to (.a148.#a28) *)
  let idx : (t148, _) idx_mut = (.a148.#a28) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* Note: can't deepen (.a148) because it's a path to a flattened
       float, making its element type [float#] *)
    (* from (.a148.#a28) *)
    let shallow : (t148, _) idx_mut = (.a148.#a28) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 480;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 480 failed %d" i;
  );

  (**********************************)
  (*   t149 = { #{ float }; int }   *)
  (**********************************)
  (* Deepening to (.a149) *)
  let idx : (t149, _) idx_mut = (.a149) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a149) *)
    let shallow : (t149, _) idx_mut = (.a149) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 481;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 481 failed %d" i;
  );
  (* Deepening to (.a149.#a28) *)
  let idx : (t149, _) idx_mut = (.a149.#a28) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a149) *)
    let shallow : (t149, _) idx_mut = (.a149) in
    let deepened = (.idx_mut(shallow).#a28) in
    mark_test_run 482;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 482 failed %d" i;
    (* from (.a149.#a28) *)
    let shallow : (t149, _) idx_mut = (.a149.#a28) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 483;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 483 failed %d" i;
  );
  (* Deepening to (.b149) *)
  let idx : (t149, _) idx_mut = (.b149) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b149) *)
    let shallow : (t149, _) idx_mut = (.b149) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 484;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 484 failed %d" i;
  );

  (************************************)
  (*   t150 = { #{ float }; float }   *)
  (************************************)
  (* Deepening to (.a150) *)
  let idx : (t150, _) idx_mut = (.a150) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a150) *)
    let shallow : (t150, _) idx_mut = (.a150) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 485;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 485 failed %d" i;
  );
  (* Deepening to (.a150.#a28) *)
  let idx : (t150, _) idx_mut = (.a150.#a28) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* Note: can't deepen (.a150) because it's a path to a flattened
       float, making its element type [float#] *)
    (* from (.a150.#a28) *)
    let shallow : (t150, _) idx_mut = (.a150.#a28) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 486;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 486 failed %d" i;
  );
  (* Deepening to (.b150) *)
  let idx : (t150, _) idx_mut = (.b150) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b150) *)
    let shallow : (t150, _) idx_mut = (.b150) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 487;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 487 failed %d" i;
  );

  (*************************************)
  (*   t151 = { #{ float }; float# }   *)
  (*************************************)
  (* Deepening to (.a151) *)
  let idx : (t151, _) idx_mut = (.a151) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a151) *)
    let shallow : (t151, _) idx_mut = (.a151) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 488;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 488 failed %d" i;
  );
  (* Deepening to (.a151.#a28) *)
  let idx : (t151, _) idx_mut = (.a151.#a28) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* Note: can't deepen (.a151) because it's a path to a flattened
       float, making its element type [float#] *)
    (* from (.a151.#a28) *)
    let shallow : (t151, _) idx_mut = (.a151.#a28) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 489;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 489 failed %d" i;
  );
  (* Deepening to (.b151) *)
  let idx : (t151, _) idx_mut = (.b151) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b151) *)
    let shallow : (t151, _) idx_mut = (.b151) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 490;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 490 failed %d" i;
  );

  (**********************************)
  (*   t152 = { #{ float; int } }   *)
  (**********************************)
  (* Deepening to (.a152) *)
  let idx : (t152, _) idx_mut = (.a152) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a152) *)
    let shallow : (t152, _) idx_mut = (.a152) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 491;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 491 failed %d" i;
  );
  (* Deepening to (.a152.#a30) *)
  let idx : (t152, _) idx_mut = (.a152.#a30) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a152) *)
    let shallow : (t152, _) idx_mut = (.a152) in
    let deepened = (.idx_mut(shallow).#a30) in
    mark_test_run 492;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 492 failed %d" i;
    (* from (.a152.#a30) *)
    let shallow : (t152, _) idx_mut = (.a152.#a30) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 493;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 493 failed %d" i;
  );
  (* Deepening to (.a152.#b30) *)
  let idx : (t152, _) idx_mut = (.a152.#b30) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a152) *)
    let shallow : (t152, _) idx_mut = (.a152) in
    let deepened = (.idx_mut(shallow).#b30) in
    mark_test_run 494;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 494 failed %d" i;
    (* from (.a152.#b30) *)
    let shallow : (t152, _) idx_mut = (.a152.#b30) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 495;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 495 failed %d" i;
  );

  (***************************************)
  (*   t153 = { #{ float; int }; int }   *)
  (***************************************)
  (* Deepening to (.a153) *)
  let idx : (t153, _) idx_mut = (.a153) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a153) *)
    let shallow : (t153, _) idx_mut = (.a153) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 496;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 496 failed %d" i;
  );
  (* Deepening to (.a153.#a30) *)
  let idx : (t153, _) idx_mut = (.a153.#a30) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a153) *)
    let shallow : (t153, _) idx_mut = (.a153) in
    let deepened = (.idx_mut(shallow).#a30) in
    mark_test_run 497;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 497 failed %d" i;
    (* from (.a153.#a30) *)
    let shallow : (t153, _) idx_mut = (.a153.#a30) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 498;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 498 failed %d" i;
  );
  (* Deepening to (.a153.#b30) *)
  let idx : (t153, _) idx_mut = (.a153.#b30) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a153) *)
    let shallow : (t153, _) idx_mut = (.a153) in
    let deepened = (.idx_mut(shallow).#b30) in
    mark_test_run 499;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 499 failed %d" i;
    (* from (.a153.#b30) *)
    let shallow : (t153, _) idx_mut = (.a153.#b30) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 500;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 500 failed %d" i;
  );
  (* Deepening to (.b153) *)
  let idx : (t153, _) idx_mut = (.b153) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b153) *)
    let shallow : (t153, _) idx_mut = (.b153) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 501;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 501 failed %d" i;
  );

  (*****************************************)
  (*   t154 = { #{ float; int }; float }   *)
  (*****************************************)
  (* Deepening to (.a154) *)
  let idx : (t154, _) idx_mut = (.a154) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a154) *)
    let shallow : (t154, _) idx_mut = (.a154) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 502;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 502 failed %d" i;
  );
  (* Deepening to (.a154.#a30) *)
  let idx : (t154, _) idx_mut = (.a154.#a30) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a154) *)
    let shallow : (t154, _) idx_mut = (.a154) in
    let deepened = (.idx_mut(shallow).#a30) in
    mark_test_run 503;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 503 failed %d" i;
    (* from (.a154.#a30) *)
    let shallow : (t154, _) idx_mut = (.a154.#a30) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 504;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 504 failed %d" i;
  );
  (* Deepening to (.a154.#b30) *)
  let idx : (t154, _) idx_mut = (.a154.#b30) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a154) *)
    let shallow : (t154, _) idx_mut = (.a154) in
    let deepened = (.idx_mut(shallow).#b30) in
    mark_test_run 505;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 505 failed %d" i;
    (* from (.a154.#b30) *)
    let shallow : (t154, _) idx_mut = (.a154.#b30) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 506;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 506 failed %d" i;
  );
  (* Deepening to (.b154) *)
  let idx : (t154, _) idx_mut = (.b154) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b154) *)
    let shallow : (t154, _) idx_mut = (.b154) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 507;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 507 failed %d" i;
  );

  (************************************)
  (*   t155 = { #{ float; float } }   *)
  (************************************)
  (* Deepening to (.a155) *)
  let idx : (t155, _) idx_mut = (.a155) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a155) *)
    let shallow : (t155, _) idx_mut = (.a155) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 508;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 508 failed %d" i;
  );
  (* Deepening to (.a155.#a32) *)
  let idx : (t155, _) idx_mut = (.a155.#a32) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a155) *)
    let shallow : (t155, _) idx_mut = (.a155) in
    let deepened = (.idx_mut(shallow).#a32) in
    mark_test_run 509;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 509 failed %d" i;
    (* from (.a155.#a32) *)
    let shallow : (t155, _) idx_mut = (.a155.#a32) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 510;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 510 failed %d" i;
  );
  (* Deepening to (.a155.#b32) *)
  let idx : (t155, _) idx_mut = (.a155.#b32) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a155) *)
    let shallow : (t155, _) idx_mut = (.a155) in
    let deepened = (.idx_mut(shallow).#b32) in
    mark_test_run 511;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 511 failed %d" i;
    (* from (.a155.#b32) *)
    let shallow : (t155, _) idx_mut = (.a155.#b32) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 512;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 512 failed %d" i;
  );

  (*****************************************)
  (*   t156 = { #{ float; float }; int }   *)
  (*****************************************)
  (* Deepening to (.a156) *)
  let idx : (t156, _) idx_mut = (.a156) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a156) *)
    let shallow : (t156, _) idx_mut = (.a156) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 513;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 513 failed %d" i;
  );
  (* Deepening to (.a156.#a32) *)
  let idx : (t156, _) idx_mut = (.a156.#a32) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a156) *)
    let shallow : (t156, _) idx_mut = (.a156) in
    let deepened = (.idx_mut(shallow).#a32) in
    mark_test_run 514;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 514 failed %d" i;
    (* from (.a156.#a32) *)
    let shallow : (t156, _) idx_mut = (.a156.#a32) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 515;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 515 failed %d" i;
  );
  (* Deepening to (.a156.#b32) *)
  let idx : (t156, _) idx_mut = (.a156.#b32) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a156) *)
    let shallow : (t156, _) idx_mut = (.a156) in
    let deepened = (.idx_mut(shallow).#b32) in
    mark_test_run 516;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 516 failed %d" i;
    (* from (.a156.#b32) *)
    let shallow : (t156, _) idx_mut = (.a156.#b32) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 517;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 517 failed %d" i;
  );
  (* Deepening to (.b156) *)
  let idx : (t156, _) idx_mut = (.b156) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b156) *)
    let shallow : (t156, _) idx_mut = (.b156) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 518;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 518 failed %d" i;
  );

  (*******************************************)
  (*   t157 = { #{ float; float }; float }   *)
  (*******************************************)
  (* Deepening to (.a157) *)
  let idx : (t157, _) idx_mut = (.a157) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a157) *)
    let shallow : (t157, _) idx_mut = (.a157) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 519;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 519 failed %d" i;
  );
  (* Deepening to (.a157.#a32) *)
  let idx : (t157, _) idx_mut = (.a157.#a32) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a157) *)
    let shallow : (t157, _) idx_mut = (.a157) in
    let deepened = (.idx_mut(shallow).#a32) in
    mark_test_run 520;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 520 failed %d" i;
    (* from (.a157.#a32) *)
    let shallow : (t157, _) idx_mut = (.a157.#a32) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 521;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 521 failed %d" i;
  );
  (* Deepening to (.a157.#b32) *)
  let idx : (t157, _) idx_mut = (.a157.#b32) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a157) *)
    let shallow : (t157, _) idx_mut = (.a157) in
    let deepened = (.idx_mut(shallow).#b32) in
    mark_test_run 522;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 522 failed %d" i;
    (* from (.a157.#b32) *)
    let shallow : (t157, _) idx_mut = (.a157.#b32) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 523;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 523 failed %d" i;
  );
  (* Deepening to (.b157) *)
  let idx : (t157, _) idx_mut = (.b157) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b157) *)
    let shallow : (t157, _) idx_mut = (.b157) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 524;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 524 failed %d" i;
  );

  (********************************************)
  (*   t158 = { #{ float; float }; float# }   *)
  (********************************************)
  (* Deepening to (.a158) *)
  let idx : (t158, _) idx_mut = (.a158) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a158) *)
    let shallow : (t158, _) idx_mut = (.a158) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 525;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 525 failed %d" i;
  );
  (* Deepening to (.a158.#a32) *)
  let idx : (t158, _) idx_mut = (.a158.#a32) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a158) *)
    let shallow : (t158, _) idx_mut = (.a158) in
    let deepened = (.idx_mut(shallow).#a32) in
    mark_test_run 526;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 526 failed %d" i;
    (* from (.a158.#a32) *)
    let shallow : (t158, _) idx_mut = (.a158.#a32) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 527;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 527 failed %d" i;
  );
  (* Deepening to (.a158.#b32) *)
  let idx : (t158, _) idx_mut = (.a158.#b32) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a158) *)
    let shallow : (t158, _) idx_mut = (.a158) in
    let deepened = (.idx_mut(shallow).#b32) in
    mark_test_run 528;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 528 failed %d" i;
    (* from (.a158.#b32) *)
    let shallow : (t158, _) idx_mut = (.a158.#b32) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 529;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 529 failed %d" i;
  );
  (* Deepening to (.b158) *)
  let idx : (t158, _) idx_mut = (.b158) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b158) *)
    let shallow : (t158, _) idx_mut = (.b158) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 530;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 530 failed %d" i;
  );

  (*************************************)
  (*   t159 = { #{ float; float# } }   *)
  (*************************************)
  (* Deepening to (.a159) *)
  let idx : (t159, _) idx_mut = (.a159) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a159) *)
    let shallow : (t159, _) idx_mut = (.a159) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 531;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 531 failed %d" i;
  );
  (* Deepening to (.a159.#a93) *)
  let idx : (t159, _) idx_mut = (.a159.#a93) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a159) *)
    let shallow : (t159, _) idx_mut = (.a159) in
    let deepened = (.idx_mut(shallow).#a93) in
    mark_test_run 532;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 532 failed %d" i;
    (* from (.a159.#a93) *)
    let shallow : (t159, _) idx_mut = (.a159.#a93) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 533;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 533 failed %d" i;
  );
  (* Deepening to (.a159.#b93) *)
  let idx : (t159, _) idx_mut = (.a159.#b93) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a159) *)
    let shallow : (t159, _) idx_mut = (.a159) in
    let deepened = (.idx_mut(shallow).#b93) in
    mark_test_run 534;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 534 failed %d" i;
    (* from (.a159.#b93) *)
    let shallow : (t159, _) idx_mut = (.a159.#b93) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 535;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 535 failed %d" i;
  );

  (********************************************)
  (*   t160 = { #{ float; float# }; float }   *)
  (********************************************)
  (* Deepening to (.a160) *)
  let idx : (t160, _) idx_mut = (.a160) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a160) *)
    let shallow : (t160, _) idx_mut = (.a160) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 536;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 536 failed %d" i;
  );
  (* Deepening to (.a160.#a93) *)
  let idx : (t160, _) idx_mut = (.a160.#a93) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a160) *)
    let shallow : (t160, _) idx_mut = (.a160) in
    let deepened = (.idx_mut(shallow).#a93) in
    mark_test_run 537;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 537 failed %d" i;
    (* from (.a160.#a93) *)
    let shallow : (t160, _) idx_mut = (.a160.#a93) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 538;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 538 failed %d" i;
  );
  (* Deepening to (.a160.#b93) *)
  let idx : (t160, _) idx_mut = (.a160.#b93) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a160) *)
    let shallow : (t160, _) idx_mut = (.a160) in
    let deepened = (.idx_mut(shallow).#b93) in
    mark_test_run 539;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 539 failed %d" i;
    (* from (.a160.#b93) *)
    let shallow : (t160, _) idx_mut = (.a160.#b93) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 540;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 540 failed %d" i;
  );
  (* Deepening to (.b160) *)
  let idx : (t160, _) idx_mut = (.b160) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b160) *)
    let shallow : (t160, _) idx_mut = (.b160) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 541;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 541 failed %d" i;
  );

  (*********************************************)
  (*   t161 = { #{ float; float# }; float# }   *)
  (*********************************************)
  (* Deepening to (.a161) *)
  let idx : (t161, _) idx_mut = (.a161) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a161) *)
    let shallow : (t161, _) idx_mut = (.a161) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 542;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 542 failed %d" i;
  );
  (* Deepening to (.a161.#a93) *)
  let idx : (t161, _) idx_mut = (.a161.#a93) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a161) *)
    let shallow : (t161, _) idx_mut = (.a161) in
    let deepened = (.idx_mut(shallow).#a93) in
    mark_test_run 543;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 543 failed %d" i;
    (* from (.a161.#a93) *)
    let shallow : (t161, _) idx_mut = (.a161.#a93) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 544;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 544 failed %d" i;
  );
  (* Deepening to (.a161.#b93) *)
  let idx : (t161, _) idx_mut = (.a161.#b93) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a161) *)
    let shallow : (t161, _) idx_mut = (.a161) in
    let deepened = (.idx_mut(shallow).#b93) in
    mark_test_run 545;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 545 failed %d" i;
    (* from (.a161.#b93) *)
    let shallow : (t161, _) idx_mut = (.a161.#b93) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 546;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 546 failed %d" i;
  );
  (* Deepening to (.b161) *)
  let idx : (t161, _) idx_mut = (.b161) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b161) *)
    let shallow : (t161, _) idx_mut = (.b161) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 547;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 547 failed %d" i;
  );

  (******************************)
  (*   t162 = { #{ float# } }   *)
  (******************************)
  (* Deepening to (.a162) *)
  let idx : (t162, _) idx_mut = (.a162) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a162) *)
    let shallow : (t162, _) idx_mut = (.a162) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 548;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 548 failed %d" i;
  );
  (* Deepening to (.a162.#a95) *)
  let idx : (t162, _) idx_mut = (.a162.#a95) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a162) *)
    let shallow : (t162, _) idx_mut = (.a162) in
    let deepened = (.idx_mut(shallow).#a95) in
    mark_test_run 549;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 549 failed %d" i;
    (* from (.a162.#a95) *)
    let shallow : (t162, _) idx_mut = (.a162.#a95) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 550;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 550 failed %d" i;
  );

  (*************************************)
  (*   t163 = { #{ float# }; float }   *)
  (*************************************)
  (* Deepening to (.a163) *)
  let idx : (t163, _) idx_mut = (.a163) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a163) *)
    let shallow : (t163, _) idx_mut = (.a163) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 551;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 551 failed %d" i;
  );
  (* Deepening to (.a163.#a95) *)
  let idx : (t163, _) idx_mut = (.a163.#a95) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a163) *)
    let shallow : (t163, _) idx_mut = (.a163) in
    let deepened = (.idx_mut(shallow).#a95) in
    mark_test_run 552;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 552 failed %d" i;
    (* from (.a163.#a95) *)
    let shallow : (t163, _) idx_mut = (.a163.#a95) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 553;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 553 failed %d" i;
  );
  (* Deepening to (.b163) *)
  let idx : (t163, _) idx_mut = (.b163) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b163) *)
    let shallow : (t163, _) idx_mut = (.b163) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 554;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 554 failed %d" i;
  );

  (**************************************)
  (*   t164 = { #{ float# }; float# }   *)
  (**************************************)
  (* Deepening to (.a164) *)
  let idx : (t164, _) idx_mut = (.a164) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a164) *)
    let shallow : (t164, _) idx_mut = (.a164) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 555;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 555 failed %d" i;
  );
  (* Deepening to (.a164.#a95) *)
  let idx : (t164, _) idx_mut = (.a164.#a95) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a164) *)
    let shallow : (t164, _) idx_mut = (.a164) in
    let deepened = (.idx_mut(shallow).#a95) in
    mark_test_run 556;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 556 failed %d" i;
    (* from (.a164.#a95) *)
    let shallow : (t164, _) idx_mut = (.a164.#a95) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 557;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 557 failed %d" i;
  );
  (* Deepening to (.b164) *)
  let idx : (t164, _) idx_mut = (.b164) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b164) *)
    let shallow : (t164, _) idx_mut = (.b164) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 558;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 558 failed %d" i;
  );

  (*************************************)
  (*   t165 = { #{ float#; float } }   *)
  (*************************************)
  (* Deepening to (.a165) *)
  let idx : (t165, _) idx_mut = (.a165) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a165) *)
    let shallow : (t165, _) idx_mut = (.a165) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 559;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 559 failed %d" i;
  );
  (* Deepening to (.a165.#a97) *)
  let idx : (t165, _) idx_mut = (.a165.#a97) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a165) *)
    let shallow : (t165, _) idx_mut = (.a165) in
    let deepened = (.idx_mut(shallow).#a97) in
    mark_test_run 560;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 560 failed %d" i;
    (* from (.a165.#a97) *)
    let shallow : (t165, _) idx_mut = (.a165.#a97) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 561;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 561 failed %d" i;
  );
  (* Deepening to (.a165.#b97) *)
  let idx : (t165, _) idx_mut = (.a165.#b97) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a165) *)
    let shallow : (t165, _) idx_mut = (.a165) in
    let deepened = (.idx_mut(shallow).#b97) in
    mark_test_run 562;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 562 failed %d" i;
    (* from (.a165.#b97) *)
    let shallow : (t165, _) idx_mut = (.a165.#b97) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 563;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 563 failed %d" i;
  );

  (********************************************)
  (*   t166 = { #{ float#; float }; float }   *)
  (********************************************)
  (* Deepening to (.a166) *)
  let idx : (t166, _) idx_mut = (.a166) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a166) *)
    let shallow : (t166, _) idx_mut = (.a166) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 564;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 564 failed %d" i;
  );
  (* Deepening to (.a166.#a97) *)
  let idx : (t166, _) idx_mut = (.a166.#a97) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a166) *)
    let shallow : (t166, _) idx_mut = (.a166) in
    let deepened = (.idx_mut(shallow).#a97) in
    mark_test_run 565;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 565 failed %d" i;
    (* from (.a166.#a97) *)
    let shallow : (t166, _) idx_mut = (.a166.#a97) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 566;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 566 failed %d" i;
  );
  (* Deepening to (.a166.#b97) *)
  let idx : (t166, _) idx_mut = (.a166.#b97) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a166) *)
    let shallow : (t166, _) idx_mut = (.a166) in
    let deepened = (.idx_mut(shallow).#b97) in
    mark_test_run 567;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 567 failed %d" i;
    (* from (.a166.#b97) *)
    let shallow : (t166, _) idx_mut = (.a166.#b97) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 568;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 568 failed %d" i;
  );
  (* Deepening to (.b166) *)
  let idx : (t166, _) idx_mut = (.b166) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b166) *)
    let shallow : (t166, _) idx_mut = (.b166) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 569;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 569 failed %d" i;
  );

  (*********************************************)
  (*   t167 = { #{ float#; float }; float# }   *)
  (*********************************************)
  (* Deepening to (.a167) *)
  let idx : (t167, _) idx_mut = (.a167) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a167) *)
    let shallow : (t167, _) idx_mut = (.a167) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 570;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 570 failed %d" i;
  );
  (* Deepening to (.a167.#a97) *)
  let idx : (t167, _) idx_mut = (.a167.#a97) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a167) *)
    let shallow : (t167, _) idx_mut = (.a167) in
    let deepened = (.idx_mut(shallow).#a97) in
    mark_test_run 571;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 571 failed %d" i;
    (* from (.a167.#a97) *)
    let shallow : (t167, _) idx_mut = (.a167.#a97) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 572;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 572 failed %d" i;
  );
  (* Deepening to (.a167.#b97) *)
  let idx : (t167, _) idx_mut = (.a167.#b97) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a167) *)
    let shallow : (t167, _) idx_mut = (.a167) in
    let deepened = (.idx_mut(shallow).#b97) in
    mark_test_run 573;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 573 failed %d" i;
    (* from (.a167.#b97) *)
    let shallow : (t167, _) idx_mut = (.a167.#b97) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 574;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 574 failed %d" i;
  );
  (* Deepening to (.b167) *)
  let idx : (t167, _) idx_mut = (.b167) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b167) *)
    let shallow : (t167, _) idx_mut = (.b167) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 575;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 575 failed %d" i;
  );

  (**************************************)
  (*   t168 = { #{ float#; float# } }   *)
  (**************************************)
  (* Deepening to (.a168) *)
  let idx : (t168, _) idx_mut = (.a168) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a168) *)
    let shallow : (t168, _) idx_mut = (.a168) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 576;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 576 failed %d" i;
  );
  (* Deepening to (.a168.#a99) *)
  let idx : (t168, _) idx_mut = (.a168.#a99) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a168) *)
    let shallow : (t168, _) idx_mut = (.a168) in
    let deepened = (.idx_mut(shallow).#a99) in
    mark_test_run 577;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 577 failed %d" i;
    (* from (.a168.#a99) *)
    let shallow : (t168, _) idx_mut = (.a168.#a99) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 578;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 578 failed %d" i;
  );
  (* Deepening to (.a168.#b99) *)
  let idx : (t168, _) idx_mut = (.a168.#b99) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a168) *)
    let shallow : (t168, _) idx_mut = (.a168) in
    let deepened = (.idx_mut(shallow).#b99) in
    mark_test_run 579;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 579 failed %d" i;
    (* from (.a168.#b99) *)
    let shallow : (t168, _) idx_mut = (.a168.#b99) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 580;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 580 failed %d" i;
  );

  (*********************************************)
  (*   t169 = { #{ float#; float# }; float }   *)
  (*********************************************)
  (* Deepening to (.a169) *)
  let idx : (t169, _) idx_mut = (.a169) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a169) *)
    let shallow : (t169, _) idx_mut = (.a169) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 581;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 581 failed %d" i;
  );
  (* Deepening to (.a169.#a99) *)
  let idx : (t169, _) idx_mut = (.a169.#a99) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a169) *)
    let shallow : (t169, _) idx_mut = (.a169) in
    let deepened = (.idx_mut(shallow).#a99) in
    mark_test_run 582;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 582 failed %d" i;
    (* from (.a169.#a99) *)
    let shallow : (t169, _) idx_mut = (.a169.#a99) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 583;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 583 failed %d" i;
  );
  (* Deepening to (.a169.#b99) *)
  let idx : (t169, _) idx_mut = (.a169.#b99) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a169) *)
    let shallow : (t169, _) idx_mut = (.a169) in
    let deepened = (.idx_mut(shallow).#b99) in
    mark_test_run 584;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 584 failed %d" i;
    (* from (.a169.#b99) *)
    let shallow : (t169, _) idx_mut = (.a169.#b99) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 585;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 585 failed %d" i;
  );
  (* Deepening to (.b169) *)
  let idx : (t169, _) idx_mut = (.b169) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b169) *)
    let shallow : (t169, _) idx_mut = (.b169) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 586;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 586 failed %d" i;
  );

  (**********************************************)
  (*   t170 = { #{ float#; float# }; float# }   *)
  (**********************************************)
  (* Deepening to (.a170) *)
  let idx : (t170, _) idx_mut = (.a170) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a170) *)
    let shallow : (t170, _) idx_mut = (.a170) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 587;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 587 failed %d" i;
  );
  (* Deepening to (.a170.#a99) *)
  let idx : (t170, _) idx_mut = (.a170.#a99) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a170) *)
    let shallow : (t170, _) idx_mut = (.a170) in
    let deepened = (.idx_mut(shallow).#a99) in
    mark_test_run 588;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 588 failed %d" i;
    (* from (.a170.#a99) *)
    let shallow : (t170, _) idx_mut = (.a170.#a99) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 589;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 589 failed %d" i;
  );
  (* Deepening to (.a170.#b99) *)
  let idx : (t170, _) idx_mut = (.a170.#b99) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a170) *)
    let shallow : (t170, _) idx_mut = (.a170) in
    let deepened = (.idx_mut(shallow).#b99) in
    mark_test_run 590;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 590 failed %d" i;
    (* from (.a170.#b99) *)
    let shallow : (t170, _) idx_mut = (.a170.#b99) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 591;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 591 failed %d" i;
  );
  (* Deepening to (.b170) *)
  let idx : (t170, _) idx_mut = (.b170) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b170) *)
    let shallow : (t170, _) idx_mut = (.b170) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 592;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 592 failed %d" i;
  );

  (*************************************************************)
  (*   t173 = { #{ float32#; int64# }; #{ string; int64# } }   *)
  (*************************************************************)
  (* Deepening to (.a173) *)
  let idx : (t173, _) idx_mut = (.a173) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a173) *)
    let shallow : (t173, _) idx_mut = (.a173) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 593;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 593 failed %d" i;
  );
  (* Deepening to (.a173.#a171) *)
  let idx : (t173, _) idx_mut = (.a173.#a171) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a173) *)
    let shallow : (t173, _) idx_mut = (.a173) in
    let deepened = (.idx_mut(shallow).#a171) in
    mark_test_run 594;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 594 failed %d" i;
    (* from (.a173.#a171) *)
    let shallow : (t173, _) idx_mut = (.a173.#a171) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 595;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 595 failed %d" i;
  );
  (* Deepening to (.a173.#b171) *)
  let idx : (t173, _) idx_mut = (.a173.#b171) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.a173) *)
    let shallow : (t173, _) idx_mut = (.a173) in
    let deepened = (.idx_mut(shallow).#b171) in
    mark_test_run 596;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 596 failed %d" i;
    (* from (.a173.#b171) *)
    let shallow : (t173, _) idx_mut = (.a173.#b171) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 597;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 597 failed %d" i;
  );
  (* Deepening to (.b173) *)
  let idx : (t173, _) idx_mut = (.b173) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b173) *)
    let shallow : (t173, _) idx_mut = (.b173) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 598;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 598 failed %d" i;
  );
  (* Deepening to (.b173.#a172) *)
  let idx : (t173, _) idx_mut = (.b173.#a172) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b173) *)
    let shallow : (t173, _) idx_mut = (.b173) in
    let deepened = (.idx_mut(shallow).#a172) in
    mark_test_run 599;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 599 failed %d" i;
    (* from (.b173.#a172) *)
    let shallow : (t173, _) idx_mut = (.b173.#a172) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 600;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 600 failed %d" i;
  );
  (* Deepening to (.b173.#b172) *)
  let idx : (t173, _) idx_mut = (.b173.#b172) in
  iter indices_in_deepening_tests ~f:(fun i ->
    (* from (.b173) *)
    let shallow : (t173, _) idx_mut = (.b173) in
    let deepened = (.idx_mut(shallow).#b172) in
    mark_test_run 601;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 601 failed %d" i;
    (* from (.b173.#b172) *)
    let shallow : (t173, _) idx_mut = (.b173.#b172) in
    let deepened = (.idx_mut(shallow)) in
    mark_test_run 602;
    let test = Idx_repr.equal (Idx_repr.of_idx_mut idx) (Idx_repr.of_idx_mut deepened) in
    if not test then failwithf "test 602 failed %d" i;
  );

  ()
;;

for i = 1 to 602 do
  if not (Int_set.mem i !tests_run) then failwithf "test %d not run" i
done;;
let () = Printf.printf "All tests passed.%!\n";;
