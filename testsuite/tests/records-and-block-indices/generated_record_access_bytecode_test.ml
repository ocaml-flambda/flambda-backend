(* TEST
 include stdlib_stable;
 include stdlib_beta;
 include stdlib_upstream_compatible;
 flags = "-extension layouts_alpha";
 bytecode;
*)
(** This is code generated by [test_generation.ml]. *)

[@@@warning "-23"]
external globalize : local_ 'a -> 'a = "%obj_dup";;
let int64x2_u_equal (_ : int64x2#) (_ : int64x2#) = failwith "should not be called from bytecode"

open Stdlib_upstream_compatible
open Stdlib_stable
open Stdlib_beta

external[@layout_poly] makearray_dynamic_local :
  ('a : any_non_null) . int -> 'a -> 'a array @ local =
  "%makearray_dynamic"

external[@layout_poly] makearray_dynamic :
  ('a : any_non_null) . int -> 'a -> 'a array =
  "%makearray_dynamic"

external[@layout_poly] get :
  ('a : any_non_null) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a =
  "%array_safe_get"

external[@layout_poly] set :
  ('a : any_non_null) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a -> unit =
  "%array_safe_set"

module Idx_repr : sig
  type t
  val of_idx_imm : 'a ('b : any). ('a, 'b) idx_imm -> t
  val of_idx_mut : 'a ('b : any). ('a, 'b) idx_mut -> t
  val equal : t -> t -> bool
  val debug_string : t -> string
end = struct
  (* See [jane/doc/extensions/_02-unboxed-types/block-indices.md] *)
  type t =
    | Bytecode of { path : int list }
    | Native of { offset : int; gap : int }

  external magic_box_bits64 : ('a : bits64) 'b . 'a -> 'b =
    "%box_int64"
  external lessthan_if_bytecode : int -> int -> bool =
    "caml_lessthan" "caml_greaterthan"

  let of_idx idx =
    let is_bytecode = lessthan_if_bytecode 0 1 in
    if is_bytecode then
      let r = Obj.repr (magic_box_bits64 idx) in
      let nth_idx n : int = Obj.magic (Obj.field r n) in
      let path = List.init (Obj.size r) nth_idx in
      Bytecode { path }
    else
      let i : int64 = magic_box_bits64 idx in
      let offset =
        Int64.(logand (sub (shift_left one 48) one)) i
        |> Int64.to_int
      in
      let gap =
        Int64.shift_right i 48
        |> Int64.to_int
      in
      Native { offset; gap }

  let of_idx_imm = of_idx
  let of_idx_mut = of_idx

  let equal t1 t2 =
    match t1, t2 with
    | Bytecode { path = path1 }, Bytecode { path = path2 } ->
      List.equal Int.equal path1 path2
    | Native { gap = gap1; offset = offset1 },
      Native { gap = gap2; offset = offset2 } ->
      Int.equal gap1 gap2 && Int.equal offset1 offset2
    | Bytecode _, Native _ | Native _, Bytecode _ -> assert false

  let debug_string = function
    | Bytecode { path } ->
      Printf.sprintf "{ %s }"
        (String.concat "; " (List.map Int.to_string path))
    | Native { offset; gap } ->
      Printf.sprintf "offset %d; gap %d" offset gap
end

let failwithf fmt = Printf.ksprintf failwith fmt

(* Redefine iter to infer locality *)
let rec iter ~f = function
    [] -> ()
  | a::l -> f a; iter ~f l

module Int_set = Set.Make(Int)

let tests_run = ref Int_set.empty

let mark_test_run test_id =
  tests_run := Int_set.add test_id !tests_run

(* Various interesting values *)

let sizes = [ 0; 1; 2; 30 ]

let indices_in_deepening_tests = [0; 100_000]

type packed = P : 'a -> packed
let ref_to_force_heap_allocation : packed ref = ref (P 0)

type t0 = { mutable a0 : int } (* { int } *)
type t1 = { mutable a1 : int; mutable b1 : int } (* { int; int } *)
type t2 = { mutable a2 : int; mutable b2 : int; mutable c2 : int } (* { int; int; int } *)
type t3 = { mutable a3 : int; mutable b3 : int; mutable c3 : int32# } (* { int; int; int32# } *)
type t4 = { mutable a4 : int; mutable b4 : int; mutable c4 : float } (* { int; int; float } *)
type t5 = { mutable a5 : int; mutable b5 : int64 } (* { int; int64 } *)
type t6 = { mutable a6 : int; mutable b6 : int64# } (* { int; int64# } *)
type t7 = { mutable a7 : int; mutable b7 : int32# } (* { int; int32# } *)
type t8 = { mutable a8 : int; mutable b8 : int32#; mutable c8 : int } (* { int; int32#; int } *)
type t9 = { mutable a9 : int; mutable b9 : int32#; mutable c9 : int32# } (* { int; int32#; int32# } *)
type t10 = { mutable a10 : int; mutable b10 : nativeint# } (* { int; nativeint# } *)
type t11 = { mutable a11 : int; mutable b11 : float } (* { int; float } *)
type t12 = { mutable a12 : int; mutable b12 : float; mutable c12 : int } (* { int; float; int } *)
type t13 = { mutable a13 : int; mutable b13 : float; mutable c13 : float } (* { int; float; float } *)
type t14 = #{ a14 : int } (* #{ int } *)
type t15 = { mutable a15 : int; mutable b15 : t14 } (* { int; #{ int } } *)
type t16 = #{ a16 : int; b16 : int } (* #{ int; int } *)
type t17 = { mutable a17 : int; mutable b17 : t16 } (* { int; #{ int; int } } *)
type t18 = #{ a18 : int; b18 : int32# } (* #{ int; int32# } *)
type t19 = { mutable a19 : int; mutable b19 : t18 } (* { int; #{ int; int32# } } *)
type t20 = #{ a20 : int; b20 : float } (* #{ int; float } *)
type t21 = { mutable a21 : int; mutable b21 : t20 } (* { int; #{ int; float } } *)
type t22 = #{ a22 : int; b22 : t14 } (* #{ int; #{ int } } *)
type t23 = { mutable a23 : int; mutable b23 : t22 } (* { int; #{ int; #{ int } } } *)
type t24 = #{ a24 : int32# } (* #{ int32# } *)
type t25 = #{ a25 : int; b25 : t24 } (* #{ int; #{ int32# } } *)
type t26 = { mutable a26 : int; mutable b26 : t25 } (* { int; #{ int; #{ int32# } } } *)
type t27 = #{ a27 : float } (* #{ float } *)
type t28 = #{ a28 : int; b28 : t27 } (* #{ int; #{ float } } *)
type t29 = { mutable a29 : int; mutable b29 : t28 } (* { int; #{ int; #{ float } } } *)
type t30 = { mutable a30 : int; mutable b30 : t24 } (* { int; #{ int32# } } *)
type t31 = #{ a31 : int32#; b31 : int } (* #{ int32#; int } *)
type t32 = { mutable a32 : int; mutable b32 : t31 } (* { int; #{ int32#; int } } *)
type t33 = #{ a33 : int32#; b33 : int32# } (* #{ int32#; int32# } *)
type t34 = { mutable a34 : int; mutable b34 : t33 } (* { int; #{ int32#; int32# } } *)
type t35 = #{ a35 : int32#; b35 : t14 } (* #{ int32#; #{ int } } *)
type t36 = { mutable a36 : int; mutable b36 : t35 } (* { int; #{ int32#; #{ int } } } *)
type t37 = #{ a37 : int32#; b37 : t24 } (* #{ int32#; #{ int32# } } *)
type t38 = { mutable a38 : int; mutable b38 : t37 } (* { int; #{ int32#; #{ int32# } } } *)
type t39 = { mutable a39 : int; mutable b39 : t27 } (* { int; #{ float } } *)
type t40 = #{ a40 : float; b40 : int } (* #{ float; int } *)
type t41 = { mutable a41 : int; mutable b41 : t40 } (* { int; #{ float; int } } *)
type t42 = #{ a42 : float; b42 : float } (* #{ float; float } *)
type t43 = { mutable a43 : int; mutable b43 : t42 } (* { int; #{ float; float } } *)
type t44 = #{ a44 : float; b44 : t14 } (* #{ float; #{ int } } *)
type t45 = { mutable a45 : int; mutable b45 : t44 } (* { int; #{ float; #{ int } } } *)
type t46 = #{ a46 : float; b46 : t27 } (* #{ float; #{ float } } *)
type t47 = { mutable a47 : int; mutable b47 : t46 } (* { int; #{ float; #{ float } } } *)
type t48 = #{ a48 : t16 } (* #{ #{ int; int } } *)
type t49 = { mutable a49 : int; mutable b49 : t48 } (* { int; #{ #{ int; int } } } *)
type t50 = #{ a50 : t18 } (* #{ #{ int; int32# } } *)
type t51 = { mutable a51 : int; mutable b51 : t50 } (* { int; #{ #{ int; int32# } } } *)
type t52 = #{ a52 : t20 } (* #{ #{ int; float } } *)
type t53 = { mutable a53 : int; mutable b53 : t52 } (* { int; #{ #{ int; float } } } *)
type t54 = #{ a54 : t31 } (* #{ #{ int32#; int } } *)
type t55 = { mutable a55 : int; mutable b55 : t54 } (* { int; #{ #{ int32#; int } } } *)
type t56 = #{ a56 : t33 } (* #{ #{ int32#; int32# } } *)
type t57 = { mutable a57 : int; mutable b57 : t56 } (* { int; #{ #{ int32#; int32# } } } *)
type t58 = #{ a58 : t40 } (* #{ #{ float; int } } *)
type t59 = { mutable a59 : int; mutable b59 : t58 } (* { int; #{ #{ float; int } } } *)
type t60 = #{ a60 : t42 } (* #{ #{ float; float } } *)
type t61 = { mutable a61 : int; mutable b61 : t60 } (* { int; #{ #{ float; float } } } *)
type t62 = { mutable a62 : int64 } (* { int64 } *)
type t63 = { mutable a63 : int64; mutable b63 : int } (* { int64; int } *)
type t64 = { mutable a64 : int64; mutable b64 : int64 } (* { int64; int64 } *)
type t65 = { mutable a65 : int64; mutable b65 : int64# } (* { int64; int64# } *)
type t66 = { mutable a66 : int64; mutable b66 : int32# } (* { int64; int32# } *)
type t67 = { mutable a67 : int64; mutable b67 : nativeint# } (* { int64; nativeint# } *)
type t68 = { mutable a68 : int64; mutable b68 : float } (* { int64; float } *)
type t69 = { mutable a69 : int64# } (* { int64# } *)
type t70 = { mutable a70 : int64#; mutable b70 : int } (* { int64#; int } *)
type t71 = { mutable a71 : int64#; mutable b71 : int64 } (* { int64#; int64 } *)
type t72 = { mutable a72 : int64#; mutable b72 : int64# } (* { int64#; int64# } *)
type t73 = { mutable a73 : int64#; mutable b73 : int32# } (* { int64#; int32# } *)
type t74 = { mutable a74 : int64#; mutable b74 : nativeint# } (* { int64#; nativeint# } *)
type t75 = { mutable a75 : int64#; mutable b75 : float } (* { int64#; float } *)
type t76 = { mutable a76 : int32# } (* { int32# } *)
type t77 = { mutable a77 : int32#; mutable b77 : int } (* { int32#; int } *)
type t78 = { mutable a78 : int32#; mutable b78 : int; mutable c78 : int } (* { int32#; int; int } *)
type t79 = { mutable a79 : int32#; mutable b79 : int; mutable c79 : int32# } (* { int32#; int; int32# } *)
type t80 = { mutable a80 : int32#; mutable b80 : int64 } (* { int32#; int64 } *)
type t81 = { mutable a81 : int32#; mutable b81 : int64# } (* { int32#; int64# } *)
type t82 = { mutable a82 : int32#; mutable b82 : int32# } (* { int32#; int32# } *)
type t83 = { mutable a83 : int32#; mutable b83 : int32#; mutable c83 : int } (* { int32#; int32#; int } *)
type t84 = { mutable a84 : int32#; mutable b84 : int32#; mutable c84 : int32# } (* { int32#; int32#; int32# } *)
type t85 = { mutable a85 : int32#; mutable b85 : nativeint# } (* { int32#; nativeint# } *)
type t86 = { mutable a86 : int32#; mutable b86 : float } (* { int32#; float } *)
type t87 = { mutable a87 : int32#; mutable b87 : t14 } (* { int32#; #{ int } } *)
type t88 = { mutable a88 : int32#; mutable b88 : t16 } (* { int32#; #{ int; int } } *)
type t89 = { mutable a89 : int32#; mutable b89 : t18 } (* { int32#; #{ int; int32# } } *)
type t90 = { mutable a90 : int32#; mutable b90 : t22 } (* { int32#; #{ int; #{ int } } } *)
type t91 = { mutable a91 : int32#; mutable b91 : t25 } (* { int32#; #{ int; #{ int32# } } } *)
type t92 = { mutable a92 : int32#; mutable b92 : t24 } (* { int32#; #{ int32# } } *)
type t93 = { mutable a93 : int32#; mutable b93 : t31 } (* { int32#; #{ int32#; int } } *)
type t94 = { mutable a94 : int32#; mutable b94 : t33 } (* { int32#; #{ int32#; int32# } } *)
type t95 = { mutable a95 : int32#; mutable b95 : t35 } (* { int32#; #{ int32#; #{ int } } } *)
type t96 = { mutable a96 : int32#; mutable b96 : t37 } (* { int32#; #{ int32#; #{ int32# } } } *)
type t97 = { mutable a97 : int32#; mutable b97 : t48 } (* { int32#; #{ #{ int; int } } } *)
type t98 = { mutable a98 : int32#; mutable b98 : t50 } (* { int32#; #{ #{ int; int32# } } } *)
type t99 = { mutable a99 : int32#; mutable b99 : t54 } (* { int32#; #{ #{ int32#; int } } } *)
type t100 = { mutable a100 : int32#; mutable b100 : t56 } (* { int32#; #{ #{ int32#; int32# } } } *)
type t101 = { mutable a101 : nativeint# } (* { nativeint# } *)
type t102 = { mutable a102 : nativeint#; mutable b102 : int } (* { nativeint#; int } *)
type t103 = { mutable a103 : nativeint#; mutable b103 : int64 } (* { nativeint#; int64 } *)
type t104 = { mutable a104 : nativeint#; mutable b104 : int64# } (* { nativeint#; int64# } *)
type t105 = { mutable a105 : nativeint#; mutable b105 : int32# } (* { nativeint#; int32# } *)
type t106 = { mutable a106 : nativeint#; mutable b106 : nativeint# } (* { nativeint#; nativeint# } *)
type t107 = { mutable a107 : nativeint#; mutable b107 : float } (* { nativeint#; float } *)
type t108 = { mutable a108 : float } (* { float } *)
type t109 = { mutable a109 : float; mutable b109 : int } (* { float; int } *)
type t110 = { mutable a110 : float; mutable b110 : int; mutable c110 : int } (* { float; int; int } *)
type t111 = { mutable a111 : float; mutable b111 : int; mutable c111 : float } (* { float; int; float } *)
type t112 = { mutable a112 : float; mutable b112 : int64 } (* { float; int64 } *)
type t113 = { mutable a113 : float; mutable b113 : int64# } (* { float; int64# } *)
type t114 = { mutable a114 : float; mutable b114 : int32# } (* { float; int32# } *)
type t115 = { mutable a115 : float; mutable b115 : nativeint# } (* { float; nativeint# } *)
type t116 = { mutable a116 : float; mutable b116 : float } (* { float; float } *)
type t117 = { mutable a117 : float; mutable b117 : float; mutable c117 : int } (* { float; float; int } *)
type t118 = { mutable a118 : float; mutable b118 : float; mutable c118 : float } (* { float; float; float } *)
type t119 = { mutable a119 : float; mutable b119 : float; mutable c119 : float# } (* { float; float; float# } *)
type t120 = { mutable a120 : float; mutable b120 : float# } (* { float; float# } *)
type t121 = { mutable a121 : float; mutable b121 : float#; mutable c121 : float } (* { float; float#; float } *)
type t122 = { mutable a122 : float; mutable b122 : float#; mutable c122 : float# } (* { float; float#; float# } *)
type t123 = { mutable a123 : float; mutable b123 : t14 } (* { float; #{ int } } *)
type t124 = { mutable a124 : float; mutable b124 : t16 } (* { float; #{ int; int } } *)
type t125 = { mutable a125 : float; mutable b125 : t20 } (* { float; #{ int; float } } *)
type t126 = { mutable a126 : float; mutable b126 : t22 } (* { float; #{ int; #{ int } } } *)
type t127 = { mutable a127 : float; mutable b127 : t28 } (* { float; #{ int; #{ float } } } *)
type t128 = { mutable a128 : float; mutable b128 : t27 } (* { float; #{ float } } *)
type t129 = { mutable a129 : float; mutable b129 : t40 } (* { float; #{ float; int } } *)
type t130 = { mutable a130 : float; mutable b130 : t42 } (* { float; #{ float; float } } *)
type t131 = #{ a131 : float; b131 : float# } (* #{ float; float# } *)
type t132 = { mutable a132 : float; mutable b132 : t131 } (* { float; #{ float; float# } } *)
type t133 = { mutable a133 : float; mutable b133 : t44 } (* { float; #{ float; #{ int } } } *)
type t134 = { mutable a134 : float; mutable b134 : t46 } (* { float; #{ float; #{ float } } } *)
type t135 = #{ a135 : float# } (* #{ float# } *)
type t136 = #{ a136 : float; b136 : t135 } (* #{ float; #{ float# } } *)
type t137 = { mutable a137 : float; mutable b137 : t136 } (* { float; #{ float; #{ float# } } } *)
type t138 = { mutable a138 : float; mutable b138 : t135 } (* { float; #{ float# } } *)
type t139 = #{ a139 : float#; b139 : float } (* #{ float#; float } *)
type t140 = { mutable a140 : float; mutable b140 : t139 } (* { float; #{ float#; float } } *)
type t141 = #{ a141 : float#; b141 : float# } (* #{ float#; float# } *)
type t142 = { mutable a142 : float; mutable b142 : t141 } (* { float; #{ float#; float# } } *)
type t143 = #{ a143 : float#; b143 : t27 } (* #{ float#; #{ float } } *)
type t144 = { mutable a144 : float; mutable b144 : t143 } (* { float; #{ float#; #{ float } } } *)
type t145 = #{ a145 : float#; b145 : t135 } (* #{ float#; #{ float# } } *)
type t146 = { mutable a146 : float; mutable b146 : t145 } (* { float; #{ float#; #{ float# } } } *)
type t147 = { mutable a147 : float; mutable b147 : t48 } (* { float; #{ #{ int; int } } } *)
type t148 = { mutable a148 : float; mutable b148 : t52 } (* { float; #{ #{ int; float } } } *)
type t149 = { mutable a149 : float; mutable b149 : t58 } (* { float; #{ #{ float; int } } } *)
type t150 = { mutable a150 : float; mutable b150 : t60 } (* { float; #{ #{ float; float } } } *)
type t151 = #{ a151 : t131 } (* #{ #{ float; float# } } *)
type t152 = { mutable a152 : float; mutable b152 : t151 } (* { float; #{ #{ float; float# } } } *)
type t153 = #{ a153 : t139 } (* #{ #{ float#; float } } *)
type t154 = { mutable a154 : float; mutable b154 : t153 } (* { float; #{ #{ float#; float } } } *)
type t155 = #{ a155 : t141 } (* #{ #{ float#; float# } } *)
type t156 = { mutable a156 : float; mutable b156 : t155 } (* { float; #{ #{ float#; float# } } } *)
type t157 = { mutable a157 : float# } (* { float# } *)
type t158 = { mutable a158 : float#; mutable b158 : float } (* { float#; float } *)
type t159 = { mutable a159 : float#; mutable b159 : float; mutable c159 : float } (* { float#; float; float } *)
type t160 = { mutable a160 : float#; mutable b160 : float; mutable c160 : float# } (* { float#; float; float# } *)
type t161 = { mutable a161 : float#; mutable b161 : float# } (* { float#; float# } *)
type t162 = { mutable a162 : float#; mutable b162 : float#; mutable c162 : float } (* { float#; float#; float } *)
type t163 = { mutable a163 : float#; mutable b163 : float#; mutable c163 : float# } (* { float#; float#; float# } *)
type t164 = { mutable a164 : float#; mutable b164 : t27 } (* { float#; #{ float } } *)
type t165 = { mutable a165 : float#; mutable b165 : t42 } (* { float#; #{ float; float } } *)
type t166 = { mutable a166 : float#; mutable b166 : t131 } (* { float#; #{ float; float# } } *)
type t167 = { mutable a167 : float#; mutable b167 : t46 } (* { float#; #{ float; #{ float } } } *)
type t168 = { mutable a168 : float#; mutable b168 : t136 } (* { float#; #{ float; #{ float# } } } *)
type t169 = { mutable a169 : float#; mutable b169 : t135 } (* { float#; #{ float# } } *)
type t170 = { mutable a170 : float#; mutable b170 : t139 } (* { float#; #{ float#; float } } *)
type t171 = { mutable a171 : float#; mutable b171 : t141 } (* { float#; #{ float#; float# } } *)
type t172 = { mutable a172 : float#; mutable b172 : t143 } (* { float#; #{ float#; #{ float } } } *)
type t173 = { mutable a173 : float#; mutable b173 : t145 } (* { float#; #{ float#; #{ float# } } } *)
type t174 = { mutable a174 : float#; mutable b174 : t60 } (* { float#; #{ #{ float; float } } } *)
type t175 = { mutable a175 : float#; mutable b175 : t151 } (* { float#; #{ #{ float; float# } } } *)
type t176 = { mutable a176 : float#; mutable b176 : t153 } (* { float#; #{ #{ float#; float } } } *)
type t177 = { mutable a177 : float#; mutable b177 : t155 } (* { float#; #{ #{ float#; float# } } } *)
type t178 = { mutable a178 : t14 } (* { #{ int } } *)
type t179 = { mutable a179 : t14; mutable b179 : int } (* { #{ int }; int } *)
type t180 = { mutable a180 : t14; mutable b180 : int32# } (* { #{ int }; int32# } *)
type t181 = { mutable a181 : t14; mutable b181 : float } (* { #{ int }; float } *)
type t182 = { mutable a182 : t16 } (* { #{ int; int } } *)
type t183 = { mutable a183 : t16; mutable b183 : int } (* { #{ int; int }; int } *)
type t184 = { mutable a184 : t16; mutable b184 : int32# } (* { #{ int; int }; int32# } *)
type t185 = { mutable a185 : t16; mutable b185 : float } (* { #{ int; int }; float } *)
type t186 = { mutable a186 : t18 } (* { #{ int; int32# } } *)
type t187 = { mutable a187 : t18; mutable b187 : int } (* { #{ int; int32# }; int } *)
type t188 = { mutable a188 : t18; mutable b188 : int32# } (* { #{ int; int32# }; int32# } *)
type t189 = { mutable a189 : t20 } (* { #{ int; float } } *)
type t190 = { mutable a190 : t20; mutable b190 : int } (* { #{ int; float }; int } *)
type t191 = { mutable a191 : t20; mutable b191 : float } (* { #{ int; float }; float } *)
type t192 = #{ a192 : int; b192 : t16 } (* #{ int; #{ int; int } } *)
type t193 = { mutable a193 : t192 } (* { #{ int; #{ int; int } } } *)
type t194 = #{ a194 : int; b194 : t18 } (* #{ int; #{ int; int32# } } *)
type t195 = { mutable a195 : t194 } (* { #{ int; #{ int; int32# } } } *)
type t196 = #{ a196 : int; b196 : t20 } (* #{ int; #{ int; float } } *)
type t197 = { mutable a197 : t196 } (* { #{ int; #{ int; float } } } *)
type t198 = #{ a198 : int; b198 : t31 } (* #{ int; #{ int32#; int } } *)
type t199 = { mutable a199 : t198 } (* { #{ int; #{ int32#; int } } } *)
type t200 = #{ a200 : int; b200 : t33 } (* #{ int; #{ int32#; int32# } } *)
type t201 = { mutable a201 : t200 } (* { #{ int; #{ int32#; int32# } } } *)
type t202 = #{ a202 : int; b202 : t40 } (* #{ int; #{ float; int } } *)
type t203 = { mutable a203 : t202 } (* { #{ int; #{ float; int } } } *)
type t204 = #{ a204 : int; b204 : t42 } (* #{ int; #{ float; float } } *)
type t205 = { mutable a205 : t204 } (* { #{ int; #{ float; float } } } *)
type t206 = #{ a206 : int64; b206 : int64# } (* #{ int64; int64# } *)
type t207 = #{ a207 : int64#; b207 : float# } (* #{ int64#; float# } *)
type t208 = { mutable a208 : t206; mutable b208 : t207 } (* { #{ int64; int64# }; #{ int64#; float# } } *)
type t209 = #{ a209 : int64; b209 : string } (* #{ int64; string } *)
type t210 = #{ a210 : int64#; b210 : string } (* #{ int64#; string } *)
type t211 = { mutable a211 : t209; mutable b211 : t210 } (* { #{ int64; string }; #{ int64#; string } } *)
type t212 = #{ a212 : int64#; b212 : int64 } (* #{ int64#; int64 } *)
type t213 = #{ a213 : int64; b213 : int64 } (* #{ int64; int64 } *)
type t214 = { mutable a214 : t212; mutable b214 : t213 } (* { #{ int64#; int64 }; #{ int64; int64 } } *)
type t215 = #{ a215 : float32#; b215 : float } (* #{ float32#; float } *)
type t216 = { mutable a216 : t212; mutable b216 : t215 } (* { #{ int64#; int64 }; #{ float32#; float } } *)
type t217 = { mutable a217 : t24 } (* { #{ int32# } } *)
type t218 = { mutable a218 : t24; mutable b218 : int } (* { #{ int32# }; int } *)
type t219 = { mutable a219 : t24; mutable b219 : int32# } (* { #{ int32# }; int32# } *)
type t220 = { mutable a220 : t31 } (* { #{ int32#; int } } *)
type t221 = { mutable a221 : t31; mutable b221 : int } (* { #{ int32#; int }; int } *)
type t222 = { mutable a222 : t31; mutable b222 : int32# } (* { #{ int32#; int }; int32# } *)
type t223 = { mutable a223 : t33 } (* { #{ int32#; int32# } } *)
type t224 = { mutable a224 : t33; mutable b224 : int } (* { #{ int32#; int32# }; int } *)
type t225 = { mutable a225 : t33; mutable b225 : int32# } (* { #{ int32#; int32# }; int32# } *)
type t226 = #{ a226 : int32#; b226 : t16 } (* #{ int32#; #{ int; int } } *)
type t227 = { mutable a227 : t226 } (* { #{ int32#; #{ int; int } } } *)
type t228 = #{ a228 : int32#; b228 : t18 } (* #{ int32#; #{ int; int32# } } *)
type t229 = { mutable a229 : t228 } (* { #{ int32#; #{ int; int32# } } } *)
type t230 = #{ a230 : int32#; b230 : t31 } (* #{ int32#; #{ int32#; int } } *)
type t231 = { mutable a231 : t230 } (* { #{ int32#; #{ int32#; int } } } *)
type t232 = #{ a232 : int32#; b232 : t33 } (* #{ int32#; #{ int32#; int32# } } *)
type t233 = { mutable a233 : t232 } (* { #{ int32#; #{ int32#; int32# } } } *)
type t234 = { mutable a234 : t27 } (* { #{ float } } *)
type t235 = { mutable a235 : t27; mutable b235 : int } (* { #{ float }; int } *)
type t236 = { mutable a236 : t27; mutable b236 : float } (* { #{ float }; float } *)
type t237 = { mutable a237 : t27; mutable b237 : float# } (* { #{ float }; float# } *)
type t238 = { mutable a238 : t40 } (* { #{ float; int } } *)
type t239 = { mutable a239 : t40; mutable b239 : int } (* { #{ float; int }; int } *)
type t240 = { mutable a240 : t40; mutable b240 : float } (* { #{ float; int }; float } *)
type t241 = { mutable a241 : t42 } (* { #{ float; float } } *)
type t242 = { mutable a242 : t42; mutable b242 : int } (* { #{ float; float }; int } *)
type t243 = { mutable a243 : t42; mutable b243 : float } (* { #{ float; float }; float } *)
type t244 = { mutable a244 : t42; mutable b244 : float# } (* { #{ float; float }; float# } *)
type t245 = { mutable a245 : t131 } (* { #{ float; float# } } *)
type t246 = { mutable a246 : t131; mutable b246 : float } (* { #{ float; float# }; float } *)
type t247 = { mutable a247 : t131; mutable b247 : float# } (* { #{ float; float# }; float# } *)
type t248 = #{ a248 : float; b248 : t16 } (* #{ float; #{ int; int } } *)
type t249 = { mutable a249 : t248 } (* { #{ float; #{ int; int } } } *)
type t250 = #{ a250 : float; b250 : t20 } (* #{ float; #{ int; float } } *)
type t251 = { mutable a251 : t250 } (* { #{ float; #{ int; float } } } *)
type t252 = #{ a252 : float; b252 : t40 } (* #{ float; #{ float; int } } *)
type t253 = { mutable a253 : t252 } (* { #{ float; #{ float; int } } } *)
type t254 = #{ a254 : float; b254 : t42 } (* #{ float; #{ float; float } } *)
type t255 = { mutable a255 : t254 } (* { #{ float; #{ float; float } } } *)
type t256 = #{ a256 : float; b256 : t131 } (* #{ float; #{ float; float# } } *)
type t257 = { mutable a257 : t256 } (* { #{ float; #{ float; float# } } } *)
type t258 = #{ a258 : float; b258 : t139 } (* #{ float; #{ float#; float } } *)
type t259 = { mutable a259 : t258 } (* { #{ float; #{ float#; float } } } *)
type t260 = #{ a260 : float; b260 : t141 } (* #{ float; #{ float#; float# } } *)
type t261 = { mutable a261 : t260 } (* { #{ float; #{ float#; float# } } } *)
type t262 = { mutable a262 : t135 } (* { #{ float# } } *)
type t263 = { mutable a263 : t135; mutable b263 : float } (* { #{ float# }; float } *)
type t264 = { mutable a264 : t135; mutable b264 : float# } (* { #{ float# }; float# } *)
type t265 = { mutable a265 : t139 } (* { #{ float#; float } } *)
type t266 = { mutable a266 : t139; mutable b266 : float } (* { #{ float#; float }; float } *)
type t267 = { mutable a267 : t139; mutable b267 : float# } (* { #{ float#; float }; float# } *)
type t268 = { mutable a268 : t141 } (* { #{ float#; float# } } *)
type t269 = { mutable a269 : t141; mutable b269 : float } (* { #{ float#; float# }; float } *)
type t270 = { mutable a270 : t141; mutable b270 : float# } (* { #{ float#; float# }; float# } *)
type t271 = #{ a271 : float#; b271 : t42 } (* #{ float#; #{ float; float } } *)
type t272 = { mutable a272 : t271 } (* { #{ float#; #{ float; float } } } *)
type t273 = #{ a273 : float#; b273 : t131 } (* #{ float#; #{ float; float# } } *)
type t274 = { mutable a274 : t273 } (* { #{ float#; #{ float; float# } } } *)
type t275 = #{ a275 : float#; b275 : t139 } (* #{ float#; #{ float#; float } } *)
type t276 = { mutable a276 : t275 } (* { #{ float#; #{ float#; float } } } *)
type t277 = #{ a277 : float#; b277 : t141 } (* #{ float#; #{ float#; float# } } *)
type t278 = { mutable a278 : t277 } (* { #{ float#; #{ float#; float# } } } *)
type t279 = #{ a279 : float32#; b279 : int64# } (* #{ float32#; int64# } *)
type t280 = #{ a280 : string; b280 : int64# } (* #{ string; int64# } *)
type t281 = { mutable a281 : t279; mutable b281 : t280 } (* { #{ float32#; int64# }; #{ string; int64# } } *)
type t282 = #{ a282 : t16; b282 : int } (* #{ #{ int; int }; int } *)
type t283 = { mutable a283 : t282 } (* { #{ #{ int; int }; int } } *)
type t284 = #{ a284 : t16; b284 : int32# } (* #{ #{ int; int }; int32# } *)
type t285 = { mutable a285 : t284 } (* { #{ #{ int; int }; int32# } } *)
type t286 = #{ a286 : t16; b286 : float } (* #{ #{ int; int }; float } *)
type t287 = { mutable a287 : t286 } (* { #{ #{ int; int }; float } } *)
type t288 = #{ a288 : t18; b288 : int } (* #{ #{ int; int32# }; int } *)
type t289 = { mutable a289 : t288 } (* { #{ #{ int; int32# }; int } } *)
type t290 = #{ a290 : t18; b290 : int32# } (* #{ #{ int; int32# }; int32# } *)
type t291 = { mutable a291 : t290 } (* { #{ #{ int; int32# }; int32# } } *)
type t292 = #{ a292 : t20; b292 : int } (* #{ #{ int; float }; int } *)
type t293 = { mutable a293 : t292 } (* { #{ #{ int; float }; int } } *)
type t294 = #{ a294 : t20; b294 : float } (* #{ #{ int; float }; float } *)
type t295 = { mutable a295 : t294 } (* { #{ #{ int; float }; float } } *)
type t296 = #{ a296 : t31; b296 : int } (* #{ #{ int32#; int }; int } *)
type t297 = { mutable a297 : t296 } (* { #{ #{ int32#; int }; int } } *)
type t298 = #{ a298 : t31; b298 : int32# } (* #{ #{ int32#; int }; int32# } *)
type t299 = { mutable a299 : t298 } (* { #{ #{ int32#; int }; int32# } } *)
type t300 = #{ a300 : t33; b300 : int } (* #{ #{ int32#; int32# }; int } *)
type t301 = { mutable a301 : t300 } (* { #{ #{ int32#; int32# }; int } } *)
type t302 = #{ a302 : t33; b302 : int32# } (* #{ #{ int32#; int32# }; int32# } *)
type t303 = { mutable a303 : t302 } (* { #{ #{ int32#; int32# }; int32# } } *)
type t304 = #{ a304 : t40; b304 : int } (* #{ #{ float; int }; int } *)
type t305 = { mutable a305 : t304 } (* { #{ #{ float; int }; int } } *)
type t306 = #{ a306 : t40; b306 : float } (* #{ #{ float; int }; float } *)
type t307 = { mutable a307 : t306 } (* { #{ #{ float; int }; float } } *)
type t308 = #{ a308 : t42; b308 : int } (* #{ #{ float; float }; int } *)
type t309 = { mutable a309 : t308 } (* { #{ #{ float; float }; int } } *)
type t310 = #{ a310 : t42; b310 : float } (* #{ #{ float; float }; float } *)
type t311 = { mutable a311 : t310 } (* { #{ #{ float; float }; float } } *)
type t312 = #{ a312 : t42; b312 : float# } (* #{ #{ float; float }; float# } *)
type t313 = { mutable a313 : t312 } (* { #{ #{ float; float }; float# } } *)
type t314 = #{ a314 : t131; b314 : float } (* #{ #{ float; float# }; float } *)
type t315 = { mutable a315 : t314 } (* { #{ #{ float; float# }; float } } *)
type t316 = #{ a316 : t131; b316 : float# } (* #{ #{ float; float# }; float# } *)
type t317 = { mutable a317 : t316 } (* { #{ #{ float; float# }; float# } } *)
type t318 = #{ a318 : t139; b318 : float } (* #{ #{ float#; float }; float } *)
type t319 = { mutable a319 : t318 } (* { #{ #{ float#; float }; float } } *)
type t320 = #{ a320 : t139; b320 : float# } (* #{ #{ float#; float }; float# } *)
type t321 = { mutable a321 : t320 } (* { #{ #{ float#; float }; float# } } *)
type t322 = #{ a322 : t141; b322 : float } (* #{ #{ float#; float# }; float } *)
type t323 = { mutable a323 : t322 } (* { #{ #{ float#; float# }; float } } *)
type t324 = #{ a324 : t141; b324 : float# } (* #{ #{ float#; float# }; float# } *)
type t325 = { mutable a325 : t324 } (* { #{ #{ float#; float# }; float# } } *)

let () =
  (********************)
  (*   t0 = { int }   *)
  (********************)
  let r = { a0 = 0 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a0 *)
  let actual = r.a0 in
  let expected = 0 in
  mark_test_run 1;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a0 = a01 } { a0 = a02 } -> (fun a b -> Int.equal a b) a01 a02) in
  let next_r = { a0 = 100 } in
  let r_expected = { a0 = 0 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a0 *)
  r.a0 <- next_r.a0;
  let r_expected = { r_expected with a0 = next_r.a0 } in
  mark_test_run 2;
  let test = eq r r_expected in
  if not test then failwithf "test 2 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a0 } = r in
  let expected_a0 = 100 in
  mark_test_run 3;
  let test = (fun a b -> Int.equal a b) expected_a0 a0 in
  if not test then failwithf "test 3 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a0 } = r in
  let expected_a0 = 100 in
  mark_test_run 4;
  let test = (fun a b -> Int.equal a b) expected_a0 a0 in
  if not test then failwithf "test 4 failed";

  (*************************)
  (*   t1 = { int; int }   *)
  (*************************)
  let r = { a1 = 0; b1 = 1 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a1 *)
  let actual = r.a1 in
  let expected = 0 in
  mark_test_run 5;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 5 failed";
  (* Paths of depth 1 *)
  (* .b1 *)
  let actual = r.b1 in
  let expected = 1 in
  mark_test_run 6;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 6 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a1 = a11; b1 = b11 } { a1 = a12; b1 = b12 } -> (fun a b -> Int.equal a b) a11 a12 && (fun a b -> Int.equal a b) b11 b12) in
  let next_r = { a1 = 100; b1 = 101 } in
  let r_expected = { a1 = 0; b1 = 1 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a1 *)
  r.a1 <- next_r.a1;
  let r_expected = { r_expected with a1 = next_r.a1 } in
  mark_test_run 7;
  let test = eq r r_expected in
  if not test then failwithf "test 7 failed";
  Gc.compact ();
  (* .b1 *)
  r.b1 <- next_r.b1;
  let r_expected = { r_expected with b1 = next_r.b1 } in
  mark_test_run 8;
  let test = eq r r_expected in
  if not test then failwithf "test 8 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a1; b1 } = r in
  let expected_a1 = 100 in
  mark_test_run 9;
  let test = (fun a b -> Int.equal a b) expected_a1 a1 in
  if not test then failwithf "test 9 failed";
  let expected_b1 = 101 in
  mark_test_run 10;
  let test = (fun a b -> Int.equal a b) expected_b1 b1 in
  if not test then failwithf "test 10 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a1; b1 } = r in
  let expected_a1 = 100 in
  mark_test_run 11;
  let test = (fun a b -> Int.equal a b) expected_a1 a1 in
  if not test then failwithf "test 11 failed";
  let expected_b1 = 101 in
  mark_test_run 12;
  let test = (fun a b -> Int.equal a b) expected_b1 b1 in
  if not test then failwithf "test 12 failed";

  (******************************)
  (*   t2 = { int; int; int }   *)
  (******************************)
  let r = { a2 = 0; b2 = 1; c2 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a2 *)
  let actual = r.a2 in
  let expected = 0 in
  mark_test_run 13;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 13 failed";
  (* Paths of depth 1 *)
  (* .b2 *)
  let actual = r.b2 in
  let expected = 1 in
  mark_test_run 14;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 14 failed";
  (* Paths of depth 1 *)
  (* .c2 *)
  let actual = r.c2 in
  let expected = 2 in
  mark_test_run 15;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 15 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a2 = a21; b2 = b21; c2 = c21 } { a2 = a22; b2 = b22; c2 = c22 } -> (fun a b -> Int.equal a b) a21 a22 && (fun a b -> Int.equal a b) b21 b22 && (fun a b -> Int.equal a b) c21 c22) in
  let next_r = { a2 = 100; b2 = 101; c2 = 102 } in
  let r_expected = { a2 = 0; b2 = 1; c2 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a2 *)
  r.a2 <- next_r.a2;
  let r_expected = { r_expected with a2 = next_r.a2 } in
  mark_test_run 16;
  let test = eq r r_expected in
  if not test then failwithf "test 16 failed";
  Gc.compact ();
  (* .b2 *)
  r.b2 <- next_r.b2;
  let r_expected = { r_expected with b2 = next_r.b2 } in
  mark_test_run 17;
  let test = eq r r_expected in
  if not test then failwithf "test 17 failed";
  Gc.compact ();
  (* .c2 *)
  r.c2 <- next_r.c2;
  let r_expected = { r_expected with c2 = next_r.c2 } in
  mark_test_run 18;
  let test = eq r r_expected in
  if not test then failwithf "test 18 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a2; b2; c2 } = r in
  let expected_a2 = 100 in
  mark_test_run 19;
  let test = (fun a b -> Int.equal a b) expected_a2 a2 in
  if not test then failwithf "test 19 failed";
  let expected_b2 = 101 in
  mark_test_run 20;
  let test = (fun a b -> Int.equal a b) expected_b2 b2 in
  if not test then failwithf "test 20 failed";
  let expected_c2 = 102 in
  mark_test_run 21;
  let test = (fun a b -> Int.equal a b) expected_c2 c2 in
  if not test then failwithf "test 21 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a2; b2; c2 } = r in
  let expected_a2 = 100 in
  mark_test_run 22;
  let test = (fun a b -> Int.equal a b) expected_a2 a2 in
  if not test then failwithf "test 22 failed";
  let expected_b2 = 101 in
  mark_test_run 23;
  let test = (fun a b -> Int.equal a b) expected_b2 b2 in
  if not test then failwithf "test 23 failed";
  let expected_c2 = 102 in
  mark_test_run 24;
  let test = (fun a b -> Int.equal a b) expected_c2 c2 in
  if not test then failwithf "test 24 failed";

  (*********************************)
  (*   t3 = { int; int; int32# }   *)
  (*********************************)
  let r = { a3 = 0; b3 = 1; c3 = #2l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a3 *)
  let actual = r.a3 in
  let expected = 0 in
  mark_test_run 25;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 25 failed";
  (* Paths of depth 1 *)
  (* .b3 *)
  let actual = r.b3 in
  let expected = 1 in
  mark_test_run 26;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 26 failed";
  (* Paths of depth 1 *)
  (* .c3 *)
  let actual = r.c3 in
  let expected = #2l in
  mark_test_run 27;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 27 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a3 = a31; b3 = b31; c3 = c31 } { a3 = a32; b3 = b32; c3 = c32 } -> (fun a b -> Int.equal a b) a31 a32 && (fun a b -> Int.equal a b) b31 b32 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) c31 c32) in
  let next_r = { a3 = 100; b3 = 101; c3 = #102l } in
  let r_expected = { a3 = 0; b3 = 1; c3 = #2l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a3 *)
  r.a3 <- next_r.a3;
  let r_expected = { r_expected with a3 = next_r.a3 } in
  mark_test_run 28;
  let test = eq r r_expected in
  if not test then failwithf "test 28 failed";
  Gc.compact ();
  (* .b3 *)
  r.b3 <- next_r.b3;
  let r_expected = { r_expected with b3 = next_r.b3 } in
  mark_test_run 29;
  let test = eq r r_expected in
  if not test then failwithf "test 29 failed";
  Gc.compact ();
  (* .c3 *)
  r.c3 <- next_r.c3;
  let r_expected = { r_expected with c3 = next_r.c3 } in
  mark_test_run 30;
  let test = eq r r_expected in
  if not test then failwithf "test 30 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a3; b3; c3 } = r in
  let expected_a3 = 100 in
  mark_test_run 31;
  let test = (fun a b -> Int.equal a b) expected_a3 a3 in
  if not test then failwithf "test 31 failed";
  let expected_b3 = 101 in
  mark_test_run 32;
  let test = (fun a b -> Int.equal a b) expected_b3 b3 in
  if not test then failwithf "test 32 failed";
  let expected_c3 = #102l in
  mark_test_run 33;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_c3 c3 in
  if not test then failwithf "test 33 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a3; b3; c3 } = r in
  let expected_a3 = 100 in
  mark_test_run 34;
  let test = (fun a b -> Int.equal a b) expected_a3 a3 in
  if not test then failwithf "test 34 failed";
  let expected_b3 = 101 in
  mark_test_run 35;
  let test = (fun a b -> Int.equal a b) expected_b3 b3 in
  if not test then failwithf "test 35 failed";
  let expected_c3 = #102l in
  mark_test_run 36;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_c3 c3 in
  if not test then failwithf "test 36 failed";

  (********************************)
  (*   t4 = { int; int; float }   *)
  (********************************)
  let r = { a4 = 0; b4 = 1; c4 = 2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a4 *)
  let actual = r.a4 in
  let expected = 0 in
  mark_test_run 37;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 37 failed";
  (* Paths of depth 1 *)
  (* .b4 *)
  let actual = r.b4 in
  let expected = 1 in
  mark_test_run 38;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 38 failed";
  (* Paths of depth 1 *)
  (* .c4 *)
  let actual = r.c4 in
  let expected = 2. in
  mark_test_run 39;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 39 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a4 = a41; b4 = b41; c4 = c41 } { a4 = a42; b4 = b42; c4 = c42 } -> (fun a b -> Int.equal a b) a41 a42 && (fun a b -> Int.equal a b) b41 b42 && (fun a b -> Float.equal (globalize a) (globalize b)) c41 c42) in
  let next_r = { a4 = 100; b4 = 101; c4 = 102. } in
  let r_expected = { a4 = 0; b4 = 1; c4 = 2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a4 *)
  r.a4 <- next_r.a4;
  let r_expected = { r_expected with a4 = next_r.a4 } in
  mark_test_run 40;
  let test = eq r r_expected in
  if not test then failwithf "test 40 failed";
  Gc.compact ();
  (* .b4 *)
  r.b4 <- next_r.b4;
  let r_expected = { r_expected with b4 = next_r.b4 } in
  mark_test_run 41;
  let test = eq r r_expected in
  if not test then failwithf "test 41 failed";
  Gc.compact ();
  (* .c4 *)
  r.c4 <- next_r.c4;
  let r_expected = { r_expected with c4 = next_r.c4 } in
  mark_test_run 42;
  let test = eq r r_expected in
  if not test then failwithf "test 42 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a4; b4; c4 } = r in
  let expected_a4 = 100 in
  mark_test_run 43;
  let test = (fun a b -> Int.equal a b) expected_a4 a4 in
  if not test then failwithf "test 43 failed";
  let expected_b4 = 101 in
  mark_test_run 44;
  let test = (fun a b -> Int.equal a b) expected_b4 b4 in
  if not test then failwithf "test 44 failed";
  let expected_c4 = 102. in
  mark_test_run 45;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_c4 c4 in
  if not test then failwithf "test 45 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a4; b4; c4 } = r in
  let expected_a4 = 100 in
  mark_test_run 46;
  let test = (fun a b -> Int.equal a b) expected_a4 a4 in
  if not test then failwithf "test 46 failed";
  let expected_b4 = 101 in
  mark_test_run 47;
  let test = (fun a b -> Int.equal a b) expected_b4 b4 in
  if not test then failwithf "test 47 failed";
  let expected_c4 = 102. in
  mark_test_run 48;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_c4 c4 in
  if not test then failwithf "test 48 failed";

  (***************************)
  (*   t5 = { int; int64 }   *)
  (***************************)
  let r = { a5 = 0; b5 = 1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a5 *)
  let actual = r.a5 in
  let expected = 0 in
  mark_test_run 49;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 49 failed";
  (* Paths of depth 1 *)
  (* .b5 *)
  let actual = r.b5 in
  let expected = 1L in
  mark_test_run 50;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 50 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a5 = a51; b5 = b51 } { a5 = a52; b5 = b52 } -> (fun a b -> Int.equal a b) a51 a52 && (fun a b -> Int64.equal (globalize a) (globalize b)) b51 b52) in
  let next_r = { a5 = 100; b5 = 101L } in
  let r_expected = { a5 = 0; b5 = 1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a5 *)
  r.a5 <- next_r.a5;
  let r_expected = { r_expected with a5 = next_r.a5 } in
  mark_test_run 51;
  let test = eq r r_expected in
  if not test then failwithf "test 51 failed";
  Gc.compact ();
  (* .b5 *)
  r.b5 <- next_r.b5;
  let r_expected = { r_expected with b5 = next_r.b5 } in
  mark_test_run 52;
  let test = eq r r_expected in
  if not test then failwithf "test 52 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a5; b5 } = r in
  let expected_a5 = 100 in
  mark_test_run 53;
  let test = (fun a b -> Int.equal a b) expected_a5 a5 in
  if not test then failwithf "test 53 failed";
  let expected_b5 = 101L in
  mark_test_run 54;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b5 b5 in
  if not test then failwithf "test 54 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a5; b5 } = r in
  let expected_a5 = 100 in
  mark_test_run 55;
  let test = (fun a b -> Int.equal a b) expected_a5 a5 in
  if not test then failwithf "test 55 failed";
  let expected_b5 = 101L in
  mark_test_run 56;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b5 b5 in
  if not test then failwithf "test 56 failed";

  (****************************)
  (*   t6 = { int; int64# }   *)
  (****************************)
  let r = { a6 = 0; b6 = #1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a6 *)
  let actual = r.a6 in
  let expected = 0 in
  mark_test_run 57;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 57 failed";
  (* Paths of depth 1 *)
  (* .b6 *)
  let actual = r.b6 in
  let expected = #1L in
  mark_test_run 58;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 58 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a6 = a61; b6 = b61 } { a6 = a62; b6 = b62 } -> (fun a b -> Int.equal a b) a61 a62 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b61 b62) in
  let next_r = { a6 = 100; b6 = #101L } in
  let r_expected = { a6 = 0; b6 = #1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a6 *)
  r.a6 <- next_r.a6;
  let r_expected = { r_expected with a6 = next_r.a6 } in
  mark_test_run 59;
  let test = eq r r_expected in
  if not test then failwithf "test 59 failed";
  Gc.compact ();
  (* .b6 *)
  r.b6 <- next_r.b6;
  let r_expected = { r_expected with b6 = next_r.b6 } in
  mark_test_run 60;
  let test = eq r r_expected in
  if not test then failwithf "test 60 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a6; b6 } = r in
  let expected_a6 = 100 in
  mark_test_run 61;
  let test = (fun a b -> Int.equal a b) expected_a6 a6 in
  if not test then failwithf "test 61 failed";
  let expected_b6 = #101L in
  mark_test_run 62;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b6 b6 in
  if not test then failwithf "test 62 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a6; b6 } = r in
  let expected_a6 = 100 in
  mark_test_run 63;
  let test = (fun a b -> Int.equal a b) expected_a6 a6 in
  if not test then failwithf "test 63 failed";
  let expected_b6 = #101L in
  mark_test_run 64;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b6 b6 in
  if not test then failwithf "test 64 failed";

  (****************************)
  (*   t7 = { int; int32# }   *)
  (****************************)
  let r = { a7 = 0; b7 = #1l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a7 *)
  let actual = r.a7 in
  let expected = 0 in
  mark_test_run 65;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 65 failed";
  (* Paths of depth 1 *)
  (* .b7 *)
  let actual = r.b7 in
  let expected = #1l in
  mark_test_run 66;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 66 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a7 = a71; b7 = b71 } { a7 = a72; b7 = b72 } -> (fun a b -> Int.equal a b) a71 a72 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b71 b72) in
  let next_r = { a7 = 100; b7 = #101l } in
  let r_expected = { a7 = 0; b7 = #1l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a7 *)
  r.a7 <- next_r.a7;
  let r_expected = { r_expected with a7 = next_r.a7 } in
  mark_test_run 67;
  let test = eq r r_expected in
  if not test then failwithf "test 67 failed";
  Gc.compact ();
  (* .b7 *)
  r.b7 <- next_r.b7;
  let r_expected = { r_expected with b7 = next_r.b7 } in
  mark_test_run 68;
  let test = eq r r_expected in
  if not test then failwithf "test 68 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a7; b7 } = r in
  let expected_a7 = 100 in
  mark_test_run 69;
  let test = (fun a b -> Int.equal a b) expected_a7 a7 in
  if not test then failwithf "test 69 failed";
  let expected_b7 = #101l in
  mark_test_run 70;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b7 b7 in
  if not test then failwithf "test 70 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a7; b7 } = r in
  let expected_a7 = 100 in
  mark_test_run 71;
  let test = (fun a b -> Int.equal a b) expected_a7 a7 in
  if not test then failwithf "test 71 failed";
  let expected_b7 = #101l in
  mark_test_run 72;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b7 b7 in
  if not test then failwithf "test 72 failed";

  (*********************************)
  (*   t8 = { int; int32#; int }   *)
  (*********************************)
  let r = { a8 = 0; b8 = #1l; c8 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a8 *)
  let actual = r.a8 in
  let expected = 0 in
  mark_test_run 73;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 73 failed";
  (* Paths of depth 1 *)
  (* .b8 *)
  let actual = r.b8 in
  let expected = #1l in
  mark_test_run 74;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 74 failed";
  (* Paths of depth 1 *)
  (* .c8 *)
  let actual = r.c8 in
  let expected = 2 in
  mark_test_run 75;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 75 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a8 = a81; b8 = b81; c8 = c81 } { a8 = a82; b8 = b82; c8 = c82 } -> (fun a b -> Int.equal a b) a81 a82 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b81 b82 && (fun a b -> Int.equal a b) c81 c82) in
  let next_r = { a8 = 100; b8 = #101l; c8 = 102 } in
  let r_expected = { a8 = 0; b8 = #1l; c8 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a8 *)
  r.a8 <- next_r.a8;
  let r_expected = { r_expected with a8 = next_r.a8 } in
  mark_test_run 76;
  let test = eq r r_expected in
  if not test then failwithf "test 76 failed";
  Gc.compact ();
  (* .b8 *)
  r.b8 <- next_r.b8;
  let r_expected = { r_expected with b8 = next_r.b8 } in
  mark_test_run 77;
  let test = eq r r_expected in
  if not test then failwithf "test 77 failed";
  Gc.compact ();
  (* .c8 *)
  r.c8 <- next_r.c8;
  let r_expected = { r_expected with c8 = next_r.c8 } in
  mark_test_run 78;
  let test = eq r r_expected in
  if not test then failwithf "test 78 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a8; b8; c8 } = r in
  let expected_a8 = 100 in
  mark_test_run 79;
  let test = (fun a b -> Int.equal a b) expected_a8 a8 in
  if not test then failwithf "test 79 failed";
  let expected_b8 = #101l in
  mark_test_run 80;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b8 b8 in
  if not test then failwithf "test 80 failed";
  let expected_c8 = 102 in
  mark_test_run 81;
  let test = (fun a b -> Int.equal a b) expected_c8 c8 in
  if not test then failwithf "test 81 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a8; b8; c8 } = r in
  let expected_a8 = 100 in
  mark_test_run 82;
  let test = (fun a b -> Int.equal a b) expected_a8 a8 in
  if not test then failwithf "test 82 failed";
  let expected_b8 = #101l in
  mark_test_run 83;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b8 b8 in
  if not test then failwithf "test 83 failed";
  let expected_c8 = 102 in
  mark_test_run 84;
  let test = (fun a b -> Int.equal a b) expected_c8 c8 in
  if not test then failwithf "test 84 failed";

  (************************************)
  (*   t9 = { int; int32#; int32# }   *)
  (************************************)
  let r = { a9 = 0; b9 = #1l; c9 = #2l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a9 *)
  let actual = r.a9 in
  let expected = 0 in
  mark_test_run 85;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 85 failed";
  (* Paths of depth 1 *)
  (* .b9 *)
  let actual = r.b9 in
  let expected = #1l in
  mark_test_run 86;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 86 failed";
  (* Paths of depth 1 *)
  (* .c9 *)
  let actual = r.c9 in
  let expected = #2l in
  mark_test_run 87;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 87 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a9 = a91; b9 = b91; c9 = c91 } { a9 = a92; b9 = b92; c9 = c92 } -> (fun a b -> Int.equal a b) a91 a92 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b91 b92 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) c91 c92) in
  let next_r = { a9 = 100; b9 = #101l; c9 = #102l } in
  let r_expected = { a9 = 0; b9 = #1l; c9 = #2l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a9 *)
  r.a9 <- next_r.a9;
  let r_expected = { r_expected with a9 = next_r.a9 } in
  mark_test_run 88;
  let test = eq r r_expected in
  if not test then failwithf "test 88 failed";
  Gc.compact ();
  (* .b9 *)
  r.b9 <- next_r.b9;
  let r_expected = { r_expected with b9 = next_r.b9 } in
  mark_test_run 89;
  let test = eq r r_expected in
  if not test then failwithf "test 89 failed";
  Gc.compact ();
  (* .c9 *)
  r.c9 <- next_r.c9;
  let r_expected = { r_expected with c9 = next_r.c9 } in
  mark_test_run 90;
  let test = eq r r_expected in
  if not test then failwithf "test 90 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a9; b9; c9 } = r in
  let expected_a9 = 100 in
  mark_test_run 91;
  let test = (fun a b -> Int.equal a b) expected_a9 a9 in
  if not test then failwithf "test 91 failed";
  let expected_b9 = #101l in
  mark_test_run 92;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b9 b9 in
  if not test then failwithf "test 92 failed";
  let expected_c9 = #102l in
  mark_test_run 93;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_c9 c9 in
  if not test then failwithf "test 93 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a9; b9; c9 } = r in
  let expected_a9 = 100 in
  mark_test_run 94;
  let test = (fun a b -> Int.equal a b) expected_a9 a9 in
  if not test then failwithf "test 94 failed";
  let expected_b9 = #101l in
  mark_test_run 95;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b9 b9 in
  if not test then failwithf "test 95 failed";
  let expected_c9 = #102l in
  mark_test_run 96;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_c9 c9 in
  if not test then failwithf "test 96 failed";

  (*********************************)
  (*   t10 = { int; nativeint# }   *)
  (*********************************)
  let r = { a10 = 0; b10 = #1n } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a10 *)
  let actual = r.a10 in
  let expected = 0 in
  mark_test_run 97;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 97 failed";
  (* Paths of depth 1 *)
  (* .b10 *)
  let actual = r.b10 in
  let expected = #1n in
  mark_test_run 98;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 98 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a10 = a101; b10 = b101 } { a10 = a102; b10 = b102 } -> (fun a b -> Int.equal a b) a101 a102 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b101 b102) in
  let next_r = { a10 = 100; b10 = #101n } in
  let r_expected = { a10 = 0; b10 = #1n } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a10 *)
  r.a10 <- next_r.a10;
  let r_expected = { r_expected with a10 = next_r.a10 } in
  mark_test_run 99;
  let test = eq r r_expected in
  if not test then failwithf "test 99 failed";
  Gc.compact ();
  (* .b10 *)
  r.b10 <- next_r.b10;
  let r_expected = { r_expected with b10 = next_r.b10 } in
  mark_test_run 100;
  let test = eq r r_expected in
  if not test then failwithf "test 100 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a10; b10 } = r in
  let expected_a10 = 100 in
  mark_test_run 101;
  let test = (fun a b -> Int.equal a b) expected_a10 a10 in
  if not test then failwithf "test 101 failed";
  let expected_b10 = #101n in
  mark_test_run 102;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b10 b10 in
  if not test then failwithf "test 102 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a10; b10 } = r in
  let expected_a10 = 100 in
  mark_test_run 103;
  let test = (fun a b -> Int.equal a b) expected_a10 a10 in
  if not test then failwithf "test 103 failed";
  let expected_b10 = #101n in
  mark_test_run 104;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b10 b10 in
  if not test then failwithf "test 104 failed";

  (****************************)
  (*   t11 = { int; float }   *)
  (****************************)
  let r = { a11 = 0; b11 = 1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a11 *)
  let actual = r.a11 in
  let expected = 0 in
  mark_test_run 105;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 105 failed";
  (* Paths of depth 1 *)
  (* .b11 *)
  let actual = r.b11 in
  let expected = 1. in
  mark_test_run 106;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 106 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a11 = a111; b11 = b111 } { a11 = a112; b11 = b112 } -> (fun a b -> Int.equal a b) a111 a112 && (fun a b -> Float.equal (globalize a) (globalize b)) b111 b112) in
  let next_r = { a11 = 100; b11 = 101. } in
  let r_expected = { a11 = 0; b11 = 1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a11 *)
  r.a11 <- next_r.a11;
  let r_expected = { r_expected with a11 = next_r.a11 } in
  mark_test_run 107;
  let test = eq r r_expected in
  if not test then failwithf "test 107 failed";
  Gc.compact ();
  (* .b11 *)
  r.b11 <- next_r.b11;
  let r_expected = { r_expected with b11 = next_r.b11 } in
  mark_test_run 108;
  let test = eq r r_expected in
  if not test then failwithf "test 108 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a11; b11 } = r in
  let expected_a11 = 100 in
  mark_test_run 109;
  let test = (fun a b -> Int.equal a b) expected_a11 a11 in
  if not test then failwithf "test 109 failed";
  let expected_b11 = 101. in
  mark_test_run 110;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b11 b11 in
  if not test then failwithf "test 110 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a11; b11 } = r in
  let expected_a11 = 100 in
  mark_test_run 111;
  let test = (fun a b -> Int.equal a b) expected_a11 a11 in
  if not test then failwithf "test 111 failed";
  let expected_b11 = 101. in
  mark_test_run 112;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b11 b11 in
  if not test then failwithf "test 112 failed";

  (*********************************)
  (*   t12 = { int; float; int }   *)
  (*********************************)
  let r = { a12 = 0; b12 = 1.; c12 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a12 *)
  let actual = r.a12 in
  let expected = 0 in
  mark_test_run 113;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 113 failed";
  (* Paths of depth 1 *)
  (* .b12 *)
  let actual = r.b12 in
  let expected = 1. in
  mark_test_run 114;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 114 failed";
  (* Paths of depth 1 *)
  (* .c12 *)
  let actual = r.c12 in
  let expected = 2 in
  mark_test_run 115;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 115 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a12 = a121; b12 = b121; c12 = c121 } { a12 = a122; b12 = b122; c12 = c122 } -> (fun a b -> Int.equal a b) a121 a122 && (fun a b -> Float.equal (globalize a) (globalize b)) b121 b122 && (fun a b -> Int.equal a b) c121 c122) in
  let next_r = { a12 = 100; b12 = 101.; c12 = 102 } in
  let r_expected = { a12 = 0; b12 = 1.; c12 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a12 *)
  r.a12 <- next_r.a12;
  let r_expected = { r_expected with a12 = next_r.a12 } in
  mark_test_run 116;
  let test = eq r r_expected in
  if not test then failwithf "test 116 failed";
  Gc.compact ();
  (* .b12 *)
  r.b12 <- next_r.b12;
  let r_expected = { r_expected with b12 = next_r.b12 } in
  mark_test_run 117;
  let test = eq r r_expected in
  if not test then failwithf "test 117 failed";
  Gc.compact ();
  (* .c12 *)
  r.c12 <- next_r.c12;
  let r_expected = { r_expected with c12 = next_r.c12 } in
  mark_test_run 118;
  let test = eq r r_expected in
  if not test then failwithf "test 118 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a12; b12; c12 } = r in
  let expected_a12 = 100 in
  mark_test_run 119;
  let test = (fun a b -> Int.equal a b) expected_a12 a12 in
  if not test then failwithf "test 119 failed";
  let expected_b12 = 101. in
  mark_test_run 120;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b12 b12 in
  if not test then failwithf "test 120 failed";
  let expected_c12 = 102 in
  mark_test_run 121;
  let test = (fun a b -> Int.equal a b) expected_c12 c12 in
  if not test then failwithf "test 121 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a12; b12; c12 } = r in
  let expected_a12 = 100 in
  mark_test_run 122;
  let test = (fun a b -> Int.equal a b) expected_a12 a12 in
  if not test then failwithf "test 122 failed";
  let expected_b12 = 101. in
  mark_test_run 123;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b12 b12 in
  if not test then failwithf "test 123 failed";
  let expected_c12 = 102 in
  mark_test_run 124;
  let test = (fun a b -> Int.equal a b) expected_c12 c12 in
  if not test then failwithf "test 124 failed";

  (***********************************)
  (*   t13 = { int; float; float }   *)
  (***********************************)
  let r = { a13 = 0; b13 = 1.; c13 = 2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a13 *)
  let actual = r.a13 in
  let expected = 0 in
  mark_test_run 125;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 125 failed";
  (* Paths of depth 1 *)
  (* .b13 *)
  let actual = r.b13 in
  let expected = 1. in
  mark_test_run 126;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 126 failed";
  (* Paths of depth 1 *)
  (* .c13 *)
  let actual = r.c13 in
  let expected = 2. in
  mark_test_run 127;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 127 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a13 = a131; b13 = b131; c13 = c131 } { a13 = a132; b13 = b132; c13 = c132 } -> (fun a b -> Int.equal a b) a131 a132 && (fun a b -> Float.equal (globalize a) (globalize b)) b131 b132 && (fun a b -> Float.equal (globalize a) (globalize b)) c131 c132) in
  let next_r = { a13 = 100; b13 = 101.; c13 = 102. } in
  let r_expected = { a13 = 0; b13 = 1.; c13 = 2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a13 *)
  r.a13 <- next_r.a13;
  let r_expected = { r_expected with a13 = next_r.a13 } in
  mark_test_run 128;
  let test = eq r r_expected in
  if not test then failwithf "test 128 failed";
  Gc.compact ();
  (* .b13 *)
  r.b13 <- next_r.b13;
  let r_expected = { r_expected with b13 = next_r.b13 } in
  mark_test_run 129;
  let test = eq r r_expected in
  if not test then failwithf "test 129 failed";
  Gc.compact ();
  (* .c13 *)
  r.c13 <- next_r.c13;
  let r_expected = { r_expected with c13 = next_r.c13 } in
  mark_test_run 130;
  let test = eq r r_expected in
  if not test then failwithf "test 130 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a13; b13; c13 } = r in
  let expected_a13 = 100 in
  mark_test_run 131;
  let test = (fun a b -> Int.equal a b) expected_a13 a13 in
  if not test then failwithf "test 131 failed";
  let expected_b13 = 101. in
  mark_test_run 132;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b13 b13 in
  if not test then failwithf "test 132 failed";
  let expected_c13 = 102. in
  mark_test_run 133;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_c13 c13 in
  if not test then failwithf "test 133 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a13; b13; c13 } = r in
  let expected_a13 = 100 in
  mark_test_run 134;
  let test = (fun a b -> Int.equal a b) expected_a13 a13 in
  if not test then failwithf "test 134 failed";
  let expected_b13 = 101. in
  mark_test_run 135;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b13 b13 in
  if not test then failwithf "test 135 failed";
  let expected_c13 = 102. in
  mark_test_run 136;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_c13 c13 in
  if not test then failwithf "test 136 failed";

  (*******************************)
  (*   t15 = { int; #{ int } }   *)
  (*******************************)
  let r = { a15 = 0; b15 = #{ a14 = 1 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a15 *)
  let actual = r.a15 in
  let expected = 0 in
  mark_test_run 137;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 137 failed";
  (* Paths of depth 1 *)
  (* .b15 *)
  let actual = r.b15 in
  let expected = #{ a14 = 1 } in
  mark_test_run 138;
  let test = (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) actual expected in
  if not test then failwithf "test 138 failed";
  (* Paths of depth 2 *)
  (* .b15.#a14 *)
  let actual = r.b15.#a14 in
  let expected = 1 in
  mark_test_run 139;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 139 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a15 = a151; b15 = b151 } { a15 = a152; b15 = b152 } -> (fun a b -> Int.equal a b) a151 a152 && (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) b151 b152) in
  let next_r = { a15 = 100; b15 = #{ a14 = 101 } } in
  let r_expected = { a15 = 0; b15 = #{ a14 = 1 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a15 *)
  r.a15 <- next_r.a15;
  let r_expected = { r_expected with a15 = next_r.a15 } in
  mark_test_run 140;
  let test = eq r r_expected in
  if not test then failwithf "test 140 failed";
  Gc.compact ();
  (* .b15 *)
  r.b15 <- next_r.b15;
  let r_expected = { r_expected with b15 = next_r.b15 } in
  mark_test_run 141;
  let test = eq r r_expected in
  if not test then failwithf "test 141 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a15; b15 = #{ a14 } } = r in
  let expected_a15 = 100 in
  mark_test_run 142;
  let test = (fun a b -> Int.equal a b) expected_a15 a15 in
  if not test then failwithf "test 142 failed";
  let expected_a14 = 101 in
  mark_test_run 143;
  let test = (fun a b -> Int.equal a b) expected_a14 a14 in
  if not test then failwithf "test 143 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a15; b15 } = r in
  let expected_a15 = 100 in
  mark_test_run 144;
  let test = (fun a b -> Int.equal a b) expected_a15 a15 in
  if not test then failwithf "test 144 failed";
  let expected_b15 = #{ a14 = 101 } in
  mark_test_run 145;
  let test = (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) expected_b15 b15 in
  if not test then failwithf "test 145 failed";

  (************************************)
  (*   t17 = { int; #{ int; int } }   *)
  (************************************)
  let r = { a17 = 0; b17 = #{ a16 = 1; b16 = 2 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a17 *)
  let actual = r.a17 in
  let expected = 0 in
  mark_test_run 146;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 146 failed";
  (* Paths of depth 1 *)
  (* .b17 *)
  let actual = r.b17 in
  let expected = #{ a16 = 1; b16 = 2 } in
  mark_test_run 147;
  let test = (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) actual expected in
  if not test then failwithf "test 147 failed";
  (* Paths of depth 2 *)
  (* .b17.#a16 *)
  let actual = r.b17.#a16 in
  let expected = 1 in
  mark_test_run 148;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 148 failed";
  (* .b17.#b16 *)
  let actual = r.b17.#b16 in
  let expected = 2 in
  mark_test_run 149;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 149 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a17 = a171; b17 = b171 } { a17 = a172; b17 = b172 } -> (fun a b -> Int.equal a b) a171 a172 && (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) b171 b172) in
  let next_r = { a17 = 100; b17 = #{ a16 = 101; b16 = 102 } } in
  let r_expected = { a17 = 0; b17 = #{ a16 = 1; b16 = 2 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a17 *)
  r.a17 <- next_r.a17;
  let r_expected = { r_expected with a17 = next_r.a17 } in
  mark_test_run 150;
  let test = eq r r_expected in
  if not test then failwithf "test 150 failed";
  Gc.compact ();
  (* .b17 *)
  r.b17 <- next_r.b17;
  let r_expected = { r_expected with b17 = next_r.b17 } in
  mark_test_run 151;
  let test = eq r r_expected in
  if not test then failwithf "test 151 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a17; b17 = #{ a16; b16 } } = r in
  let expected_a17 = 100 in
  mark_test_run 152;
  let test = (fun a b -> Int.equal a b) expected_a17 a17 in
  if not test then failwithf "test 152 failed";
  let expected_a16 = 101 in
  mark_test_run 153;
  let test = (fun a b -> Int.equal a b) expected_a16 a16 in
  if not test then failwithf "test 153 failed";
  let expected_b16 = 102 in
  mark_test_run 154;
  let test = (fun a b -> Int.equal a b) expected_b16 b16 in
  if not test then failwithf "test 154 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a17; b17 } = r in
  let expected_a17 = 100 in
  mark_test_run 155;
  let test = (fun a b -> Int.equal a b) expected_a17 a17 in
  if not test then failwithf "test 155 failed";
  let expected_b17 = #{ a16 = 101; b16 = 102 } in
  mark_test_run 156;
  let test = (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) expected_b17 b17 in
  if not test then failwithf "test 156 failed";

  (***************************************)
  (*   t19 = { int; #{ int; int32# } }   *)
  (***************************************)
  let r = { a19 = 0; b19 = #{ a18 = 1; b18 = #2l } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a19 *)
  let actual = r.a19 in
  let expected = 0 in
  mark_test_run 157;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 157 failed";
  (* Paths of depth 1 *)
  (* .b19 *)
  let actual = r.b19 in
  let expected = #{ a18 = 1; b18 = #2l } in
  mark_test_run 158;
  let test = (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) actual expected in
  if not test then failwithf "test 158 failed";
  (* Paths of depth 2 *)
  (* .b19.#a18 *)
  let actual = r.b19.#a18 in
  let expected = 1 in
  mark_test_run 159;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 159 failed";
  (* .b19.#b18 *)
  let actual = r.b19.#b18 in
  let expected = #2l in
  mark_test_run 160;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 160 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a19 = a191; b19 = b191 } { a19 = a192; b19 = b192 } -> (fun a b -> Int.equal a b) a191 a192 && (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) b191 b192) in
  let next_r = { a19 = 100; b19 = #{ a18 = 101; b18 = #102l } } in
  let r_expected = { a19 = 0; b19 = #{ a18 = 1; b18 = #2l } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a19 *)
  r.a19 <- next_r.a19;
  let r_expected = { r_expected with a19 = next_r.a19 } in
  mark_test_run 161;
  let test = eq r r_expected in
  if not test then failwithf "test 161 failed";
  Gc.compact ();
  (* .b19 *)
  r.b19 <- next_r.b19;
  let r_expected = { r_expected with b19 = next_r.b19 } in
  mark_test_run 162;
  let test = eq r r_expected in
  if not test then failwithf "test 162 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a19; b19 = #{ a18; b18 } } = r in
  let expected_a19 = 100 in
  mark_test_run 163;
  let test = (fun a b -> Int.equal a b) expected_a19 a19 in
  if not test then failwithf "test 163 failed";
  let expected_a18 = 101 in
  mark_test_run 164;
  let test = (fun a b -> Int.equal a b) expected_a18 a18 in
  if not test then failwithf "test 164 failed";
  let expected_b18 = #102l in
  mark_test_run 165;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b18 b18 in
  if not test then failwithf "test 165 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a19; b19 } = r in
  let expected_a19 = 100 in
  mark_test_run 166;
  let test = (fun a b -> Int.equal a b) expected_a19 a19 in
  if not test then failwithf "test 166 failed";
  let expected_b19 = #{ a18 = 101; b18 = #102l } in
  mark_test_run 167;
  let test = (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) expected_b19 b19 in
  if not test then failwithf "test 167 failed";

  (**************************************)
  (*   t21 = { int; #{ int; float } }   *)
  (**************************************)
  let r = { a21 = 0; b21 = #{ a20 = 1; b20 = 2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a21 *)
  let actual = r.a21 in
  let expected = 0 in
  mark_test_run 168;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 168 failed";
  (* Paths of depth 1 *)
  (* .b21 *)
  let actual = r.b21 in
  let expected = #{ a20 = 1; b20 = 2. } in
  mark_test_run 169;
  let test = (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) actual expected in
  if not test then failwithf "test 169 failed";
  (* Paths of depth 2 *)
  (* .b21.#a20 *)
  let actual = r.b21.#a20 in
  let expected = 1 in
  mark_test_run 170;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 170 failed";
  (* .b21.#b20 *)
  let actual = r.b21.#b20 in
  let expected = 2. in
  mark_test_run 171;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 171 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a21 = a211; b21 = b211 } { a21 = a212; b21 = b212 } -> (fun a b -> Int.equal a b) a211 a212 && (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) b211 b212) in
  let next_r = { a21 = 100; b21 = #{ a20 = 101; b20 = 102. } } in
  let r_expected = { a21 = 0; b21 = #{ a20 = 1; b20 = 2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a21 *)
  r.a21 <- next_r.a21;
  let r_expected = { r_expected with a21 = next_r.a21 } in
  mark_test_run 172;
  let test = eq r r_expected in
  if not test then failwithf "test 172 failed";
  Gc.compact ();
  (* .b21 *)
  r.b21 <- next_r.b21;
  let r_expected = { r_expected with b21 = next_r.b21 } in
  mark_test_run 173;
  let test = eq r r_expected in
  if not test then failwithf "test 173 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a21; b21 = #{ a20; b20 } } = r in
  let expected_a21 = 100 in
  mark_test_run 174;
  let test = (fun a b -> Int.equal a b) expected_a21 a21 in
  if not test then failwithf "test 174 failed";
  let expected_a20 = 101 in
  mark_test_run 175;
  let test = (fun a b -> Int.equal a b) expected_a20 a20 in
  if not test then failwithf "test 175 failed";
  let expected_b20 = 102. in
  mark_test_run 176;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b20 b20 in
  if not test then failwithf "test 176 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a21; b21 } = r in
  let expected_a21 = 100 in
  mark_test_run 177;
  let test = (fun a b -> Int.equal a b) expected_a21 a21 in
  if not test then failwithf "test 177 failed";
  let expected_b21 = #{ a20 = 101; b20 = 102. } in
  mark_test_run 178;
  let test = (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) expected_b21 b21 in
  if not test then failwithf "test 178 failed";

  (*****************************************)
  (*   t23 = { int; #{ int; #{ int } } }   *)
  (*****************************************)
  let r = { a23 = 0; b23 = #{ a22 = 1; b22 = #{ a14 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a23 *)
  let actual = r.a23 in
  let expected = 0 in
  mark_test_run 179;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 179 failed";
  (* Paths of depth 1 *)
  (* .b23 *)
  let actual = r.b23 in
  let expected = #{ a22 = 1; b22 = #{ a14 = 2 } } in
  mark_test_run 180;
  let test = (fun #{ a22 = a221; b22 = b221 } #{ a22 = a222; b22 = b222 } -> (fun a b -> Int.equal a b) a221 a222 && (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) b221 b222) actual expected in
  if not test then failwithf "test 180 failed";
  (* Paths of depth 2 *)
  (* .b23.#a22 *)
  let actual = r.b23.#a22 in
  let expected = 1 in
  mark_test_run 181;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 181 failed";
  (* .b23.#b22 *)
  let actual = r.b23.#b22 in
  let expected = #{ a14 = 2 } in
  mark_test_run 182;
  let test = (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) actual expected in
  if not test then failwithf "test 182 failed";
  (* Paths of depth 3 *)
  (* .b23.#b22.#a14 *)
  let actual = r.b23.#b22.#a14 in
  let expected = 2 in
  mark_test_run 183;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 183 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a23 = a231; b23 = b231 } { a23 = a232; b23 = b232 } -> (fun a b -> Int.equal a b) a231 a232 && (fun #{ a22 = a221; b22 = b221 } #{ a22 = a222; b22 = b222 } -> (fun a b -> Int.equal a b) a221 a222 && (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) b221 b222) b231 b232) in
  let next_r = { a23 = 100; b23 = #{ a22 = 101; b22 = #{ a14 = 102 } } } in
  let r_expected = { a23 = 0; b23 = #{ a22 = 1; b22 = #{ a14 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a23 *)
  r.a23 <- next_r.a23;
  let r_expected = { r_expected with a23 = next_r.a23 } in
  mark_test_run 184;
  let test = eq r r_expected in
  if not test then failwithf "test 184 failed";
  Gc.compact ();
  (* .b23 *)
  r.b23 <- next_r.b23;
  let r_expected = { r_expected with b23 = next_r.b23 } in
  mark_test_run 185;
  let test = eq r r_expected in
  if not test then failwithf "test 185 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a23; b23 = #{ a22; b22 = #{ a14 } } } = r in
  let expected_a23 = 100 in
  mark_test_run 186;
  let test = (fun a b -> Int.equal a b) expected_a23 a23 in
  if not test then failwithf "test 186 failed";
  let expected_a22 = 101 in
  mark_test_run 187;
  let test = (fun a b -> Int.equal a b) expected_a22 a22 in
  if not test then failwithf "test 187 failed";
  let expected_a14 = 102 in
  mark_test_run 188;
  let test = (fun a b -> Int.equal a b) expected_a14 a14 in
  if not test then failwithf "test 188 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a23; b23 } = r in
  let expected_a23 = 100 in
  mark_test_run 189;
  let test = (fun a b -> Int.equal a b) expected_a23 a23 in
  if not test then failwithf "test 189 failed";
  let expected_b23 = #{ a22 = 101; b22 = #{ a14 = 102 } } in
  mark_test_run 190;
  let test = (fun #{ a22 = a221; b22 = b221 } #{ a22 = a222; b22 = b222 } -> (fun a b -> Int.equal a b) a221 a222 && (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) b221 b222) expected_b23 b23 in
  if not test then failwithf "test 190 failed";

  (********************************************)
  (*   t26 = { int; #{ int; #{ int32# } } }   *)
  (********************************************)
  let r = { a26 = 0; b26 = #{ a25 = 1; b25 = #{ a24 = #2l } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a26 *)
  let actual = r.a26 in
  let expected = 0 in
  mark_test_run 191;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 191 failed";
  (* Paths of depth 1 *)
  (* .b26 *)
  let actual = r.b26 in
  let expected = #{ a25 = 1; b25 = #{ a24 = #2l } } in
  mark_test_run 192;
  let test = (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) b251 b252) actual expected in
  if not test then failwithf "test 192 failed";
  (* Paths of depth 2 *)
  (* .b26.#a25 *)
  let actual = r.b26.#a25 in
  let expected = 1 in
  mark_test_run 193;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 193 failed";
  (* .b26.#b25 *)
  let actual = r.b26.#b25 in
  let expected = #{ a24 = #2l } in
  mark_test_run 194;
  let test = (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) actual expected in
  if not test then failwithf "test 194 failed";
  (* Paths of depth 3 *)
  (* .b26.#b25.#a24 *)
  let actual = r.b26.#b25.#a24 in
  let expected = #2l in
  mark_test_run 195;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 195 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a26 = a261; b26 = b261 } { a26 = a262; b26 = b262 } -> (fun a b -> Int.equal a b) a261 a262 && (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) b251 b252) b261 b262) in
  let next_r = { a26 = 100; b26 = #{ a25 = 101; b25 = #{ a24 = #102l } } } in
  let r_expected = { a26 = 0; b26 = #{ a25 = 1; b25 = #{ a24 = #2l } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a26 *)
  r.a26 <- next_r.a26;
  let r_expected = { r_expected with a26 = next_r.a26 } in
  mark_test_run 196;
  let test = eq r r_expected in
  if not test then failwithf "test 196 failed";
  Gc.compact ();
  (* .b26 *)
  r.b26 <- next_r.b26;
  let r_expected = { r_expected with b26 = next_r.b26 } in
  mark_test_run 197;
  let test = eq r r_expected in
  if not test then failwithf "test 197 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a26; b26 = #{ a25; b25 = #{ a24 } } } = r in
  let expected_a26 = 100 in
  mark_test_run 198;
  let test = (fun a b -> Int.equal a b) expected_a26 a26 in
  if not test then failwithf "test 198 failed";
  let expected_a25 = 101 in
  mark_test_run 199;
  let test = (fun a b -> Int.equal a b) expected_a25 a25 in
  if not test then failwithf "test 199 failed";
  let expected_a24 = #102l in
  mark_test_run 200;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a24 a24 in
  if not test then failwithf "test 200 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a26; b26 } = r in
  let expected_a26 = 100 in
  mark_test_run 201;
  let test = (fun a b -> Int.equal a b) expected_a26 a26 in
  if not test then failwithf "test 201 failed";
  let expected_b26 = #{ a25 = 101; b25 = #{ a24 = #102l } } in
  mark_test_run 202;
  let test = (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) b251 b252) expected_b26 b26 in
  if not test then failwithf "test 202 failed";

  (*******************************************)
  (*   t29 = { int; #{ int; #{ float } } }   *)
  (*******************************************)
  let r = { a29 = 0; b29 = #{ a28 = 1; b28 = #{ a27 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a29 *)
  let actual = r.a29 in
  let expected = 0 in
  mark_test_run 203;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 203 failed";
  (* Paths of depth 1 *)
  (* .b29 *)
  let actual = r.b29 in
  let expected = #{ a28 = 1; b28 = #{ a27 = 2. } } in
  mark_test_run 204;
  let test = (fun #{ a28 = a281; b28 = b281 } #{ a28 = a282; b28 = b282 } -> (fun a b -> Int.equal a b) a281 a282 && (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) b281 b282) actual expected in
  if not test then failwithf "test 204 failed";
  (* Paths of depth 2 *)
  (* .b29.#a28 *)
  let actual = r.b29.#a28 in
  let expected = 1 in
  mark_test_run 205;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 205 failed";
  (* .b29.#b28 *)
  let actual = r.b29.#b28 in
  let expected = #{ a27 = 2. } in
  mark_test_run 206;
  let test = (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) actual expected in
  if not test then failwithf "test 206 failed";
  (* Paths of depth 3 *)
  (* .b29.#b28.#a27 *)
  let actual = r.b29.#b28.#a27 in
  let expected = 2. in
  mark_test_run 207;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 207 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a29 = a291; b29 = b291 } { a29 = a292; b29 = b292 } -> (fun a b -> Int.equal a b) a291 a292 && (fun #{ a28 = a281; b28 = b281 } #{ a28 = a282; b28 = b282 } -> (fun a b -> Int.equal a b) a281 a282 && (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) b281 b282) b291 b292) in
  let next_r = { a29 = 100; b29 = #{ a28 = 101; b28 = #{ a27 = 102. } } } in
  let r_expected = { a29 = 0; b29 = #{ a28 = 1; b28 = #{ a27 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a29 *)
  r.a29 <- next_r.a29;
  let r_expected = { r_expected with a29 = next_r.a29 } in
  mark_test_run 208;
  let test = eq r r_expected in
  if not test then failwithf "test 208 failed";
  Gc.compact ();
  (* .b29 *)
  r.b29 <- next_r.b29;
  let r_expected = { r_expected with b29 = next_r.b29 } in
  mark_test_run 209;
  let test = eq r r_expected in
  if not test then failwithf "test 209 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a29; b29 = #{ a28; b28 = #{ a27 } } } = r in
  let expected_a29 = 100 in
  mark_test_run 210;
  let test = (fun a b -> Int.equal a b) expected_a29 a29 in
  if not test then failwithf "test 210 failed";
  let expected_a28 = 101 in
  mark_test_run 211;
  let test = (fun a b -> Int.equal a b) expected_a28 a28 in
  if not test then failwithf "test 211 failed";
  let expected_a27 = 102. in
  mark_test_run 212;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a27 a27 in
  if not test then failwithf "test 212 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a29; b29 } = r in
  let expected_a29 = 100 in
  mark_test_run 213;
  let test = (fun a b -> Int.equal a b) expected_a29 a29 in
  if not test then failwithf "test 213 failed";
  let expected_b29 = #{ a28 = 101; b28 = #{ a27 = 102. } } in
  mark_test_run 214;
  let test = (fun #{ a28 = a281; b28 = b281 } #{ a28 = a282; b28 = b282 } -> (fun a b -> Int.equal a b) a281 a282 && (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) b281 b282) expected_b29 b29 in
  if not test then failwithf "test 214 failed";

  (**********************************)
  (*   t30 = { int; #{ int32# } }   *)
  (**********************************)
  let r = { a30 = 0; b30 = #{ a24 = #1l } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a30 *)
  let actual = r.a30 in
  let expected = 0 in
  mark_test_run 215;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 215 failed";
  (* Paths of depth 1 *)
  (* .b30 *)
  let actual = r.b30 in
  let expected = #{ a24 = #1l } in
  mark_test_run 216;
  let test = (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) actual expected in
  if not test then failwithf "test 216 failed";
  (* Paths of depth 2 *)
  (* .b30.#a24 *)
  let actual = r.b30.#a24 in
  let expected = #1l in
  mark_test_run 217;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 217 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a30 = a301; b30 = b301 } { a30 = a302; b30 = b302 } -> (fun a b -> Int.equal a b) a301 a302 && (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) b301 b302) in
  let next_r = { a30 = 100; b30 = #{ a24 = #101l } } in
  let r_expected = { a30 = 0; b30 = #{ a24 = #1l } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a30 *)
  r.a30 <- next_r.a30;
  let r_expected = { r_expected with a30 = next_r.a30 } in
  mark_test_run 218;
  let test = eq r r_expected in
  if not test then failwithf "test 218 failed";
  Gc.compact ();
  (* .b30 *)
  r.b30 <- next_r.b30;
  let r_expected = { r_expected with b30 = next_r.b30 } in
  mark_test_run 219;
  let test = eq r r_expected in
  if not test then failwithf "test 219 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a30; b30 = #{ a24 } } = r in
  let expected_a30 = 100 in
  mark_test_run 220;
  let test = (fun a b -> Int.equal a b) expected_a30 a30 in
  if not test then failwithf "test 220 failed";
  let expected_a24 = #101l in
  mark_test_run 221;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a24 a24 in
  if not test then failwithf "test 221 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a30; b30 } = r in
  let expected_a30 = 100 in
  mark_test_run 222;
  let test = (fun a b -> Int.equal a b) expected_a30 a30 in
  if not test then failwithf "test 222 failed";
  let expected_b30 = #{ a24 = #101l } in
  mark_test_run 223;
  let test = (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) expected_b30 b30 in
  if not test then failwithf "test 223 failed";

  (***************************************)
  (*   t32 = { int; #{ int32#; int } }   *)
  (***************************************)
  let r = { a32 = 0; b32 = #{ a31 = #1l; b31 = 2 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a32 *)
  let actual = r.a32 in
  let expected = 0 in
  mark_test_run 224;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 224 failed";
  (* Paths of depth 1 *)
  (* .b32 *)
  let actual = r.b32 in
  let expected = #{ a31 = #1l; b31 = 2 } in
  mark_test_run 225;
  let test = (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) actual expected in
  if not test then failwithf "test 225 failed";
  (* Paths of depth 2 *)
  (* .b32.#a31 *)
  let actual = r.b32.#a31 in
  let expected = #1l in
  mark_test_run 226;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 226 failed";
  (* .b32.#b31 *)
  let actual = r.b32.#b31 in
  let expected = 2 in
  mark_test_run 227;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 227 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a32 = a321; b32 = b321 } { a32 = a322; b32 = b322 } -> (fun a b -> Int.equal a b) a321 a322 && (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) b321 b322) in
  let next_r = { a32 = 100; b32 = #{ a31 = #101l; b31 = 102 } } in
  let r_expected = { a32 = 0; b32 = #{ a31 = #1l; b31 = 2 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a32 *)
  r.a32 <- next_r.a32;
  let r_expected = { r_expected with a32 = next_r.a32 } in
  mark_test_run 228;
  let test = eq r r_expected in
  if not test then failwithf "test 228 failed";
  Gc.compact ();
  (* .b32 *)
  r.b32 <- next_r.b32;
  let r_expected = { r_expected with b32 = next_r.b32 } in
  mark_test_run 229;
  let test = eq r r_expected in
  if not test then failwithf "test 229 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a32; b32 = #{ a31; b31 } } = r in
  let expected_a32 = 100 in
  mark_test_run 230;
  let test = (fun a b -> Int.equal a b) expected_a32 a32 in
  if not test then failwithf "test 230 failed";
  let expected_a31 = #101l in
  mark_test_run 231;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a31 a31 in
  if not test then failwithf "test 231 failed";
  let expected_b31 = 102 in
  mark_test_run 232;
  let test = (fun a b -> Int.equal a b) expected_b31 b31 in
  if not test then failwithf "test 232 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a32; b32 } = r in
  let expected_a32 = 100 in
  mark_test_run 233;
  let test = (fun a b -> Int.equal a b) expected_a32 a32 in
  if not test then failwithf "test 233 failed";
  let expected_b32 = #{ a31 = #101l; b31 = 102 } in
  mark_test_run 234;
  let test = (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) expected_b32 b32 in
  if not test then failwithf "test 234 failed";

  (******************************************)
  (*   t34 = { int; #{ int32#; int32# } }   *)
  (******************************************)
  let r = { a34 = 0; b34 = #{ a33 = #1l; b33 = #2l } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a34 *)
  let actual = r.a34 in
  let expected = 0 in
  mark_test_run 235;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 235 failed";
  (* Paths of depth 1 *)
  (* .b34 *)
  let actual = r.b34 in
  let expected = #{ a33 = #1l; b33 = #2l } in
  mark_test_run 236;
  let test = (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) actual expected in
  if not test then failwithf "test 236 failed";
  (* Paths of depth 2 *)
  (* .b34.#a33 *)
  let actual = r.b34.#a33 in
  let expected = #1l in
  mark_test_run 237;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 237 failed";
  (* .b34.#b33 *)
  let actual = r.b34.#b33 in
  let expected = #2l in
  mark_test_run 238;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 238 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a34 = a341; b34 = b341 } { a34 = a342; b34 = b342 } -> (fun a b -> Int.equal a b) a341 a342 && (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) b341 b342) in
  let next_r = { a34 = 100; b34 = #{ a33 = #101l; b33 = #102l } } in
  let r_expected = { a34 = 0; b34 = #{ a33 = #1l; b33 = #2l } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a34 *)
  r.a34 <- next_r.a34;
  let r_expected = { r_expected with a34 = next_r.a34 } in
  mark_test_run 239;
  let test = eq r r_expected in
  if not test then failwithf "test 239 failed";
  Gc.compact ();
  (* .b34 *)
  r.b34 <- next_r.b34;
  let r_expected = { r_expected with b34 = next_r.b34 } in
  mark_test_run 240;
  let test = eq r r_expected in
  if not test then failwithf "test 240 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a34; b34 = #{ a33; b33 } } = r in
  let expected_a34 = 100 in
  mark_test_run 241;
  let test = (fun a b -> Int.equal a b) expected_a34 a34 in
  if not test then failwithf "test 241 failed";
  let expected_a33 = #101l in
  mark_test_run 242;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a33 a33 in
  if not test then failwithf "test 242 failed";
  let expected_b33 = #102l in
  mark_test_run 243;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b33 b33 in
  if not test then failwithf "test 243 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a34; b34 } = r in
  let expected_a34 = 100 in
  mark_test_run 244;
  let test = (fun a b -> Int.equal a b) expected_a34 a34 in
  if not test then failwithf "test 244 failed";
  let expected_b34 = #{ a33 = #101l; b33 = #102l } in
  mark_test_run 245;
  let test = (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) expected_b34 b34 in
  if not test then failwithf "test 245 failed";

  (********************************************)
  (*   t36 = { int; #{ int32#; #{ int } } }   *)
  (********************************************)
  let r = { a36 = 0; b36 = #{ a35 = #1l; b35 = #{ a14 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a36 *)
  let actual = r.a36 in
  let expected = 0 in
  mark_test_run 246;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 246 failed";
  (* Paths of depth 1 *)
  (* .b36 *)
  let actual = r.b36 in
  let expected = #{ a35 = #1l; b35 = #{ a14 = 2 } } in
  mark_test_run 247;
  let test = (fun #{ a35 = a351; b35 = b351 } #{ a35 = a352; b35 = b352 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a351 a352 && (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) b351 b352) actual expected in
  if not test then failwithf "test 247 failed";
  (* Paths of depth 2 *)
  (* .b36.#a35 *)
  let actual = r.b36.#a35 in
  let expected = #1l in
  mark_test_run 248;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 248 failed";
  (* .b36.#b35 *)
  let actual = r.b36.#b35 in
  let expected = #{ a14 = 2 } in
  mark_test_run 249;
  let test = (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) actual expected in
  if not test then failwithf "test 249 failed";
  (* Paths of depth 3 *)
  (* .b36.#b35.#a14 *)
  let actual = r.b36.#b35.#a14 in
  let expected = 2 in
  mark_test_run 250;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 250 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a36 = a361; b36 = b361 } { a36 = a362; b36 = b362 } -> (fun a b -> Int.equal a b) a361 a362 && (fun #{ a35 = a351; b35 = b351 } #{ a35 = a352; b35 = b352 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a351 a352 && (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) b351 b352) b361 b362) in
  let next_r = { a36 = 100; b36 = #{ a35 = #101l; b35 = #{ a14 = 102 } } } in
  let r_expected = { a36 = 0; b36 = #{ a35 = #1l; b35 = #{ a14 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a36 *)
  r.a36 <- next_r.a36;
  let r_expected = { r_expected with a36 = next_r.a36 } in
  mark_test_run 251;
  let test = eq r r_expected in
  if not test then failwithf "test 251 failed";
  Gc.compact ();
  (* .b36 *)
  r.b36 <- next_r.b36;
  let r_expected = { r_expected with b36 = next_r.b36 } in
  mark_test_run 252;
  let test = eq r r_expected in
  if not test then failwithf "test 252 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a36; b36 = #{ a35; b35 = #{ a14 } } } = r in
  let expected_a36 = 100 in
  mark_test_run 253;
  let test = (fun a b -> Int.equal a b) expected_a36 a36 in
  if not test then failwithf "test 253 failed";
  let expected_a35 = #101l in
  mark_test_run 254;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a35 a35 in
  if not test then failwithf "test 254 failed";
  let expected_a14 = 102 in
  mark_test_run 255;
  let test = (fun a b -> Int.equal a b) expected_a14 a14 in
  if not test then failwithf "test 255 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a36; b36 } = r in
  let expected_a36 = 100 in
  mark_test_run 256;
  let test = (fun a b -> Int.equal a b) expected_a36 a36 in
  if not test then failwithf "test 256 failed";
  let expected_b36 = #{ a35 = #101l; b35 = #{ a14 = 102 } } in
  mark_test_run 257;
  let test = (fun #{ a35 = a351; b35 = b351 } #{ a35 = a352; b35 = b352 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a351 a352 && (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) b351 b352) expected_b36 b36 in
  if not test then failwithf "test 257 failed";

  (***********************************************)
  (*   t38 = { int; #{ int32#; #{ int32# } } }   *)
  (***********************************************)
  let r = { a38 = 0; b38 = #{ a37 = #1l; b37 = #{ a24 = #2l } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a38 *)
  let actual = r.a38 in
  let expected = 0 in
  mark_test_run 258;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 258 failed";
  (* Paths of depth 1 *)
  (* .b38 *)
  let actual = r.b38 in
  let expected = #{ a37 = #1l; b37 = #{ a24 = #2l } } in
  mark_test_run 259;
  let test = (fun #{ a37 = a371; b37 = b371 } #{ a37 = a372; b37 = b372 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a371 a372 && (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) b371 b372) actual expected in
  if not test then failwithf "test 259 failed";
  (* Paths of depth 2 *)
  (* .b38.#a37 *)
  let actual = r.b38.#a37 in
  let expected = #1l in
  mark_test_run 260;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 260 failed";
  (* .b38.#b37 *)
  let actual = r.b38.#b37 in
  let expected = #{ a24 = #2l } in
  mark_test_run 261;
  let test = (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) actual expected in
  if not test then failwithf "test 261 failed";
  (* Paths of depth 3 *)
  (* .b38.#b37.#a24 *)
  let actual = r.b38.#b37.#a24 in
  let expected = #2l in
  mark_test_run 262;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 262 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a38 = a381; b38 = b381 } { a38 = a382; b38 = b382 } -> (fun a b -> Int.equal a b) a381 a382 && (fun #{ a37 = a371; b37 = b371 } #{ a37 = a372; b37 = b372 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a371 a372 && (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) b371 b372) b381 b382) in
  let next_r = { a38 = 100; b38 = #{ a37 = #101l; b37 = #{ a24 = #102l } } } in
  let r_expected = { a38 = 0; b38 = #{ a37 = #1l; b37 = #{ a24 = #2l } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a38 *)
  r.a38 <- next_r.a38;
  let r_expected = { r_expected with a38 = next_r.a38 } in
  mark_test_run 263;
  let test = eq r r_expected in
  if not test then failwithf "test 263 failed";
  Gc.compact ();
  (* .b38 *)
  r.b38 <- next_r.b38;
  let r_expected = { r_expected with b38 = next_r.b38 } in
  mark_test_run 264;
  let test = eq r r_expected in
  if not test then failwithf "test 264 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a38; b38 = #{ a37; b37 = #{ a24 } } } = r in
  let expected_a38 = 100 in
  mark_test_run 265;
  let test = (fun a b -> Int.equal a b) expected_a38 a38 in
  if not test then failwithf "test 265 failed";
  let expected_a37 = #101l in
  mark_test_run 266;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a37 a37 in
  if not test then failwithf "test 266 failed";
  let expected_a24 = #102l in
  mark_test_run 267;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a24 a24 in
  if not test then failwithf "test 267 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a38; b38 } = r in
  let expected_a38 = 100 in
  mark_test_run 268;
  let test = (fun a b -> Int.equal a b) expected_a38 a38 in
  if not test then failwithf "test 268 failed";
  let expected_b38 = #{ a37 = #101l; b37 = #{ a24 = #102l } } in
  mark_test_run 269;
  let test = (fun #{ a37 = a371; b37 = b371 } #{ a37 = a372; b37 = b372 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a371 a372 && (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) b371 b372) expected_b38 b38 in
  if not test then failwithf "test 269 failed";

  (*********************************)
  (*   t39 = { int; #{ float } }   *)
  (*********************************)
  let r = { a39 = 0; b39 = #{ a27 = 1. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a39 *)
  let actual = r.a39 in
  let expected = 0 in
  mark_test_run 270;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 270 failed";
  (* Paths of depth 1 *)
  (* .b39 *)
  let actual = r.b39 in
  let expected = #{ a27 = 1. } in
  mark_test_run 271;
  let test = (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) actual expected in
  if not test then failwithf "test 271 failed";
  (* Paths of depth 2 *)
  (* .b39.#a27 *)
  let actual = r.b39.#a27 in
  let expected = 1. in
  mark_test_run 272;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 272 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a39 = a391; b39 = b391 } { a39 = a392; b39 = b392 } -> (fun a b -> Int.equal a b) a391 a392 && (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) b391 b392) in
  let next_r = { a39 = 100; b39 = #{ a27 = 101. } } in
  let r_expected = { a39 = 0; b39 = #{ a27 = 1. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a39 *)
  r.a39 <- next_r.a39;
  let r_expected = { r_expected with a39 = next_r.a39 } in
  mark_test_run 273;
  let test = eq r r_expected in
  if not test then failwithf "test 273 failed";
  Gc.compact ();
  (* .b39 *)
  r.b39 <- next_r.b39;
  let r_expected = { r_expected with b39 = next_r.b39 } in
  mark_test_run 274;
  let test = eq r r_expected in
  if not test then failwithf "test 274 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a39; b39 = #{ a27 } } = r in
  let expected_a39 = 100 in
  mark_test_run 275;
  let test = (fun a b -> Int.equal a b) expected_a39 a39 in
  if not test then failwithf "test 275 failed";
  let expected_a27 = 101. in
  mark_test_run 276;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a27 a27 in
  if not test then failwithf "test 276 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a39; b39 } = r in
  let expected_a39 = 100 in
  mark_test_run 277;
  let test = (fun a b -> Int.equal a b) expected_a39 a39 in
  if not test then failwithf "test 277 failed";
  let expected_b39 = #{ a27 = 101. } in
  mark_test_run 278;
  let test = (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) expected_b39 b39 in
  if not test then failwithf "test 278 failed";

  (**************************************)
  (*   t41 = { int; #{ float; int } }   *)
  (**************************************)
  let r = { a41 = 0; b41 = #{ a40 = 1.; b40 = 2 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a41 *)
  let actual = r.a41 in
  let expected = 0 in
  mark_test_run 279;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 279 failed";
  (* Paths of depth 1 *)
  (* .b41 *)
  let actual = r.b41 in
  let expected = #{ a40 = 1.; b40 = 2 } in
  mark_test_run 280;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) actual expected in
  if not test then failwithf "test 280 failed";
  (* Paths of depth 2 *)
  (* .b41.#a40 *)
  let actual = r.b41.#a40 in
  let expected = 1. in
  mark_test_run 281;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 281 failed";
  (* .b41.#b40 *)
  let actual = r.b41.#b40 in
  let expected = 2 in
  mark_test_run 282;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 282 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a41 = a411; b41 = b411 } { a41 = a412; b41 = b412 } -> (fun a b -> Int.equal a b) a411 a412 && (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) b411 b412) in
  let next_r = { a41 = 100; b41 = #{ a40 = 101.; b40 = 102 } } in
  let r_expected = { a41 = 0; b41 = #{ a40 = 1.; b40 = 2 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a41 *)
  r.a41 <- next_r.a41;
  let r_expected = { r_expected with a41 = next_r.a41 } in
  mark_test_run 283;
  let test = eq r r_expected in
  if not test then failwithf "test 283 failed";
  Gc.compact ();
  (* .b41 *)
  r.b41 <- next_r.b41;
  let r_expected = { r_expected with b41 = next_r.b41 } in
  mark_test_run 284;
  let test = eq r r_expected in
  if not test then failwithf "test 284 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a41; b41 = #{ a40; b40 } } = r in
  let expected_a41 = 100 in
  mark_test_run 285;
  let test = (fun a b -> Int.equal a b) expected_a41 a41 in
  if not test then failwithf "test 285 failed";
  let expected_a40 = 101. in
  mark_test_run 286;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a40 a40 in
  if not test then failwithf "test 286 failed";
  let expected_b40 = 102 in
  mark_test_run 287;
  let test = (fun a b -> Int.equal a b) expected_b40 b40 in
  if not test then failwithf "test 287 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a41; b41 } = r in
  let expected_a41 = 100 in
  mark_test_run 288;
  let test = (fun a b -> Int.equal a b) expected_a41 a41 in
  if not test then failwithf "test 288 failed";
  let expected_b41 = #{ a40 = 101.; b40 = 102 } in
  mark_test_run 289;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) expected_b41 b41 in
  if not test then failwithf "test 289 failed";

  (****************************************)
  (*   t43 = { int; #{ float; float } }   *)
  (****************************************)
  let r = { a43 = 0; b43 = #{ a42 = 1.; b42 = 2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a43 *)
  let actual = r.a43 in
  let expected = 0 in
  mark_test_run 290;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 290 failed";
  (* Paths of depth 1 *)
  (* .b43 *)
  let actual = r.b43 in
  let expected = #{ a42 = 1.; b42 = 2. } in
  mark_test_run 291;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) actual expected in
  if not test then failwithf "test 291 failed";
  (* Paths of depth 2 *)
  (* .b43.#a42 *)
  let actual = r.b43.#a42 in
  let expected = 1. in
  mark_test_run 292;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 292 failed";
  (* .b43.#b42 *)
  let actual = r.b43.#b42 in
  let expected = 2. in
  mark_test_run 293;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 293 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a43 = a431; b43 = b431 } { a43 = a432; b43 = b432 } -> (fun a b -> Int.equal a b) a431 a432 && (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) b431 b432) in
  let next_r = { a43 = 100; b43 = #{ a42 = 101.; b42 = 102. } } in
  let r_expected = { a43 = 0; b43 = #{ a42 = 1.; b42 = 2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a43 *)
  r.a43 <- next_r.a43;
  let r_expected = { r_expected with a43 = next_r.a43 } in
  mark_test_run 294;
  let test = eq r r_expected in
  if not test then failwithf "test 294 failed";
  Gc.compact ();
  (* .b43 *)
  r.b43 <- next_r.b43;
  let r_expected = { r_expected with b43 = next_r.b43 } in
  mark_test_run 295;
  let test = eq r r_expected in
  if not test then failwithf "test 295 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a43; b43 = #{ a42; b42 } } = r in
  let expected_a43 = 100 in
  mark_test_run 296;
  let test = (fun a b -> Int.equal a b) expected_a43 a43 in
  if not test then failwithf "test 296 failed";
  let expected_a42 = 101. in
  mark_test_run 297;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a42 a42 in
  if not test then failwithf "test 297 failed";
  let expected_b42 = 102. in
  mark_test_run 298;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b42 b42 in
  if not test then failwithf "test 298 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a43; b43 } = r in
  let expected_a43 = 100 in
  mark_test_run 299;
  let test = (fun a b -> Int.equal a b) expected_a43 a43 in
  if not test then failwithf "test 299 failed";
  let expected_b43 = #{ a42 = 101.; b42 = 102. } in
  mark_test_run 300;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) expected_b43 b43 in
  if not test then failwithf "test 300 failed";

  (*******************************************)
  (*   t45 = { int; #{ float; #{ int } } }   *)
  (*******************************************)
  let r = { a45 = 0; b45 = #{ a44 = 1.; b44 = #{ a14 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a45 *)
  let actual = r.a45 in
  let expected = 0 in
  mark_test_run 301;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 301 failed";
  (* Paths of depth 1 *)
  (* .b45 *)
  let actual = r.b45 in
  let expected = #{ a44 = 1.; b44 = #{ a14 = 2 } } in
  mark_test_run 302;
  let test = (fun #{ a44 = a441; b44 = b441 } #{ a44 = a442; b44 = b442 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a441 a442 && (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) b441 b442) actual expected in
  if not test then failwithf "test 302 failed";
  (* Paths of depth 2 *)
  (* .b45.#a44 *)
  let actual = r.b45.#a44 in
  let expected = 1. in
  mark_test_run 303;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 303 failed";
  (* .b45.#b44 *)
  let actual = r.b45.#b44 in
  let expected = #{ a14 = 2 } in
  mark_test_run 304;
  let test = (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) actual expected in
  if not test then failwithf "test 304 failed";
  (* Paths of depth 3 *)
  (* .b45.#b44.#a14 *)
  let actual = r.b45.#b44.#a14 in
  let expected = 2 in
  mark_test_run 305;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 305 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a45 = a451; b45 = b451 } { a45 = a452; b45 = b452 } -> (fun a b -> Int.equal a b) a451 a452 && (fun #{ a44 = a441; b44 = b441 } #{ a44 = a442; b44 = b442 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a441 a442 && (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) b441 b442) b451 b452) in
  let next_r = { a45 = 100; b45 = #{ a44 = 101.; b44 = #{ a14 = 102 } } } in
  let r_expected = { a45 = 0; b45 = #{ a44 = 1.; b44 = #{ a14 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a45 *)
  r.a45 <- next_r.a45;
  let r_expected = { r_expected with a45 = next_r.a45 } in
  mark_test_run 306;
  let test = eq r r_expected in
  if not test then failwithf "test 306 failed";
  Gc.compact ();
  (* .b45 *)
  r.b45 <- next_r.b45;
  let r_expected = { r_expected with b45 = next_r.b45 } in
  mark_test_run 307;
  let test = eq r r_expected in
  if not test then failwithf "test 307 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a45; b45 = #{ a44; b44 = #{ a14 } } } = r in
  let expected_a45 = 100 in
  mark_test_run 308;
  let test = (fun a b -> Int.equal a b) expected_a45 a45 in
  if not test then failwithf "test 308 failed";
  let expected_a44 = 101. in
  mark_test_run 309;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a44 a44 in
  if not test then failwithf "test 309 failed";
  let expected_a14 = 102 in
  mark_test_run 310;
  let test = (fun a b -> Int.equal a b) expected_a14 a14 in
  if not test then failwithf "test 310 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a45; b45 } = r in
  let expected_a45 = 100 in
  mark_test_run 311;
  let test = (fun a b -> Int.equal a b) expected_a45 a45 in
  if not test then failwithf "test 311 failed";
  let expected_b45 = #{ a44 = 101.; b44 = #{ a14 = 102 } } in
  mark_test_run 312;
  let test = (fun #{ a44 = a441; b44 = b441 } #{ a44 = a442; b44 = b442 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a441 a442 && (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) b441 b442) expected_b45 b45 in
  if not test then failwithf "test 312 failed";

  (*********************************************)
  (*   t47 = { int; #{ float; #{ float } } }   *)
  (*********************************************)
  let r = { a47 = 0; b47 = #{ a46 = 1.; b46 = #{ a27 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a47 *)
  let actual = r.a47 in
  let expected = 0 in
  mark_test_run 313;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 313 failed";
  (* Paths of depth 1 *)
  (* .b47 *)
  let actual = r.b47 in
  let expected = #{ a46 = 1.; b46 = #{ a27 = 2. } } in
  mark_test_run 314;
  let test = (fun #{ a46 = a461; b46 = b461 } #{ a46 = a462; b46 = b462 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a461 a462 && (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) b461 b462) actual expected in
  if not test then failwithf "test 314 failed";
  (* Paths of depth 2 *)
  (* .b47.#a46 *)
  let actual = r.b47.#a46 in
  let expected = 1. in
  mark_test_run 315;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 315 failed";
  (* .b47.#b46 *)
  let actual = r.b47.#b46 in
  let expected = #{ a27 = 2. } in
  mark_test_run 316;
  let test = (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) actual expected in
  if not test then failwithf "test 316 failed";
  (* Paths of depth 3 *)
  (* .b47.#b46.#a27 *)
  let actual = r.b47.#b46.#a27 in
  let expected = 2. in
  mark_test_run 317;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 317 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a47 = a471; b47 = b471 } { a47 = a472; b47 = b472 } -> (fun a b -> Int.equal a b) a471 a472 && (fun #{ a46 = a461; b46 = b461 } #{ a46 = a462; b46 = b462 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a461 a462 && (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) b461 b462) b471 b472) in
  let next_r = { a47 = 100; b47 = #{ a46 = 101.; b46 = #{ a27 = 102. } } } in
  let r_expected = { a47 = 0; b47 = #{ a46 = 1.; b46 = #{ a27 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a47 *)
  r.a47 <- next_r.a47;
  let r_expected = { r_expected with a47 = next_r.a47 } in
  mark_test_run 318;
  let test = eq r r_expected in
  if not test then failwithf "test 318 failed";
  Gc.compact ();
  (* .b47 *)
  r.b47 <- next_r.b47;
  let r_expected = { r_expected with b47 = next_r.b47 } in
  mark_test_run 319;
  let test = eq r r_expected in
  if not test then failwithf "test 319 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a47; b47 = #{ a46; b46 = #{ a27 } } } = r in
  let expected_a47 = 100 in
  mark_test_run 320;
  let test = (fun a b -> Int.equal a b) expected_a47 a47 in
  if not test then failwithf "test 320 failed";
  let expected_a46 = 101. in
  mark_test_run 321;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a46 a46 in
  if not test then failwithf "test 321 failed";
  let expected_a27 = 102. in
  mark_test_run 322;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a27 a27 in
  if not test then failwithf "test 322 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a47; b47 } = r in
  let expected_a47 = 100 in
  mark_test_run 323;
  let test = (fun a b -> Int.equal a b) expected_a47 a47 in
  if not test then failwithf "test 323 failed";
  let expected_b47 = #{ a46 = 101.; b46 = #{ a27 = 102. } } in
  mark_test_run 324;
  let test = (fun #{ a46 = a461; b46 = b461 } #{ a46 = a462; b46 = b462 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a461 a462 && (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) b461 b462) expected_b47 b47 in
  if not test then failwithf "test 324 failed";

  (*****************************************)
  (*   t49 = { int; #{ #{ int; int } } }   *)
  (*****************************************)
  let r = { a49 = 0; b49 = #{ a48 = #{ a16 = 1; b16 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a49 *)
  let actual = r.a49 in
  let expected = 0 in
  mark_test_run 325;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 325 failed";
  (* Paths of depth 1 *)
  (* .b49 *)
  let actual = r.b49 in
  let expected = #{ a48 = #{ a16 = 1; b16 = 2 } } in
  mark_test_run 326;
  let test = (fun #{ a48 = a481 } #{ a48 = a482 } -> (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) a481 a482) actual expected in
  if not test then failwithf "test 326 failed";
  (* Paths of depth 2 *)
  (* .b49.#a48 *)
  let actual = r.b49.#a48 in
  let expected = #{ a16 = 1; b16 = 2 } in
  mark_test_run 327;
  let test = (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) actual expected in
  if not test then failwithf "test 327 failed";
  (* Paths of depth 3 *)
  (* .b49.#a48.#a16 *)
  let actual = r.b49.#a48.#a16 in
  let expected = 1 in
  mark_test_run 328;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 328 failed";
  (* .b49.#a48.#b16 *)
  let actual = r.b49.#a48.#b16 in
  let expected = 2 in
  mark_test_run 329;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 329 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a49 = a491; b49 = b491 } { a49 = a492; b49 = b492 } -> (fun a b -> Int.equal a b) a491 a492 && (fun #{ a48 = a481 } #{ a48 = a482 } -> (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) a481 a482) b491 b492) in
  let next_r = { a49 = 100; b49 = #{ a48 = #{ a16 = 101; b16 = 102 } } } in
  let r_expected = { a49 = 0; b49 = #{ a48 = #{ a16 = 1; b16 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a49 *)
  r.a49 <- next_r.a49;
  let r_expected = { r_expected with a49 = next_r.a49 } in
  mark_test_run 330;
  let test = eq r r_expected in
  if not test then failwithf "test 330 failed";
  Gc.compact ();
  (* .b49 *)
  r.b49 <- next_r.b49;
  let r_expected = { r_expected with b49 = next_r.b49 } in
  mark_test_run 331;
  let test = eq r r_expected in
  if not test then failwithf "test 331 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a49; b49 = #{ a48 = #{ a16; b16 } } } = r in
  let expected_a49 = 100 in
  mark_test_run 332;
  let test = (fun a b -> Int.equal a b) expected_a49 a49 in
  if not test then failwithf "test 332 failed";
  let expected_a16 = 101 in
  mark_test_run 333;
  let test = (fun a b -> Int.equal a b) expected_a16 a16 in
  if not test then failwithf "test 333 failed";
  let expected_b16 = 102 in
  mark_test_run 334;
  let test = (fun a b -> Int.equal a b) expected_b16 b16 in
  if not test then failwithf "test 334 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a49; b49 } = r in
  let expected_a49 = 100 in
  mark_test_run 335;
  let test = (fun a b -> Int.equal a b) expected_a49 a49 in
  if not test then failwithf "test 335 failed";
  let expected_b49 = #{ a48 = #{ a16 = 101; b16 = 102 } } in
  mark_test_run 336;
  let test = (fun #{ a48 = a481 } #{ a48 = a482 } -> (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) a481 a482) expected_b49 b49 in
  if not test then failwithf "test 336 failed";

  (********************************************)
  (*   t51 = { int; #{ #{ int; int32# } } }   *)
  (********************************************)
  let r = { a51 = 0; b51 = #{ a50 = #{ a18 = 1; b18 = #2l } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a51 *)
  let actual = r.a51 in
  let expected = 0 in
  mark_test_run 337;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 337 failed";
  (* Paths of depth 1 *)
  (* .b51 *)
  let actual = r.b51 in
  let expected = #{ a50 = #{ a18 = 1; b18 = #2l } } in
  mark_test_run 338;
  let test = (fun #{ a50 = a501 } #{ a50 = a502 } -> (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) a501 a502) actual expected in
  if not test then failwithf "test 338 failed";
  (* Paths of depth 2 *)
  (* .b51.#a50 *)
  let actual = r.b51.#a50 in
  let expected = #{ a18 = 1; b18 = #2l } in
  mark_test_run 339;
  let test = (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) actual expected in
  if not test then failwithf "test 339 failed";
  (* Paths of depth 3 *)
  (* .b51.#a50.#a18 *)
  let actual = r.b51.#a50.#a18 in
  let expected = 1 in
  mark_test_run 340;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 340 failed";
  (* .b51.#a50.#b18 *)
  let actual = r.b51.#a50.#b18 in
  let expected = #2l in
  mark_test_run 341;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 341 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a51 = a511; b51 = b511 } { a51 = a512; b51 = b512 } -> (fun a b -> Int.equal a b) a511 a512 && (fun #{ a50 = a501 } #{ a50 = a502 } -> (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) a501 a502) b511 b512) in
  let next_r = { a51 = 100; b51 = #{ a50 = #{ a18 = 101; b18 = #102l } } } in
  let r_expected = { a51 = 0; b51 = #{ a50 = #{ a18 = 1; b18 = #2l } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a51 *)
  r.a51 <- next_r.a51;
  let r_expected = { r_expected with a51 = next_r.a51 } in
  mark_test_run 342;
  let test = eq r r_expected in
  if not test then failwithf "test 342 failed";
  Gc.compact ();
  (* .b51 *)
  r.b51 <- next_r.b51;
  let r_expected = { r_expected with b51 = next_r.b51 } in
  mark_test_run 343;
  let test = eq r r_expected in
  if not test then failwithf "test 343 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a51; b51 = #{ a50 = #{ a18; b18 } } } = r in
  let expected_a51 = 100 in
  mark_test_run 344;
  let test = (fun a b -> Int.equal a b) expected_a51 a51 in
  if not test then failwithf "test 344 failed";
  let expected_a18 = 101 in
  mark_test_run 345;
  let test = (fun a b -> Int.equal a b) expected_a18 a18 in
  if not test then failwithf "test 345 failed";
  let expected_b18 = #102l in
  mark_test_run 346;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b18 b18 in
  if not test then failwithf "test 346 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a51; b51 } = r in
  let expected_a51 = 100 in
  mark_test_run 347;
  let test = (fun a b -> Int.equal a b) expected_a51 a51 in
  if not test then failwithf "test 347 failed";
  let expected_b51 = #{ a50 = #{ a18 = 101; b18 = #102l } } in
  mark_test_run 348;
  let test = (fun #{ a50 = a501 } #{ a50 = a502 } -> (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) a501 a502) expected_b51 b51 in
  if not test then failwithf "test 348 failed";

  (*******************************************)
  (*   t53 = { int; #{ #{ int; float } } }   *)
  (*******************************************)
  let r = { a53 = 0; b53 = #{ a52 = #{ a20 = 1; b20 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a53 *)
  let actual = r.a53 in
  let expected = 0 in
  mark_test_run 349;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 349 failed";
  (* Paths of depth 1 *)
  (* .b53 *)
  let actual = r.b53 in
  let expected = #{ a52 = #{ a20 = 1; b20 = 2. } } in
  mark_test_run 350;
  let test = (fun #{ a52 = a521 } #{ a52 = a522 } -> (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) a521 a522) actual expected in
  if not test then failwithf "test 350 failed";
  (* Paths of depth 2 *)
  (* .b53.#a52 *)
  let actual = r.b53.#a52 in
  let expected = #{ a20 = 1; b20 = 2. } in
  mark_test_run 351;
  let test = (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) actual expected in
  if not test then failwithf "test 351 failed";
  (* Paths of depth 3 *)
  (* .b53.#a52.#a20 *)
  let actual = r.b53.#a52.#a20 in
  let expected = 1 in
  mark_test_run 352;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 352 failed";
  (* .b53.#a52.#b20 *)
  let actual = r.b53.#a52.#b20 in
  let expected = 2. in
  mark_test_run 353;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 353 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a53 = a531; b53 = b531 } { a53 = a532; b53 = b532 } -> (fun a b -> Int.equal a b) a531 a532 && (fun #{ a52 = a521 } #{ a52 = a522 } -> (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) a521 a522) b531 b532) in
  let next_r = { a53 = 100; b53 = #{ a52 = #{ a20 = 101; b20 = 102. } } } in
  let r_expected = { a53 = 0; b53 = #{ a52 = #{ a20 = 1; b20 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a53 *)
  r.a53 <- next_r.a53;
  let r_expected = { r_expected with a53 = next_r.a53 } in
  mark_test_run 354;
  let test = eq r r_expected in
  if not test then failwithf "test 354 failed";
  Gc.compact ();
  (* .b53 *)
  r.b53 <- next_r.b53;
  let r_expected = { r_expected with b53 = next_r.b53 } in
  mark_test_run 355;
  let test = eq r r_expected in
  if not test then failwithf "test 355 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a53; b53 = #{ a52 = #{ a20; b20 } } } = r in
  let expected_a53 = 100 in
  mark_test_run 356;
  let test = (fun a b -> Int.equal a b) expected_a53 a53 in
  if not test then failwithf "test 356 failed";
  let expected_a20 = 101 in
  mark_test_run 357;
  let test = (fun a b -> Int.equal a b) expected_a20 a20 in
  if not test then failwithf "test 357 failed";
  let expected_b20 = 102. in
  mark_test_run 358;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b20 b20 in
  if not test then failwithf "test 358 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a53; b53 } = r in
  let expected_a53 = 100 in
  mark_test_run 359;
  let test = (fun a b -> Int.equal a b) expected_a53 a53 in
  if not test then failwithf "test 359 failed";
  let expected_b53 = #{ a52 = #{ a20 = 101; b20 = 102. } } in
  mark_test_run 360;
  let test = (fun #{ a52 = a521 } #{ a52 = a522 } -> (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) a521 a522) expected_b53 b53 in
  if not test then failwithf "test 360 failed";

  (********************************************)
  (*   t55 = { int; #{ #{ int32#; int } } }   *)
  (********************************************)
  let r = { a55 = 0; b55 = #{ a54 = #{ a31 = #1l; b31 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a55 *)
  let actual = r.a55 in
  let expected = 0 in
  mark_test_run 361;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 361 failed";
  (* Paths of depth 1 *)
  (* .b55 *)
  let actual = r.b55 in
  let expected = #{ a54 = #{ a31 = #1l; b31 = 2 } } in
  mark_test_run 362;
  let test = (fun #{ a54 = a541 } #{ a54 = a542 } -> (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) a541 a542) actual expected in
  if not test then failwithf "test 362 failed";
  (* Paths of depth 2 *)
  (* .b55.#a54 *)
  let actual = r.b55.#a54 in
  let expected = #{ a31 = #1l; b31 = 2 } in
  mark_test_run 363;
  let test = (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) actual expected in
  if not test then failwithf "test 363 failed";
  (* Paths of depth 3 *)
  (* .b55.#a54.#a31 *)
  let actual = r.b55.#a54.#a31 in
  let expected = #1l in
  mark_test_run 364;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 364 failed";
  (* .b55.#a54.#b31 *)
  let actual = r.b55.#a54.#b31 in
  let expected = 2 in
  mark_test_run 365;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 365 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a55 = a551; b55 = b551 } { a55 = a552; b55 = b552 } -> (fun a b -> Int.equal a b) a551 a552 && (fun #{ a54 = a541 } #{ a54 = a542 } -> (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) a541 a542) b551 b552) in
  let next_r = { a55 = 100; b55 = #{ a54 = #{ a31 = #101l; b31 = 102 } } } in
  let r_expected = { a55 = 0; b55 = #{ a54 = #{ a31 = #1l; b31 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a55 *)
  r.a55 <- next_r.a55;
  let r_expected = { r_expected with a55 = next_r.a55 } in
  mark_test_run 366;
  let test = eq r r_expected in
  if not test then failwithf "test 366 failed";
  Gc.compact ();
  (* .b55 *)
  r.b55 <- next_r.b55;
  let r_expected = { r_expected with b55 = next_r.b55 } in
  mark_test_run 367;
  let test = eq r r_expected in
  if not test then failwithf "test 367 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a55; b55 = #{ a54 = #{ a31; b31 } } } = r in
  let expected_a55 = 100 in
  mark_test_run 368;
  let test = (fun a b -> Int.equal a b) expected_a55 a55 in
  if not test then failwithf "test 368 failed";
  let expected_a31 = #101l in
  mark_test_run 369;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a31 a31 in
  if not test then failwithf "test 369 failed";
  let expected_b31 = 102 in
  mark_test_run 370;
  let test = (fun a b -> Int.equal a b) expected_b31 b31 in
  if not test then failwithf "test 370 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a55; b55 } = r in
  let expected_a55 = 100 in
  mark_test_run 371;
  let test = (fun a b -> Int.equal a b) expected_a55 a55 in
  if not test then failwithf "test 371 failed";
  let expected_b55 = #{ a54 = #{ a31 = #101l; b31 = 102 } } in
  mark_test_run 372;
  let test = (fun #{ a54 = a541 } #{ a54 = a542 } -> (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) a541 a542) expected_b55 b55 in
  if not test then failwithf "test 372 failed";

  (***********************************************)
  (*   t57 = { int; #{ #{ int32#; int32# } } }   *)
  (***********************************************)
  let r = { a57 = 0; b57 = #{ a56 = #{ a33 = #1l; b33 = #2l } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a57 *)
  let actual = r.a57 in
  let expected = 0 in
  mark_test_run 373;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 373 failed";
  (* Paths of depth 1 *)
  (* .b57 *)
  let actual = r.b57 in
  let expected = #{ a56 = #{ a33 = #1l; b33 = #2l } } in
  mark_test_run 374;
  let test = (fun #{ a56 = a561 } #{ a56 = a562 } -> (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) a561 a562) actual expected in
  if not test then failwithf "test 374 failed";
  (* Paths of depth 2 *)
  (* .b57.#a56 *)
  let actual = r.b57.#a56 in
  let expected = #{ a33 = #1l; b33 = #2l } in
  mark_test_run 375;
  let test = (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) actual expected in
  if not test then failwithf "test 375 failed";
  (* Paths of depth 3 *)
  (* .b57.#a56.#a33 *)
  let actual = r.b57.#a56.#a33 in
  let expected = #1l in
  mark_test_run 376;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 376 failed";
  (* .b57.#a56.#b33 *)
  let actual = r.b57.#a56.#b33 in
  let expected = #2l in
  mark_test_run 377;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 377 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a57 = a571; b57 = b571 } { a57 = a572; b57 = b572 } -> (fun a b -> Int.equal a b) a571 a572 && (fun #{ a56 = a561 } #{ a56 = a562 } -> (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) a561 a562) b571 b572) in
  let next_r = { a57 = 100; b57 = #{ a56 = #{ a33 = #101l; b33 = #102l } } } in
  let r_expected = { a57 = 0; b57 = #{ a56 = #{ a33 = #1l; b33 = #2l } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a57 *)
  r.a57 <- next_r.a57;
  let r_expected = { r_expected with a57 = next_r.a57 } in
  mark_test_run 378;
  let test = eq r r_expected in
  if not test then failwithf "test 378 failed";
  Gc.compact ();
  (* .b57 *)
  r.b57 <- next_r.b57;
  let r_expected = { r_expected with b57 = next_r.b57 } in
  mark_test_run 379;
  let test = eq r r_expected in
  if not test then failwithf "test 379 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a57; b57 = #{ a56 = #{ a33; b33 } } } = r in
  let expected_a57 = 100 in
  mark_test_run 380;
  let test = (fun a b -> Int.equal a b) expected_a57 a57 in
  if not test then failwithf "test 380 failed";
  let expected_a33 = #101l in
  mark_test_run 381;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a33 a33 in
  if not test then failwithf "test 381 failed";
  let expected_b33 = #102l in
  mark_test_run 382;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b33 b33 in
  if not test then failwithf "test 382 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a57; b57 } = r in
  let expected_a57 = 100 in
  mark_test_run 383;
  let test = (fun a b -> Int.equal a b) expected_a57 a57 in
  if not test then failwithf "test 383 failed";
  let expected_b57 = #{ a56 = #{ a33 = #101l; b33 = #102l } } in
  mark_test_run 384;
  let test = (fun #{ a56 = a561 } #{ a56 = a562 } -> (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) a561 a562) expected_b57 b57 in
  if not test then failwithf "test 384 failed";

  (*******************************************)
  (*   t59 = { int; #{ #{ float; int } } }   *)
  (*******************************************)
  let r = { a59 = 0; b59 = #{ a58 = #{ a40 = 1.; b40 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a59 *)
  let actual = r.a59 in
  let expected = 0 in
  mark_test_run 385;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 385 failed";
  (* Paths of depth 1 *)
  (* .b59 *)
  let actual = r.b59 in
  let expected = #{ a58 = #{ a40 = 1.; b40 = 2 } } in
  mark_test_run 386;
  let test = (fun #{ a58 = a581 } #{ a58 = a582 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a581 a582) actual expected in
  if not test then failwithf "test 386 failed";
  (* Paths of depth 2 *)
  (* .b59.#a58 *)
  let actual = r.b59.#a58 in
  let expected = #{ a40 = 1.; b40 = 2 } in
  mark_test_run 387;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) actual expected in
  if not test then failwithf "test 387 failed";
  (* Paths of depth 3 *)
  (* .b59.#a58.#a40 *)
  let actual = r.b59.#a58.#a40 in
  let expected = 1. in
  mark_test_run 388;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 388 failed";
  (* .b59.#a58.#b40 *)
  let actual = r.b59.#a58.#b40 in
  let expected = 2 in
  mark_test_run 389;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 389 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a59 = a591; b59 = b591 } { a59 = a592; b59 = b592 } -> (fun a b -> Int.equal a b) a591 a592 && (fun #{ a58 = a581 } #{ a58 = a582 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a581 a582) b591 b592) in
  let next_r = { a59 = 100; b59 = #{ a58 = #{ a40 = 101.; b40 = 102 } } } in
  let r_expected = { a59 = 0; b59 = #{ a58 = #{ a40 = 1.; b40 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a59 *)
  r.a59 <- next_r.a59;
  let r_expected = { r_expected with a59 = next_r.a59 } in
  mark_test_run 390;
  let test = eq r r_expected in
  if not test then failwithf "test 390 failed";
  Gc.compact ();
  (* .b59 *)
  r.b59 <- next_r.b59;
  let r_expected = { r_expected with b59 = next_r.b59 } in
  mark_test_run 391;
  let test = eq r r_expected in
  if not test then failwithf "test 391 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a59; b59 = #{ a58 = #{ a40; b40 } } } = r in
  let expected_a59 = 100 in
  mark_test_run 392;
  let test = (fun a b -> Int.equal a b) expected_a59 a59 in
  if not test then failwithf "test 392 failed";
  let expected_a40 = 101. in
  mark_test_run 393;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a40 a40 in
  if not test then failwithf "test 393 failed";
  let expected_b40 = 102 in
  mark_test_run 394;
  let test = (fun a b -> Int.equal a b) expected_b40 b40 in
  if not test then failwithf "test 394 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a59; b59 } = r in
  let expected_a59 = 100 in
  mark_test_run 395;
  let test = (fun a b -> Int.equal a b) expected_a59 a59 in
  if not test then failwithf "test 395 failed";
  let expected_b59 = #{ a58 = #{ a40 = 101.; b40 = 102 } } in
  mark_test_run 396;
  let test = (fun #{ a58 = a581 } #{ a58 = a582 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a581 a582) expected_b59 b59 in
  if not test then failwithf "test 396 failed";

  (*********************************************)
  (*   t61 = { int; #{ #{ float; float } } }   *)
  (*********************************************)
  let r = { a61 = 0; b61 = #{ a60 = #{ a42 = 1.; b42 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a61 *)
  let actual = r.a61 in
  let expected = 0 in
  mark_test_run 397;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 397 failed";
  (* Paths of depth 1 *)
  (* .b61 *)
  let actual = r.b61 in
  let expected = #{ a60 = #{ a42 = 1.; b42 = 2. } } in
  mark_test_run 398;
  let test = (fun #{ a60 = a601 } #{ a60 = a602 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) a601 a602) actual expected in
  if not test then failwithf "test 398 failed";
  (* Paths of depth 2 *)
  (* .b61.#a60 *)
  let actual = r.b61.#a60 in
  let expected = #{ a42 = 1.; b42 = 2. } in
  mark_test_run 399;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) actual expected in
  if not test then failwithf "test 399 failed";
  (* Paths of depth 3 *)
  (* .b61.#a60.#a42 *)
  let actual = r.b61.#a60.#a42 in
  let expected = 1. in
  mark_test_run 400;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 400 failed";
  (* .b61.#a60.#b42 *)
  let actual = r.b61.#a60.#b42 in
  let expected = 2. in
  mark_test_run 401;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 401 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a61 = a611; b61 = b611 } { a61 = a612; b61 = b612 } -> (fun a b -> Int.equal a b) a611 a612 && (fun #{ a60 = a601 } #{ a60 = a602 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) a601 a602) b611 b612) in
  let next_r = { a61 = 100; b61 = #{ a60 = #{ a42 = 101.; b42 = 102. } } } in
  let r_expected = { a61 = 0; b61 = #{ a60 = #{ a42 = 1.; b42 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a61 *)
  r.a61 <- next_r.a61;
  let r_expected = { r_expected with a61 = next_r.a61 } in
  mark_test_run 402;
  let test = eq r r_expected in
  if not test then failwithf "test 402 failed";
  Gc.compact ();
  (* .b61 *)
  r.b61 <- next_r.b61;
  let r_expected = { r_expected with b61 = next_r.b61 } in
  mark_test_run 403;
  let test = eq r r_expected in
  if not test then failwithf "test 403 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a61; b61 = #{ a60 = #{ a42; b42 } } } = r in
  let expected_a61 = 100 in
  mark_test_run 404;
  let test = (fun a b -> Int.equal a b) expected_a61 a61 in
  if not test then failwithf "test 404 failed";
  let expected_a42 = 101. in
  mark_test_run 405;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a42 a42 in
  if not test then failwithf "test 405 failed";
  let expected_b42 = 102. in
  mark_test_run 406;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b42 b42 in
  if not test then failwithf "test 406 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a61; b61 } = r in
  let expected_a61 = 100 in
  mark_test_run 407;
  let test = (fun a b -> Int.equal a b) expected_a61 a61 in
  if not test then failwithf "test 407 failed";
  let expected_b61 = #{ a60 = #{ a42 = 101.; b42 = 102. } } in
  mark_test_run 408;
  let test = (fun #{ a60 = a601 } #{ a60 = a602 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) a601 a602) expected_b61 b61 in
  if not test then failwithf "test 408 failed";

  (***********************)
  (*   t62 = { int64 }   *)
  (***********************)
  let r = { a62 = 0L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a62 *)
  let actual = r.a62 in
  let expected = 0L in
  mark_test_run 409;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 409 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a62 = a621 } { a62 = a622 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a621 a622) in
  let next_r = { a62 = 100L } in
  let r_expected = { a62 = 0L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a62 *)
  r.a62 <- next_r.a62;
  let r_expected = { r_expected with a62 = next_r.a62 } in
  mark_test_run 410;
  let test = eq r r_expected in
  if not test then failwithf "test 410 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a62 } = r in
  let expected_a62 = 100L in
  mark_test_run 411;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a62 a62 in
  if not test then failwithf "test 411 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a62 } = r in
  let expected_a62 = 100L in
  mark_test_run 412;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a62 a62 in
  if not test then failwithf "test 412 failed";

  (****************************)
  (*   t63 = { int64; int }   *)
  (****************************)
  let r = { a63 = 0L; b63 = 1 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a63 *)
  let actual = r.a63 in
  let expected = 0L in
  mark_test_run 413;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 413 failed";
  (* Paths of depth 1 *)
  (* .b63 *)
  let actual = r.b63 in
  let expected = 1 in
  mark_test_run 414;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 414 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a63 = a631; b63 = b631 } { a63 = a632; b63 = b632 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a631 a632 && (fun a b -> Int.equal a b) b631 b632) in
  let next_r = { a63 = 100L; b63 = 101 } in
  let r_expected = { a63 = 0L; b63 = 1 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a63 *)
  r.a63 <- next_r.a63;
  let r_expected = { r_expected with a63 = next_r.a63 } in
  mark_test_run 415;
  let test = eq r r_expected in
  if not test then failwithf "test 415 failed";
  Gc.compact ();
  (* .b63 *)
  r.b63 <- next_r.b63;
  let r_expected = { r_expected with b63 = next_r.b63 } in
  mark_test_run 416;
  let test = eq r r_expected in
  if not test then failwithf "test 416 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a63; b63 } = r in
  let expected_a63 = 100L in
  mark_test_run 417;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a63 a63 in
  if not test then failwithf "test 417 failed";
  let expected_b63 = 101 in
  mark_test_run 418;
  let test = (fun a b -> Int.equal a b) expected_b63 b63 in
  if not test then failwithf "test 418 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a63; b63 } = r in
  let expected_a63 = 100L in
  mark_test_run 419;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a63 a63 in
  if not test then failwithf "test 419 failed";
  let expected_b63 = 101 in
  mark_test_run 420;
  let test = (fun a b -> Int.equal a b) expected_b63 b63 in
  if not test then failwithf "test 420 failed";

  (******************************)
  (*   t64 = { int64; int64 }   *)
  (******************************)
  let r = { a64 = 0L; b64 = 1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a64 *)
  let actual = r.a64 in
  let expected = 0L in
  mark_test_run 421;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 421 failed";
  (* Paths of depth 1 *)
  (* .b64 *)
  let actual = r.b64 in
  let expected = 1L in
  mark_test_run 422;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 422 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a64 = a641; b64 = b641 } { a64 = a642; b64 = b642 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a641 a642 && (fun a b -> Int64.equal (globalize a) (globalize b)) b641 b642) in
  let next_r = { a64 = 100L; b64 = 101L } in
  let r_expected = { a64 = 0L; b64 = 1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a64 *)
  r.a64 <- next_r.a64;
  let r_expected = { r_expected with a64 = next_r.a64 } in
  mark_test_run 423;
  let test = eq r r_expected in
  if not test then failwithf "test 423 failed";
  Gc.compact ();
  (* .b64 *)
  r.b64 <- next_r.b64;
  let r_expected = { r_expected with b64 = next_r.b64 } in
  mark_test_run 424;
  let test = eq r r_expected in
  if not test then failwithf "test 424 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a64; b64 } = r in
  let expected_a64 = 100L in
  mark_test_run 425;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a64 a64 in
  if not test then failwithf "test 425 failed";
  let expected_b64 = 101L in
  mark_test_run 426;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b64 b64 in
  if not test then failwithf "test 426 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a64; b64 } = r in
  let expected_a64 = 100L in
  mark_test_run 427;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a64 a64 in
  if not test then failwithf "test 427 failed";
  let expected_b64 = 101L in
  mark_test_run 428;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b64 b64 in
  if not test then failwithf "test 428 failed";

  (*******************************)
  (*   t65 = { int64; int64# }   *)
  (*******************************)
  let r = { a65 = 0L; b65 = #1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a65 *)
  let actual = r.a65 in
  let expected = 0L in
  mark_test_run 429;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 429 failed";
  (* Paths of depth 1 *)
  (* .b65 *)
  let actual = r.b65 in
  let expected = #1L in
  mark_test_run 430;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 430 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a65 = a651; b65 = b651 } { a65 = a652; b65 = b652 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a651 a652 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b651 b652) in
  let next_r = { a65 = 100L; b65 = #101L } in
  let r_expected = { a65 = 0L; b65 = #1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a65 *)
  r.a65 <- next_r.a65;
  let r_expected = { r_expected with a65 = next_r.a65 } in
  mark_test_run 431;
  let test = eq r r_expected in
  if not test then failwithf "test 431 failed";
  Gc.compact ();
  (* .b65 *)
  r.b65 <- next_r.b65;
  let r_expected = { r_expected with b65 = next_r.b65 } in
  mark_test_run 432;
  let test = eq r r_expected in
  if not test then failwithf "test 432 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a65; b65 } = r in
  let expected_a65 = 100L in
  mark_test_run 433;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a65 a65 in
  if not test then failwithf "test 433 failed";
  let expected_b65 = #101L in
  mark_test_run 434;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b65 b65 in
  if not test then failwithf "test 434 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a65; b65 } = r in
  let expected_a65 = 100L in
  mark_test_run 435;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a65 a65 in
  if not test then failwithf "test 435 failed";
  let expected_b65 = #101L in
  mark_test_run 436;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b65 b65 in
  if not test then failwithf "test 436 failed";

  (*******************************)
  (*   t66 = { int64; int32# }   *)
  (*******************************)
  let r = { a66 = 0L; b66 = #1l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a66 *)
  let actual = r.a66 in
  let expected = 0L in
  mark_test_run 437;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 437 failed";
  (* Paths of depth 1 *)
  (* .b66 *)
  let actual = r.b66 in
  let expected = #1l in
  mark_test_run 438;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 438 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a66 = a661; b66 = b661 } { a66 = a662; b66 = b662 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a661 a662 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b661 b662) in
  let next_r = { a66 = 100L; b66 = #101l } in
  let r_expected = { a66 = 0L; b66 = #1l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a66 *)
  r.a66 <- next_r.a66;
  let r_expected = { r_expected with a66 = next_r.a66 } in
  mark_test_run 439;
  let test = eq r r_expected in
  if not test then failwithf "test 439 failed";
  Gc.compact ();
  (* .b66 *)
  r.b66 <- next_r.b66;
  let r_expected = { r_expected with b66 = next_r.b66 } in
  mark_test_run 440;
  let test = eq r r_expected in
  if not test then failwithf "test 440 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a66; b66 } = r in
  let expected_a66 = 100L in
  mark_test_run 441;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a66 a66 in
  if not test then failwithf "test 441 failed";
  let expected_b66 = #101l in
  mark_test_run 442;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b66 b66 in
  if not test then failwithf "test 442 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a66; b66 } = r in
  let expected_a66 = 100L in
  mark_test_run 443;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a66 a66 in
  if not test then failwithf "test 443 failed";
  let expected_b66 = #101l in
  mark_test_run 444;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b66 b66 in
  if not test then failwithf "test 444 failed";

  (***********************************)
  (*   t67 = { int64; nativeint# }   *)
  (***********************************)
  let r = { a67 = 0L; b67 = #1n } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a67 *)
  let actual = r.a67 in
  let expected = 0L in
  mark_test_run 445;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 445 failed";
  (* Paths of depth 1 *)
  (* .b67 *)
  let actual = r.b67 in
  let expected = #1n in
  mark_test_run 446;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 446 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a67 = a671; b67 = b671 } { a67 = a672; b67 = b672 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a671 a672 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b671 b672) in
  let next_r = { a67 = 100L; b67 = #101n } in
  let r_expected = { a67 = 0L; b67 = #1n } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a67 *)
  r.a67 <- next_r.a67;
  let r_expected = { r_expected with a67 = next_r.a67 } in
  mark_test_run 447;
  let test = eq r r_expected in
  if not test then failwithf "test 447 failed";
  Gc.compact ();
  (* .b67 *)
  r.b67 <- next_r.b67;
  let r_expected = { r_expected with b67 = next_r.b67 } in
  mark_test_run 448;
  let test = eq r r_expected in
  if not test then failwithf "test 448 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a67; b67 } = r in
  let expected_a67 = 100L in
  mark_test_run 449;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a67 a67 in
  if not test then failwithf "test 449 failed";
  let expected_b67 = #101n in
  mark_test_run 450;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b67 b67 in
  if not test then failwithf "test 450 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a67; b67 } = r in
  let expected_a67 = 100L in
  mark_test_run 451;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a67 a67 in
  if not test then failwithf "test 451 failed";
  let expected_b67 = #101n in
  mark_test_run 452;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b67 b67 in
  if not test then failwithf "test 452 failed";

  (******************************)
  (*   t68 = { int64; float }   *)
  (******************************)
  let r = { a68 = 0L; b68 = 1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a68 *)
  let actual = r.a68 in
  let expected = 0L in
  mark_test_run 453;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 453 failed";
  (* Paths of depth 1 *)
  (* .b68 *)
  let actual = r.b68 in
  let expected = 1. in
  mark_test_run 454;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 454 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a68 = a681; b68 = b681 } { a68 = a682; b68 = b682 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a681 a682 && (fun a b -> Float.equal (globalize a) (globalize b)) b681 b682) in
  let next_r = { a68 = 100L; b68 = 101. } in
  let r_expected = { a68 = 0L; b68 = 1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a68 *)
  r.a68 <- next_r.a68;
  let r_expected = { r_expected with a68 = next_r.a68 } in
  mark_test_run 455;
  let test = eq r r_expected in
  if not test then failwithf "test 455 failed";
  Gc.compact ();
  (* .b68 *)
  r.b68 <- next_r.b68;
  let r_expected = { r_expected with b68 = next_r.b68 } in
  mark_test_run 456;
  let test = eq r r_expected in
  if not test then failwithf "test 456 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a68; b68 } = r in
  let expected_a68 = 100L in
  mark_test_run 457;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a68 a68 in
  if not test then failwithf "test 457 failed";
  let expected_b68 = 101. in
  mark_test_run 458;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b68 b68 in
  if not test then failwithf "test 458 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a68; b68 } = r in
  let expected_a68 = 100L in
  mark_test_run 459;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a68 a68 in
  if not test then failwithf "test 459 failed";
  let expected_b68 = 101. in
  mark_test_run 460;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b68 b68 in
  if not test then failwithf "test 460 failed";

  (************************)
  (*   t69 = { int64# }   *)
  (************************)
  let r = { a69 = #0L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a69 *)
  let actual = r.a69 in
  let expected = #0L in
  mark_test_run 461;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 461 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a69 = a691 } { a69 = a692 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a691 a692) in
  let next_r = { a69 = #100L } in
  let r_expected = { a69 = #0L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a69 *)
  r.a69 <- next_r.a69;
  let r_expected = { r_expected with a69 = next_r.a69 } in
  mark_test_run 462;
  let test = eq r r_expected in
  if not test then failwithf "test 462 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a69 } = r in
  let expected_a69 = #100L in
  mark_test_run 463;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a69 a69 in
  if not test then failwithf "test 463 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a69 } = r in
  let expected_a69 = #100L in
  mark_test_run 464;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a69 a69 in
  if not test then failwithf "test 464 failed";

  (*****************************)
  (*   t70 = { int64#; int }   *)
  (*****************************)
  let r = { a70 = #0L; b70 = 1 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a70 *)
  let actual = r.a70 in
  let expected = #0L in
  mark_test_run 465;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 465 failed";
  (* Paths of depth 1 *)
  (* .b70 *)
  let actual = r.b70 in
  let expected = 1 in
  mark_test_run 466;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 466 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a70 = a701; b70 = b701 } { a70 = a702; b70 = b702 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a701 a702 && (fun a b -> Int.equal a b) b701 b702) in
  let next_r = { a70 = #100L; b70 = 101 } in
  let r_expected = { a70 = #0L; b70 = 1 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a70 *)
  r.a70 <- next_r.a70;
  let r_expected = { r_expected with a70 = next_r.a70 } in
  mark_test_run 467;
  let test = eq r r_expected in
  if not test then failwithf "test 467 failed";
  Gc.compact ();
  (* .b70 *)
  r.b70 <- next_r.b70;
  let r_expected = { r_expected with b70 = next_r.b70 } in
  mark_test_run 468;
  let test = eq r r_expected in
  if not test then failwithf "test 468 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a70; b70 } = r in
  let expected_a70 = #100L in
  mark_test_run 469;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a70 a70 in
  if not test then failwithf "test 469 failed";
  let expected_b70 = 101 in
  mark_test_run 470;
  let test = (fun a b -> Int.equal a b) expected_b70 b70 in
  if not test then failwithf "test 470 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a70; b70 } = r in
  let expected_a70 = #100L in
  mark_test_run 471;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a70 a70 in
  if not test then failwithf "test 471 failed";
  let expected_b70 = 101 in
  mark_test_run 472;
  let test = (fun a b -> Int.equal a b) expected_b70 b70 in
  if not test then failwithf "test 472 failed";

  (*******************************)
  (*   t71 = { int64#; int64 }   *)
  (*******************************)
  let r = { a71 = #0L; b71 = 1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a71 *)
  let actual = r.a71 in
  let expected = #0L in
  mark_test_run 473;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 473 failed";
  (* Paths of depth 1 *)
  (* .b71 *)
  let actual = r.b71 in
  let expected = 1L in
  mark_test_run 474;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 474 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a71 = a711; b71 = b711 } { a71 = a712; b71 = b712 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a711 a712 && (fun a b -> Int64.equal (globalize a) (globalize b)) b711 b712) in
  let next_r = { a71 = #100L; b71 = 101L } in
  let r_expected = { a71 = #0L; b71 = 1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a71 *)
  r.a71 <- next_r.a71;
  let r_expected = { r_expected with a71 = next_r.a71 } in
  mark_test_run 475;
  let test = eq r r_expected in
  if not test then failwithf "test 475 failed";
  Gc.compact ();
  (* .b71 *)
  r.b71 <- next_r.b71;
  let r_expected = { r_expected with b71 = next_r.b71 } in
  mark_test_run 476;
  let test = eq r r_expected in
  if not test then failwithf "test 476 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a71; b71 } = r in
  let expected_a71 = #100L in
  mark_test_run 477;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a71 a71 in
  if not test then failwithf "test 477 failed";
  let expected_b71 = 101L in
  mark_test_run 478;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b71 b71 in
  if not test then failwithf "test 478 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a71; b71 } = r in
  let expected_a71 = #100L in
  mark_test_run 479;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a71 a71 in
  if not test then failwithf "test 479 failed";
  let expected_b71 = 101L in
  mark_test_run 480;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b71 b71 in
  if not test then failwithf "test 480 failed";

  (********************************)
  (*   t72 = { int64#; int64# }   *)
  (********************************)
  let r = { a72 = #0L; b72 = #1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a72 *)
  let actual = r.a72 in
  let expected = #0L in
  mark_test_run 481;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 481 failed";
  (* Paths of depth 1 *)
  (* .b72 *)
  let actual = r.b72 in
  let expected = #1L in
  mark_test_run 482;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 482 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a72 = a721; b72 = b721 } { a72 = a722; b72 = b722 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a721 a722 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b721 b722) in
  let next_r = { a72 = #100L; b72 = #101L } in
  let r_expected = { a72 = #0L; b72 = #1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a72 *)
  r.a72 <- next_r.a72;
  let r_expected = { r_expected with a72 = next_r.a72 } in
  mark_test_run 483;
  let test = eq r r_expected in
  if not test then failwithf "test 483 failed";
  Gc.compact ();
  (* .b72 *)
  r.b72 <- next_r.b72;
  let r_expected = { r_expected with b72 = next_r.b72 } in
  mark_test_run 484;
  let test = eq r r_expected in
  if not test then failwithf "test 484 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a72; b72 } = r in
  let expected_a72 = #100L in
  mark_test_run 485;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a72 a72 in
  if not test then failwithf "test 485 failed";
  let expected_b72 = #101L in
  mark_test_run 486;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b72 b72 in
  if not test then failwithf "test 486 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a72; b72 } = r in
  let expected_a72 = #100L in
  mark_test_run 487;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a72 a72 in
  if not test then failwithf "test 487 failed";
  let expected_b72 = #101L in
  mark_test_run 488;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b72 b72 in
  if not test then failwithf "test 488 failed";

  (********************************)
  (*   t73 = { int64#; int32# }   *)
  (********************************)
  let r = { a73 = #0L; b73 = #1l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a73 *)
  let actual = r.a73 in
  let expected = #0L in
  mark_test_run 489;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 489 failed";
  (* Paths of depth 1 *)
  (* .b73 *)
  let actual = r.b73 in
  let expected = #1l in
  mark_test_run 490;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 490 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a73 = a731; b73 = b731 } { a73 = a732; b73 = b732 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a731 a732 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b731 b732) in
  let next_r = { a73 = #100L; b73 = #101l } in
  let r_expected = { a73 = #0L; b73 = #1l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a73 *)
  r.a73 <- next_r.a73;
  let r_expected = { r_expected with a73 = next_r.a73 } in
  mark_test_run 491;
  let test = eq r r_expected in
  if not test then failwithf "test 491 failed";
  Gc.compact ();
  (* .b73 *)
  r.b73 <- next_r.b73;
  let r_expected = { r_expected with b73 = next_r.b73 } in
  mark_test_run 492;
  let test = eq r r_expected in
  if not test then failwithf "test 492 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a73; b73 } = r in
  let expected_a73 = #100L in
  mark_test_run 493;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a73 a73 in
  if not test then failwithf "test 493 failed";
  let expected_b73 = #101l in
  mark_test_run 494;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b73 b73 in
  if not test then failwithf "test 494 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a73; b73 } = r in
  let expected_a73 = #100L in
  mark_test_run 495;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a73 a73 in
  if not test then failwithf "test 495 failed";
  let expected_b73 = #101l in
  mark_test_run 496;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b73 b73 in
  if not test then failwithf "test 496 failed";

  (************************************)
  (*   t74 = { int64#; nativeint# }   *)
  (************************************)
  let r = { a74 = #0L; b74 = #1n } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a74 *)
  let actual = r.a74 in
  let expected = #0L in
  mark_test_run 497;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 497 failed";
  (* Paths of depth 1 *)
  (* .b74 *)
  let actual = r.b74 in
  let expected = #1n in
  mark_test_run 498;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 498 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a74 = a741; b74 = b741 } { a74 = a742; b74 = b742 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a741 a742 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b741 b742) in
  let next_r = { a74 = #100L; b74 = #101n } in
  let r_expected = { a74 = #0L; b74 = #1n } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a74 *)
  r.a74 <- next_r.a74;
  let r_expected = { r_expected with a74 = next_r.a74 } in
  mark_test_run 499;
  let test = eq r r_expected in
  if not test then failwithf "test 499 failed";
  Gc.compact ();
  (* .b74 *)
  r.b74 <- next_r.b74;
  let r_expected = { r_expected with b74 = next_r.b74 } in
  mark_test_run 500;
  let test = eq r r_expected in
  if not test then failwithf "test 500 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a74; b74 } = r in
  let expected_a74 = #100L in
  mark_test_run 501;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a74 a74 in
  if not test then failwithf "test 501 failed";
  let expected_b74 = #101n in
  mark_test_run 502;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b74 b74 in
  if not test then failwithf "test 502 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a74; b74 } = r in
  let expected_a74 = #100L in
  mark_test_run 503;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a74 a74 in
  if not test then failwithf "test 503 failed";
  let expected_b74 = #101n in
  mark_test_run 504;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b74 b74 in
  if not test then failwithf "test 504 failed";

  (*******************************)
  (*   t75 = { int64#; float }   *)
  (*******************************)
  let r = { a75 = #0L; b75 = 1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a75 *)
  let actual = r.a75 in
  let expected = #0L in
  mark_test_run 505;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 505 failed";
  (* Paths of depth 1 *)
  (* .b75 *)
  let actual = r.b75 in
  let expected = 1. in
  mark_test_run 506;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 506 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a75 = a751; b75 = b751 } { a75 = a752; b75 = b752 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a751 a752 && (fun a b -> Float.equal (globalize a) (globalize b)) b751 b752) in
  let next_r = { a75 = #100L; b75 = 101. } in
  let r_expected = { a75 = #0L; b75 = 1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a75 *)
  r.a75 <- next_r.a75;
  let r_expected = { r_expected with a75 = next_r.a75 } in
  mark_test_run 507;
  let test = eq r r_expected in
  if not test then failwithf "test 507 failed";
  Gc.compact ();
  (* .b75 *)
  r.b75 <- next_r.b75;
  let r_expected = { r_expected with b75 = next_r.b75 } in
  mark_test_run 508;
  let test = eq r r_expected in
  if not test then failwithf "test 508 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a75; b75 } = r in
  let expected_a75 = #100L in
  mark_test_run 509;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a75 a75 in
  if not test then failwithf "test 509 failed";
  let expected_b75 = 101. in
  mark_test_run 510;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b75 b75 in
  if not test then failwithf "test 510 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a75; b75 } = r in
  let expected_a75 = #100L in
  mark_test_run 511;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a75 a75 in
  if not test then failwithf "test 511 failed";
  let expected_b75 = 101. in
  mark_test_run 512;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b75 b75 in
  if not test then failwithf "test 512 failed";

  (************************)
  (*   t76 = { int32# }   *)
  (************************)
  let r = { a76 = #0l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a76 *)
  let actual = r.a76 in
  let expected = #0l in
  mark_test_run 513;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 513 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a76 = a761 } { a76 = a762 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a761 a762) in
  let next_r = { a76 = #100l } in
  let r_expected = { a76 = #0l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a76 *)
  r.a76 <- next_r.a76;
  let r_expected = { r_expected with a76 = next_r.a76 } in
  mark_test_run 514;
  let test = eq r r_expected in
  if not test then failwithf "test 514 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a76 } = r in
  let expected_a76 = #100l in
  mark_test_run 515;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a76 a76 in
  if not test then failwithf "test 515 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a76 } = r in
  let expected_a76 = #100l in
  mark_test_run 516;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a76 a76 in
  if not test then failwithf "test 516 failed";

  (*****************************)
  (*   t77 = { int32#; int }   *)
  (*****************************)
  let r = { a77 = #0l; b77 = 1 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a77 *)
  let actual = r.a77 in
  let expected = #0l in
  mark_test_run 517;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 517 failed";
  (* Paths of depth 1 *)
  (* .b77 *)
  let actual = r.b77 in
  let expected = 1 in
  mark_test_run 518;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 518 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a77 = a771; b77 = b771 } { a77 = a772; b77 = b772 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a771 a772 && (fun a b -> Int.equal a b) b771 b772) in
  let next_r = { a77 = #100l; b77 = 101 } in
  let r_expected = { a77 = #0l; b77 = 1 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a77 *)
  r.a77 <- next_r.a77;
  let r_expected = { r_expected with a77 = next_r.a77 } in
  mark_test_run 519;
  let test = eq r r_expected in
  if not test then failwithf "test 519 failed";
  Gc.compact ();
  (* .b77 *)
  r.b77 <- next_r.b77;
  let r_expected = { r_expected with b77 = next_r.b77 } in
  mark_test_run 520;
  let test = eq r r_expected in
  if not test then failwithf "test 520 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a77; b77 } = r in
  let expected_a77 = #100l in
  mark_test_run 521;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a77 a77 in
  if not test then failwithf "test 521 failed";
  let expected_b77 = 101 in
  mark_test_run 522;
  let test = (fun a b -> Int.equal a b) expected_b77 b77 in
  if not test then failwithf "test 522 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a77; b77 } = r in
  let expected_a77 = #100l in
  mark_test_run 523;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a77 a77 in
  if not test then failwithf "test 523 failed";
  let expected_b77 = 101 in
  mark_test_run 524;
  let test = (fun a b -> Int.equal a b) expected_b77 b77 in
  if not test then failwithf "test 524 failed";

  (**********************************)
  (*   t78 = { int32#; int; int }   *)
  (**********************************)
  let r = { a78 = #0l; b78 = 1; c78 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a78 *)
  let actual = r.a78 in
  let expected = #0l in
  mark_test_run 525;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 525 failed";
  (* Paths of depth 1 *)
  (* .b78 *)
  let actual = r.b78 in
  let expected = 1 in
  mark_test_run 526;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 526 failed";
  (* Paths of depth 1 *)
  (* .c78 *)
  let actual = r.c78 in
  let expected = 2 in
  mark_test_run 527;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 527 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a78 = a781; b78 = b781; c78 = c781 } { a78 = a782; b78 = b782; c78 = c782 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a781 a782 && (fun a b -> Int.equal a b) b781 b782 && (fun a b -> Int.equal a b) c781 c782) in
  let next_r = { a78 = #100l; b78 = 101; c78 = 102 } in
  let r_expected = { a78 = #0l; b78 = 1; c78 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a78 *)
  r.a78 <- next_r.a78;
  let r_expected = { r_expected with a78 = next_r.a78 } in
  mark_test_run 528;
  let test = eq r r_expected in
  if not test then failwithf "test 528 failed";
  Gc.compact ();
  (* .b78 *)
  r.b78 <- next_r.b78;
  let r_expected = { r_expected with b78 = next_r.b78 } in
  mark_test_run 529;
  let test = eq r r_expected in
  if not test then failwithf "test 529 failed";
  Gc.compact ();
  (* .c78 *)
  r.c78 <- next_r.c78;
  let r_expected = { r_expected with c78 = next_r.c78 } in
  mark_test_run 530;
  let test = eq r r_expected in
  if not test then failwithf "test 530 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a78; b78; c78 } = r in
  let expected_a78 = #100l in
  mark_test_run 531;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a78 a78 in
  if not test then failwithf "test 531 failed";
  let expected_b78 = 101 in
  mark_test_run 532;
  let test = (fun a b -> Int.equal a b) expected_b78 b78 in
  if not test then failwithf "test 532 failed";
  let expected_c78 = 102 in
  mark_test_run 533;
  let test = (fun a b -> Int.equal a b) expected_c78 c78 in
  if not test then failwithf "test 533 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a78; b78; c78 } = r in
  let expected_a78 = #100l in
  mark_test_run 534;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a78 a78 in
  if not test then failwithf "test 534 failed";
  let expected_b78 = 101 in
  mark_test_run 535;
  let test = (fun a b -> Int.equal a b) expected_b78 b78 in
  if not test then failwithf "test 535 failed";
  let expected_c78 = 102 in
  mark_test_run 536;
  let test = (fun a b -> Int.equal a b) expected_c78 c78 in
  if not test then failwithf "test 536 failed";

  (*************************************)
  (*   t79 = { int32#; int; int32# }   *)
  (*************************************)
  let r = { a79 = #0l; b79 = 1; c79 = #2l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a79 *)
  let actual = r.a79 in
  let expected = #0l in
  mark_test_run 537;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 537 failed";
  (* Paths of depth 1 *)
  (* .b79 *)
  let actual = r.b79 in
  let expected = 1 in
  mark_test_run 538;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 538 failed";
  (* Paths of depth 1 *)
  (* .c79 *)
  let actual = r.c79 in
  let expected = #2l in
  mark_test_run 539;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 539 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a79 = a791; b79 = b791; c79 = c791 } { a79 = a792; b79 = b792; c79 = c792 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a791 a792 && (fun a b -> Int.equal a b) b791 b792 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) c791 c792) in
  let next_r = { a79 = #100l; b79 = 101; c79 = #102l } in
  let r_expected = { a79 = #0l; b79 = 1; c79 = #2l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a79 *)
  r.a79 <- next_r.a79;
  let r_expected = { r_expected with a79 = next_r.a79 } in
  mark_test_run 540;
  let test = eq r r_expected in
  if not test then failwithf "test 540 failed";
  Gc.compact ();
  (* .b79 *)
  r.b79 <- next_r.b79;
  let r_expected = { r_expected with b79 = next_r.b79 } in
  mark_test_run 541;
  let test = eq r r_expected in
  if not test then failwithf "test 541 failed";
  Gc.compact ();
  (* .c79 *)
  r.c79 <- next_r.c79;
  let r_expected = { r_expected with c79 = next_r.c79 } in
  mark_test_run 542;
  let test = eq r r_expected in
  if not test then failwithf "test 542 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a79; b79; c79 } = r in
  let expected_a79 = #100l in
  mark_test_run 543;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a79 a79 in
  if not test then failwithf "test 543 failed";
  let expected_b79 = 101 in
  mark_test_run 544;
  let test = (fun a b -> Int.equal a b) expected_b79 b79 in
  if not test then failwithf "test 544 failed";
  let expected_c79 = #102l in
  mark_test_run 545;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_c79 c79 in
  if not test then failwithf "test 545 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a79; b79; c79 } = r in
  let expected_a79 = #100l in
  mark_test_run 546;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a79 a79 in
  if not test then failwithf "test 546 failed";
  let expected_b79 = 101 in
  mark_test_run 547;
  let test = (fun a b -> Int.equal a b) expected_b79 b79 in
  if not test then failwithf "test 547 failed";
  let expected_c79 = #102l in
  mark_test_run 548;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_c79 c79 in
  if not test then failwithf "test 548 failed";

  (*******************************)
  (*   t80 = { int32#; int64 }   *)
  (*******************************)
  let r = { a80 = #0l; b80 = 1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a80 *)
  let actual = r.a80 in
  let expected = #0l in
  mark_test_run 549;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 549 failed";
  (* Paths of depth 1 *)
  (* .b80 *)
  let actual = r.b80 in
  let expected = 1L in
  mark_test_run 550;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 550 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a80 = a801; b80 = b801 } { a80 = a802; b80 = b802 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a801 a802 && (fun a b -> Int64.equal (globalize a) (globalize b)) b801 b802) in
  let next_r = { a80 = #100l; b80 = 101L } in
  let r_expected = { a80 = #0l; b80 = 1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a80 *)
  r.a80 <- next_r.a80;
  let r_expected = { r_expected with a80 = next_r.a80 } in
  mark_test_run 551;
  let test = eq r r_expected in
  if not test then failwithf "test 551 failed";
  Gc.compact ();
  (* .b80 *)
  r.b80 <- next_r.b80;
  let r_expected = { r_expected with b80 = next_r.b80 } in
  mark_test_run 552;
  let test = eq r r_expected in
  if not test then failwithf "test 552 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a80; b80 } = r in
  let expected_a80 = #100l in
  mark_test_run 553;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a80 a80 in
  if not test then failwithf "test 553 failed";
  let expected_b80 = 101L in
  mark_test_run 554;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b80 b80 in
  if not test then failwithf "test 554 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a80; b80 } = r in
  let expected_a80 = #100l in
  mark_test_run 555;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a80 a80 in
  if not test then failwithf "test 555 failed";
  let expected_b80 = 101L in
  mark_test_run 556;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b80 b80 in
  if not test then failwithf "test 556 failed";

  (********************************)
  (*   t81 = { int32#; int64# }   *)
  (********************************)
  let r = { a81 = #0l; b81 = #1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a81 *)
  let actual = r.a81 in
  let expected = #0l in
  mark_test_run 557;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 557 failed";
  (* Paths of depth 1 *)
  (* .b81 *)
  let actual = r.b81 in
  let expected = #1L in
  mark_test_run 558;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 558 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a81 = a811; b81 = b811 } { a81 = a812; b81 = b812 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a811 a812 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b811 b812) in
  let next_r = { a81 = #100l; b81 = #101L } in
  let r_expected = { a81 = #0l; b81 = #1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a81 *)
  r.a81 <- next_r.a81;
  let r_expected = { r_expected with a81 = next_r.a81 } in
  mark_test_run 559;
  let test = eq r r_expected in
  if not test then failwithf "test 559 failed";
  Gc.compact ();
  (* .b81 *)
  r.b81 <- next_r.b81;
  let r_expected = { r_expected with b81 = next_r.b81 } in
  mark_test_run 560;
  let test = eq r r_expected in
  if not test then failwithf "test 560 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a81; b81 } = r in
  let expected_a81 = #100l in
  mark_test_run 561;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a81 a81 in
  if not test then failwithf "test 561 failed";
  let expected_b81 = #101L in
  mark_test_run 562;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b81 b81 in
  if not test then failwithf "test 562 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a81; b81 } = r in
  let expected_a81 = #100l in
  mark_test_run 563;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a81 a81 in
  if not test then failwithf "test 563 failed";
  let expected_b81 = #101L in
  mark_test_run 564;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b81 b81 in
  if not test then failwithf "test 564 failed";

  (********************************)
  (*   t82 = { int32#; int32# }   *)
  (********************************)
  let r = { a82 = #0l; b82 = #1l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a82 *)
  let actual = r.a82 in
  let expected = #0l in
  mark_test_run 565;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 565 failed";
  (* Paths of depth 1 *)
  (* .b82 *)
  let actual = r.b82 in
  let expected = #1l in
  mark_test_run 566;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 566 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a82 = a821; b82 = b821 } { a82 = a822; b82 = b822 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a821 a822 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b821 b822) in
  let next_r = { a82 = #100l; b82 = #101l } in
  let r_expected = { a82 = #0l; b82 = #1l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a82 *)
  r.a82 <- next_r.a82;
  let r_expected = { r_expected with a82 = next_r.a82 } in
  mark_test_run 567;
  let test = eq r r_expected in
  if not test then failwithf "test 567 failed";
  Gc.compact ();
  (* .b82 *)
  r.b82 <- next_r.b82;
  let r_expected = { r_expected with b82 = next_r.b82 } in
  mark_test_run 568;
  let test = eq r r_expected in
  if not test then failwithf "test 568 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a82; b82 } = r in
  let expected_a82 = #100l in
  mark_test_run 569;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a82 a82 in
  if not test then failwithf "test 569 failed";
  let expected_b82 = #101l in
  mark_test_run 570;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b82 b82 in
  if not test then failwithf "test 570 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a82; b82 } = r in
  let expected_a82 = #100l in
  mark_test_run 571;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a82 a82 in
  if not test then failwithf "test 571 failed";
  let expected_b82 = #101l in
  mark_test_run 572;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b82 b82 in
  if not test then failwithf "test 572 failed";

  (*************************************)
  (*   t83 = { int32#; int32#; int }   *)
  (*************************************)
  let r = { a83 = #0l; b83 = #1l; c83 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a83 *)
  let actual = r.a83 in
  let expected = #0l in
  mark_test_run 573;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 573 failed";
  (* Paths of depth 1 *)
  (* .b83 *)
  let actual = r.b83 in
  let expected = #1l in
  mark_test_run 574;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 574 failed";
  (* Paths of depth 1 *)
  (* .c83 *)
  let actual = r.c83 in
  let expected = 2 in
  mark_test_run 575;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 575 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a83 = a831; b83 = b831; c83 = c831 } { a83 = a832; b83 = b832; c83 = c832 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a831 a832 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b831 b832 && (fun a b -> Int.equal a b) c831 c832) in
  let next_r = { a83 = #100l; b83 = #101l; c83 = 102 } in
  let r_expected = { a83 = #0l; b83 = #1l; c83 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a83 *)
  r.a83 <- next_r.a83;
  let r_expected = { r_expected with a83 = next_r.a83 } in
  mark_test_run 576;
  let test = eq r r_expected in
  if not test then failwithf "test 576 failed";
  Gc.compact ();
  (* .b83 *)
  r.b83 <- next_r.b83;
  let r_expected = { r_expected with b83 = next_r.b83 } in
  mark_test_run 577;
  let test = eq r r_expected in
  if not test then failwithf "test 577 failed";
  Gc.compact ();
  (* .c83 *)
  r.c83 <- next_r.c83;
  let r_expected = { r_expected with c83 = next_r.c83 } in
  mark_test_run 578;
  let test = eq r r_expected in
  if not test then failwithf "test 578 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a83; b83; c83 } = r in
  let expected_a83 = #100l in
  mark_test_run 579;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a83 a83 in
  if not test then failwithf "test 579 failed";
  let expected_b83 = #101l in
  mark_test_run 580;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b83 b83 in
  if not test then failwithf "test 580 failed";
  let expected_c83 = 102 in
  mark_test_run 581;
  let test = (fun a b -> Int.equal a b) expected_c83 c83 in
  if not test then failwithf "test 581 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a83; b83; c83 } = r in
  let expected_a83 = #100l in
  mark_test_run 582;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a83 a83 in
  if not test then failwithf "test 582 failed";
  let expected_b83 = #101l in
  mark_test_run 583;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b83 b83 in
  if not test then failwithf "test 583 failed";
  let expected_c83 = 102 in
  mark_test_run 584;
  let test = (fun a b -> Int.equal a b) expected_c83 c83 in
  if not test then failwithf "test 584 failed";

  (****************************************)
  (*   t84 = { int32#; int32#; int32# }   *)
  (****************************************)
  let r = { a84 = #0l; b84 = #1l; c84 = #2l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a84 *)
  let actual = r.a84 in
  let expected = #0l in
  mark_test_run 585;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 585 failed";
  (* Paths of depth 1 *)
  (* .b84 *)
  let actual = r.b84 in
  let expected = #1l in
  mark_test_run 586;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 586 failed";
  (* Paths of depth 1 *)
  (* .c84 *)
  let actual = r.c84 in
  let expected = #2l in
  mark_test_run 587;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 587 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a84 = a841; b84 = b841; c84 = c841 } { a84 = a842; b84 = b842; c84 = c842 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a841 a842 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b841 b842 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) c841 c842) in
  let next_r = { a84 = #100l; b84 = #101l; c84 = #102l } in
  let r_expected = { a84 = #0l; b84 = #1l; c84 = #2l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a84 *)
  r.a84 <- next_r.a84;
  let r_expected = { r_expected with a84 = next_r.a84 } in
  mark_test_run 588;
  let test = eq r r_expected in
  if not test then failwithf "test 588 failed";
  Gc.compact ();
  (* .b84 *)
  r.b84 <- next_r.b84;
  let r_expected = { r_expected with b84 = next_r.b84 } in
  mark_test_run 589;
  let test = eq r r_expected in
  if not test then failwithf "test 589 failed";
  Gc.compact ();
  (* .c84 *)
  r.c84 <- next_r.c84;
  let r_expected = { r_expected with c84 = next_r.c84 } in
  mark_test_run 590;
  let test = eq r r_expected in
  if not test then failwithf "test 590 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a84; b84; c84 } = r in
  let expected_a84 = #100l in
  mark_test_run 591;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a84 a84 in
  if not test then failwithf "test 591 failed";
  let expected_b84 = #101l in
  mark_test_run 592;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b84 b84 in
  if not test then failwithf "test 592 failed";
  let expected_c84 = #102l in
  mark_test_run 593;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_c84 c84 in
  if not test then failwithf "test 593 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a84; b84; c84 } = r in
  let expected_a84 = #100l in
  mark_test_run 594;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a84 a84 in
  if not test then failwithf "test 594 failed";
  let expected_b84 = #101l in
  mark_test_run 595;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b84 b84 in
  if not test then failwithf "test 595 failed";
  let expected_c84 = #102l in
  mark_test_run 596;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_c84 c84 in
  if not test then failwithf "test 596 failed";

  (************************************)
  (*   t85 = { int32#; nativeint# }   *)
  (************************************)
  let r = { a85 = #0l; b85 = #1n } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a85 *)
  let actual = r.a85 in
  let expected = #0l in
  mark_test_run 597;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 597 failed";
  (* Paths of depth 1 *)
  (* .b85 *)
  let actual = r.b85 in
  let expected = #1n in
  mark_test_run 598;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 598 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a85 = a851; b85 = b851 } { a85 = a852; b85 = b852 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a851 a852 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b851 b852) in
  let next_r = { a85 = #100l; b85 = #101n } in
  let r_expected = { a85 = #0l; b85 = #1n } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a85 *)
  r.a85 <- next_r.a85;
  let r_expected = { r_expected with a85 = next_r.a85 } in
  mark_test_run 599;
  let test = eq r r_expected in
  if not test then failwithf "test 599 failed";
  Gc.compact ();
  (* .b85 *)
  r.b85 <- next_r.b85;
  let r_expected = { r_expected with b85 = next_r.b85 } in
  mark_test_run 600;
  let test = eq r r_expected in
  if not test then failwithf "test 600 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a85; b85 } = r in
  let expected_a85 = #100l in
  mark_test_run 601;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a85 a85 in
  if not test then failwithf "test 601 failed";
  let expected_b85 = #101n in
  mark_test_run 602;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b85 b85 in
  if not test then failwithf "test 602 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a85; b85 } = r in
  let expected_a85 = #100l in
  mark_test_run 603;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a85 a85 in
  if not test then failwithf "test 603 failed";
  let expected_b85 = #101n in
  mark_test_run 604;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b85 b85 in
  if not test then failwithf "test 604 failed";

  (*******************************)
  (*   t86 = { int32#; float }   *)
  (*******************************)
  let r = { a86 = #0l; b86 = 1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a86 *)
  let actual = r.a86 in
  let expected = #0l in
  mark_test_run 605;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 605 failed";
  (* Paths of depth 1 *)
  (* .b86 *)
  let actual = r.b86 in
  let expected = 1. in
  mark_test_run 606;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 606 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a86 = a861; b86 = b861 } { a86 = a862; b86 = b862 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a861 a862 && (fun a b -> Float.equal (globalize a) (globalize b)) b861 b862) in
  let next_r = { a86 = #100l; b86 = 101. } in
  let r_expected = { a86 = #0l; b86 = 1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a86 *)
  r.a86 <- next_r.a86;
  let r_expected = { r_expected with a86 = next_r.a86 } in
  mark_test_run 607;
  let test = eq r r_expected in
  if not test then failwithf "test 607 failed";
  Gc.compact ();
  (* .b86 *)
  r.b86 <- next_r.b86;
  let r_expected = { r_expected with b86 = next_r.b86 } in
  mark_test_run 608;
  let test = eq r r_expected in
  if not test then failwithf "test 608 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a86; b86 } = r in
  let expected_a86 = #100l in
  mark_test_run 609;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a86 a86 in
  if not test then failwithf "test 609 failed";
  let expected_b86 = 101. in
  mark_test_run 610;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b86 b86 in
  if not test then failwithf "test 610 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a86; b86 } = r in
  let expected_a86 = #100l in
  mark_test_run 611;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a86 a86 in
  if not test then failwithf "test 611 failed";
  let expected_b86 = 101. in
  mark_test_run 612;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b86 b86 in
  if not test then failwithf "test 612 failed";

  (**********************************)
  (*   t87 = { int32#; #{ int } }   *)
  (**********************************)
  let r = { a87 = #0l; b87 = #{ a14 = 1 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a87 *)
  let actual = r.a87 in
  let expected = #0l in
  mark_test_run 613;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 613 failed";
  (* Paths of depth 1 *)
  (* .b87 *)
  let actual = r.b87 in
  let expected = #{ a14 = 1 } in
  mark_test_run 614;
  let test = (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) actual expected in
  if not test then failwithf "test 614 failed";
  (* Paths of depth 2 *)
  (* .b87.#a14 *)
  let actual = r.b87.#a14 in
  let expected = 1 in
  mark_test_run 615;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 615 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a87 = a871; b87 = b871 } { a87 = a872; b87 = b872 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a871 a872 && (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) b871 b872) in
  let next_r = { a87 = #100l; b87 = #{ a14 = 101 } } in
  let r_expected = { a87 = #0l; b87 = #{ a14 = 1 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a87 *)
  r.a87 <- next_r.a87;
  let r_expected = { r_expected with a87 = next_r.a87 } in
  mark_test_run 616;
  let test = eq r r_expected in
  if not test then failwithf "test 616 failed";
  Gc.compact ();
  (* .b87 *)
  r.b87 <- next_r.b87;
  let r_expected = { r_expected with b87 = next_r.b87 } in
  mark_test_run 617;
  let test = eq r r_expected in
  if not test then failwithf "test 617 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a87; b87 = #{ a14 } } = r in
  let expected_a87 = #100l in
  mark_test_run 618;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a87 a87 in
  if not test then failwithf "test 618 failed";
  let expected_a14 = 101 in
  mark_test_run 619;
  let test = (fun a b -> Int.equal a b) expected_a14 a14 in
  if not test then failwithf "test 619 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a87; b87 } = r in
  let expected_a87 = #100l in
  mark_test_run 620;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a87 a87 in
  if not test then failwithf "test 620 failed";
  let expected_b87 = #{ a14 = 101 } in
  mark_test_run 621;
  let test = (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) expected_b87 b87 in
  if not test then failwithf "test 621 failed";

  (***************************************)
  (*   t88 = { int32#; #{ int; int } }   *)
  (***************************************)
  let r = { a88 = #0l; b88 = #{ a16 = 1; b16 = 2 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a88 *)
  let actual = r.a88 in
  let expected = #0l in
  mark_test_run 622;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 622 failed";
  (* Paths of depth 1 *)
  (* .b88 *)
  let actual = r.b88 in
  let expected = #{ a16 = 1; b16 = 2 } in
  mark_test_run 623;
  let test = (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) actual expected in
  if not test then failwithf "test 623 failed";
  (* Paths of depth 2 *)
  (* .b88.#a16 *)
  let actual = r.b88.#a16 in
  let expected = 1 in
  mark_test_run 624;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 624 failed";
  (* .b88.#b16 *)
  let actual = r.b88.#b16 in
  let expected = 2 in
  mark_test_run 625;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 625 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a88 = a881; b88 = b881 } { a88 = a882; b88 = b882 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a881 a882 && (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) b881 b882) in
  let next_r = { a88 = #100l; b88 = #{ a16 = 101; b16 = 102 } } in
  let r_expected = { a88 = #0l; b88 = #{ a16 = 1; b16 = 2 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a88 *)
  r.a88 <- next_r.a88;
  let r_expected = { r_expected with a88 = next_r.a88 } in
  mark_test_run 626;
  let test = eq r r_expected in
  if not test then failwithf "test 626 failed";
  Gc.compact ();
  (* .b88 *)
  r.b88 <- next_r.b88;
  let r_expected = { r_expected with b88 = next_r.b88 } in
  mark_test_run 627;
  let test = eq r r_expected in
  if not test then failwithf "test 627 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a88; b88 = #{ a16; b16 } } = r in
  let expected_a88 = #100l in
  mark_test_run 628;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a88 a88 in
  if not test then failwithf "test 628 failed";
  let expected_a16 = 101 in
  mark_test_run 629;
  let test = (fun a b -> Int.equal a b) expected_a16 a16 in
  if not test then failwithf "test 629 failed";
  let expected_b16 = 102 in
  mark_test_run 630;
  let test = (fun a b -> Int.equal a b) expected_b16 b16 in
  if not test then failwithf "test 630 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a88; b88 } = r in
  let expected_a88 = #100l in
  mark_test_run 631;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a88 a88 in
  if not test then failwithf "test 631 failed";
  let expected_b88 = #{ a16 = 101; b16 = 102 } in
  mark_test_run 632;
  let test = (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) expected_b88 b88 in
  if not test then failwithf "test 632 failed";

  (******************************************)
  (*   t89 = { int32#; #{ int; int32# } }   *)
  (******************************************)
  let r = { a89 = #0l; b89 = #{ a18 = 1; b18 = #2l } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a89 *)
  let actual = r.a89 in
  let expected = #0l in
  mark_test_run 633;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 633 failed";
  (* Paths of depth 1 *)
  (* .b89 *)
  let actual = r.b89 in
  let expected = #{ a18 = 1; b18 = #2l } in
  mark_test_run 634;
  let test = (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) actual expected in
  if not test then failwithf "test 634 failed";
  (* Paths of depth 2 *)
  (* .b89.#a18 *)
  let actual = r.b89.#a18 in
  let expected = 1 in
  mark_test_run 635;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 635 failed";
  (* .b89.#b18 *)
  let actual = r.b89.#b18 in
  let expected = #2l in
  mark_test_run 636;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 636 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a89 = a891; b89 = b891 } { a89 = a892; b89 = b892 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a891 a892 && (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) b891 b892) in
  let next_r = { a89 = #100l; b89 = #{ a18 = 101; b18 = #102l } } in
  let r_expected = { a89 = #0l; b89 = #{ a18 = 1; b18 = #2l } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a89 *)
  r.a89 <- next_r.a89;
  let r_expected = { r_expected with a89 = next_r.a89 } in
  mark_test_run 637;
  let test = eq r r_expected in
  if not test then failwithf "test 637 failed";
  Gc.compact ();
  (* .b89 *)
  r.b89 <- next_r.b89;
  let r_expected = { r_expected with b89 = next_r.b89 } in
  mark_test_run 638;
  let test = eq r r_expected in
  if not test then failwithf "test 638 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a89; b89 = #{ a18; b18 } } = r in
  let expected_a89 = #100l in
  mark_test_run 639;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a89 a89 in
  if not test then failwithf "test 639 failed";
  let expected_a18 = 101 in
  mark_test_run 640;
  let test = (fun a b -> Int.equal a b) expected_a18 a18 in
  if not test then failwithf "test 640 failed";
  let expected_b18 = #102l in
  mark_test_run 641;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b18 b18 in
  if not test then failwithf "test 641 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a89; b89 } = r in
  let expected_a89 = #100l in
  mark_test_run 642;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a89 a89 in
  if not test then failwithf "test 642 failed";
  let expected_b89 = #{ a18 = 101; b18 = #102l } in
  mark_test_run 643;
  let test = (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) expected_b89 b89 in
  if not test then failwithf "test 643 failed";

  (********************************************)
  (*   t90 = { int32#; #{ int; #{ int } } }   *)
  (********************************************)
  let r = { a90 = #0l; b90 = #{ a22 = 1; b22 = #{ a14 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a90 *)
  let actual = r.a90 in
  let expected = #0l in
  mark_test_run 644;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 644 failed";
  (* Paths of depth 1 *)
  (* .b90 *)
  let actual = r.b90 in
  let expected = #{ a22 = 1; b22 = #{ a14 = 2 } } in
  mark_test_run 645;
  let test = (fun #{ a22 = a221; b22 = b221 } #{ a22 = a222; b22 = b222 } -> (fun a b -> Int.equal a b) a221 a222 && (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) b221 b222) actual expected in
  if not test then failwithf "test 645 failed";
  (* Paths of depth 2 *)
  (* .b90.#a22 *)
  let actual = r.b90.#a22 in
  let expected = 1 in
  mark_test_run 646;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 646 failed";
  (* .b90.#b22 *)
  let actual = r.b90.#b22 in
  let expected = #{ a14 = 2 } in
  mark_test_run 647;
  let test = (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) actual expected in
  if not test then failwithf "test 647 failed";
  (* Paths of depth 3 *)
  (* .b90.#b22.#a14 *)
  let actual = r.b90.#b22.#a14 in
  let expected = 2 in
  mark_test_run 648;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 648 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a90 = a901; b90 = b901 } { a90 = a902; b90 = b902 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a901 a902 && (fun #{ a22 = a221; b22 = b221 } #{ a22 = a222; b22 = b222 } -> (fun a b -> Int.equal a b) a221 a222 && (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) b221 b222) b901 b902) in
  let next_r = { a90 = #100l; b90 = #{ a22 = 101; b22 = #{ a14 = 102 } } } in
  let r_expected = { a90 = #0l; b90 = #{ a22 = 1; b22 = #{ a14 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a90 *)
  r.a90 <- next_r.a90;
  let r_expected = { r_expected with a90 = next_r.a90 } in
  mark_test_run 649;
  let test = eq r r_expected in
  if not test then failwithf "test 649 failed";
  Gc.compact ();
  (* .b90 *)
  r.b90 <- next_r.b90;
  let r_expected = { r_expected with b90 = next_r.b90 } in
  mark_test_run 650;
  let test = eq r r_expected in
  if not test then failwithf "test 650 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a90; b90 = #{ a22; b22 = #{ a14 } } } = r in
  let expected_a90 = #100l in
  mark_test_run 651;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a90 a90 in
  if not test then failwithf "test 651 failed";
  let expected_a22 = 101 in
  mark_test_run 652;
  let test = (fun a b -> Int.equal a b) expected_a22 a22 in
  if not test then failwithf "test 652 failed";
  let expected_a14 = 102 in
  mark_test_run 653;
  let test = (fun a b -> Int.equal a b) expected_a14 a14 in
  if not test then failwithf "test 653 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a90; b90 } = r in
  let expected_a90 = #100l in
  mark_test_run 654;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a90 a90 in
  if not test then failwithf "test 654 failed";
  let expected_b90 = #{ a22 = 101; b22 = #{ a14 = 102 } } in
  mark_test_run 655;
  let test = (fun #{ a22 = a221; b22 = b221 } #{ a22 = a222; b22 = b222 } -> (fun a b -> Int.equal a b) a221 a222 && (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) b221 b222) expected_b90 b90 in
  if not test then failwithf "test 655 failed";

  (***********************************************)
  (*   t91 = { int32#; #{ int; #{ int32# } } }   *)
  (***********************************************)
  let r = { a91 = #0l; b91 = #{ a25 = 1; b25 = #{ a24 = #2l } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a91 *)
  let actual = r.a91 in
  let expected = #0l in
  mark_test_run 656;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 656 failed";
  (* Paths of depth 1 *)
  (* .b91 *)
  let actual = r.b91 in
  let expected = #{ a25 = 1; b25 = #{ a24 = #2l } } in
  mark_test_run 657;
  let test = (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) b251 b252) actual expected in
  if not test then failwithf "test 657 failed";
  (* Paths of depth 2 *)
  (* .b91.#a25 *)
  let actual = r.b91.#a25 in
  let expected = 1 in
  mark_test_run 658;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 658 failed";
  (* .b91.#b25 *)
  let actual = r.b91.#b25 in
  let expected = #{ a24 = #2l } in
  mark_test_run 659;
  let test = (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) actual expected in
  if not test then failwithf "test 659 failed";
  (* Paths of depth 3 *)
  (* .b91.#b25.#a24 *)
  let actual = r.b91.#b25.#a24 in
  let expected = #2l in
  mark_test_run 660;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 660 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a91 = a911; b91 = b911 } { a91 = a912; b91 = b912 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a911 a912 && (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) b251 b252) b911 b912) in
  let next_r = { a91 = #100l; b91 = #{ a25 = 101; b25 = #{ a24 = #102l } } } in
  let r_expected = { a91 = #0l; b91 = #{ a25 = 1; b25 = #{ a24 = #2l } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a91 *)
  r.a91 <- next_r.a91;
  let r_expected = { r_expected with a91 = next_r.a91 } in
  mark_test_run 661;
  let test = eq r r_expected in
  if not test then failwithf "test 661 failed";
  Gc.compact ();
  (* .b91 *)
  r.b91 <- next_r.b91;
  let r_expected = { r_expected with b91 = next_r.b91 } in
  mark_test_run 662;
  let test = eq r r_expected in
  if not test then failwithf "test 662 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a91; b91 = #{ a25; b25 = #{ a24 } } } = r in
  let expected_a91 = #100l in
  mark_test_run 663;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a91 a91 in
  if not test then failwithf "test 663 failed";
  let expected_a25 = 101 in
  mark_test_run 664;
  let test = (fun a b -> Int.equal a b) expected_a25 a25 in
  if not test then failwithf "test 664 failed";
  let expected_a24 = #102l in
  mark_test_run 665;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a24 a24 in
  if not test then failwithf "test 665 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a91; b91 } = r in
  let expected_a91 = #100l in
  mark_test_run 666;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a91 a91 in
  if not test then failwithf "test 666 failed";
  let expected_b91 = #{ a25 = 101; b25 = #{ a24 = #102l } } in
  mark_test_run 667;
  let test = (fun #{ a25 = a251; b25 = b251 } #{ a25 = a252; b25 = b252 } -> (fun a b -> Int.equal a b) a251 a252 && (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) b251 b252) expected_b91 b91 in
  if not test then failwithf "test 667 failed";

  (*************************************)
  (*   t92 = { int32#; #{ int32# } }   *)
  (*************************************)
  let r = { a92 = #0l; b92 = #{ a24 = #1l } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a92 *)
  let actual = r.a92 in
  let expected = #0l in
  mark_test_run 668;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 668 failed";
  (* Paths of depth 1 *)
  (* .b92 *)
  let actual = r.b92 in
  let expected = #{ a24 = #1l } in
  mark_test_run 669;
  let test = (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) actual expected in
  if not test then failwithf "test 669 failed";
  (* Paths of depth 2 *)
  (* .b92.#a24 *)
  let actual = r.b92.#a24 in
  let expected = #1l in
  mark_test_run 670;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 670 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a92 = a921; b92 = b921 } { a92 = a922; b92 = b922 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a921 a922 && (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) b921 b922) in
  let next_r = { a92 = #100l; b92 = #{ a24 = #101l } } in
  let r_expected = { a92 = #0l; b92 = #{ a24 = #1l } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a92 *)
  r.a92 <- next_r.a92;
  let r_expected = { r_expected with a92 = next_r.a92 } in
  mark_test_run 671;
  let test = eq r r_expected in
  if not test then failwithf "test 671 failed";
  Gc.compact ();
  (* .b92 *)
  r.b92 <- next_r.b92;
  let r_expected = { r_expected with b92 = next_r.b92 } in
  mark_test_run 672;
  let test = eq r r_expected in
  if not test then failwithf "test 672 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a92; b92 = #{ a24 } } = r in
  let expected_a92 = #100l in
  mark_test_run 673;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a92 a92 in
  if not test then failwithf "test 673 failed";
  let expected_a24 = #101l in
  mark_test_run 674;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a24 a24 in
  if not test then failwithf "test 674 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a92; b92 } = r in
  let expected_a92 = #100l in
  mark_test_run 675;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a92 a92 in
  if not test then failwithf "test 675 failed";
  let expected_b92 = #{ a24 = #101l } in
  mark_test_run 676;
  let test = (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) expected_b92 b92 in
  if not test then failwithf "test 676 failed";

  (******************************************)
  (*   t93 = { int32#; #{ int32#; int } }   *)
  (******************************************)
  let r = { a93 = #0l; b93 = #{ a31 = #1l; b31 = 2 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a93 *)
  let actual = r.a93 in
  let expected = #0l in
  mark_test_run 677;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 677 failed";
  (* Paths of depth 1 *)
  (* .b93 *)
  let actual = r.b93 in
  let expected = #{ a31 = #1l; b31 = 2 } in
  mark_test_run 678;
  let test = (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) actual expected in
  if not test then failwithf "test 678 failed";
  (* Paths of depth 2 *)
  (* .b93.#a31 *)
  let actual = r.b93.#a31 in
  let expected = #1l in
  mark_test_run 679;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 679 failed";
  (* .b93.#b31 *)
  let actual = r.b93.#b31 in
  let expected = 2 in
  mark_test_run 680;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 680 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a93 = a931; b93 = b931 } { a93 = a932; b93 = b932 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a931 a932 && (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) b931 b932) in
  let next_r = { a93 = #100l; b93 = #{ a31 = #101l; b31 = 102 } } in
  let r_expected = { a93 = #0l; b93 = #{ a31 = #1l; b31 = 2 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a93 *)
  r.a93 <- next_r.a93;
  let r_expected = { r_expected with a93 = next_r.a93 } in
  mark_test_run 681;
  let test = eq r r_expected in
  if not test then failwithf "test 681 failed";
  Gc.compact ();
  (* .b93 *)
  r.b93 <- next_r.b93;
  let r_expected = { r_expected with b93 = next_r.b93 } in
  mark_test_run 682;
  let test = eq r r_expected in
  if not test then failwithf "test 682 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a93; b93 = #{ a31; b31 } } = r in
  let expected_a93 = #100l in
  mark_test_run 683;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a93 a93 in
  if not test then failwithf "test 683 failed";
  let expected_a31 = #101l in
  mark_test_run 684;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a31 a31 in
  if not test then failwithf "test 684 failed";
  let expected_b31 = 102 in
  mark_test_run 685;
  let test = (fun a b -> Int.equal a b) expected_b31 b31 in
  if not test then failwithf "test 685 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a93; b93 } = r in
  let expected_a93 = #100l in
  mark_test_run 686;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a93 a93 in
  if not test then failwithf "test 686 failed";
  let expected_b93 = #{ a31 = #101l; b31 = 102 } in
  mark_test_run 687;
  let test = (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) expected_b93 b93 in
  if not test then failwithf "test 687 failed";

  (*********************************************)
  (*   t94 = { int32#; #{ int32#; int32# } }   *)
  (*********************************************)
  let r = { a94 = #0l; b94 = #{ a33 = #1l; b33 = #2l } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a94 *)
  let actual = r.a94 in
  let expected = #0l in
  mark_test_run 688;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 688 failed";
  (* Paths of depth 1 *)
  (* .b94 *)
  let actual = r.b94 in
  let expected = #{ a33 = #1l; b33 = #2l } in
  mark_test_run 689;
  let test = (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) actual expected in
  if not test then failwithf "test 689 failed";
  (* Paths of depth 2 *)
  (* .b94.#a33 *)
  let actual = r.b94.#a33 in
  let expected = #1l in
  mark_test_run 690;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 690 failed";
  (* .b94.#b33 *)
  let actual = r.b94.#b33 in
  let expected = #2l in
  mark_test_run 691;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 691 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a94 = a941; b94 = b941 } { a94 = a942; b94 = b942 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a941 a942 && (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) b941 b942) in
  let next_r = { a94 = #100l; b94 = #{ a33 = #101l; b33 = #102l } } in
  let r_expected = { a94 = #0l; b94 = #{ a33 = #1l; b33 = #2l } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a94 *)
  r.a94 <- next_r.a94;
  let r_expected = { r_expected with a94 = next_r.a94 } in
  mark_test_run 692;
  let test = eq r r_expected in
  if not test then failwithf "test 692 failed";
  Gc.compact ();
  (* .b94 *)
  r.b94 <- next_r.b94;
  let r_expected = { r_expected with b94 = next_r.b94 } in
  mark_test_run 693;
  let test = eq r r_expected in
  if not test then failwithf "test 693 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a94; b94 = #{ a33; b33 } } = r in
  let expected_a94 = #100l in
  mark_test_run 694;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a94 a94 in
  if not test then failwithf "test 694 failed";
  let expected_a33 = #101l in
  mark_test_run 695;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a33 a33 in
  if not test then failwithf "test 695 failed";
  let expected_b33 = #102l in
  mark_test_run 696;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b33 b33 in
  if not test then failwithf "test 696 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a94; b94 } = r in
  let expected_a94 = #100l in
  mark_test_run 697;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a94 a94 in
  if not test then failwithf "test 697 failed";
  let expected_b94 = #{ a33 = #101l; b33 = #102l } in
  mark_test_run 698;
  let test = (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) expected_b94 b94 in
  if not test then failwithf "test 698 failed";

  (***********************************************)
  (*   t95 = { int32#; #{ int32#; #{ int } } }   *)
  (***********************************************)
  let r = { a95 = #0l; b95 = #{ a35 = #1l; b35 = #{ a14 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a95 *)
  let actual = r.a95 in
  let expected = #0l in
  mark_test_run 699;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 699 failed";
  (* Paths of depth 1 *)
  (* .b95 *)
  let actual = r.b95 in
  let expected = #{ a35 = #1l; b35 = #{ a14 = 2 } } in
  mark_test_run 700;
  let test = (fun #{ a35 = a351; b35 = b351 } #{ a35 = a352; b35 = b352 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a351 a352 && (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) b351 b352) actual expected in
  if not test then failwithf "test 700 failed";
  (* Paths of depth 2 *)
  (* .b95.#a35 *)
  let actual = r.b95.#a35 in
  let expected = #1l in
  mark_test_run 701;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 701 failed";
  (* .b95.#b35 *)
  let actual = r.b95.#b35 in
  let expected = #{ a14 = 2 } in
  mark_test_run 702;
  let test = (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) actual expected in
  if not test then failwithf "test 702 failed";
  (* Paths of depth 3 *)
  (* .b95.#b35.#a14 *)
  let actual = r.b95.#b35.#a14 in
  let expected = 2 in
  mark_test_run 703;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 703 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a95 = a951; b95 = b951 } { a95 = a952; b95 = b952 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a951 a952 && (fun #{ a35 = a351; b35 = b351 } #{ a35 = a352; b35 = b352 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a351 a352 && (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) b351 b352) b951 b952) in
  let next_r = { a95 = #100l; b95 = #{ a35 = #101l; b35 = #{ a14 = 102 } } } in
  let r_expected = { a95 = #0l; b95 = #{ a35 = #1l; b35 = #{ a14 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a95 *)
  r.a95 <- next_r.a95;
  let r_expected = { r_expected with a95 = next_r.a95 } in
  mark_test_run 704;
  let test = eq r r_expected in
  if not test then failwithf "test 704 failed";
  Gc.compact ();
  (* .b95 *)
  r.b95 <- next_r.b95;
  let r_expected = { r_expected with b95 = next_r.b95 } in
  mark_test_run 705;
  let test = eq r r_expected in
  if not test then failwithf "test 705 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a95; b95 = #{ a35; b35 = #{ a14 } } } = r in
  let expected_a95 = #100l in
  mark_test_run 706;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a95 a95 in
  if not test then failwithf "test 706 failed";
  let expected_a35 = #101l in
  mark_test_run 707;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a35 a35 in
  if not test then failwithf "test 707 failed";
  let expected_a14 = 102 in
  mark_test_run 708;
  let test = (fun a b -> Int.equal a b) expected_a14 a14 in
  if not test then failwithf "test 708 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a95; b95 } = r in
  let expected_a95 = #100l in
  mark_test_run 709;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a95 a95 in
  if not test then failwithf "test 709 failed";
  let expected_b95 = #{ a35 = #101l; b35 = #{ a14 = 102 } } in
  mark_test_run 710;
  let test = (fun #{ a35 = a351; b35 = b351 } #{ a35 = a352; b35 = b352 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a351 a352 && (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) b351 b352) expected_b95 b95 in
  if not test then failwithf "test 710 failed";

  (**************************************************)
  (*   t96 = { int32#; #{ int32#; #{ int32# } } }   *)
  (**************************************************)
  let r = { a96 = #0l; b96 = #{ a37 = #1l; b37 = #{ a24 = #2l } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a96 *)
  let actual = r.a96 in
  let expected = #0l in
  mark_test_run 711;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 711 failed";
  (* Paths of depth 1 *)
  (* .b96 *)
  let actual = r.b96 in
  let expected = #{ a37 = #1l; b37 = #{ a24 = #2l } } in
  mark_test_run 712;
  let test = (fun #{ a37 = a371; b37 = b371 } #{ a37 = a372; b37 = b372 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a371 a372 && (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) b371 b372) actual expected in
  if not test then failwithf "test 712 failed";
  (* Paths of depth 2 *)
  (* .b96.#a37 *)
  let actual = r.b96.#a37 in
  let expected = #1l in
  mark_test_run 713;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 713 failed";
  (* .b96.#b37 *)
  let actual = r.b96.#b37 in
  let expected = #{ a24 = #2l } in
  mark_test_run 714;
  let test = (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) actual expected in
  if not test then failwithf "test 714 failed";
  (* Paths of depth 3 *)
  (* .b96.#b37.#a24 *)
  let actual = r.b96.#b37.#a24 in
  let expected = #2l in
  mark_test_run 715;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 715 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a96 = a961; b96 = b961 } { a96 = a962; b96 = b962 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a961 a962 && (fun #{ a37 = a371; b37 = b371 } #{ a37 = a372; b37 = b372 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a371 a372 && (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) b371 b372) b961 b962) in
  let next_r = { a96 = #100l; b96 = #{ a37 = #101l; b37 = #{ a24 = #102l } } } in
  let r_expected = { a96 = #0l; b96 = #{ a37 = #1l; b37 = #{ a24 = #2l } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a96 *)
  r.a96 <- next_r.a96;
  let r_expected = { r_expected with a96 = next_r.a96 } in
  mark_test_run 716;
  let test = eq r r_expected in
  if not test then failwithf "test 716 failed";
  Gc.compact ();
  (* .b96 *)
  r.b96 <- next_r.b96;
  let r_expected = { r_expected with b96 = next_r.b96 } in
  mark_test_run 717;
  let test = eq r r_expected in
  if not test then failwithf "test 717 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a96; b96 = #{ a37; b37 = #{ a24 } } } = r in
  let expected_a96 = #100l in
  mark_test_run 718;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a96 a96 in
  if not test then failwithf "test 718 failed";
  let expected_a37 = #101l in
  mark_test_run 719;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a37 a37 in
  if not test then failwithf "test 719 failed";
  let expected_a24 = #102l in
  mark_test_run 720;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a24 a24 in
  if not test then failwithf "test 720 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a96; b96 } = r in
  let expected_a96 = #100l in
  mark_test_run 721;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a96 a96 in
  if not test then failwithf "test 721 failed";
  let expected_b96 = #{ a37 = #101l; b37 = #{ a24 = #102l } } in
  mark_test_run 722;
  let test = (fun #{ a37 = a371; b37 = b371 } #{ a37 = a372; b37 = b372 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a371 a372 && (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) b371 b372) expected_b96 b96 in
  if not test then failwithf "test 722 failed";

  (********************************************)
  (*   t97 = { int32#; #{ #{ int; int } } }   *)
  (********************************************)
  let r = { a97 = #0l; b97 = #{ a48 = #{ a16 = 1; b16 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a97 *)
  let actual = r.a97 in
  let expected = #0l in
  mark_test_run 723;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 723 failed";
  (* Paths of depth 1 *)
  (* .b97 *)
  let actual = r.b97 in
  let expected = #{ a48 = #{ a16 = 1; b16 = 2 } } in
  mark_test_run 724;
  let test = (fun #{ a48 = a481 } #{ a48 = a482 } -> (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) a481 a482) actual expected in
  if not test then failwithf "test 724 failed";
  (* Paths of depth 2 *)
  (* .b97.#a48 *)
  let actual = r.b97.#a48 in
  let expected = #{ a16 = 1; b16 = 2 } in
  mark_test_run 725;
  let test = (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) actual expected in
  if not test then failwithf "test 725 failed";
  (* Paths of depth 3 *)
  (* .b97.#a48.#a16 *)
  let actual = r.b97.#a48.#a16 in
  let expected = 1 in
  mark_test_run 726;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 726 failed";
  (* .b97.#a48.#b16 *)
  let actual = r.b97.#a48.#b16 in
  let expected = 2 in
  mark_test_run 727;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 727 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a97 = a971; b97 = b971 } { a97 = a972; b97 = b972 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a971 a972 && (fun #{ a48 = a481 } #{ a48 = a482 } -> (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) a481 a482) b971 b972) in
  let next_r = { a97 = #100l; b97 = #{ a48 = #{ a16 = 101; b16 = 102 } } } in
  let r_expected = { a97 = #0l; b97 = #{ a48 = #{ a16 = 1; b16 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a97 *)
  r.a97 <- next_r.a97;
  let r_expected = { r_expected with a97 = next_r.a97 } in
  mark_test_run 728;
  let test = eq r r_expected in
  if not test then failwithf "test 728 failed";
  Gc.compact ();
  (* .b97 *)
  r.b97 <- next_r.b97;
  let r_expected = { r_expected with b97 = next_r.b97 } in
  mark_test_run 729;
  let test = eq r r_expected in
  if not test then failwithf "test 729 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a97; b97 = #{ a48 = #{ a16; b16 } } } = r in
  let expected_a97 = #100l in
  mark_test_run 730;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a97 a97 in
  if not test then failwithf "test 730 failed";
  let expected_a16 = 101 in
  mark_test_run 731;
  let test = (fun a b -> Int.equal a b) expected_a16 a16 in
  if not test then failwithf "test 731 failed";
  let expected_b16 = 102 in
  mark_test_run 732;
  let test = (fun a b -> Int.equal a b) expected_b16 b16 in
  if not test then failwithf "test 732 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a97; b97 } = r in
  let expected_a97 = #100l in
  mark_test_run 733;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a97 a97 in
  if not test then failwithf "test 733 failed";
  let expected_b97 = #{ a48 = #{ a16 = 101; b16 = 102 } } in
  mark_test_run 734;
  let test = (fun #{ a48 = a481 } #{ a48 = a482 } -> (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) a481 a482) expected_b97 b97 in
  if not test then failwithf "test 734 failed";

  (***********************************************)
  (*   t98 = { int32#; #{ #{ int; int32# } } }   *)
  (***********************************************)
  let r = { a98 = #0l; b98 = #{ a50 = #{ a18 = 1; b18 = #2l } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a98 *)
  let actual = r.a98 in
  let expected = #0l in
  mark_test_run 735;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 735 failed";
  (* Paths of depth 1 *)
  (* .b98 *)
  let actual = r.b98 in
  let expected = #{ a50 = #{ a18 = 1; b18 = #2l } } in
  mark_test_run 736;
  let test = (fun #{ a50 = a501 } #{ a50 = a502 } -> (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) a501 a502) actual expected in
  if not test then failwithf "test 736 failed";
  (* Paths of depth 2 *)
  (* .b98.#a50 *)
  let actual = r.b98.#a50 in
  let expected = #{ a18 = 1; b18 = #2l } in
  mark_test_run 737;
  let test = (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) actual expected in
  if not test then failwithf "test 737 failed";
  (* Paths of depth 3 *)
  (* .b98.#a50.#a18 *)
  let actual = r.b98.#a50.#a18 in
  let expected = 1 in
  mark_test_run 738;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 738 failed";
  (* .b98.#a50.#b18 *)
  let actual = r.b98.#a50.#b18 in
  let expected = #2l in
  mark_test_run 739;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 739 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a98 = a981; b98 = b981 } { a98 = a982; b98 = b982 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a981 a982 && (fun #{ a50 = a501 } #{ a50 = a502 } -> (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) a501 a502) b981 b982) in
  let next_r = { a98 = #100l; b98 = #{ a50 = #{ a18 = 101; b18 = #102l } } } in
  let r_expected = { a98 = #0l; b98 = #{ a50 = #{ a18 = 1; b18 = #2l } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a98 *)
  r.a98 <- next_r.a98;
  let r_expected = { r_expected with a98 = next_r.a98 } in
  mark_test_run 740;
  let test = eq r r_expected in
  if not test then failwithf "test 740 failed";
  Gc.compact ();
  (* .b98 *)
  r.b98 <- next_r.b98;
  let r_expected = { r_expected with b98 = next_r.b98 } in
  mark_test_run 741;
  let test = eq r r_expected in
  if not test then failwithf "test 741 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a98; b98 = #{ a50 = #{ a18; b18 } } } = r in
  let expected_a98 = #100l in
  mark_test_run 742;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a98 a98 in
  if not test then failwithf "test 742 failed";
  let expected_a18 = 101 in
  mark_test_run 743;
  let test = (fun a b -> Int.equal a b) expected_a18 a18 in
  if not test then failwithf "test 743 failed";
  let expected_b18 = #102l in
  mark_test_run 744;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b18 b18 in
  if not test then failwithf "test 744 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a98; b98 } = r in
  let expected_a98 = #100l in
  mark_test_run 745;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a98 a98 in
  if not test then failwithf "test 745 failed";
  let expected_b98 = #{ a50 = #{ a18 = 101; b18 = #102l } } in
  mark_test_run 746;
  let test = (fun #{ a50 = a501 } #{ a50 = a502 } -> (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) a501 a502) expected_b98 b98 in
  if not test then failwithf "test 746 failed";

  (***********************************************)
  (*   t99 = { int32#; #{ #{ int32#; int } } }   *)
  (***********************************************)
  let r = { a99 = #0l; b99 = #{ a54 = #{ a31 = #1l; b31 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a99 *)
  let actual = r.a99 in
  let expected = #0l in
  mark_test_run 747;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 747 failed";
  (* Paths of depth 1 *)
  (* .b99 *)
  let actual = r.b99 in
  let expected = #{ a54 = #{ a31 = #1l; b31 = 2 } } in
  mark_test_run 748;
  let test = (fun #{ a54 = a541 } #{ a54 = a542 } -> (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) a541 a542) actual expected in
  if not test then failwithf "test 748 failed";
  (* Paths of depth 2 *)
  (* .b99.#a54 *)
  let actual = r.b99.#a54 in
  let expected = #{ a31 = #1l; b31 = 2 } in
  mark_test_run 749;
  let test = (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) actual expected in
  if not test then failwithf "test 749 failed";
  (* Paths of depth 3 *)
  (* .b99.#a54.#a31 *)
  let actual = r.b99.#a54.#a31 in
  let expected = #1l in
  mark_test_run 750;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 750 failed";
  (* .b99.#a54.#b31 *)
  let actual = r.b99.#a54.#b31 in
  let expected = 2 in
  mark_test_run 751;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 751 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a99 = a991; b99 = b991 } { a99 = a992; b99 = b992 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a991 a992 && (fun #{ a54 = a541 } #{ a54 = a542 } -> (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) a541 a542) b991 b992) in
  let next_r = { a99 = #100l; b99 = #{ a54 = #{ a31 = #101l; b31 = 102 } } } in
  let r_expected = { a99 = #0l; b99 = #{ a54 = #{ a31 = #1l; b31 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a99 *)
  r.a99 <- next_r.a99;
  let r_expected = { r_expected with a99 = next_r.a99 } in
  mark_test_run 752;
  let test = eq r r_expected in
  if not test then failwithf "test 752 failed";
  Gc.compact ();
  (* .b99 *)
  r.b99 <- next_r.b99;
  let r_expected = { r_expected with b99 = next_r.b99 } in
  mark_test_run 753;
  let test = eq r r_expected in
  if not test then failwithf "test 753 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a99; b99 = #{ a54 = #{ a31; b31 } } } = r in
  let expected_a99 = #100l in
  mark_test_run 754;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a99 a99 in
  if not test then failwithf "test 754 failed";
  let expected_a31 = #101l in
  mark_test_run 755;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a31 a31 in
  if not test then failwithf "test 755 failed";
  let expected_b31 = 102 in
  mark_test_run 756;
  let test = (fun a b -> Int.equal a b) expected_b31 b31 in
  if not test then failwithf "test 756 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a99; b99 } = r in
  let expected_a99 = #100l in
  mark_test_run 757;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a99 a99 in
  if not test then failwithf "test 757 failed";
  let expected_b99 = #{ a54 = #{ a31 = #101l; b31 = 102 } } in
  mark_test_run 758;
  let test = (fun #{ a54 = a541 } #{ a54 = a542 } -> (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) a541 a542) expected_b99 b99 in
  if not test then failwithf "test 758 failed";

  (***************************************************)
  (*   t100 = { int32#; #{ #{ int32#; int32# } } }   *)
  (***************************************************)
  let r = { a100 = #0l; b100 = #{ a56 = #{ a33 = #1l; b33 = #2l } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a100 *)
  let actual = r.a100 in
  let expected = #0l in
  mark_test_run 759;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 759 failed";
  (* Paths of depth 1 *)
  (* .b100 *)
  let actual = r.b100 in
  let expected = #{ a56 = #{ a33 = #1l; b33 = #2l } } in
  mark_test_run 760;
  let test = (fun #{ a56 = a561 } #{ a56 = a562 } -> (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) a561 a562) actual expected in
  if not test then failwithf "test 760 failed";
  (* Paths of depth 2 *)
  (* .b100.#a56 *)
  let actual = r.b100.#a56 in
  let expected = #{ a33 = #1l; b33 = #2l } in
  mark_test_run 761;
  let test = (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) actual expected in
  if not test then failwithf "test 761 failed";
  (* Paths of depth 3 *)
  (* .b100.#a56.#a33 *)
  let actual = r.b100.#a56.#a33 in
  let expected = #1l in
  mark_test_run 762;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 762 failed";
  (* .b100.#a56.#b33 *)
  let actual = r.b100.#a56.#b33 in
  let expected = #2l in
  mark_test_run 763;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 763 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a100 = a1001; b100 = b1001 } { a100 = a1002; b100 = b1002 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a1001 a1002 && (fun #{ a56 = a561 } #{ a56 = a562 } -> (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) a561 a562) b1001 b1002) in
  let next_r = { a100 = #100l; b100 = #{ a56 = #{ a33 = #101l; b33 = #102l } } } in
  let r_expected = { a100 = #0l; b100 = #{ a56 = #{ a33 = #1l; b33 = #2l } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a100 *)
  r.a100 <- next_r.a100;
  let r_expected = { r_expected with a100 = next_r.a100 } in
  mark_test_run 764;
  let test = eq r r_expected in
  if not test then failwithf "test 764 failed";
  Gc.compact ();
  (* .b100 *)
  r.b100 <- next_r.b100;
  let r_expected = { r_expected with b100 = next_r.b100 } in
  mark_test_run 765;
  let test = eq r r_expected in
  if not test then failwithf "test 765 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a100; b100 = #{ a56 = #{ a33; b33 } } } = r in
  let expected_a100 = #100l in
  mark_test_run 766;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a100 a100 in
  if not test then failwithf "test 766 failed";
  let expected_a33 = #101l in
  mark_test_run 767;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a33 a33 in
  if not test then failwithf "test 767 failed";
  let expected_b33 = #102l in
  mark_test_run 768;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b33 b33 in
  if not test then failwithf "test 768 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a100; b100 } = r in
  let expected_a100 = #100l in
  mark_test_run 769;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a100 a100 in
  if not test then failwithf "test 769 failed";
  let expected_b100 = #{ a56 = #{ a33 = #101l; b33 = #102l } } in
  mark_test_run 770;
  let test = (fun #{ a56 = a561 } #{ a56 = a562 } -> (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) a561 a562) expected_b100 b100 in
  if not test then failwithf "test 770 failed";

  (*****************************)
  (*   t101 = { nativeint# }   *)
  (*****************************)
  let r = { a101 = #0n } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a101 *)
  let actual = r.a101 in
  let expected = #0n in
  mark_test_run 771;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 771 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a101 = a1011 } { a101 = a1012 } -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a1011 a1012) in
  let next_r = { a101 = #100n } in
  let r_expected = { a101 = #0n } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a101 *)
  r.a101 <- next_r.a101;
  let r_expected = { r_expected with a101 = next_r.a101 } in
  mark_test_run 772;
  let test = eq r r_expected in
  if not test then failwithf "test 772 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a101 } = r in
  let expected_a101 = #100n in
  mark_test_run 773;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a101 a101 in
  if not test then failwithf "test 773 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a101 } = r in
  let expected_a101 = #100n in
  mark_test_run 774;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a101 a101 in
  if not test then failwithf "test 774 failed";

  (**********************************)
  (*   t102 = { nativeint#; int }   *)
  (**********************************)
  let r = { a102 = #0n; b102 = 1 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a102 *)
  let actual = r.a102 in
  let expected = #0n in
  mark_test_run 775;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 775 failed";
  (* Paths of depth 1 *)
  (* .b102 *)
  let actual = r.b102 in
  let expected = 1 in
  mark_test_run 776;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 776 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a102 = a1021; b102 = b1021 } { a102 = a1022; b102 = b1022 } -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a1021 a1022 && (fun a b -> Int.equal a b) b1021 b1022) in
  let next_r = { a102 = #100n; b102 = 101 } in
  let r_expected = { a102 = #0n; b102 = 1 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a102 *)
  r.a102 <- next_r.a102;
  let r_expected = { r_expected with a102 = next_r.a102 } in
  mark_test_run 777;
  let test = eq r r_expected in
  if not test then failwithf "test 777 failed";
  Gc.compact ();
  (* .b102 *)
  r.b102 <- next_r.b102;
  let r_expected = { r_expected with b102 = next_r.b102 } in
  mark_test_run 778;
  let test = eq r r_expected in
  if not test then failwithf "test 778 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a102; b102 } = r in
  let expected_a102 = #100n in
  mark_test_run 779;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a102 a102 in
  if not test then failwithf "test 779 failed";
  let expected_b102 = 101 in
  mark_test_run 780;
  let test = (fun a b -> Int.equal a b) expected_b102 b102 in
  if not test then failwithf "test 780 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a102; b102 } = r in
  let expected_a102 = #100n in
  mark_test_run 781;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a102 a102 in
  if not test then failwithf "test 781 failed";
  let expected_b102 = 101 in
  mark_test_run 782;
  let test = (fun a b -> Int.equal a b) expected_b102 b102 in
  if not test then failwithf "test 782 failed";

  (************************************)
  (*   t103 = { nativeint#; int64 }   *)
  (************************************)
  let r = { a103 = #0n; b103 = 1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a103 *)
  let actual = r.a103 in
  let expected = #0n in
  mark_test_run 783;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 783 failed";
  (* Paths of depth 1 *)
  (* .b103 *)
  let actual = r.b103 in
  let expected = 1L in
  mark_test_run 784;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 784 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a103 = a1031; b103 = b1031 } { a103 = a1032; b103 = b1032 } -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a1031 a1032 && (fun a b -> Int64.equal (globalize a) (globalize b)) b1031 b1032) in
  let next_r = { a103 = #100n; b103 = 101L } in
  let r_expected = { a103 = #0n; b103 = 1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a103 *)
  r.a103 <- next_r.a103;
  let r_expected = { r_expected with a103 = next_r.a103 } in
  mark_test_run 785;
  let test = eq r r_expected in
  if not test then failwithf "test 785 failed";
  Gc.compact ();
  (* .b103 *)
  r.b103 <- next_r.b103;
  let r_expected = { r_expected with b103 = next_r.b103 } in
  mark_test_run 786;
  let test = eq r r_expected in
  if not test then failwithf "test 786 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a103; b103 } = r in
  let expected_a103 = #100n in
  mark_test_run 787;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a103 a103 in
  if not test then failwithf "test 787 failed";
  let expected_b103 = 101L in
  mark_test_run 788;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b103 b103 in
  if not test then failwithf "test 788 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a103; b103 } = r in
  let expected_a103 = #100n in
  mark_test_run 789;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a103 a103 in
  if not test then failwithf "test 789 failed";
  let expected_b103 = 101L in
  mark_test_run 790;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b103 b103 in
  if not test then failwithf "test 790 failed";

  (*************************************)
  (*   t104 = { nativeint#; int64# }   *)
  (*************************************)
  let r = { a104 = #0n; b104 = #1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a104 *)
  let actual = r.a104 in
  let expected = #0n in
  mark_test_run 791;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 791 failed";
  (* Paths of depth 1 *)
  (* .b104 *)
  let actual = r.b104 in
  let expected = #1L in
  mark_test_run 792;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 792 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a104 = a1041; b104 = b1041 } { a104 = a1042; b104 = b1042 } -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a1041 a1042 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b1041 b1042) in
  let next_r = { a104 = #100n; b104 = #101L } in
  let r_expected = { a104 = #0n; b104 = #1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a104 *)
  r.a104 <- next_r.a104;
  let r_expected = { r_expected with a104 = next_r.a104 } in
  mark_test_run 793;
  let test = eq r r_expected in
  if not test then failwithf "test 793 failed";
  Gc.compact ();
  (* .b104 *)
  r.b104 <- next_r.b104;
  let r_expected = { r_expected with b104 = next_r.b104 } in
  mark_test_run 794;
  let test = eq r r_expected in
  if not test then failwithf "test 794 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a104; b104 } = r in
  let expected_a104 = #100n in
  mark_test_run 795;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a104 a104 in
  if not test then failwithf "test 795 failed";
  let expected_b104 = #101L in
  mark_test_run 796;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b104 b104 in
  if not test then failwithf "test 796 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a104; b104 } = r in
  let expected_a104 = #100n in
  mark_test_run 797;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a104 a104 in
  if not test then failwithf "test 797 failed";
  let expected_b104 = #101L in
  mark_test_run 798;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b104 b104 in
  if not test then failwithf "test 798 failed";

  (*************************************)
  (*   t105 = { nativeint#; int32# }   *)
  (*************************************)
  let r = { a105 = #0n; b105 = #1l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a105 *)
  let actual = r.a105 in
  let expected = #0n in
  mark_test_run 799;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 799 failed";
  (* Paths of depth 1 *)
  (* .b105 *)
  let actual = r.b105 in
  let expected = #1l in
  mark_test_run 800;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 800 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a105 = a1051; b105 = b1051 } { a105 = a1052; b105 = b1052 } -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a1051 a1052 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b1051 b1052) in
  let next_r = { a105 = #100n; b105 = #101l } in
  let r_expected = { a105 = #0n; b105 = #1l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a105 *)
  r.a105 <- next_r.a105;
  let r_expected = { r_expected with a105 = next_r.a105 } in
  mark_test_run 801;
  let test = eq r r_expected in
  if not test then failwithf "test 801 failed";
  Gc.compact ();
  (* .b105 *)
  r.b105 <- next_r.b105;
  let r_expected = { r_expected with b105 = next_r.b105 } in
  mark_test_run 802;
  let test = eq r r_expected in
  if not test then failwithf "test 802 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a105; b105 } = r in
  let expected_a105 = #100n in
  mark_test_run 803;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a105 a105 in
  if not test then failwithf "test 803 failed";
  let expected_b105 = #101l in
  mark_test_run 804;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b105 b105 in
  if not test then failwithf "test 804 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a105; b105 } = r in
  let expected_a105 = #100n in
  mark_test_run 805;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a105 a105 in
  if not test then failwithf "test 805 failed";
  let expected_b105 = #101l in
  mark_test_run 806;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b105 b105 in
  if not test then failwithf "test 806 failed";

  (*****************************************)
  (*   t106 = { nativeint#; nativeint# }   *)
  (*****************************************)
  let r = { a106 = #0n; b106 = #1n } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a106 *)
  let actual = r.a106 in
  let expected = #0n in
  mark_test_run 807;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 807 failed";
  (* Paths of depth 1 *)
  (* .b106 *)
  let actual = r.b106 in
  let expected = #1n in
  mark_test_run 808;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 808 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a106 = a1061; b106 = b1061 } { a106 = a1062; b106 = b1062 } -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a1061 a1062 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b1061 b1062) in
  let next_r = { a106 = #100n; b106 = #101n } in
  let r_expected = { a106 = #0n; b106 = #1n } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a106 *)
  r.a106 <- next_r.a106;
  let r_expected = { r_expected with a106 = next_r.a106 } in
  mark_test_run 809;
  let test = eq r r_expected in
  if not test then failwithf "test 809 failed";
  Gc.compact ();
  (* .b106 *)
  r.b106 <- next_r.b106;
  let r_expected = { r_expected with b106 = next_r.b106 } in
  mark_test_run 810;
  let test = eq r r_expected in
  if not test then failwithf "test 810 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a106; b106 } = r in
  let expected_a106 = #100n in
  mark_test_run 811;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a106 a106 in
  if not test then failwithf "test 811 failed";
  let expected_b106 = #101n in
  mark_test_run 812;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b106 b106 in
  if not test then failwithf "test 812 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a106; b106 } = r in
  let expected_a106 = #100n in
  mark_test_run 813;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a106 a106 in
  if not test then failwithf "test 813 failed";
  let expected_b106 = #101n in
  mark_test_run 814;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b106 b106 in
  if not test then failwithf "test 814 failed";

  (************************************)
  (*   t107 = { nativeint#; float }   *)
  (************************************)
  let r = { a107 = #0n; b107 = 1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a107 *)
  let actual = r.a107 in
  let expected = #0n in
  mark_test_run 815;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 815 failed";
  (* Paths of depth 1 *)
  (* .b107 *)
  let actual = r.b107 in
  let expected = 1. in
  mark_test_run 816;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 816 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a107 = a1071; b107 = b1071 } { a107 = a1072; b107 = b1072 } -> (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) a1071 a1072 && (fun a b -> Float.equal (globalize a) (globalize b)) b1071 b1072) in
  let next_r = { a107 = #100n; b107 = 101. } in
  let r_expected = { a107 = #0n; b107 = 1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a107 *)
  r.a107 <- next_r.a107;
  let r_expected = { r_expected with a107 = next_r.a107 } in
  mark_test_run 817;
  let test = eq r r_expected in
  if not test then failwithf "test 817 failed";
  Gc.compact ();
  (* .b107 *)
  r.b107 <- next_r.b107;
  let r_expected = { r_expected with b107 = next_r.b107 } in
  mark_test_run 818;
  let test = eq r r_expected in
  if not test then failwithf "test 818 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a107; b107 } = r in
  let expected_a107 = #100n in
  mark_test_run 819;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a107 a107 in
  if not test then failwithf "test 819 failed";
  let expected_b107 = 101. in
  mark_test_run 820;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b107 b107 in
  if not test then failwithf "test 820 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a107; b107 } = r in
  let expected_a107 = #100n in
  mark_test_run 821;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_a107 a107 in
  if not test then failwithf "test 821 failed";
  let expected_b107 = 101. in
  mark_test_run 822;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b107 b107 in
  if not test then failwithf "test 822 failed";

  (************************)
  (*   t108 = { float }   *)
  (************************)
  let r = { a108 = 0. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a108 *)
  let actual = r.a108 in
  let expected = 0. in
  mark_test_run 823;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 823 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a108 = a1081 } { a108 = a1082 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1081 a1082) in
  let next_r = { a108 = 100. } in
  let r_expected = { a108 = 0. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a108 *)
  r.a108 <- next_r.a108;
  let r_expected = { r_expected with a108 = next_r.a108 } in
  mark_test_run 824;
  let test = eq r r_expected in
  if not test then failwithf "test 824 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a108 } = r in
  let expected_a108 = 100. in
  mark_test_run 825;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a108 a108 in
  if not test then failwithf "test 825 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a108 } = r in
  let expected_a108 = 100. in
  mark_test_run 826;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a108 a108 in
  if not test then failwithf "test 826 failed";

  (*****************************)
  (*   t109 = { float; int }   *)
  (*****************************)
  let r = { a109 = 0.; b109 = 1 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a109 *)
  let actual = r.a109 in
  let expected = 0. in
  mark_test_run 827;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 827 failed";
  (* Paths of depth 1 *)
  (* .b109 *)
  let actual = r.b109 in
  let expected = 1 in
  mark_test_run 828;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 828 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a109 = a1091; b109 = b1091 } { a109 = a1092; b109 = b1092 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1091 a1092 && (fun a b -> Int.equal a b) b1091 b1092) in
  let next_r = { a109 = 100.; b109 = 101 } in
  let r_expected = { a109 = 0.; b109 = 1 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a109 *)
  r.a109 <- next_r.a109;
  let r_expected = { r_expected with a109 = next_r.a109 } in
  mark_test_run 829;
  let test = eq r r_expected in
  if not test then failwithf "test 829 failed";
  Gc.compact ();
  (* .b109 *)
  r.b109 <- next_r.b109;
  let r_expected = { r_expected with b109 = next_r.b109 } in
  mark_test_run 830;
  let test = eq r r_expected in
  if not test then failwithf "test 830 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a109; b109 } = r in
  let expected_a109 = 100. in
  mark_test_run 831;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a109 a109 in
  if not test then failwithf "test 831 failed";
  let expected_b109 = 101 in
  mark_test_run 832;
  let test = (fun a b -> Int.equal a b) expected_b109 b109 in
  if not test then failwithf "test 832 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a109; b109 } = r in
  let expected_a109 = 100. in
  mark_test_run 833;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a109 a109 in
  if not test then failwithf "test 833 failed";
  let expected_b109 = 101 in
  mark_test_run 834;
  let test = (fun a b -> Int.equal a b) expected_b109 b109 in
  if not test then failwithf "test 834 failed";

  (**********************************)
  (*   t110 = { float; int; int }   *)
  (**********************************)
  let r = { a110 = 0.; b110 = 1; c110 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a110 *)
  let actual = r.a110 in
  let expected = 0. in
  mark_test_run 835;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 835 failed";
  (* Paths of depth 1 *)
  (* .b110 *)
  let actual = r.b110 in
  let expected = 1 in
  mark_test_run 836;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 836 failed";
  (* Paths of depth 1 *)
  (* .c110 *)
  let actual = r.c110 in
  let expected = 2 in
  mark_test_run 837;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 837 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a110 = a1101; b110 = b1101; c110 = c1101 } { a110 = a1102; b110 = b1102; c110 = c1102 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1101 a1102 && (fun a b -> Int.equal a b) b1101 b1102 && (fun a b -> Int.equal a b) c1101 c1102) in
  let next_r = { a110 = 100.; b110 = 101; c110 = 102 } in
  let r_expected = { a110 = 0.; b110 = 1; c110 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a110 *)
  r.a110 <- next_r.a110;
  let r_expected = { r_expected with a110 = next_r.a110 } in
  mark_test_run 838;
  let test = eq r r_expected in
  if not test then failwithf "test 838 failed";
  Gc.compact ();
  (* .b110 *)
  r.b110 <- next_r.b110;
  let r_expected = { r_expected with b110 = next_r.b110 } in
  mark_test_run 839;
  let test = eq r r_expected in
  if not test then failwithf "test 839 failed";
  Gc.compact ();
  (* .c110 *)
  r.c110 <- next_r.c110;
  let r_expected = { r_expected with c110 = next_r.c110 } in
  mark_test_run 840;
  let test = eq r r_expected in
  if not test then failwithf "test 840 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a110; b110; c110 } = r in
  let expected_a110 = 100. in
  mark_test_run 841;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a110 a110 in
  if not test then failwithf "test 841 failed";
  let expected_b110 = 101 in
  mark_test_run 842;
  let test = (fun a b -> Int.equal a b) expected_b110 b110 in
  if not test then failwithf "test 842 failed";
  let expected_c110 = 102 in
  mark_test_run 843;
  let test = (fun a b -> Int.equal a b) expected_c110 c110 in
  if not test then failwithf "test 843 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a110; b110; c110 } = r in
  let expected_a110 = 100. in
  mark_test_run 844;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a110 a110 in
  if not test then failwithf "test 844 failed";
  let expected_b110 = 101 in
  mark_test_run 845;
  let test = (fun a b -> Int.equal a b) expected_b110 b110 in
  if not test then failwithf "test 845 failed";
  let expected_c110 = 102 in
  mark_test_run 846;
  let test = (fun a b -> Int.equal a b) expected_c110 c110 in
  if not test then failwithf "test 846 failed";

  (************************************)
  (*   t111 = { float; int; float }   *)
  (************************************)
  let r = { a111 = 0.; b111 = 1; c111 = 2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a111 *)
  let actual = r.a111 in
  let expected = 0. in
  mark_test_run 847;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 847 failed";
  (* Paths of depth 1 *)
  (* .b111 *)
  let actual = r.b111 in
  let expected = 1 in
  mark_test_run 848;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 848 failed";
  (* Paths of depth 1 *)
  (* .c111 *)
  let actual = r.c111 in
  let expected = 2. in
  mark_test_run 849;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 849 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a111 = a1111; b111 = b1111; c111 = c1111 } { a111 = a1112; b111 = b1112; c111 = c1112 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1111 a1112 && (fun a b -> Int.equal a b) b1111 b1112 && (fun a b -> Float.equal (globalize a) (globalize b)) c1111 c1112) in
  let next_r = { a111 = 100.; b111 = 101; c111 = 102. } in
  let r_expected = { a111 = 0.; b111 = 1; c111 = 2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a111 *)
  r.a111 <- next_r.a111;
  let r_expected = { r_expected with a111 = next_r.a111 } in
  mark_test_run 850;
  let test = eq r r_expected in
  if not test then failwithf "test 850 failed";
  Gc.compact ();
  (* .b111 *)
  r.b111 <- next_r.b111;
  let r_expected = { r_expected with b111 = next_r.b111 } in
  mark_test_run 851;
  let test = eq r r_expected in
  if not test then failwithf "test 851 failed";
  Gc.compact ();
  (* .c111 *)
  r.c111 <- next_r.c111;
  let r_expected = { r_expected with c111 = next_r.c111 } in
  mark_test_run 852;
  let test = eq r r_expected in
  if not test then failwithf "test 852 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a111; b111; c111 } = r in
  let expected_a111 = 100. in
  mark_test_run 853;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a111 a111 in
  if not test then failwithf "test 853 failed";
  let expected_b111 = 101 in
  mark_test_run 854;
  let test = (fun a b -> Int.equal a b) expected_b111 b111 in
  if not test then failwithf "test 854 failed";
  let expected_c111 = 102. in
  mark_test_run 855;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_c111 c111 in
  if not test then failwithf "test 855 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a111; b111; c111 } = r in
  let expected_a111 = 100. in
  mark_test_run 856;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a111 a111 in
  if not test then failwithf "test 856 failed";
  let expected_b111 = 101 in
  mark_test_run 857;
  let test = (fun a b -> Int.equal a b) expected_b111 b111 in
  if not test then failwithf "test 857 failed";
  let expected_c111 = 102. in
  mark_test_run 858;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_c111 c111 in
  if not test then failwithf "test 858 failed";

  (*******************************)
  (*   t112 = { float; int64 }   *)
  (*******************************)
  let r = { a112 = 0.; b112 = 1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a112 *)
  let actual = r.a112 in
  let expected = 0. in
  mark_test_run 859;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 859 failed";
  (* Paths of depth 1 *)
  (* .b112 *)
  let actual = r.b112 in
  let expected = 1L in
  mark_test_run 860;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 860 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a112 = a1121; b112 = b1121 } { a112 = a1122; b112 = b1122 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1121 a1122 && (fun a b -> Int64.equal (globalize a) (globalize b)) b1121 b1122) in
  let next_r = { a112 = 100.; b112 = 101L } in
  let r_expected = { a112 = 0.; b112 = 1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a112 *)
  r.a112 <- next_r.a112;
  let r_expected = { r_expected with a112 = next_r.a112 } in
  mark_test_run 861;
  let test = eq r r_expected in
  if not test then failwithf "test 861 failed";
  Gc.compact ();
  (* .b112 *)
  r.b112 <- next_r.b112;
  let r_expected = { r_expected with b112 = next_r.b112 } in
  mark_test_run 862;
  let test = eq r r_expected in
  if not test then failwithf "test 862 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a112; b112 } = r in
  let expected_a112 = 100. in
  mark_test_run 863;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a112 a112 in
  if not test then failwithf "test 863 failed";
  let expected_b112 = 101L in
  mark_test_run 864;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b112 b112 in
  if not test then failwithf "test 864 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a112; b112 } = r in
  let expected_a112 = 100. in
  mark_test_run 865;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a112 a112 in
  if not test then failwithf "test 865 failed";
  let expected_b112 = 101L in
  mark_test_run 866;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b112 b112 in
  if not test then failwithf "test 866 failed";

  (********************************)
  (*   t113 = { float; int64# }   *)
  (********************************)
  let r = { a113 = 0.; b113 = #1L } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a113 *)
  let actual = r.a113 in
  let expected = 0. in
  mark_test_run 867;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 867 failed";
  (* Paths of depth 1 *)
  (* .b113 *)
  let actual = r.b113 in
  let expected = #1L in
  mark_test_run 868;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 868 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a113 = a1131; b113 = b1131 } { a113 = a1132; b113 = b1132 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1131 a1132 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b1131 b1132) in
  let next_r = { a113 = 100.; b113 = #101L } in
  let r_expected = { a113 = 0.; b113 = #1L } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a113 *)
  r.a113 <- next_r.a113;
  let r_expected = { r_expected with a113 = next_r.a113 } in
  mark_test_run 869;
  let test = eq r r_expected in
  if not test then failwithf "test 869 failed";
  Gc.compact ();
  (* .b113 *)
  r.b113 <- next_r.b113;
  let r_expected = { r_expected with b113 = next_r.b113 } in
  mark_test_run 870;
  let test = eq r r_expected in
  if not test then failwithf "test 870 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a113; b113 } = r in
  let expected_a113 = 100. in
  mark_test_run 871;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a113 a113 in
  if not test then failwithf "test 871 failed";
  let expected_b113 = #101L in
  mark_test_run 872;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b113 b113 in
  if not test then failwithf "test 872 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a113; b113 } = r in
  let expected_a113 = 100. in
  mark_test_run 873;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a113 a113 in
  if not test then failwithf "test 873 failed";
  let expected_b113 = #101L in
  mark_test_run 874;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b113 b113 in
  if not test then failwithf "test 874 failed";

  (********************************)
  (*   t114 = { float; int32# }   *)
  (********************************)
  let r = { a114 = 0.; b114 = #1l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a114 *)
  let actual = r.a114 in
  let expected = 0. in
  mark_test_run 875;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 875 failed";
  (* Paths of depth 1 *)
  (* .b114 *)
  let actual = r.b114 in
  let expected = #1l in
  mark_test_run 876;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 876 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a114 = a1141; b114 = b1141 } { a114 = a1142; b114 = b1142 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1141 a1142 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b1141 b1142) in
  let next_r = { a114 = 100.; b114 = #101l } in
  let r_expected = { a114 = 0.; b114 = #1l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a114 *)
  r.a114 <- next_r.a114;
  let r_expected = { r_expected with a114 = next_r.a114 } in
  mark_test_run 877;
  let test = eq r r_expected in
  if not test then failwithf "test 877 failed";
  Gc.compact ();
  (* .b114 *)
  r.b114 <- next_r.b114;
  let r_expected = { r_expected with b114 = next_r.b114 } in
  mark_test_run 878;
  let test = eq r r_expected in
  if not test then failwithf "test 878 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a114; b114 } = r in
  let expected_a114 = 100. in
  mark_test_run 879;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a114 a114 in
  if not test then failwithf "test 879 failed";
  let expected_b114 = #101l in
  mark_test_run 880;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b114 b114 in
  if not test then failwithf "test 880 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a114; b114 } = r in
  let expected_a114 = 100. in
  mark_test_run 881;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a114 a114 in
  if not test then failwithf "test 881 failed";
  let expected_b114 = #101l in
  mark_test_run 882;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b114 b114 in
  if not test then failwithf "test 882 failed";

  (************************************)
  (*   t115 = { float; nativeint# }   *)
  (************************************)
  let r = { a115 = 0.; b115 = #1n } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a115 *)
  let actual = r.a115 in
  let expected = 0. in
  mark_test_run 883;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 883 failed";
  (* Paths of depth 1 *)
  (* .b115 *)
  let actual = r.b115 in
  let expected = #1n in
  mark_test_run 884;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) actual expected in
  if not test then failwithf "test 884 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a115 = a1151; b115 = b1151 } { a115 = a1152; b115 = b1152 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1151 a1152 && (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) b1151 b1152) in
  let next_r = { a115 = 100.; b115 = #101n } in
  let r_expected = { a115 = 0.; b115 = #1n } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a115 *)
  r.a115 <- next_r.a115;
  let r_expected = { r_expected with a115 = next_r.a115 } in
  mark_test_run 885;
  let test = eq r r_expected in
  if not test then failwithf "test 885 failed";
  Gc.compact ();
  (* .b115 *)
  r.b115 <- next_r.b115;
  let r_expected = { r_expected with b115 = next_r.b115 } in
  mark_test_run 886;
  let test = eq r r_expected in
  if not test then failwithf "test 886 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a115; b115 } = r in
  let expected_a115 = 100. in
  mark_test_run 887;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a115 a115 in
  if not test then failwithf "test 887 failed";
  let expected_b115 = #101n in
  mark_test_run 888;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b115 b115 in
  if not test then failwithf "test 888 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a115; b115 } = r in
  let expected_a115 = 100. in
  mark_test_run 889;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a115 a115 in
  if not test then failwithf "test 889 failed";
  let expected_b115 = #101n in
  mark_test_run 890;
  let test = (fun a b -> Nativeint_u.(equal (add #0n a) (add #0n b))) expected_b115 b115 in
  if not test then failwithf "test 890 failed";

  (*******************************)
  (*   t116 = { float; float }   *)
  (*******************************)
  let r = { a116 = 0.; b116 = 1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a116 *)
  let actual = r.a116 in
  let expected = 0. in
  mark_test_run 891;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 891 failed";
  (* Paths of depth 1 *)
  (* .b116 *)
  let actual = r.b116 in
  let expected = 1. in
  mark_test_run 892;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 892 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a116 = a1161; b116 = b1161 } { a116 = a1162; b116 = b1162 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1161 a1162 && (fun a b -> Float.equal (globalize a) (globalize b)) b1161 b1162) in
  let next_r = { a116 = 100.; b116 = 101. } in
  let r_expected = { a116 = 0.; b116 = 1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a116 *)
  r.a116 <- next_r.a116;
  let r_expected = { r_expected with a116 = next_r.a116 } in
  mark_test_run 893;
  let test = eq r r_expected in
  if not test then failwithf "test 893 failed";
  Gc.compact ();
  (* .b116 *)
  r.b116 <- next_r.b116;
  let r_expected = { r_expected with b116 = next_r.b116 } in
  mark_test_run 894;
  let test = eq r r_expected in
  if not test then failwithf "test 894 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a116; b116 } = r in
  let expected_a116 = 100. in
  mark_test_run 895;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a116 a116 in
  if not test then failwithf "test 895 failed";
  let expected_b116 = 101. in
  mark_test_run 896;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b116 b116 in
  if not test then failwithf "test 896 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a116; b116 } = r in
  let expected_a116 = 100. in
  mark_test_run 897;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a116 a116 in
  if not test then failwithf "test 897 failed";
  let expected_b116 = 101. in
  mark_test_run 898;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b116 b116 in
  if not test then failwithf "test 898 failed";

  (************************************)
  (*   t117 = { float; float; int }   *)
  (************************************)
  let r = { a117 = 0.; b117 = 1.; c117 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a117 *)
  let actual = r.a117 in
  let expected = 0. in
  mark_test_run 899;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 899 failed";
  (* Paths of depth 1 *)
  (* .b117 *)
  let actual = r.b117 in
  let expected = 1. in
  mark_test_run 900;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 900 failed";
  (* Paths of depth 1 *)
  (* .c117 *)
  let actual = r.c117 in
  let expected = 2 in
  mark_test_run 901;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 901 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a117 = a1171; b117 = b1171; c117 = c1171 } { a117 = a1172; b117 = b1172; c117 = c1172 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1171 a1172 && (fun a b -> Float.equal (globalize a) (globalize b)) b1171 b1172 && (fun a b -> Int.equal a b) c1171 c1172) in
  let next_r = { a117 = 100.; b117 = 101.; c117 = 102 } in
  let r_expected = { a117 = 0.; b117 = 1.; c117 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a117 *)
  r.a117 <- next_r.a117;
  let r_expected = { r_expected with a117 = next_r.a117 } in
  mark_test_run 902;
  let test = eq r r_expected in
  if not test then failwithf "test 902 failed";
  Gc.compact ();
  (* .b117 *)
  r.b117 <- next_r.b117;
  let r_expected = { r_expected with b117 = next_r.b117 } in
  mark_test_run 903;
  let test = eq r r_expected in
  if not test then failwithf "test 903 failed";
  Gc.compact ();
  (* .c117 *)
  r.c117 <- next_r.c117;
  let r_expected = { r_expected with c117 = next_r.c117 } in
  mark_test_run 904;
  let test = eq r r_expected in
  if not test then failwithf "test 904 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a117; b117; c117 } = r in
  let expected_a117 = 100. in
  mark_test_run 905;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a117 a117 in
  if not test then failwithf "test 905 failed";
  let expected_b117 = 101. in
  mark_test_run 906;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b117 b117 in
  if not test then failwithf "test 906 failed";
  let expected_c117 = 102 in
  mark_test_run 907;
  let test = (fun a b -> Int.equal a b) expected_c117 c117 in
  if not test then failwithf "test 907 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a117; b117; c117 } = r in
  let expected_a117 = 100. in
  mark_test_run 908;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a117 a117 in
  if not test then failwithf "test 908 failed";
  let expected_b117 = 101. in
  mark_test_run 909;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b117 b117 in
  if not test then failwithf "test 909 failed";
  let expected_c117 = 102 in
  mark_test_run 910;
  let test = (fun a b -> Int.equal a b) expected_c117 c117 in
  if not test then failwithf "test 910 failed";

  (**************************************)
  (*   t118 = { float; float; float }   *)
  (**************************************)
  let r = { a118 = 0.; b118 = 1.; c118 = 2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a118 *)
  let actual = r.a118 in
  let expected = 0. in
  mark_test_run 911;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 911 failed";
  (* Paths of depth 1 *)
  (* .b118 *)
  let actual = r.b118 in
  let expected = 1. in
  mark_test_run 912;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 912 failed";
  (* Paths of depth 1 *)
  (* .c118 *)
  let actual = r.c118 in
  let expected = 2. in
  mark_test_run 913;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 913 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a118 = a1181; b118 = b1181; c118 = c1181 } { a118 = a1182; b118 = b1182; c118 = c1182 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1181 a1182 && (fun a b -> Float.equal (globalize a) (globalize b)) b1181 b1182 && (fun a b -> Float.equal (globalize a) (globalize b)) c1181 c1182) in
  let next_r = { a118 = 100.; b118 = 101.; c118 = 102. } in
  let r_expected = { a118 = 0.; b118 = 1.; c118 = 2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a118 *)
  r.a118 <- next_r.a118;
  let r_expected = { r_expected with a118 = next_r.a118 } in
  mark_test_run 914;
  let test = eq r r_expected in
  if not test then failwithf "test 914 failed";
  Gc.compact ();
  (* .b118 *)
  r.b118 <- next_r.b118;
  let r_expected = { r_expected with b118 = next_r.b118 } in
  mark_test_run 915;
  let test = eq r r_expected in
  if not test then failwithf "test 915 failed";
  Gc.compact ();
  (* .c118 *)
  r.c118 <- next_r.c118;
  let r_expected = { r_expected with c118 = next_r.c118 } in
  mark_test_run 916;
  let test = eq r r_expected in
  if not test then failwithf "test 916 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a118; b118; c118 } = r in
  let expected_a118 = 100. in
  mark_test_run 917;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a118 a118 in
  if not test then failwithf "test 917 failed";
  let expected_b118 = 101. in
  mark_test_run 918;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b118 b118 in
  if not test then failwithf "test 918 failed";
  let expected_c118 = 102. in
  mark_test_run 919;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_c118 c118 in
  if not test then failwithf "test 919 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a118; b118; c118 } = r in
  let expected_a118 = 100. in
  mark_test_run 920;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a118 a118 in
  if not test then failwithf "test 920 failed";
  let expected_b118 = 101. in
  mark_test_run 921;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b118 b118 in
  if not test then failwithf "test 921 failed";
  let expected_c118 = 102. in
  mark_test_run 922;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_c118 c118 in
  if not test then failwithf "test 922 failed";

  (***************************************)
  (*   t119 = { float; float; float# }   *)
  (***************************************)
  let r = { a119 = 0.; b119 = 1.; c119 = #2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a119 *)
  let actual = r.a119 in
  let expected = 0. in
  mark_test_run 923;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 923 failed";
  (* Paths of depth 1 *)
  (* .b119 *)
  let actual = r.b119 in
  let expected = 1. in
  mark_test_run 924;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 924 failed";
  (* Paths of depth 1 *)
  (* .c119 *)
  let actual = r.c119 in
  let expected = #2. in
  mark_test_run 925;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 925 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a119 = a1191; b119 = b1191; c119 = c1191 } { a119 = a1192; b119 = b1192; c119 = c1192 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1191 a1192 && (fun a b -> Float.equal (globalize a) (globalize b)) b1191 b1192 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) c1191 c1192) in
  let next_r = { a119 = 100.; b119 = 101.; c119 = #102. } in
  let r_expected = { a119 = 0.; b119 = 1.; c119 = #2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a119 *)
  r.a119 <- next_r.a119;
  let r_expected = { r_expected with a119 = next_r.a119 } in
  mark_test_run 926;
  let test = eq r r_expected in
  if not test then failwithf "test 926 failed";
  Gc.compact ();
  (* .b119 *)
  r.b119 <- next_r.b119;
  let r_expected = { r_expected with b119 = next_r.b119 } in
  mark_test_run 927;
  let test = eq r r_expected in
  if not test then failwithf "test 927 failed";
  Gc.compact ();
  (* .c119 *)
  r.c119 <- next_r.c119;
  let r_expected = { r_expected with c119 = next_r.c119 } in
  mark_test_run 928;
  let test = eq r r_expected in
  if not test then failwithf "test 928 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a119; b119; c119 } = r in
  let expected_a119 = 100. in
  mark_test_run 929;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a119 a119 in
  if not test then failwithf "test 929 failed";
  let expected_b119 = 101. in
  mark_test_run 930;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b119 b119 in
  if not test then failwithf "test 930 failed";
  let expected_c119 = #102. in
  mark_test_run 931;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_c119 c119 in
  if not test then failwithf "test 931 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a119; b119; c119 } = r in
  let expected_a119 = 100. in
  mark_test_run 932;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a119 a119 in
  if not test then failwithf "test 932 failed";
  let expected_b119 = 101. in
  mark_test_run 933;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b119 b119 in
  if not test then failwithf "test 933 failed";
  let expected_c119 = #102. in
  mark_test_run 934;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_c119 c119 in
  if not test then failwithf "test 934 failed";

  (********************************)
  (*   t120 = { float; float# }   *)
  (********************************)
  let r = { a120 = 0.; b120 = #1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a120 *)
  let actual = r.a120 in
  let expected = 0. in
  mark_test_run 935;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 935 failed";
  (* Paths of depth 1 *)
  (* .b120 *)
  let actual = r.b120 in
  let expected = #1. in
  mark_test_run 936;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 936 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a120 = a1201; b120 = b1201 } { a120 = a1202; b120 = b1202 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1201 a1202 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1201 b1202) in
  let next_r = { a120 = 100.; b120 = #101. } in
  let r_expected = { a120 = 0.; b120 = #1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a120 *)
  r.a120 <- next_r.a120;
  let r_expected = { r_expected with a120 = next_r.a120 } in
  mark_test_run 937;
  let test = eq r r_expected in
  if not test then failwithf "test 937 failed";
  Gc.compact ();
  (* .b120 *)
  r.b120 <- next_r.b120;
  let r_expected = { r_expected with b120 = next_r.b120 } in
  mark_test_run 938;
  let test = eq r r_expected in
  if not test then failwithf "test 938 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a120; b120 } = r in
  let expected_a120 = 100. in
  mark_test_run 939;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a120 a120 in
  if not test then failwithf "test 939 failed";
  let expected_b120 = #101. in
  mark_test_run 940;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b120 b120 in
  if not test then failwithf "test 940 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a120; b120 } = r in
  let expected_a120 = 100. in
  mark_test_run 941;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a120 a120 in
  if not test then failwithf "test 941 failed";
  let expected_b120 = #101. in
  mark_test_run 942;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b120 b120 in
  if not test then failwithf "test 942 failed";

  (***************************************)
  (*   t121 = { float; float#; float }   *)
  (***************************************)
  let r = { a121 = 0.; b121 = #1.; c121 = 2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a121 *)
  let actual = r.a121 in
  let expected = 0. in
  mark_test_run 943;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 943 failed";
  (* Paths of depth 1 *)
  (* .b121 *)
  let actual = r.b121 in
  let expected = #1. in
  mark_test_run 944;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 944 failed";
  (* Paths of depth 1 *)
  (* .c121 *)
  let actual = r.c121 in
  let expected = 2. in
  mark_test_run 945;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 945 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a121 = a1211; b121 = b1211; c121 = c1211 } { a121 = a1212; b121 = b1212; c121 = c1212 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1211 a1212 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1211 b1212 && (fun a b -> Float.equal (globalize a) (globalize b)) c1211 c1212) in
  let next_r = { a121 = 100.; b121 = #101.; c121 = 102. } in
  let r_expected = { a121 = 0.; b121 = #1.; c121 = 2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a121 *)
  r.a121 <- next_r.a121;
  let r_expected = { r_expected with a121 = next_r.a121 } in
  mark_test_run 946;
  let test = eq r r_expected in
  if not test then failwithf "test 946 failed";
  Gc.compact ();
  (* .b121 *)
  r.b121 <- next_r.b121;
  let r_expected = { r_expected with b121 = next_r.b121 } in
  mark_test_run 947;
  let test = eq r r_expected in
  if not test then failwithf "test 947 failed";
  Gc.compact ();
  (* .c121 *)
  r.c121 <- next_r.c121;
  let r_expected = { r_expected with c121 = next_r.c121 } in
  mark_test_run 948;
  let test = eq r r_expected in
  if not test then failwithf "test 948 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a121; b121; c121 } = r in
  let expected_a121 = 100. in
  mark_test_run 949;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a121 a121 in
  if not test then failwithf "test 949 failed";
  let expected_b121 = #101. in
  mark_test_run 950;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b121 b121 in
  if not test then failwithf "test 950 failed";
  let expected_c121 = 102. in
  mark_test_run 951;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_c121 c121 in
  if not test then failwithf "test 951 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a121; b121; c121 } = r in
  let expected_a121 = 100. in
  mark_test_run 952;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a121 a121 in
  if not test then failwithf "test 952 failed";
  let expected_b121 = #101. in
  mark_test_run 953;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b121 b121 in
  if not test then failwithf "test 953 failed";
  let expected_c121 = 102. in
  mark_test_run 954;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_c121 c121 in
  if not test then failwithf "test 954 failed";

  (****************************************)
  (*   t122 = { float; float#; float# }   *)
  (****************************************)
  let r = { a122 = 0.; b122 = #1.; c122 = #2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a122 *)
  let actual = r.a122 in
  let expected = 0. in
  mark_test_run 955;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 955 failed";
  (* Paths of depth 1 *)
  (* .b122 *)
  let actual = r.b122 in
  let expected = #1. in
  mark_test_run 956;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 956 failed";
  (* Paths of depth 1 *)
  (* .c122 *)
  let actual = r.c122 in
  let expected = #2. in
  mark_test_run 957;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 957 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a122 = a1221; b122 = b1221; c122 = c1221 } { a122 = a1222; b122 = b1222; c122 = c1222 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1221 a1222 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1221 b1222 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) c1221 c1222) in
  let next_r = { a122 = 100.; b122 = #101.; c122 = #102. } in
  let r_expected = { a122 = 0.; b122 = #1.; c122 = #2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a122 *)
  r.a122 <- next_r.a122;
  let r_expected = { r_expected with a122 = next_r.a122 } in
  mark_test_run 958;
  let test = eq r r_expected in
  if not test then failwithf "test 958 failed";
  Gc.compact ();
  (* .b122 *)
  r.b122 <- next_r.b122;
  let r_expected = { r_expected with b122 = next_r.b122 } in
  mark_test_run 959;
  let test = eq r r_expected in
  if not test then failwithf "test 959 failed";
  Gc.compact ();
  (* .c122 *)
  r.c122 <- next_r.c122;
  let r_expected = { r_expected with c122 = next_r.c122 } in
  mark_test_run 960;
  let test = eq r r_expected in
  if not test then failwithf "test 960 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a122; b122; c122 } = r in
  let expected_a122 = 100. in
  mark_test_run 961;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a122 a122 in
  if not test then failwithf "test 961 failed";
  let expected_b122 = #101. in
  mark_test_run 962;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b122 b122 in
  if not test then failwithf "test 962 failed";
  let expected_c122 = #102. in
  mark_test_run 963;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_c122 c122 in
  if not test then failwithf "test 963 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a122; b122; c122 } = r in
  let expected_a122 = 100. in
  mark_test_run 964;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a122 a122 in
  if not test then failwithf "test 964 failed";
  let expected_b122 = #101. in
  mark_test_run 965;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b122 b122 in
  if not test then failwithf "test 965 failed";
  let expected_c122 = #102. in
  mark_test_run 966;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_c122 c122 in
  if not test then failwithf "test 966 failed";

  (**********************************)
  (*   t123 = { float; #{ int } }   *)
  (**********************************)
  let r = { a123 = 0.; b123 = #{ a14 = 1 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a123 *)
  let actual = r.a123 in
  let expected = 0. in
  mark_test_run 967;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 967 failed";
  (* Paths of depth 1 *)
  (* .b123 *)
  let actual = r.b123 in
  let expected = #{ a14 = 1 } in
  mark_test_run 968;
  let test = (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) actual expected in
  if not test then failwithf "test 968 failed";
  (* Paths of depth 2 *)
  (* .b123.#a14 *)
  let actual = r.b123.#a14 in
  let expected = 1 in
  mark_test_run 969;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 969 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a123 = a1231; b123 = b1231 } { a123 = a1232; b123 = b1232 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1231 a1232 && (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) b1231 b1232) in
  let next_r = { a123 = 100.; b123 = #{ a14 = 101 } } in
  let r_expected = { a123 = 0.; b123 = #{ a14 = 1 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a123 *)
  r.a123 <- next_r.a123;
  let r_expected = { r_expected with a123 = next_r.a123 } in
  mark_test_run 970;
  let test = eq r r_expected in
  if not test then failwithf "test 970 failed";
  Gc.compact ();
  (* .b123 *)
  r.b123 <- next_r.b123;
  let r_expected = { r_expected with b123 = next_r.b123 } in
  mark_test_run 971;
  let test = eq r r_expected in
  if not test then failwithf "test 971 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a123; b123 = #{ a14 } } = r in
  let expected_a123 = 100. in
  mark_test_run 972;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a123 a123 in
  if not test then failwithf "test 972 failed";
  let expected_a14 = 101 in
  mark_test_run 973;
  let test = (fun a b -> Int.equal a b) expected_a14 a14 in
  if not test then failwithf "test 973 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a123; b123 } = r in
  let expected_a123 = 100. in
  mark_test_run 974;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a123 a123 in
  if not test then failwithf "test 974 failed";
  let expected_b123 = #{ a14 = 101 } in
  mark_test_run 975;
  let test = (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) expected_b123 b123 in
  if not test then failwithf "test 975 failed";

  (***************************************)
  (*   t124 = { float; #{ int; int } }   *)
  (***************************************)
  let r = { a124 = 0.; b124 = #{ a16 = 1; b16 = 2 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a124 *)
  let actual = r.a124 in
  let expected = 0. in
  mark_test_run 976;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 976 failed";
  (* Paths of depth 1 *)
  (* .b124 *)
  let actual = r.b124 in
  let expected = #{ a16 = 1; b16 = 2 } in
  mark_test_run 977;
  let test = (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) actual expected in
  if not test then failwithf "test 977 failed";
  (* Paths of depth 2 *)
  (* .b124.#a16 *)
  let actual = r.b124.#a16 in
  let expected = 1 in
  mark_test_run 978;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 978 failed";
  (* .b124.#b16 *)
  let actual = r.b124.#b16 in
  let expected = 2 in
  mark_test_run 979;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 979 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a124 = a1241; b124 = b1241 } { a124 = a1242; b124 = b1242 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1241 a1242 && (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) b1241 b1242) in
  let next_r = { a124 = 100.; b124 = #{ a16 = 101; b16 = 102 } } in
  let r_expected = { a124 = 0.; b124 = #{ a16 = 1; b16 = 2 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a124 *)
  r.a124 <- next_r.a124;
  let r_expected = { r_expected with a124 = next_r.a124 } in
  mark_test_run 980;
  let test = eq r r_expected in
  if not test then failwithf "test 980 failed";
  Gc.compact ();
  (* .b124 *)
  r.b124 <- next_r.b124;
  let r_expected = { r_expected with b124 = next_r.b124 } in
  mark_test_run 981;
  let test = eq r r_expected in
  if not test then failwithf "test 981 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a124; b124 = #{ a16; b16 } } = r in
  let expected_a124 = 100. in
  mark_test_run 982;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a124 a124 in
  if not test then failwithf "test 982 failed";
  let expected_a16 = 101 in
  mark_test_run 983;
  let test = (fun a b -> Int.equal a b) expected_a16 a16 in
  if not test then failwithf "test 983 failed";
  let expected_b16 = 102 in
  mark_test_run 984;
  let test = (fun a b -> Int.equal a b) expected_b16 b16 in
  if not test then failwithf "test 984 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a124; b124 } = r in
  let expected_a124 = 100. in
  mark_test_run 985;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a124 a124 in
  if not test then failwithf "test 985 failed";
  let expected_b124 = #{ a16 = 101; b16 = 102 } in
  mark_test_run 986;
  let test = (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) expected_b124 b124 in
  if not test then failwithf "test 986 failed";

  (*****************************************)
  (*   t125 = { float; #{ int; float } }   *)
  (*****************************************)
  let r = { a125 = 0.; b125 = #{ a20 = 1; b20 = 2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a125 *)
  let actual = r.a125 in
  let expected = 0. in
  mark_test_run 987;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 987 failed";
  (* Paths of depth 1 *)
  (* .b125 *)
  let actual = r.b125 in
  let expected = #{ a20 = 1; b20 = 2. } in
  mark_test_run 988;
  let test = (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) actual expected in
  if not test then failwithf "test 988 failed";
  (* Paths of depth 2 *)
  (* .b125.#a20 *)
  let actual = r.b125.#a20 in
  let expected = 1 in
  mark_test_run 989;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 989 failed";
  (* .b125.#b20 *)
  let actual = r.b125.#b20 in
  let expected = 2. in
  mark_test_run 990;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 990 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a125 = a1251; b125 = b1251 } { a125 = a1252; b125 = b1252 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1251 a1252 && (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) b1251 b1252) in
  let next_r = { a125 = 100.; b125 = #{ a20 = 101; b20 = 102. } } in
  let r_expected = { a125 = 0.; b125 = #{ a20 = 1; b20 = 2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a125 *)
  r.a125 <- next_r.a125;
  let r_expected = { r_expected with a125 = next_r.a125 } in
  mark_test_run 991;
  let test = eq r r_expected in
  if not test then failwithf "test 991 failed";
  Gc.compact ();
  (* .b125 *)
  r.b125 <- next_r.b125;
  let r_expected = { r_expected with b125 = next_r.b125 } in
  mark_test_run 992;
  let test = eq r r_expected in
  if not test then failwithf "test 992 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a125; b125 = #{ a20; b20 } } = r in
  let expected_a125 = 100. in
  mark_test_run 993;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a125 a125 in
  if not test then failwithf "test 993 failed";
  let expected_a20 = 101 in
  mark_test_run 994;
  let test = (fun a b -> Int.equal a b) expected_a20 a20 in
  if not test then failwithf "test 994 failed";
  let expected_b20 = 102. in
  mark_test_run 995;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b20 b20 in
  if not test then failwithf "test 995 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a125; b125 } = r in
  let expected_a125 = 100. in
  mark_test_run 996;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a125 a125 in
  if not test then failwithf "test 996 failed";
  let expected_b125 = #{ a20 = 101; b20 = 102. } in
  mark_test_run 997;
  let test = (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) expected_b125 b125 in
  if not test then failwithf "test 997 failed";

  (********************************************)
  (*   t126 = { float; #{ int; #{ int } } }   *)
  (********************************************)
  let r = { a126 = 0.; b126 = #{ a22 = 1; b22 = #{ a14 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a126 *)
  let actual = r.a126 in
  let expected = 0. in
  mark_test_run 998;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 998 failed";
  (* Paths of depth 1 *)
  (* .b126 *)
  let actual = r.b126 in
  let expected = #{ a22 = 1; b22 = #{ a14 = 2 } } in
  mark_test_run 999;
  let test = (fun #{ a22 = a221; b22 = b221 } #{ a22 = a222; b22 = b222 } -> (fun a b -> Int.equal a b) a221 a222 && (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) b221 b222) actual expected in
  if not test then failwithf "test 999 failed";
  (* Paths of depth 2 *)
  (* .b126.#a22 *)
  let actual = r.b126.#a22 in
  let expected = 1 in
  mark_test_run 1000;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1000 failed";
  (* .b126.#b22 *)
  let actual = r.b126.#b22 in
  let expected = #{ a14 = 2 } in
  mark_test_run 1001;
  let test = (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) actual expected in
  if not test then failwithf "test 1001 failed";
  (* Paths of depth 3 *)
  (* .b126.#b22.#a14 *)
  let actual = r.b126.#b22.#a14 in
  let expected = 2 in
  mark_test_run 1002;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1002 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a126 = a1261; b126 = b1261 } { a126 = a1262; b126 = b1262 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1261 a1262 && (fun #{ a22 = a221; b22 = b221 } #{ a22 = a222; b22 = b222 } -> (fun a b -> Int.equal a b) a221 a222 && (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) b221 b222) b1261 b1262) in
  let next_r = { a126 = 100.; b126 = #{ a22 = 101; b22 = #{ a14 = 102 } } } in
  let r_expected = { a126 = 0.; b126 = #{ a22 = 1; b22 = #{ a14 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a126 *)
  r.a126 <- next_r.a126;
  let r_expected = { r_expected with a126 = next_r.a126 } in
  mark_test_run 1003;
  let test = eq r r_expected in
  if not test then failwithf "test 1003 failed";
  Gc.compact ();
  (* .b126 *)
  r.b126 <- next_r.b126;
  let r_expected = { r_expected with b126 = next_r.b126 } in
  mark_test_run 1004;
  let test = eq r r_expected in
  if not test then failwithf "test 1004 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a126; b126 = #{ a22; b22 = #{ a14 } } } = r in
  let expected_a126 = 100. in
  mark_test_run 1005;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a126 a126 in
  if not test then failwithf "test 1005 failed";
  let expected_a22 = 101 in
  mark_test_run 1006;
  let test = (fun a b -> Int.equal a b) expected_a22 a22 in
  if not test then failwithf "test 1006 failed";
  let expected_a14 = 102 in
  mark_test_run 1007;
  let test = (fun a b -> Int.equal a b) expected_a14 a14 in
  if not test then failwithf "test 1007 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a126; b126 } = r in
  let expected_a126 = 100. in
  mark_test_run 1008;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a126 a126 in
  if not test then failwithf "test 1008 failed";
  let expected_b126 = #{ a22 = 101; b22 = #{ a14 = 102 } } in
  mark_test_run 1009;
  let test = (fun #{ a22 = a221; b22 = b221 } #{ a22 = a222; b22 = b222 } -> (fun a b -> Int.equal a b) a221 a222 && (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) b221 b222) expected_b126 b126 in
  if not test then failwithf "test 1009 failed";

  (**********************************************)
  (*   t127 = { float; #{ int; #{ float } } }   *)
  (**********************************************)
  let r = { a127 = 0.; b127 = #{ a28 = 1; b28 = #{ a27 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a127 *)
  let actual = r.a127 in
  let expected = 0. in
  mark_test_run 1010;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1010 failed";
  (* Paths of depth 1 *)
  (* .b127 *)
  let actual = r.b127 in
  let expected = #{ a28 = 1; b28 = #{ a27 = 2. } } in
  mark_test_run 1011;
  let test = (fun #{ a28 = a281; b28 = b281 } #{ a28 = a282; b28 = b282 } -> (fun a b -> Int.equal a b) a281 a282 && (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) b281 b282) actual expected in
  if not test then failwithf "test 1011 failed";
  (* Paths of depth 2 *)
  (* .b127.#a28 *)
  let actual = r.b127.#a28 in
  let expected = 1 in
  mark_test_run 1012;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1012 failed";
  (* .b127.#b28 *)
  let actual = r.b127.#b28 in
  let expected = #{ a27 = 2. } in
  mark_test_run 1013;
  let test = (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) actual expected in
  if not test then failwithf "test 1013 failed";
  (* Paths of depth 3 *)
  (* .b127.#b28.#a27 *)
  let actual = r.b127.#b28.#a27 in
  let expected = 2. in
  mark_test_run 1014;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1014 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a127 = a1271; b127 = b1271 } { a127 = a1272; b127 = b1272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1271 a1272 && (fun #{ a28 = a281; b28 = b281 } #{ a28 = a282; b28 = b282 } -> (fun a b -> Int.equal a b) a281 a282 && (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) b281 b282) b1271 b1272) in
  let next_r = { a127 = 100.; b127 = #{ a28 = 101; b28 = #{ a27 = 102. } } } in
  let r_expected = { a127 = 0.; b127 = #{ a28 = 1; b28 = #{ a27 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a127 *)
  r.a127 <- next_r.a127;
  let r_expected = { r_expected with a127 = next_r.a127 } in
  mark_test_run 1015;
  let test = eq r r_expected in
  if not test then failwithf "test 1015 failed";
  Gc.compact ();
  (* .b127 *)
  r.b127 <- next_r.b127;
  let r_expected = { r_expected with b127 = next_r.b127 } in
  mark_test_run 1016;
  let test = eq r r_expected in
  if not test then failwithf "test 1016 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a127; b127 = #{ a28; b28 = #{ a27 } } } = r in
  let expected_a127 = 100. in
  mark_test_run 1017;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a127 a127 in
  if not test then failwithf "test 1017 failed";
  let expected_a28 = 101 in
  mark_test_run 1018;
  let test = (fun a b -> Int.equal a b) expected_a28 a28 in
  if not test then failwithf "test 1018 failed";
  let expected_a27 = 102. in
  mark_test_run 1019;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a27 a27 in
  if not test then failwithf "test 1019 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a127; b127 } = r in
  let expected_a127 = 100. in
  mark_test_run 1020;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a127 a127 in
  if not test then failwithf "test 1020 failed";
  let expected_b127 = #{ a28 = 101; b28 = #{ a27 = 102. } } in
  mark_test_run 1021;
  let test = (fun #{ a28 = a281; b28 = b281 } #{ a28 = a282; b28 = b282 } -> (fun a b -> Int.equal a b) a281 a282 && (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) b281 b282) expected_b127 b127 in
  if not test then failwithf "test 1021 failed";

  (************************************)
  (*   t128 = { float; #{ float } }   *)
  (************************************)
  let r = { a128 = 0.; b128 = #{ a27 = 1. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a128 *)
  let actual = r.a128 in
  let expected = 0. in
  mark_test_run 1022;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1022 failed";
  (* Paths of depth 1 *)
  (* .b128 *)
  let actual = r.b128 in
  let expected = #{ a27 = 1. } in
  mark_test_run 1023;
  let test = (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) actual expected in
  if not test then failwithf "test 1023 failed";
  (* Paths of depth 2 *)
  (* .b128.#a27 *)
  let actual = r.b128.#a27 in
  let expected = 1. in
  mark_test_run 1024;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1024 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a128 = a1281; b128 = b1281 } { a128 = a1282; b128 = b1282 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1281 a1282 && (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) b1281 b1282) in
  let next_r = { a128 = 100.; b128 = #{ a27 = 101. } } in
  let r_expected = { a128 = 0.; b128 = #{ a27 = 1. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a128 *)
  r.a128 <- next_r.a128;
  let r_expected = { r_expected with a128 = next_r.a128 } in
  mark_test_run 1025;
  let test = eq r r_expected in
  if not test then failwithf "test 1025 failed";
  Gc.compact ();
  (* .b128 *)
  r.b128 <- next_r.b128;
  let r_expected = { r_expected with b128 = next_r.b128 } in
  mark_test_run 1026;
  let test = eq r r_expected in
  if not test then failwithf "test 1026 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a128; b128 = #{ a27 } } = r in
  let expected_a128 = 100. in
  mark_test_run 1027;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a128 a128 in
  if not test then failwithf "test 1027 failed";
  let expected_a27 = 101. in
  mark_test_run 1028;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a27 a27 in
  if not test then failwithf "test 1028 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a128; b128 } = r in
  let expected_a128 = 100. in
  mark_test_run 1029;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a128 a128 in
  if not test then failwithf "test 1029 failed";
  let expected_b128 = #{ a27 = 101. } in
  mark_test_run 1030;
  let test = (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) expected_b128 b128 in
  if not test then failwithf "test 1030 failed";

  (*****************************************)
  (*   t129 = { float; #{ float; int } }   *)
  (*****************************************)
  let r = { a129 = 0.; b129 = #{ a40 = 1.; b40 = 2 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a129 *)
  let actual = r.a129 in
  let expected = 0. in
  mark_test_run 1031;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1031 failed";
  (* Paths of depth 1 *)
  (* .b129 *)
  let actual = r.b129 in
  let expected = #{ a40 = 1.; b40 = 2 } in
  mark_test_run 1032;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) actual expected in
  if not test then failwithf "test 1032 failed";
  (* Paths of depth 2 *)
  (* .b129.#a40 *)
  let actual = r.b129.#a40 in
  let expected = 1. in
  mark_test_run 1033;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1033 failed";
  (* .b129.#b40 *)
  let actual = r.b129.#b40 in
  let expected = 2 in
  mark_test_run 1034;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1034 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a129 = a1291; b129 = b1291 } { a129 = a1292; b129 = b1292 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1291 a1292 && (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) b1291 b1292) in
  let next_r = { a129 = 100.; b129 = #{ a40 = 101.; b40 = 102 } } in
  let r_expected = { a129 = 0.; b129 = #{ a40 = 1.; b40 = 2 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a129 *)
  r.a129 <- next_r.a129;
  let r_expected = { r_expected with a129 = next_r.a129 } in
  mark_test_run 1035;
  let test = eq r r_expected in
  if not test then failwithf "test 1035 failed";
  Gc.compact ();
  (* .b129 *)
  r.b129 <- next_r.b129;
  let r_expected = { r_expected with b129 = next_r.b129 } in
  mark_test_run 1036;
  let test = eq r r_expected in
  if not test then failwithf "test 1036 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a129; b129 = #{ a40; b40 } } = r in
  let expected_a129 = 100. in
  mark_test_run 1037;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a129 a129 in
  if not test then failwithf "test 1037 failed";
  let expected_a40 = 101. in
  mark_test_run 1038;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a40 a40 in
  if not test then failwithf "test 1038 failed";
  let expected_b40 = 102 in
  mark_test_run 1039;
  let test = (fun a b -> Int.equal a b) expected_b40 b40 in
  if not test then failwithf "test 1039 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a129; b129 } = r in
  let expected_a129 = 100. in
  mark_test_run 1040;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a129 a129 in
  if not test then failwithf "test 1040 failed";
  let expected_b129 = #{ a40 = 101.; b40 = 102 } in
  mark_test_run 1041;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) expected_b129 b129 in
  if not test then failwithf "test 1041 failed";

  (*******************************************)
  (*   t130 = { float; #{ float; float } }   *)
  (*******************************************)
  let r = { a130 = 0.; b130 = #{ a42 = 1.; b42 = 2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a130 *)
  let actual = r.a130 in
  let expected = 0. in
  mark_test_run 1042;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1042 failed";
  (* Paths of depth 1 *)
  (* .b130 *)
  let actual = r.b130 in
  let expected = #{ a42 = 1.; b42 = 2. } in
  mark_test_run 1043;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) actual expected in
  if not test then failwithf "test 1043 failed";
  (* Paths of depth 2 *)
  (* .b130.#a42 *)
  let actual = r.b130.#a42 in
  let expected = 1. in
  mark_test_run 1044;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1044 failed";
  (* .b130.#b42 *)
  let actual = r.b130.#b42 in
  let expected = 2. in
  mark_test_run 1045;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1045 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a130 = a1301; b130 = b1301 } { a130 = a1302; b130 = b1302 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1301 a1302 && (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) b1301 b1302) in
  let next_r = { a130 = 100.; b130 = #{ a42 = 101.; b42 = 102. } } in
  let r_expected = { a130 = 0.; b130 = #{ a42 = 1.; b42 = 2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a130 *)
  r.a130 <- next_r.a130;
  let r_expected = { r_expected with a130 = next_r.a130 } in
  mark_test_run 1046;
  let test = eq r r_expected in
  if not test then failwithf "test 1046 failed";
  Gc.compact ();
  (* .b130 *)
  r.b130 <- next_r.b130;
  let r_expected = { r_expected with b130 = next_r.b130 } in
  mark_test_run 1047;
  let test = eq r r_expected in
  if not test then failwithf "test 1047 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a130; b130 = #{ a42; b42 } } = r in
  let expected_a130 = 100. in
  mark_test_run 1048;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a130 a130 in
  if not test then failwithf "test 1048 failed";
  let expected_a42 = 101. in
  mark_test_run 1049;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a42 a42 in
  if not test then failwithf "test 1049 failed";
  let expected_b42 = 102. in
  mark_test_run 1050;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b42 b42 in
  if not test then failwithf "test 1050 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a130; b130 } = r in
  let expected_a130 = 100. in
  mark_test_run 1051;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a130 a130 in
  if not test then failwithf "test 1051 failed";
  let expected_b130 = #{ a42 = 101.; b42 = 102. } in
  mark_test_run 1052;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) expected_b130 b130 in
  if not test then failwithf "test 1052 failed";

  (********************************************)
  (*   t132 = { float; #{ float; float# } }   *)
  (********************************************)
  let r = { a132 = 0.; b132 = #{ a131 = 1.; b131 = #2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a132 *)
  let actual = r.a132 in
  let expected = 0. in
  mark_test_run 1053;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1053 failed";
  (* Paths of depth 1 *)
  (* .b132 *)
  let actual = r.b132 in
  let expected = #{ a131 = 1.; b131 = #2. } in
  mark_test_run 1054;
  let test = (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) actual expected in
  if not test then failwithf "test 1054 failed";
  (* Paths of depth 2 *)
  (* .b132.#a131 *)
  let actual = r.b132.#a131 in
  let expected = 1. in
  mark_test_run 1055;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1055 failed";
  (* .b132.#b131 *)
  let actual = r.b132.#b131 in
  let expected = #2. in
  mark_test_run 1056;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1056 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a132 = a1321; b132 = b1321 } { a132 = a1322; b132 = b1322 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1321 a1322 && (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) b1321 b1322) in
  let next_r = { a132 = 100.; b132 = #{ a131 = 101.; b131 = #102. } } in
  let r_expected = { a132 = 0.; b132 = #{ a131 = 1.; b131 = #2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a132 *)
  r.a132 <- next_r.a132;
  let r_expected = { r_expected with a132 = next_r.a132 } in
  mark_test_run 1057;
  let test = eq r r_expected in
  if not test then failwithf "test 1057 failed";
  Gc.compact ();
  (* .b132 *)
  r.b132 <- next_r.b132;
  let r_expected = { r_expected with b132 = next_r.b132 } in
  mark_test_run 1058;
  let test = eq r r_expected in
  if not test then failwithf "test 1058 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a132; b132 = #{ a131; b131 } } = r in
  let expected_a132 = 100. in
  mark_test_run 1059;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a132 a132 in
  if not test then failwithf "test 1059 failed";
  let expected_a131 = 101. in
  mark_test_run 1060;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a131 a131 in
  if not test then failwithf "test 1060 failed";
  let expected_b131 = #102. in
  mark_test_run 1061;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b131 b131 in
  if not test then failwithf "test 1061 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a132; b132 } = r in
  let expected_a132 = 100. in
  mark_test_run 1062;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a132 a132 in
  if not test then failwithf "test 1062 failed";
  let expected_b132 = #{ a131 = 101.; b131 = #102. } in
  mark_test_run 1063;
  let test = (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) expected_b132 b132 in
  if not test then failwithf "test 1063 failed";

  (**********************************************)
  (*   t133 = { float; #{ float; #{ int } } }   *)
  (**********************************************)
  let r = { a133 = 0.; b133 = #{ a44 = 1.; b44 = #{ a14 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a133 *)
  let actual = r.a133 in
  let expected = 0. in
  mark_test_run 1064;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1064 failed";
  (* Paths of depth 1 *)
  (* .b133 *)
  let actual = r.b133 in
  let expected = #{ a44 = 1.; b44 = #{ a14 = 2 } } in
  mark_test_run 1065;
  let test = (fun #{ a44 = a441; b44 = b441 } #{ a44 = a442; b44 = b442 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a441 a442 && (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) b441 b442) actual expected in
  if not test then failwithf "test 1065 failed";
  (* Paths of depth 2 *)
  (* .b133.#a44 *)
  let actual = r.b133.#a44 in
  let expected = 1. in
  mark_test_run 1066;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1066 failed";
  (* .b133.#b44 *)
  let actual = r.b133.#b44 in
  let expected = #{ a14 = 2 } in
  mark_test_run 1067;
  let test = (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) actual expected in
  if not test then failwithf "test 1067 failed";
  (* Paths of depth 3 *)
  (* .b133.#b44.#a14 *)
  let actual = r.b133.#b44.#a14 in
  let expected = 2 in
  mark_test_run 1068;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1068 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a133 = a1331; b133 = b1331 } { a133 = a1332; b133 = b1332 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1331 a1332 && (fun #{ a44 = a441; b44 = b441 } #{ a44 = a442; b44 = b442 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a441 a442 && (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) b441 b442) b1331 b1332) in
  let next_r = { a133 = 100.; b133 = #{ a44 = 101.; b44 = #{ a14 = 102 } } } in
  let r_expected = { a133 = 0.; b133 = #{ a44 = 1.; b44 = #{ a14 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a133 *)
  r.a133 <- next_r.a133;
  let r_expected = { r_expected with a133 = next_r.a133 } in
  mark_test_run 1069;
  let test = eq r r_expected in
  if not test then failwithf "test 1069 failed";
  Gc.compact ();
  (* .b133 *)
  r.b133 <- next_r.b133;
  let r_expected = { r_expected with b133 = next_r.b133 } in
  mark_test_run 1070;
  let test = eq r r_expected in
  if not test then failwithf "test 1070 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a133; b133 = #{ a44; b44 = #{ a14 } } } = r in
  let expected_a133 = 100. in
  mark_test_run 1071;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a133 a133 in
  if not test then failwithf "test 1071 failed";
  let expected_a44 = 101. in
  mark_test_run 1072;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a44 a44 in
  if not test then failwithf "test 1072 failed";
  let expected_a14 = 102 in
  mark_test_run 1073;
  let test = (fun a b -> Int.equal a b) expected_a14 a14 in
  if not test then failwithf "test 1073 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a133; b133 } = r in
  let expected_a133 = 100. in
  mark_test_run 1074;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a133 a133 in
  if not test then failwithf "test 1074 failed";
  let expected_b133 = #{ a44 = 101.; b44 = #{ a14 = 102 } } in
  mark_test_run 1075;
  let test = (fun #{ a44 = a441; b44 = b441 } #{ a44 = a442; b44 = b442 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a441 a442 && (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) b441 b442) expected_b133 b133 in
  if not test then failwithf "test 1075 failed";

  (************************************************)
  (*   t134 = { float; #{ float; #{ float } } }   *)
  (************************************************)
  let r = { a134 = 0.; b134 = #{ a46 = 1.; b46 = #{ a27 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a134 *)
  let actual = r.a134 in
  let expected = 0. in
  mark_test_run 1076;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1076 failed";
  (* Paths of depth 1 *)
  (* .b134 *)
  let actual = r.b134 in
  let expected = #{ a46 = 1.; b46 = #{ a27 = 2. } } in
  mark_test_run 1077;
  let test = (fun #{ a46 = a461; b46 = b461 } #{ a46 = a462; b46 = b462 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a461 a462 && (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) b461 b462) actual expected in
  if not test then failwithf "test 1077 failed";
  (* Paths of depth 2 *)
  (* .b134.#a46 *)
  let actual = r.b134.#a46 in
  let expected = 1. in
  mark_test_run 1078;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1078 failed";
  (* .b134.#b46 *)
  let actual = r.b134.#b46 in
  let expected = #{ a27 = 2. } in
  mark_test_run 1079;
  let test = (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) actual expected in
  if not test then failwithf "test 1079 failed";
  (* Paths of depth 3 *)
  (* .b134.#b46.#a27 *)
  let actual = r.b134.#b46.#a27 in
  let expected = 2. in
  mark_test_run 1080;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1080 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a134 = a1341; b134 = b1341 } { a134 = a1342; b134 = b1342 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1341 a1342 && (fun #{ a46 = a461; b46 = b461 } #{ a46 = a462; b46 = b462 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a461 a462 && (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) b461 b462) b1341 b1342) in
  let next_r = { a134 = 100.; b134 = #{ a46 = 101.; b46 = #{ a27 = 102. } } } in
  let r_expected = { a134 = 0.; b134 = #{ a46 = 1.; b46 = #{ a27 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a134 *)
  r.a134 <- next_r.a134;
  let r_expected = { r_expected with a134 = next_r.a134 } in
  mark_test_run 1081;
  let test = eq r r_expected in
  if not test then failwithf "test 1081 failed";
  Gc.compact ();
  (* .b134 *)
  r.b134 <- next_r.b134;
  let r_expected = { r_expected with b134 = next_r.b134 } in
  mark_test_run 1082;
  let test = eq r r_expected in
  if not test then failwithf "test 1082 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a134; b134 = #{ a46; b46 = #{ a27 } } } = r in
  let expected_a134 = 100. in
  mark_test_run 1083;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a134 a134 in
  if not test then failwithf "test 1083 failed";
  let expected_a46 = 101. in
  mark_test_run 1084;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a46 a46 in
  if not test then failwithf "test 1084 failed";
  let expected_a27 = 102. in
  mark_test_run 1085;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a27 a27 in
  if not test then failwithf "test 1085 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a134; b134 } = r in
  let expected_a134 = 100. in
  mark_test_run 1086;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a134 a134 in
  if not test then failwithf "test 1086 failed";
  let expected_b134 = #{ a46 = 101.; b46 = #{ a27 = 102. } } in
  mark_test_run 1087;
  let test = (fun #{ a46 = a461; b46 = b461 } #{ a46 = a462; b46 = b462 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a461 a462 && (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) b461 b462) expected_b134 b134 in
  if not test then failwithf "test 1087 failed";

  (*************************************************)
  (*   t137 = { float; #{ float; #{ float# } } }   *)
  (*************************************************)
  let r = { a137 = 0.; b137 = #{ a136 = 1.; b136 = #{ a135 = #2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a137 *)
  let actual = r.a137 in
  let expected = 0. in
  mark_test_run 1088;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1088 failed";
  (* Paths of depth 1 *)
  (* .b137 *)
  let actual = r.b137 in
  let expected = #{ a136 = 1.; b136 = #{ a135 = #2. } } in
  mark_test_run 1089;
  let test = (fun #{ a136 = a1361; b136 = b1361 } #{ a136 = a1362; b136 = b1362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1361 a1362 && (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) b1361 b1362) actual expected in
  if not test then failwithf "test 1089 failed";
  (* Paths of depth 2 *)
  (* .b137.#a136 *)
  let actual = r.b137.#a136 in
  let expected = 1. in
  mark_test_run 1090;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1090 failed";
  (* .b137.#b136 *)
  let actual = r.b137.#b136 in
  let expected = #{ a135 = #2. } in
  mark_test_run 1091;
  let test = (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) actual expected in
  if not test then failwithf "test 1091 failed";
  (* Paths of depth 3 *)
  (* .b137.#b136.#a135 *)
  let actual = r.b137.#b136.#a135 in
  let expected = #2. in
  mark_test_run 1092;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1092 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a137 = a1371; b137 = b1371 } { a137 = a1372; b137 = b1372 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1371 a1372 && (fun #{ a136 = a1361; b136 = b1361 } #{ a136 = a1362; b136 = b1362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1361 a1362 && (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) b1361 b1362) b1371 b1372) in
  let next_r = { a137 = 100.; b137 = #{ a136 = 101.; b136 = #{ a135 = #102. } } } in
  let r_expected = { a137 = 0.; b137 = #{ a136 = 1.; b136 = #{ a135 = #2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a137 *)
  r.a137 <- next_r.a137;
  let r_expected = { r_expected with a137 = next_r.a137 } in
  mark_test_run 1093;
  let test = eq r r_expected in
  if not test then failwithf "test 1093 failed";
  Gc.compact ();
  (* .b137 *)
  r.b137 <- next_r.b137;
  let r_expected = { r_expected with b137 = next_r.b137 } in
  mark_test_run 1094;
  let test = eq r r_expected in
  if not test then failwithf "test 1094 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a137; b137 = #{ a136; b136 = #{ a135 } } } = r in
  let expected_a137 = 100. in
  mark_test_run 1095;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a137 a137 in
  if not test then failwithf "test 1095 failed";
  let expected_a136 = 101. in
  mark_test_run 1096;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a136 a136 in
  if not test then failwithf "test 1096 failed";
  let expected_a135 = #102. in
  mark_test_run 1097;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a135 a135 in
  if not test then failwithf "test 1097 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a137; b137 } = r in
  let expected_a137 = 100. in
  mark_test_run 1098;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a137 a137 in
  if not test then failwithf "test 1098 failed";
  let expected_b137 = #{ a136 = 101.; b136 = #{ a135 = #102. } } in
  mark_test_run 1099;
  let test = (fun #{ a136 = a1361; b136 = b1361 } #{ a136 = a1362; b136 = b1362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1361 a1362 && (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) b1361 b1362) expected_b137 b137 in
  if not test then failwithf "test 1099 failed";

  (*************************************)
  (*   t138 = { float; #{ float# } }   *)
  (*************************************)
  let r = { a138 = 0.; b138 = #{ a135 = #1. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a138 *)
  let actual = r.a138 in
  let expected = 0. in
  mark_test_run 1100;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1100 failed";
  (* Paths of depth 1 *)
  (* .b138 *)
  let actual = r.b138 in
  let expected = #{ a135 = #1. } in
  mark_test_run 1101;
  let test = (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) actual expected in
  if not test then failwithf "test 1101 failed";
  (* Paths of depth 2 *)
  (* .b138.#a135 *)
  let actual = r.b138.#a135 in
  let expected = #1. in
  mark_test_run 1102;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1102 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a138 = a1381; b138 = b1381 } { a138 = a1382; b138 = b1382 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1381 a1382 && (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) b1381 b1382) in
  let next_r = { a138 = 100.; b138 = #{ a135 = #101. } } in
  let r_expected = { a138 = 0.; b138 = #{ a135 = #1. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a138 *)
  r.a138 <- next_r.a138;
  let r_expected = { r_expected with a138 = next_r.a138 } in
  mark_test_run 1103;
  let test = eq r r_expected in
  if not test then failwithf "test 1103 failed";
  Gc.compact ();
  (* .b138 *)
  r.b138 <- next_r.b138;
  let r_expected = { r_expected with b138 = next_r.b138 } in
  mark_test_run 1104;
  let test = eq r r_expected in
  if not test then failwithf "test 1104 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a138; b138 = #{ a135 } } = r in
  let expected_a138 = 100. in
  mark_test_run 1105;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a138 a138 in
  if not test then failwithf "test 1105 failed";
  let expected_a135 = #101. in
  mark_test_run 1106;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a135 a135 in
  if not test then failwithf "test 1106 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a138; b138 } = r in
  let expected_a138 = 100. in
  mark_test_run 1107;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a138 a138 in
  if not test then failwithf "test 1107 failed";
  let expected_b138 = #{ a135 = #101. } in
  mark_test_run 1108;
  let test = (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) expected_b138 b138 in
  if not test then failwithf "test 1108 failed";

  (********************************************)
  (*   t140 = { float; #{ float#; float } }   *)
  (********************************************)
  let r = { a140 = 0.; b140 = #{ a139 = #1.; b139 = 2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a140 *)
  let actual = r.a140 in
  let expected = 0. in
  mark_test_run 1109;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1109 failed";
  (* Paths of depth 1 *)
  (* .b140 *)
  let actual = r.b140 in
  let expected = #{ a139 = #1.; b139 = 2. } in
  mark_test_run 1110;
  let test = (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) actual expected in
  if not test then failwithf "test 1110 failed";
  (* Paths of depth 2 *)
  (* .b140.#a139 *)
  let actual = r.b140.#a139 in
  let expected = #1. in
  mark_test_run 1111;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1111 failed";
  (* .b140.#b139 *)
  let actual = r.b140.#b139 in
  let expected = 2. in
  mark_test_run 1112;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1112 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a140 = a1401; b140 = b1401 } { a140 = a1402; b140 = b1402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1401 a1402 && (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) b1401 b1402) in
  let next_r = { a140 = 100.; b140 = #{ a139 = #101.; b139 = 102. } } in
  let r_expected = { a140 = 0.; b140 = #{ a139 = #1.; b139 = 2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a140 *)
  r.a140 <- next_r.a140;
  let r_expected = { r_expected with a140 = next_r.a140 } in
  mark_test_run 1113;
  let test = eq r r_expected in
  if not test then failwithf "test 1113 failed";
  Gc.compact ();
  (* .b140 *)
  r.b140 <- next_r.b140;
  let r_expected = { r_expected with b140 = next_r.b140 } in
  mark_test_run 1114;
  let test = eq r r_expected in
  if not test then failwithf "test 1114 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a140; b140 = #{ a139; b139 } } = r in
  let expected_a140 = 100. in
  mark_test_run 1115;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a140 a140 in
  if not test then failwithf "test 1115 failed";
  let expected_a139 = #101. in
  mark_test_run 1116;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a139 a139 in
  if not test then failwithf "test 1116 failed";
  let expected_b139 = 102. in
  mark_test_run 1117;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b139 b139 in
  if not test then failwithf "test 1117 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a140; b140 } = r in
  let expected_a140 = 100. in
  mark_test_run 1118;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a140 a140 in
  if not test then failwithf "test 1118 failed";
  let expected_b140 = #{ a139 = #101.; b139 = 102. } in
  mark_test_run 1119;
  let test = (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) expected_b140 b140 in
  if not test then failwithf "test 1119 failed";

  (*********************************************)
  (*   t142 = { float; #{ float#; float# } }   *)
  (*********************************************)
  let r = { a142 = 0.; b142 = #{ a141 = #1.; b141 = #2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a142 *)
  let actual = r.a142 in
  let expected = 0. in
  mark_test_run 1120;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1120 failed";
  (* Paths of depth 1 *)
  (* .b142 *)
  let actual = r.b142 in
  let expected = #{ a141 = #1.; b141 = #2. } in
  mark_test_run 1121;
  let test = (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) actual expected in
  if not test then failwithf "test 1121 failed";
  (* Paths of depth 2 *)
  (* .b142.#a141 *)
  let actual = r.b142.#a141 in
  let expected = #1. in
  mark_test_run 1122;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1122 failed";
  (* .b142.#b141 *)
  let actual = r.b142.#b141 in
  let expected = #2. in
  mark_test_run 1123;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1123 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a142 = a1421; b142 = b1421 } { a142 = a1422; b142 = b1422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1421 a1422 && (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) b1421 b1422) in
  let next_r = { a142 = 100.; b142 = #{ a141 = #101.; b141 = #102. } } in
  let r_expected = { a142 = 0.; b142 = #{ a141 = #1.; b141 = #2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a142 *)
  r.a142 <- next_r.a142;
  let r_expected = { r_expected with a142 = next_r.a142 } in
  mark_test_run 1124;
  let test = eq r r_expected in
  if not test then failwithf "test 1124 failed";
  Gc.compact ();
  (* .b142 *)
  r.b142 <- next_r.b142;
  let r_expected = { r_expected with b142 = next_r.b142 } in
  mark_test_run 1125;
  let test = eq r r_expected in
  if not test then failwithf "test 1125 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a142; b142 = #{ a141; b141 } } = r in
  let expected_a142 = 100. in
  mark_test_run 1126;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a142 a142 in
  if not test then failwithf "test 1126 failed";
  let expected_a141 = #101. in
  mark_test_run 1127;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a141 a141 in
  if not test then failwithf "test 1127 failed";
  let expected_b141 = #102. in
  mark_test_run 1128;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b141 b141 in
  if not test then failwithf "test 1128 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a142; b142 } = r in
  let expected_a142 = 100. in
  mark_test_run 1129;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a142 a142 in
  if not test then failwithf "test 1129 failed";
  let expected_b142 = #{ a141 = #101.; b141 = #102. } in
  mark_test_run 1130;
  let test = (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) expected_b142 b142 in
  if not test then failwithf "test 1130 failed";

  (*************************************************)
  (*   t144 = { float; #{ float#; #{ float } } }   *)
  (*************************************************)
  let r = { a144 = 0.; b144 = #{ a143 = #1.; b143 = #{ a27 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a144 *)
  let actual = r.a144 in
  let expected = 0. in
  mark_test_run 1131;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1131 failed";
  (* Paths of depth 1 *)
  (* .b144 *)
  let actual = r.b144 in
  let expected = #{ a143 = #1.; b143 = #{ a27 = 2. } } in
  mark_test_run 1132;
  let test = (fun #{ a143 = a1431; b143 = b1431 } #{ a143 = a1432; b143 = b1432 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1431 a1432 && (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) b1431 b1432) actual expected in
  if not test then failwithf "test 1132 failed";
  (* Paths of depth 2 *)
  (* .b144.#a143 *)
  let actual = r.b144.#a143 in
  let expected = #1. in
  mark_test_run 1133;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1133 failed";
  (* .b144.#b143 *)
  let actual = r.b144.#b143 in
  let expected = #{ a27 = 2. } in
  mark_test_run 1134;
  let test = (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) actual expected in
  if not test then failwithf "test 1134 failed";
  (* Paths of depth 3 *)
  (* .b144.#b143.#a27 *)
  let actual = r.b144.#b143.#a27 in
  let expected = 2. in
  mark_test_run 1135;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1135 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a144 = a1441; b144 = b1441 } { a144 = a1442; b144 = b1442 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1441 a1442 && (fun #{ a143 = a1431; b143 = b1431 } #{ a143 = a1432; b143 = b1432 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1431 a1432 && (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) b1431 b1432) b1441 b1442) in
  let next_r = { a144 = 100.; b144 = #{ a143 = #101.; b143 = #{ a27 = 102. } } } in
  let r_expected = { a144 = 0.; b144 = #{ a143 = #1.; b143 = #{ a27 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a144 *)
  r.a144 <- next_r.a144;
  let r_expected = { r_expected with a144 = next_r.a144 } in
  mark_test_run 1136;
  let test = eq r r_expected in
  if not test then failwithf "test 1136 failed";
  Gc.compact ();
  (* .b144 *)
  r.b144 <- next_r.b144;
  let r_expected = { r_expected with b144 = next_r.b144 } in
  mark_test_run 1137;
  let test = eq r r_expected in
  if not test then failwithf "test 1137 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a144; b144 = #{ a143; b143 = #{ a27 } } } = r in
  let expected_a144 = 100. in
  mark_test_run 1138;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a144 a144 in
  if not test then failwithf "test 1138 failed";
  let expected_a143 = #101. in
  mark_test_run 1139;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a143 a143 in
  if not test then failwithf "test 1139 failed";
  let expected_a27 = 102. in
  mark_test_run 1140;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a27 a27 in
  if not test then failwithf "test 1140 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a144; b144 } = r in
  let expected_a144 = 100. in
  mark_test_run 1141;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a144 a144 in
  if not test then failwithf "test 1141 failed";
  let expected_b144 = #{ a143 = #101.; b143 = #{ a27 = 102. } } in
  mark_test_run 1142;
  let test = (fun #{ a143 = a1431; b143 = b1431 } #{ a143 = a1432; b143 = b1432 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1431 a1432 && (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) b1431 b1432) expected_b144 b144 in
  if not test then failwithf "test 1142 failed";

  (**************************************************)
  (*   t146 = { float; #{ float#; #{ float# } } }   *)
  (**************************************************)
  let r = { a146 = 0.; b146 = #{ a145 = #1.; b145 = #{ a135 = #2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a146 *)
  let actual = r.a146 in
  let expected = 0. in
  mark_test_run 1143;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1143 failed";
  (* Paths of depth 1 *)
  (* .b146 *)
  let actual = r.b146 in
  let expected = #{ a145 = #1.; b145 = #{ a135 = #2. } } in
  mark_test_run 1144;
  let test = (fun #{ a145 = a1451; b145 = b1451 } #{ a145 = a1452; b145 = b1452 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1451 a1452 && (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) b1451 b1452) actual expected in
  if not test then failwithf "test 1144 failed";
  (* Paths of depth 2 *)
  (* .b146.#a145 *)
  let actual = r.b146.#a145 in
  let expected = #1. in
  mark_test_run 1145;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1145 failed";
  (* .b146.#b145 *)
  let actual = r.b146.#b145 in
  let expected = #{ a135 = #2. } in
  mark_test_run 1146;
  let test = (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) actual expected in
  if not test then failwithf "test 1146 failed";
  (* Paths of depth 3 *)
  (* .b146.#b145.#a135 *)
  let actual = r.b146.#b145.#a135 in
  let expected = #2. in
  mark_test_run 1147;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1147 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a146 = a1461; b146 = b1461 } { a146 = a1462; b146 = b1462 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1461 a1462 && (fun #{ a145 = a1451; b145 = b1451 } #{ a145 = a1452; b145 = b1452 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1451 a1452 && (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) b1451 b1452) b1461 b1462) in
  let next_r = { a146 = 100.; b146 = #{ a145 = #101.; b145 = #{ a135 = #102. } } } in
  let r_expected = { a146 = 0.; b146 = #{ a145 = #1.; b145 = #{ a135 = #2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a146 *)
  r.a146 <- next_r.a146;
  let r_expected = { r_expected with a146 = next_r.a146 } in
  mark_test_run 1148;
  let test = eq r r_expected in
  if not test then failwithf "test 1148 failed";
  Gc.compact ();
  (* .b146 *)
  r.b146 <- next_r.b146;
  let r_expected = { r_expected with b146 = next_r.b146 } in
  mark_test_run 1149;
  let test = eq r r_expected in
  if not test then failwithf "test 1149 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a146; b146 = #{ a145; b145 = #{ a135 } } } = r in
  let expected_a146 = 100. in
  mark_test_run 1150;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a146 a146 in
  if not test then failwithf "test 1150 failed";
  let expected_a145 = #101. in
  mark_test_run 1151;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a145 a145 in
  if not test then failwithf "test 1151 failed";
  let expected_a135 = #102. in
  mark_test_run 1152;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a135 a135 in
  if not test then failwithf "test 1152 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a146; b146 } = r in
  let expected_a146 = 100. in
  mark_test_run 1153;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a146 a146 in
  if not test then failwithf "test 1153 failed";
  let expected_b146 = #{ a145 = #101.; b145 = #{ a135 = #102. } } in
  mark_test_run 1154;
  let test = (fun #{ a145 = a1451; b145 = b1451 } #{ a145 = a1452; b145 = b1452 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1451 a1452 && (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) b1451 b1452) expected_b146 b146 in
  if not test then failwithf "test 1154 failed";

  (********************************************)
  (*   t147 = { float; #{ #{ int; int } } }   *)
  (********************************************)
  let r = { a147 = 0.; b147 = #{ a48 = #{ a16 = 1; b16 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a147 *)
  let actual = r.a147 in
  let expected = 0. in
  mark_test_run 1155;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1155 failed";
  (* Paths of depth 1 *)
  (* .b147 *)
  let actual = r.b147 in
  let expected = #{ a48 = #{ a16 = 1; b16 = 2 } } in
  mark_test_run 1156;
  let test = (fun #{ a48 = a481 } #{ a48 = a482 } -> (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) a481 a482) actual expected in
  if not test then failwithf "test 1156 failed";
  (* Paths of depth 2 *)
  (* .b147.#a48 *)
  let actual = r.b147.#a48 in
  let expected = #{ a16 = 1; b16 = 2 } in
  mark_test_run 1157;
  let test = (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) actual expected in
  if not test then failwithf "test 1157 failed";
  (* Paths of depth 3 *)
  (* .b147.#a48.#a16 *)
  let actual = r.b147.#a48.#a16 in
  let expected = 1 in
  mark_test_run 1158;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1158 failed";
  (* .b147.#a48.#b16 *)
  let actual = r.b147.#a48.#b16 in
  let expected = 2 in
  mark_test_run 1159;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1159 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a147 = a1471; b147 = b1471 } { a147 = a1472; b147 = b1472 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1471 a1472 && (fun #{ a48 = a481 } #{ a48 = a482 } -> (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) a481 a482) b1471 b1472) in
  let next_r = { a147 = 100.; b147 = #{ a48 = #{ a16 = 101; b16 = 102 } } } in
  let r_expected = { a147 = 0.; b147 = #{ a48 = #{ a16 = 1; b16 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a147 *)
  r.a147 <- next_r.a147;
  let r_expected = { r_expected with a147 = next_r.a147 } in
  mark_test_run 1160;
  let test = eq r r_expected in
  if not test then failwithf "test 1160 failed";
  Gc.compact ();
  (* .b147 *)
  r.b147 <- next_r.b147;
  let r_expected = { r_expected with b147 = next_r.b147 } in
  mark_test_run 1161;
  let test = eq r r_expected in
  if not test then failwithf "test 1161 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a147; b147 = #{ a48 = #{ a16; b16 } } } = r in
  let expected_a147 = 100. in
  mark_test_run 1162;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a147 a147 in
  if not test then failwithf "test 1162 failed";
  let expected_a16 = 101 in
  mark_test_run 1163;
  let test = (fun a b -> Int.equal a b) expected_a16 a16 in
  if not test then failwithf "test 1163 failed";
  let expected_b16 = 102 in
  mark_test_run 1164;
  let test = (fun a b -> Int.equal a b) expected_b16 b16 in
  if not test then failwithf "test 1164 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a147; b147 } = r in
  let expected_a147 = 100. in
  mark_test_run 1165;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a147 a147 in
  if not test then failwithf "test 1165 failed";
  let expected_b147 = #{ a48 = #{ a16 = 101; b16 = 102 } } in
  mark_test_run 1166;
  let test = (fun #{ a48 = a481 } #{ a48 = a482 } -> (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) a481 a482) expected_b147 b147 in
  if not test then failwithf "test 1166 failed";

  (**********************************************)
  (*   t148 = { float; #{ #{ int; float } } }   *)
  (**********************************************)
  let r = { a148 = 0.; b148 = #{ a52 = #{ a20 = 1; b20 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a148 *)
  let actual = r.a148 in
  let expected = 0. in
  mark_test_run 1167;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1167 failed";
  (* Paths of depth 1 *)
  (* .b148 *)
  let actual = r.b148 in
  let expected = #{ a52 = #{ a20 = 1; b20 = 2. } } in
  mark_test_run 1168;
  let test = (fun #{ a52 = a521 } #{ a52 = a522 } -> (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) a521 a522) actual expected in
  if not test then failwithf "test 1168 failed";
  (* Paths of depth 2 *)
  (* .b148.#a52 *)
  let actual = r.b148.#a52 in
  let expected = #{ a20 = 1; b20 = 2. } in
  mark_test_run 1169;
  let test = (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) actual expected in
  if not test then failwithf "test 1169 failed";
  (* Paths of depth 3 *)
  (* .b148.#a52.#a20 *)
  let actual = r.b148.#a52.#a20 in
  let expected = 1 in
  mark_test_run 1170;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1170 failed";
  (* .b148.#a52.#b20 *)
  let actual = r.b148.#a52.#b20 in
  let expected = 2. in
  mark_test_run 1171;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1171 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a148 = a1481; b148 = b1481 } { a148 = a1482; b148 = b1482 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1481 a1482 && (fun #{ a52 = a521 } #{ a52 = a522 } -> (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) a521 a522) b1481 b1482) in
  let next_r = { a148 = 100.; b148 = #{ a52 = #{ a20 = 101; b20 = 102. } } } in
  let r_expected = { a148 = 0.; b148 = #{ a52 = #{ a20 = 1; b20 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a148 *)
  r.a148 <- next_r.a148;
  let r_expected = { r_expected with a148 = next_r.a148 } in
  mark_test_run 1172;
  let test = eq r r_expected in
  if not test then failwithf "test 1172 failed";
  Gc.compact ();
  (* .b148 *)
  r.b148 <- next_r.b148;
  let r_expected = { r_expected with b148 = next_r.b148 } in
  mark_test_run 1173;
  let test = eq r r_expected in
  if not test then failwithf "test 1173 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a148; b148 = #{ a52 = #{ a20; b20 } } } = r in
  let expected_a148 = 100. in
  mark_test_run 1174;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a148 a148 in
  if not test then failwithf "test 1174 failed";
  let expected_a20 = 101 in
  mark_test_run 1175;
  let test = (fun a b -> Int.equal a b) expected_a20 a20 in
  if not test then failwithf "test 1175 failed";
  let expected_b20 = 102. in
  mark_test_run 1176;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b20 b20 in
  if not test then failwithf "test 1176 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a148; b148 } = r in
  let expected_a148 = 100. in
  mark_test_run 1177;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a148 a148 in
  if not test then failwithf "test 1177 failed";
  let expected_b148 = #{ a52 = #{ a20 = 101; b20 = 102. } } in
  mark_test_run 1178;
  let test = (fun #{ a52 = a521 } #{ a52 = a522 } -> (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) a521 a522) expected_b148 b148 in
  if not test then failwithf "test 1178 failed";

  (**********************************************)
  (*   t149 = { float; #{ #{ float; int } } }   *)
  (**********************************************)
  let r = { a149 = 0.; b149 = #{ a58 = #{ a40 = 1.; b40 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a149 *)
  let actual = r.a149 in
  let expected = 0. in
  mark_test_run 1179;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1179 failed";
  (* Paths of depth 1 *)
  (* .b149 *)
  let actual = r.b149 in
  let expected = #{ a58 = #{ a40 = 1.; b40 = 2 } } in
  mark_test_run 1180;
  let test = (fun #{ a58 = a581 } #{ a58 = a582 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a581 a582) actual expected in
  if not test then failwithf "test 1180 failed";
  (* Paths of depth 2 *)
  (* .b149.#a58 *)
  let actual = r.b149.#a58 in
  let expected = #{ a40 = 1.; b40 = 2 } in
  mark_test_run 1181;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) actual expected in
  if not test then failwithf "test 1181 failed";
  (* Paths of depth 3 *)
  (* .b149.#a58.#a40 *)
  let actual = r.b149.#a58.#a40 in
  let expected = 1. in
  mark_test_run 1182;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1182 failed";
  (* .b149.#a58.#b40 *)
  let actual = r.b149.#a58.#b40 in
  let expected = 2 in
  mark_test_run 1183;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1183 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a149 = a1491; b149 = b1491 } { a149 = a1492; b149 = b1492 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1491 a1492 && (fun #{ a58 = a581 } #{ a58 = a582 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a581 a582) b1491 b1492) in
  let next_r = { a149 = 100.; b149 = #{ a58 = #{ a40 = 101.; b40 = 102 } } } in
  let r_expected = { a149 = 0.; b149 = #{ a58 = #{ a40 = 1.; b40 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a149 *)
  r.a149 <- next_r.a149;
  let r_expected = { r_expected with a149 = next_r.a149 } in
  mark_test_run 1184;
  let test = eq r r_expected in
  if not test then failwithf "test 1184 failed";
  Gc.compact ();
  (* .b149 *)
  r.b149 <- next_r.b149;
  let r_expected = { r_expected with b149 = next_r.b149 } in
  mark_test_run 1185;
  let test = eq r r_expected in
  if not test then failwithf "test 1185 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a149; b149 = #{ a58 = #{ a40; b40 } } } = r in
  let expected_a149 = 100. in
  mark_test_run 1186;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a149 a149 in
  if not test then failwithf "test 1186 failed";
  let expected_a40 = 101. in
  mark_test_run 1187;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a40 a40 in
  if not test then failwithf "test 1187 failed";
  let expected_b40 = 102 in
  mark_test_run 1188;
  let test = (fun a b -> Int.equal a b) expected_b40 b40 in
  if not test then failwithf "test 1188 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a149; b149 } = r in
  let expected_a149 = 100. in
  mark_test_run 1189;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a149 a149 in
  if not test then failwithf "test 1189 failed";
  let expected_b149 = #{ a58 = #{ a40 = 101.; b40 = 102 } } in
  mark_test_run 1190;
  let test = (fun #{ a58 = a581 } #{ a58 = a582 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a581 a582) expected_b149 b149 in
  if not test then failwithf "test 1190 failed";

  (************************************************)
  (*   t150 = { float; #{ #{ float; float } } }   *)
  (************************************************)
  let r = { a150 = 0.; b150 = #{ a60 = #{ a42 = 1.; b42 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a150 *)
  let actual = r.a150 in
  let expected = 0. in
  mark_test_run 1191;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1191 failed";
  (* Paths of depth 1 *)
  (* .b150 *)
  let actual = r.b150 in
  let expected = #{ a60 = #{ a42 = 1.; b42 = 2. } } in
  mark_test_run 1192;
  let test = (fun #{ a60 = a601 } #{ a60 = a602 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) a601 a602) actual expected in
  if not test then failwithf "test 1192 failed";
  (* Paths of depth 2 *)
  (* .b150.#a60 *)
  let actual = r.b150.#a60 in
  let expected = #{ a42 = 1.; b42 = 2. } in
  mark_test_run 1193;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) actual expected in
  if not test then failwithf "test 1193 failed";
  (* Paths of depth 3 *)
  (* .b150.#a60.#a42 *)
  let actual = r.b150.#a60.#a42 in
  let expected = 1. in
  mark_test_run 1194;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1194 failed";
  (* .b150.#a60.#b42 *)
  let actual = r.b150.#a60.#b42 in
  let expected = 2. in
  mark_test_run 1195;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1195 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a150 = a1501; b150 = b1501 } { a150 = a1502; b150 = b1502 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1501 a1502 && (fun #{ a60 = a601 } #{ a60 = a602 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) a601 a602) b1501 b1502) in
  let next_r = { a150 = 100.; b150 = #{ a60 = #{ a42 = 101.; b42 = 102. } } } in
  let r_expected = { a150 = 0.; b150 = #{ a60 = #{ a42 = 1.; b42 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a150 *)
  r.a150 <- next_r.a150;
  let r_expected = { r_expected with a150 = next_r.a150 } in
  mark_test_run 1196;
  let test = eq r r_expected in
  if not test then failwithf "test 1196 failed";
  Gc.compact ();
  (* .b150 *)
  r.b150 <- next_r.b150;
  let r_expected = { r_expected with b150 = next_r.b150 } in
  mark_test_run 1197;
  let test = eq r r_expected in
  if not test then failwithf "test 1197 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a150; b150 = #{ a60 = #{ a42; b42 } } } = r in
  let expected_a150 = 100. in
  mark_test_run 1198;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a150 a150 in
  if not test then failwithf "test 1198 failed";
  let expected_a42 = 101. in
  mark_test_run 1199;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a42 a42 in
  if not test then failwithf "test 1199 failed";
  let expected_b42 = 102. in
  mark_test_run 1200;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b42 b42 in
  if not test then failwithf "test 1200 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a150; b150 } = r in
  let expected_a150 = 100. in
  mark_test_run 1201;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a150 a150 in
  if not test then failwithf "test 1201 failed";
  let expected_b150 = #{ a60 = #{ a42 = 101.; b42 = 102. } } in
  mark_test_run 1202;
  let test = (fun #{ a60 = a601 } #{ a60 = a602 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) a601 a602) expected_b150 b150 in
  if not test then failwithf "test 1202 failed";

  (*************************************************)
  (*   t152 = { float; #{ #{ float; float# } } }   *)
  (*************************************************)
  let r = { a152 = 0.; b152 = #{ a151 = #{ a131 = 1.; b131 = #2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a152 *)
  let actual = r.a152 in
  let expected = 0. in
  mark_test_run 1203;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1203 failed";
  (* Paths of depth 1 *)
  (* .b152 *)
  let actual = r.b152 in
  let expected = #{ a151 = #{ a131 = 1.; b131 = #2. } } in
  mark_test_run 1204;
  let test = (fun #{ a151 = a1511 } #{ a151 = a1512 } -> (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) a1511 a1512) actual expected in
  if not test then failwithf "test 1204 failed";
  (* Paths of depth 2 *)
  (* .b152.#a151 *)
  let actual = r.b152.#a151 in
  let expected = #{ a131 = 1.; b131 = #2. } in
  mark_test_run 1205;
  let test = (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) actual expected in
  if not test then failwithf "test 1205 failed";
  (* Paths of depth 3 *)
  (* .b152.#a151.#a131 *)
  let actual = r.b152.#a151.#a131 in
  let expected = 1. in
  mark_test_run 1206;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1206 failed";
  (* .b152.#a151.#b131 *)
  let actual = r.b152.#a151.#b131 in
  let expected = #2. in
  mark_test_run 1207;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1207 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a152 = a1521; b152 = b1521 } { a152 = a1522; b152 = b1522 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1521 a1522 && (fun #{ a151 = a1511 } #{ a151 = a1512 } -> (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) a1511 a1512) b1521 b1522) in
  let next_r = { a152 = 100.; b152 = #{ a151 = #{ a131 = 101.; b131 = #102. } } } in
  let r_expected = { a152 = 0.; b152 = #{ a151 = #{ a131 = 1.; b131 = #2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a152 *)
  r.a152 <- next_r.a152;
  let r_expected = { r_expected with a152 = next_r.a152 } in
  mark_test_run 1208;
  let test = eq r r_expected in
  if not test then failwithf "test 1208 failed";
  Gc.compact ();
  (* .b152 *)
  r.b152 <- next_r.b152;
  let r_expected = { r_expected with b152 = next_r.b152 } in
  mark_test_run 1209;
  let test = eq r r_expected in
  if not test then failwithf "test 1209 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a152; b152 = #{ a151 = #{ a131; b131 } } } = r in
  let expected_a152 = 100. in
  mark_test_run 1210;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a152 a152 in
  if not test then failwithf "test 1210 failed";
  let expected_a131 = 101. in
  mark_test_run 1211;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a131 a131 in
  if not test then failwithf "test 1211 failed";
  let expected_b131 = #102. in
  mark_test_run 1212;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b131 b131 in
  if not test then failwithf "test 1212 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a152; b152 } = r in
  let expected_a152 = 100. in
  mark_test_run 1213;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a152 a152 in
  if not test then failwithf "test 1213 failed";
  let expected_b152 = #{ a151 = #{ a131 = 101.; b131 = #102. } } in
  mark_test_run 1214;
  let test = (fun #{ a151 = a1511 } #{ a151 = a1512 } -> (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) a1511 a1512) expected_b152 b152 in
  if not test then failwithf "test 1214 failed";

  (*************************************************)
  (*   t154 = { float; #{ #{ float#; float } } }   *)
  (*************************************************)
  let r = { a154 = 0.; b154 = #{ a153 = #{ a139 = #1.; b139 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a154 *)
  let actual = r.a154 in
  let expected = 0. in
  mark_test_run 1215;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1215 failed";
  (* Paths of depth 1 *)
  (* .b154 *)
  let actual = r.b154 in
  let expected = #{ a153 = #{ a139 = #1.; b139 = 2. } } in
  mark_test_run 1216;
  let test = (fun #{ a153 = a1531 } #{ a153 = a1532 } -> (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) a1531 a1532) actual expected in
  if not test then failwithf "test 1216 failed";
  (* Paths of depth 2 *)
  (* .b154.#a153 *)
  let actual = r.b154.#a153 in
  let expected = #{ a139 = #1.; b139 = 2. } in
  mark_test_run 1217;
  let test = (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) actual expected in
  if not test then failwithf "test 1217 failed";
  (* Paths of depth 3 *)
  (* .b154.#a153.#a139 *)
  let actual = r.b154.#a153.#a139 in
  let expected = #1. in
  mark_test_run 1218;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1218 failed";
  (* .b154.#a153.#b139 *)
  let actual = r.b154.#a153.#b139 in
  let expected = 2. in
  mark_test_run 1219;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1219 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a154 = a1541; b154 = b1541 } { a154 = a1542; b154 = b1542 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1541 a1542 && (fun #{ a153 = a1531 } #{ a153 = a1532 } -> (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) a1531 a1532) b1541 b1542) in
  let next_r = { a154 = 100.; b154 = #{ a153 = #{ a139 = #101.; b139 = 102. } } } in
  let r_expected = { a154 = 0.; b154 = #{ a153 = #{ a139 = #1.; b139 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a154 *)
  r.a154 <- next_r.a154;
  let r_expected = { r_expected with a154 = next_r.a154 } in
  mark_test_run 1220;
  let test = eq r r_expected in
  if not test then failwithf "test 1220 failed";
  Gc.compact ();
  (* .b154 *)
  r.b154 <- next_r.b154;
  let r_expected = { r_expected with b154 = next_r.b154 } in
  mark_test_run 1221;
  let test = eq r r_expected in
  if not test then failwithf "test 1221 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a154; b154 = #{ a153 = #{ a139; b139 } } } = r in
  let expected_a154 = 100. in
  mark_test_run 1222;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a154 a154 in
  if not test then failwithf "test 1222 failed";
  let expected_a139 = #101. in
  mark_test_run 1223;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a139 a139 in
  if not test then failwithf "test 1223 failed";
  let expected_b139 = 102. in
  mark_test_run 1224;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b139 b139 in
  if not test then failwithf "test 1224 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a154; b154 } = r in
  let expected_a154 = 100. in
  mark_test_run 1225;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a154 a154 in
  if not test then failwithf "test 1225 failed";
  let expected_b154 = #{ a153 = #{ a139 = #101.; b139 = 102. } } in
  mark_test_run 1226;
  let test = (fun #{ a153 = a1531 } #{ a153 = a1532 } -> (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) a1531 a1532) expected_b154 b154 in
  if not test then failwithf "test 1226 failed";

  (**************************************************)
  (*   t156 = { float; #{ #{ float#; float# } } }   *)
  (**************************************************)
  let r = { a156 = 0.; b156 = #{ a155 = #{ a141 = #1.; b141 = #2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a156 *)
  let actual = r.a156 in
  let expected = 0. in
  mark_test_run 1227;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1227 failed";
  (* Paths of depth 1 *)
  (* .b156 *)
  let actual = r.b156 in
  let expected = #{ a155 = #{ a141 = #1.; b141 = #2. } } in
  mark_test_run 1228;
  let test = (fun #{ a155 = a1551 } #{ a155 = a1552 } -> (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) a1551 a1552) actual expected in
  if not test then failwithf "test 1228 failed";
  (* Paths of depth 2 *)
  (* .b156.#a155 *)
  let actual = r.b156.#a155 in
  let expected = #{ a141 = #1.; b141 = #2. } in
  mark_test_run 1229;
  let test = (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) actual expected in
  if not test then failwithf "test 1229 failed";
  (* Paths of depth 3 *)
  (* .b156.#a155.#a141 *)
  let actual = r.b156.#a155.#a141 in
  let expected = #1. in
  mark_test_run 1230;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1230 failed";
  (* .b156.#a155.#b141 *)
  let actual = r.b156.#a155.#b141 in
  let expected = #2. in
  mark_test_run 1231;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1231 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a156 = a1561; b156 = b1561 } { a156 = a1562; b156 = b1562 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1561 a1562 && (fun #{ a155 = a1551 } #{ a155 = a1552 } -> (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) a1551 a1552) b1561 b1562) in
  let next_r = { a156 = 100.; b156 = #{ a155 = #{ a141 = #101.; b141 = #102. } } } in
  let r_expected = { a156 = 0.; b156 = #{ a155 = #{ a141 = #1.; b141 = #2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a156 *)
  r.a156 <- next_r.a156;
  let r_expected = { r_expected with a156 = next_r.a156 } in
  mark_test_run 1232;
  let test = eq r r_expected in
  if not test then failwithf "test 1232 failed";
  Gc.compact ();
  (* .b156 *)
  r.b156 <- next_r.b156;
  let r_expected = { r_expected with b156 = next_r.b156 } in
  mark_test_run 1233;
  let test = eq r r_expected in
  if not test then failwithf "test 1233 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a156; b156 = #{ a155 = #{ a141; b141 } } } = r in
  let expected_a156 = 100. in
  mark_test_run 1234;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a156 a156 in
  if not test then failwithf "test 1234 failed";
  let expected_a141 = #101. in
  mark_test_run 1235;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a141 a141 in
  if not test then failwithf "test 1235 failed";
  let expected_b141 = #102. in
  mark_test_run 1236;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b141 b141 in
  if not test then failwithf "test 1236 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a156; b156 } = r in
  let expected_a156 = 100. in
  mark_test_run 1237;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a156 a156 in
  if not test then failwithf "test 1237 failed";
  let expected_b156 = #{ a155 = #{ a141 = #101.; b141 = #102. } } in
  mark_test_run 1238;
  let test = (fun #{ a155 = a1551 } #{ a155 = a1552 } -> (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) a1551 a1552) expected_b156 b156 in
  if not test then failwithf "test 1238 failed";

  (*************************)
  (*   t157 = { float# }   *)
  (*************************)
  let r = { a157 = #0. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a157 *)
  let actual = r.a157 in
  let expected = #0. in
  mark_test_run 1239;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1239 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a157 = a1571 } { a157 = a1572 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1571 a1572) in
  let next_r = { a157 = #100. } in
  let r_expected = { a157 = #0. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a157 *)
  r.a157 <- next_r.a157;
  let r_expected = { r_expected with a157 = next_r.a157 } in
  mark_test_run 1240;
  let test = eq r r_expected in
  if not test then failwithf "test 1240 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a157 } = r in
  let expected_a157 = #100. in
  mark_test_run 1241;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a157 a157 in
  if not test then failwithf "test 1241 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a157 } = r in
  let expected_a157 = #100. in
  mark_test_run 1242;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a157 a157 in
  if not test then failwithf "test 1242 failed";

  (********************************)
  (*   t158 = { float#; float }   *)
  (********************************)
  let r = { a158 = #0.; b158 = 1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a158 *)
  let actual = r.a158 in
  let expected = #0. in
  mark_test_run 1243;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1243 failed";
  (* Paths of depth 1 *)
  (* .b158 *)
  let actual = r.b158 in
  let expected = 1. in
  mark_test_run 1244;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1244 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a158 = a1581; b158 = b1581 } { a158 = a1582; b158 = b1582 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1581 a1582 && (fun a b -> Float.equal (globalize a) (globalize b)) b1581 b1582) in
  let next_r = { a158 = #100.; b158 = 101. } in
  let r_expected = { a158 = #0.; b158 = 1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a158 *)
  r.a158 <- next_r.a158;
  let r_expected = { r_expected with a158 = next_r.a158 } in
  mark_test_run 1245;
  let test = eq r r_expected in
  if not test then failwithf "test 1245 failed";
  Gc.compact ();
  (* .b158 *)
  r.b158 <- next_r.b158;
  let r_expected = { r_expected with b158 = next_r.b158 } in
  mark_test_run 1246;
  let test = eq r r_expected in
  if not test then failwithf "test 1246 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a158; b158 } = r in
  let expected_a158 = #100. in
  mark_test_run 1247;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a158 a158 in
  if not test then failwithf "test 1247 failed";
  let expected_b158 = 101. in
  mark_test_run 1248;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b158 b158 in
  if not test then failwithf "test 1248 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a158; b158 } = r in
  let expected_a158 = #100. in
  mark_test_run 1249;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a158 a158 in
  if not test then failwithf "test 1249 failed";
  let expected_b158 = 101. in
  mark_test_run 1250;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b158 b158 in
  if not test then failwithf "test 1250 failed";

  (***************************************)
  (*   t159 = { float#; float; float }   *)
  (***************************************)
  let r = { a159 = #0.; b159 = 1.; c159 = 2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a159 *)
  let actual = r.a159 in
  let expected = #0. in
  mark_test_run 1251;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1251 failed";
  (* Paths of depth 1 *)
  (* .b159 *)
  let actual = r.b159 in
  let expected = 1. in
  mark_test_run 1252;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1252 failed";
  (* Paths of depth 1 *)
  (* .c159 *)
  let actual = r.c159 in
  let expected = 2. in
  mark_test_run 1253;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1253 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a159 = a1591; b159 = b1591; c159 = c1591 } { a159 = a1592; b159 = b1592; c159 = c1592 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1591 a1592 && (fun a b -> Float.equal (globalize a) (globalize b)) b1591 b1592 && (fun a b -> Float.equal (globalize a) (globalize b)) c1591 c1592) in
  let next_r = { a159 = #100.; b159 = 101.; c159 = 102. } in
  let r_expected = { a159 = #0.; b159 = 1.; c159 = 2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a159 *)
  r.a159 <- next_r.a159;
  let r_expected = { r_expected with a159 = next_r.a159 } in
  mark_test_run 1254;
  let test = eq r r_expected in
  if not test then failwithf "test 1254 failed";
  Gc.compact ();
  (* .b159 *)
  r.b159 <- next_r.b159;
  let r_expected = { r_expected with b159 = next_r.b159 } in
  mark_test_run 1255;
  let test = eq r r_expected in
  if not test then failwithf "test 1255 failed";
  Gc.compact ();
  (* .c159 *)
  r.c159 <- next_r.c159;
  let r_expected = { r_expected with c159 = next_r.c159 } in
  mark_test_run 1256;
  let test = eq r r_expected in
  if not test then failwithf "test 1256 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a159; b159; c159 } = r in
  let expected_a159 = #100. in
  mark_test_run 1257;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a159 a159 in
  if not test then failwithf "test 1257 failed";
  let expected_b159 = 101. in
  mark_test_run 1258;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b159 b159 in
  if not test then failwithf "test 1258 failed";
  let expected_c159 = 102. in
  mark_test_run 1259;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_c159 c159 in
  if not test then failwithf "test 1259 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a159; b159; c159 } = r in
  let expected_a159 = #100. in
  mark_test_run 1260;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a159 a159 in
  if not test then failwithf "test 1260 failed";
  let expected_b159 = 101. in
  mark_test_run 1261;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b159 b159 in
  if not test then failwithf "test 1261 failed";
  let expected_c159 = 102. in
  mark_test_run 1262;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_c159 c159 in
  if not test then failwithf "test 1262 failed";

  (****************************************)
  (*   t160 = { float#; float; float# }   *)
  (****************************************)
  let r = { a160 = #0.; b160 = 1.; c160 = #2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a160 *)
  let actual = r.a160 in
  let expected = #0. in
  mark_test_run 1263;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1263 failed";
  (* Paths of depth 1 *)
  (* .b160 *)
  let actual = r.b160 in
  let expected = 1. in
  mark_test_run 1264;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1264 failed";
  (* Paths of depth 1 *)
  (* .c160 *)
  let actual = r.c160 in
  let expected = #2. in
  mark_test_run 1265;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1265 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a160 = a1601; b160 = b1601; c160 = c1601 } { a160 = a1602; b160 = b1602; c160 = c1602 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1601 a1602 && (fun a b -> Float.equal (globalize a) (globalize b)) b1601 b1602 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) c1601 c1602) in
  let next_r = { a160 = #100.; b160 = 101.; c160 = #102. } in
  let r_expected = { a160 = #0.; b160 = 1.; c160 = #2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a160 *)
  r.a160 <- next_r.a160;
  let r_expected = { r_expected with a160 = next_r.a160 } in
  mark_test_run 1266;
  let test = eq r r_expected in
  if not test then failwithf "test 1266 failed";
  Gc.compact ();
  (* .b160 *)
  r.b160 <- next_r.b160;
  let r_expected = { r_expected with b160 = next_r.b160 } in
  mark_test_run 1267;
  let test = eq r r_expected in
  if not test then failwithf "test 1267 failed";
  Gc.compact ();
  (* .c160 *)
  r.c160 <- next_r.c160;
  let r_expected = { r_expected with c160 = next_r.c160 } in
  mark_test_run 1268;
  let test = eq r r_expected in
  if not test then failwithf "test 1268 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a160; b160; c160 } = r in
  let expected_a160 = #100. in
  mark_test_run 1269;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a160 a160 in
  if not test then failwithf "test 1269 failed";
  let expected_b160 = 101. in
  mark_test_run 1270;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b160 b160 in
  if not test then failwithf "test 1270 failed";
  let expected_c160 = #102. in
  mark_test_run 1271;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_c160 c160 in
  if not test then failwithf "test 1271 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a160; b160; c160 } = r in
  let expected_a160 = #100. in
  mark_test_run 1272;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a160 a160 in
  if not test then failwithf "test 1272 failed";
  let expected_b160 = 101. in
  mark_test_run 1273;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b160 b160 in
  if not test then failwithf "test 1273 failed";
  let expected_c160 = #102. in
  mark_test_run 1274;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_c160 c160 in
  if not test then failwithf "test 1274 failed";

  (*********************************)
  (*   t161 = { float#; float# }   *)
  (*********************************)
  let r = { a161 = #0.; b161 = #1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a161 *)
  let actual = r.a161 in
  let expected = #0. in
  mark_test_run 1275;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1275 failed";
  (* Paths of depth 1 *)
  (* .b161 *)
  let actual = r.b161 in
  let expected = #1. in
  mark_test_run 1276;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1276 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a161 = a1611; b161 = b1611 } { a161 = a1612; b161 = b1612 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1611 a1612 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1611 b1612) in
  let next_r = { a161 = #100.; b161 = #101. } in
  let r_expected = { a161 = #0.; b161 = #1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a161 *)
  r.a161 <- next_r.a161;
  let r_expected = { r_expected with a161 = next_r.a161 } in
  mark_test_run 1277;
  let test = eq r r_expected in
  if not test then failwithf "test 1277 failed";
  Gc.compact ();
  (* .b161 *)
  r.b161 <- next_r.b161;
  let r_expected = { r_expected with b161 = next_r.b161 } in
  mark_test_run 1278;
  let test = eq r r_expected in
  if not test then failwithf "test 1278 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a161; b161 } = r in
  let expected_a161 = #100. in
  mark_test_run 1279;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a161 a161 in
  if not test then failwithf "test 1279 failed";
  let expected_b161 = #101. in
  mark_test_run 1280;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b161 b161 in
  if not test then failwithf "test 1280 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a161; b161 } = r in
  let expected_a161 = #100. in
  mark_test_run 1281;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a161 a161 in
  if not test then failwithf "test 1281 failed";
  let expected_b161 = #101. in
  mark_test_run 1282;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b161 b161 in
  if not test then failwithf "test 1282 failed";

  (****************************************)
  (*   t162 = { float#; float#; float }   *)
  (****************************************)
  let r = { a162 = #0.; b162 = #1.; c162 = 2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a162 *)
  let actual = r.a162 in
  let expected = #0. in
  mark_test_run 1283;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1283 failed";
  (* Paths of depth 1 *)
  (* .b162 *)
  let actual = r.b162 in
  let expected = #1. in
  mark_test_run 1284;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1284 failed";
  (* Paths of depth 1 *)
  (* .c162 *)
  let actual = r.c162 in
  let expected = 2. in
  mark_test_run 1285;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1285 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a162 = a1621; b162 = b1621; c162 = c1621 } { a162 = a1622; b162 = b1622; c162 = c1622 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1621 a1622 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1621 b1622 && (fun a b -> Float.equal (globalize a) (globalize b)) c1621 c1622) in
  let next_r = { a162 = #100.; b162 = #101.; c162 = 102. } in
  let r_expected = { a162 = #0.; b162 = #1.; c162 = 2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a162 *)
  r.a162 <- next_r.a162;
  let r_expected = { r_expected with a162 = next_r.a162 } in
  mark_test_run 1286;
  let test = eq r r_expected in
  if not test then failwithf "test 1286 failed";
  Gc.compact ();
  (* .b162 *)
  r.b162 <- next_r.b162;
  let r_expected = { r_expected with b162 = next_r.b162 } in
  mark_test_run 1287;
  let test = eq r r_expected in
  if not test then failwithf "test 1287 failed";
  Gc.compact ();
  (* .c162 *)
  r.c162 <- next_r.c162;
  let r_expected = { r_expected with c162 = next_r.c162 } in
  mark_test_run 1288;
  let test = eq r r_expected in
  if not test then failwithf "test 1288 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a162; b162; c162 } = r in
  let expected_a162 = #100. in
  mark_test_run 1289;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a162 a162 in
  if not test then failwithf "test 1289 failed";
  let expected_b162 = #101. in
  mark_test_run 1290;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b162 b162 in
  if not test then failwithf "test 1290 failed";
  let expected_c162 = 102. in
  mark_test_run 1291;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_c162 c162 in
  if not test then failwithf "test 1291 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a162; b162; c162 } = r in
  let expected_a162 = #100. in
  mark_test_run 1292;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a162 a162 in
  if not test then failwithf "test 1292 failed";
  let expected_b162 = #101. in
  mark_test_run 1293;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b162 b162 in
  if not test then failwithf "test 1293 failed";
  let expected_c162 = 102. in
  mark_test_run 1294;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_c162 c162 in
  if not test then failwithf "test 1294 failed";

  (*****************************************)
  (*   t163 = { float#; float#; float# }   *)
  (*****************************************)
  let r = { a163 = #0.; b163 = #1.; c163 = #2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a163 *)
  let actual = r.a163 in
  let expected = #0. in
  mark_test_run 1295;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1295 failed";
  (* Paths of depth 1 *)
  (* .b163 *)
  let actual = r.b163 in
  let expected = #1. in
  mark_test_run 1296;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1296 failed";
  (* Paths of depth 1 *)
  (* .c163 *)
  let actual = r.c163 in
  let expected = #2. in
  mark_test_run 1297;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1297 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a163 = a1631; b163 = b1631; c163 = c1631 } { a163 = a1632; b163 = b1632; c163 = c1632 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1631 a1632 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1631 b1632 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) c1631 c1632) in
  let next_r = { a163 = #100.; b163 = #101.; c163 = #102. } in
  let r_expected = { a163 = #0.; b163 = #1.; c163 = #2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a163 *)
  r.a163 <- next_r.a163;
  let r_expected = { r_expected with a163 = next_r.a163 } in
  mark_test_run 1298;
  let test = eq r r_expected in
  if not test then failwithf "test 1298 failed";
  Gc.compact ();
  (* .b163 *)
  r.b163 <- next_r.b163;
  let r_expected = { r_expected with b163 = next_r.b163 } in
  mark_test_run 1299;
  let test = eq r r_expected in
  if not test then failwithf "test 1299 failed";
  Gc.compact ();
  (* .c163 *)
  r.c163 <- next_r.c163;
  let r_expected = { r_expected with c163 = next_r.c163 } in
  mark_test_run 1300;
  let test = eq r r_expected in
  if not test then failwithf "test 1300 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a163; b163; c163 } = r in
  let expected_a163 = #100. in
  mark_test_run 1301;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a163 a163 in
  if not test then failwithf "test 1301 failed";
  let expected_b163 = #101. in
  mark_test_run 1302;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b163 b163 in
  if not test then failwithf "test 1302 failed";
  let expected_c163 = #102. in
  mark_test_run 1303;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_c163 c163 in
  if not test then failwithf "test 1303 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a163; b163; c163 } = r in
  let expected_a163 = #100. in
  mark_test_run 1304;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a163 a163 in
  if not test then failwithf "test 1304 failed";
  let expected_b163 = #101. in
  mark_test_run 1305;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b163 b163 in
  if not test then failwithf "test 1305 failed";
  let expected_c163 = #102. in
  mark_test_run 1306;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_c163 c163 in
  if not test then failwithf "test 1306 failed";

  (*************************************)
  (*   t164 = { float#; #{ float } }   *)
  (*************************************)
  let r = { a164 = #0.; b164 = #{ a27 = 1. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a164 *)
  let actual = r.a164 in
  let expected = #0. in
  mark_test_run 1307;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1307 failed";
  (* Paths of depth 1 *)
  (* .b164 *)
  let actual = r.b164 in
  let expected = #{ a27 = 1. } in
  mark_test_run 1308;
  let test = (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) actual expected in
  if not test then failwithf "test 1308 failed";
  (* Paths of depth 2 *)
  (* .b164.#a27 *)
  let actual = r.b164.#a27 in
  let expected = 1. in
  mark_test_run 1309;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1309 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a164 = a1641; b164 = b1641 } { a164 = a1642; b164 = b1642 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1641 a1642 && (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) b1641 b1642) in
  let next_r = { a164 = #100.; b164 = #{ a27 = 101. } } in
  let r_expected = { a164 = #0.; b164 = #{ a27 = 1. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a164 *)
  r.a164 <- next_r.a164;
  let r_expected = { r_expected with a164 = next_r.a164 } in
  mark_test_run 1310;
  let test = eq r r_expected in
  if not test then failwithf "test 1310 failed";
  Gc.compact ();
  (* .b164 *)
  r.b164 <- next_r.b164;
  let r_expected = { r_expected with b164 = next_r.b164 } in
  mark_test_run 1311;
  let test = eq r r_expected in
  if not test then failwithf "test 1311 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a164; b164 = #{ a27 } } = r in
  let expected_a164 = #100. in
  mark_test_run 1312;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a164 a164 in
  if not test then failwithf "test 1312 failed";
  let expected_a27 = 101. in
  mark_test_run 1313;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a27 a27 in
  if not test then failwithf "test 1313 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a164; b164 } = r in
  let expected_a164 = #100. in
  mark_test_run 1314;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a164 a164 in
  if not test then failwithf "test 1314 failed";
  let expected_b164 = #{ a27 = 101. } in
  mark_test_run 1315;
  let test = (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) expected_b164 b164 in
  if not test then failwithf "test 1315 failed";

  (********************************************)
  (*   t165 = { float#; #{ float; float } }   *)
  (********************************************)
  let r = { a165 = #0.; b165 = #{ a42 = 1.; b42 = 2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a165 *)
  let actual = r.a165 in
  let expected = #0. in
  mark_test_run 1316;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1316 failed";
  (* Paths of depth 1 *)
  (* .b165 *)
  let actual = r.b165 in
  let expected = #{ a42 = 1.; b42 = 2. } in
  mark_test_run 1317;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) actual expected in
  if not test then failwithf "test 1317 failed";
  (* Paths of depth 2 *)
  (* .b165.#a42 *)
  let actual = r.b165.#a42 in
  let expected = 1. in
  mark_test_run 1318;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1318 failed";
  (* .b165.#b42 *)
  let actual = r.b165.#b42 in
  let expected = 2. in
  mark_test_run 1319;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1319 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a165 = a1651; b165 = b1651 } { a165 = a1652; b165 = b1652 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1651 a1652 && (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) b1651 b1652) in
  let next_r = { a165 = #100.; b165 = #{ a42 = 101.; b42 = 102. } } in
  let r_expected = { a165 = #0.; b165 = #{ a42 = 1.; b42 = 2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a165 *)
  r.a165 <- next_r.a165;
  let r_expected = { r_expected with a165 = next_r.a165 } in
  mark_test_run 1320;
  let test = eq r r_expected in
  if not test then failwithf "test 1320 failed";
  Gc.compact ();
  (* .b165 *)
  r.b165 <- next_r.b165;
  let r_expected = { r_expected with b165 = next_r.b165 } in
  mark_test_run 1321;
  let test = eq r r_expected in
  if not test then failwithf "test 1321 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a165; b165 = #{ a42; b42 } } = r in
  let expected_a165 = #100. in
  mark_test_run 1322;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a165 a165 in
  if not test then failwithf "test 1322 failed";
  let expected_a42 = 101. in
  mark_test_run 1323;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a42 a42 in
  if not test then failwithf "test 1323 failed";
  let expected_b42 = 102. in
  mark_test_run 1324;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b42 b42 in
  if not test then failwithf "test 1324 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a165; b165 } = r in
  let expected_a165 = #100. in
  mark_test_run 1325;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a165 a165 in
  if not test then failwithf "test 1325 failed";
  let expected_b165 = #{ a42 = 101.; b42 = 102. } in
  mark_test_run 1326;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) expected_b165 b165 in
  if not test then failwithf "test 1326 failed";

  (*********************************************)
  (*   t166 = { float#; #{ float; float# } }   *)
  (*********************************************)
  let r = { a166 = #0.; b166 = #{ a131 = 1.; b131 = #2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a166 *)
  let actual = r.a166 in
  let expected = #0. in
  mark_test_run 1327;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1327 failed";
  (* Paths of depth 1 *)
  (* .b166 *)
  let actual = r.b166 in
  let expected = #{ a131 = 1.; b131 = #2. } in
  mark_test_run 1328;
  let test = (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) actual expected in
  if not test then failwithf "test 1328 failed";
  (* Paths of depth 2 *)
  (* .b166.#a131 *)
  let actual = r.b166.#a131 in
  let expected = 1. in
  mark_test_run 1329;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1329 failed";
  (* .b166.#b131 *)
  let actual = r.b166.#b131 in
  let expected = #2. in
  mark_test_run 1330;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1330 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a166 = a1661; b166 = b1661 } { a166 = a1662; b166 = b1662 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1661 a1662 && (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) b1661 b1662) in
  let next_r = { a166 = #100.; b166 = #{ a131 = 101.; b131 = #102. } } in
  let r_expected = { a166 = #0.; b166 = #{ a131 = 1.; b131 = #2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a166 *)
  r.a166 <- next_r.a166;
  let r_expected = { r_expected with a166 = next_r.a166 } in
  mark_test_run 1331;
  let test = eq r r_expected in
  if not test then failwithf "test 1331 failed";
  Gc.compact ();
  (* .b166 *)
  r.b166 <- next_r.b166;
  let r_expected = { r_expected with b166 = next_r.b166 } in
  mark_test_run 1332;
  let test = eq r r_expected in
  if not test then failwithf "test 1332 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a166; b166 = #{ a131; b131 } } = r in
  let expected_a166 = #100. in
  mark_test_run 1333;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a166 a166 in
  if not test then failwithf "test 1333 failed";
  let expected_a131 = 101. in
  mark_test_run 1334;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a131 a131 in
  if not test then failwithf "test 1334 failed";
  let expected_b131 = #102. in
  mark_test_run 1335;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b131 b131 in
  if not test then failwithf "test 1335 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a166; b166 } = r in
  let expected_a166 = #100. in
  mark_test_run 1336;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a166 a166 in
  if not test then failwithf "test 1336 failed";
  let expected_b166 = #{ a131 = 101.; b131 = #102. } in
  mark_test_run 1337;
  let test = (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) expected_b166 b166 in
  if not test then failwithf "test 1337 failed";

  (*************************************************)
  (*   t167 = { float#; #{ float; #{ float } } }   *)
  (*************************************************)
  let r = { a167 = #0.; b167 = #{ a46 = 1.; b46 = #{ a27 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a167 *)
  let actual = r.a167 in
  let expected = #0. in
  mark_test_run 1338;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1338 failed";
  (* Paths of depth 1 *)
  (* .b167 *)
  let actual = r.b167 in
  let expected = #{ a46 = 1.; b46 = #{ a27 = 2. } } in
  mark_test_run 1339;
  let test = (fun #{ a46 = a461; b46 = b461 } #{ a46 = a462; b46 = b462 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a461 a462 && (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) b461 b462) actual expected in
  if not test then failwithf "test 1339 failed";
  (* Paths of depth 2 *)
  (* .b167.#a46 *)
  let actual = r.b167.#a46 in
  let expected = 1. in
  mark_test_run 1340;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1340 failed";
  (* .b167.#b46 *)
  let actual = r.b167.#b46 in
  let expected = #{ a27 = 2. } in
  mark_test_run 1341;
  let test = (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) actual expected in
  if not test then failwithf "test 1341 failed";
  (* Paths of depth 3 *)
  (* .b167.#b46.#a27 *)
  let actual = r.b167.#b46.#a27 in
  let expected = 2. in
  mark_test_run 1342;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1342 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a167 = a1671; b167 = b1671 } { a167 = a1672; b167 = b1672 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1671 a1672 && (fun #{ a46 = a461; b46 = b461 } #{ a46 = a462; b46 = b462 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a461 a462 && (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) b461 b462) b1671 b1672) in
  let next_r = { a167 = #100.; b167 = #{ a46 = 101.; b46 = #{ a27 = 102. } } } in
  let r_expected = { a167 = #0.; b167 = #{ a46 = 1.; b46 = #{ a27 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a167 *)
  r.a167 <- next_r.a167;
  let r_expected = { r_expected with a167 = next_r.a167 } in
  mark_test_run 1343;
  let test = eq r r_expected in
  if not test then failwithf "test 1343 failed";
  Gc.compact ();
  (* .b167 *)
  r.b167 <- next_r.b167;
  let r_expected = { r_expected with b167 = next_r.b167 } in
  mark_test_run 1344;
  let test = eq r r_expected in
  if not test then failwithf "test 1344 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a167; b167 = #{ a46; b46 = #{ a27 } } } = r in
  let expected_a167 = #100. in
  mark_test_run 1345;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a167 a167 in
  if not test then failwithf "test 1345 failed";
  let expected_a46 = 101. in
  mark_test_run 1346;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a46 a46 in
  if not test then failwithf "test 1346 failed";
  let expected_a27 = 102. in
  mark_test_run 1347;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a27 a27 in
  if not test then failwithf "test 1347 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a167; b167 } = r in
  let expected_a167 = #100. in
  mark_test_run 1348;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a167 a167 in
  if not test then failwithf "test 1348 failed";
  let expected_b167 = #{ a46 = 101.; b46 = #{ a27 = 102. } } in
  mark_test_run 1349;
  let test = (fun #{ a46 = a461; b46 = b461 } #{ a46 = a462; b46 = b462 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a461 a462 && (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) b461 b462) expected_b167 b167 in
  if not test then failwithf "test 1349 failed";

  (**************************************************)
  (*   t168 = { float#; #{ float; #{ float# } } }   *)
  (**************************************************)
  let r = { a168 = #0.; b168 = #{ a136 = 1.; b136 = #{ a135 = #2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a168 *)
  let actual = r.a168 in
  let expected = #0. in
  mark_test_run 1350;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1350 failed";
  (* Paths of depth 1 *)
  (* .b168 *)
  let actual = r.b168 in
  let expected = #{ a136 = 1.; b136 = #{ a135 = #2. } } in
  mark_test_run 1351;
  let test = (fun #{ a136 = a1361; b136 = b1361 } #{ a136 = a1362; b136 = b1362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1361 a1362 && (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) b1361 b1362) actual expected in
  if not test then failwithf "test 1351 failed";
  (* Paths of depth 2 *)
  (* .b168.#a136 *)
  let actual = r.b168.#a136 in
  let expected = 1. in
  mark_test_run 1352;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1352 failed";
  (* .b168.#b136 *)
  let actual = r.b168.#b136 in
  let expected = #{ a135 = #2. } in
  mark_test_run 1353;
  let test = (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) actual expected in
  if not test then failwithf "test 1353 failed";
  (* Paths of depth 3 *)
  (* .b168.#b136.#a135 *)
  let actual = r.b168.#b136.#a135 in
  let expected = #2. in
  mark_test_run 1354;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1354 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a168 = a1681; b168 = b1681 } { a168 = a1682; b168 = b1682 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1681 a1682 && (fun #{ a136 = a1361; b136 = b1361 } #{ a136 = a1362; b136 = b1362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1361 a1362 && (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) b1361 b1362) b1681 b1682) in
  let next_r = { a168 = #100.; b168 = #{ a136 = 101.; b136 = #{ a135 = #102. } } } in
  let r_expected = { a168 = #0.; b168 = #{ a136 = 1.; b136 = #{ a135 = #2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a168 *)
  r.a168 <- next_r.a168;
  let r_expected = { r_expected with a168 = next_r.a168 } in
  mark_test_run 1355;
  let test = eq r r_expected in
  if not test then failwithf "test 1355 failed";
  Gc.compact ();
  (* .b168 *)
  r.b168 <- next_r.b168;
  let r_expected = { r_expected with b168 = next_r.b168 } in
  mark_test_run 1356;
  let test = eq r r_expected in
  if not test then failwithf "test 1356 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a168; b168 = #{ a136; b136 = #{ a135 } } } = r in
  let expected_a168 = #100. in
  mark_test_run 1357;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a168 a168 in
  if not test then failwithf "test 1357 failed";
  let expected_a136 = 101. in
  mark_test_run 1358;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a136 a136 in
  if not test then failwithf "test 1358 failed";
  let expected_a135 = #102. in
  mark_test_run 1359;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a135 a135 in
  if not test then failwithf "test 1359 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a168; b168 } = r in
  let expected_a168 = #100. in
  mark_test_run 1360;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a168 a168 in
  if not test then failwithf "test 1360 failed";
  let expected_b168 = #{ a136 = 101.; b136 = #{ a135 = #102. } } in
  mark_test_run 1361;
  let test = (fun #{ a136 = a1361; b136 = b1361 } #{ a136 = a1362; b136 = b1362 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1361 a1362 && (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) b1361 b1362) expected_b168 b168 in
  if not test then failwithf "test 1361 failed";

  (**************************************)
  (*   t169 = { float#; #{ float# } }   *)
  (**************************************)
  let r = { a169 = #0.; b169 = #{ a135 = #1. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a169 *)
  let actual = r.a169 in
  let expected = #0. in
  mark_test_run 1362;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1362 failed";
  (* Paths of depth 1 *)
  (* .b169 *)
  let actual = r.b169 in
  let expected = #{ a135 = #1. } in
  mark_test_run 1363;
  let test = (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) actual expected in
  if not test then failwithf "test 1363 failed";
  (* Paths of depth 2 *)
  (* .b169.#a135 *)
  let actual = r.b169.#a135 in
  let expected = #1. in
  mark_test_run 1364;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1364 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a169 = a1691; b169 = b1691 } { a169 = a1692; b169 = b1692 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1691 a1692 && (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) b1691 b1692) in
  let next_r = { a169 = #100.; b169 = #{ a135 = #101. } } in
  let r_expected = { a169 = #0.; b169 = #{ a135 = #1. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a169 *)
  r.a169 <- next_r.a169;
  let r_expected = { r_expected with a169 = next_r.a169 } in
  mark_test_run 1365;
  let test = eq r r_expected in
  if not test then failwithf "test 1365 failed";
  Gc.compact ();
  (* .b169 *)
  r.b169 <- next_r.b169;
  let r_expected = { r_expected with b169 = next_r.b169 } in
  mark_test_run 1366;
  let test = eq r r_expected in
  if not test then failwithf "test 1366 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a169; b169 = #{ a135 } } = r in
  let expected_a169 = #100. in
  mark_test_run 1367;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a169 a169 in
  if not test then failwithf "test 1367 failed";
  let expected_a135 = #101. in
  mark_test_run 1368;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a135 a135 in
  if not test then failwithf "test 1368 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a169; b169 } = r in
  let expected_a169 = #100. in
  mark_test_run 1369;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a169 a169 in
  if not test then failwithf "test 1369 failed";
  let expected_b169 = #{ a135 = #101. } in
  mark_test_run 1370;
  let test = (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) expected_b169 b169 in
  if not test then failwithf "test 1370 failed";

  (*********************************************)
  (*   t170 = { float#; #{ float#; float } }   *)
  (*********************************************)
  let r = { a170 = #0.; b170 = #{ a139 = #1.; b139 = 2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a170 *)
  let actual = r.a170 in
  let expected = #0. in
  mark_test_run 1371;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1371 failed";
  (* Paths of depth 1 *)
  (* .b170 *)
  let actual = r.b170 in
  let expected = #{ a139 = #1.; b139 = 2. } in
  mark_test_run 1372;
  let test = (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) actual expected in
  if not test then failwithf "test 1372 failed";
  (* Paths of depth 2 *)
  (* .b170.#a139 *)
  let actual = r.b170.#a139 in
  let expected = #1. in
  mark_test_run 1373;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1373 failed";
  (* .b170.#b139 *)
  let actual = r.b170.#b139 in
  let expected = 2. in
  mark_test_run 1374;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1374 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a170 = a1701; b170 = b1701 } { a170 = a1702; b170 = b1702 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1701 a1702 && (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) b1701 b1702) in
  let next_r = { a170 = #100.; b170 = #{ a139 = #101.; b139 = 102. } } in
  let r_expected = { a170 = #0.; b170 = #{ a139 = #1.; b139 = 2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a170 *)
  r.a170 <- next_r.a170;
  let r_expected = { r_expected with a170 = next_r.a170 } in
  mark_test_run 1375;
  let test = eq r r_expected in
  if not test then failwithf "test 1375 failed";
  Gc.compact ();
  (* .b170 *)
  r.b170 <- next_r.b170;
  let r_expected = { r_expected with b170 = next_r.b170 } in
  mark_test_run 1376;
  let test = eq r r_expected in
  if not test then failwithf "test 1376 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a170; b170 = #{ a139; b139 } } = r in
  let expected_a170 = #100. in
  mark_test_run 1377;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a170 a170 in
  if not test then failwithf "test 1377 failed";
  let expected_a139 = #101. in
  mark_test_run 1378;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a139 a139 in
  if not test then failwithf "test 1378 failed";
  let expected_b139 = 102. in
  mark_test_run 1379;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b139 b139 in
  if not test then failwithf "test 1379 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a170; b170 } = r in
  let expected_a170 = #100. in
  mark_test_run 1380;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a170 a170 in
  if not test then failwithf "test 1380 failed";
  let expected_b170 = #{ a139 = #101.; b139 = 102. } in
  mark_test_run 1381;
  let test = (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) expected_b170 b170 in
  if not test then failwithf "test 1381 failed";

  (**********************************************)
  (*   t171 = { float#; #{ float#; float# } }   *)
  (**********************************************)
  let r = { a171 = #0.; b171 = #{ a141 = #1.; b141 = #2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a171 *)
  let actual = r.a171 in
  let expected = #0. in
  mark_test_run 1382;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1382 failed";
  (* Paths of depth 1 *)
  (* .b171 *)
  let actual = r.b171 in
  let expected = #{ a141 = #1.; b141 = #2. } in
  mark_test_run 1383;
  let test = (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) actual expected in
  if not test then failwithf "test 1383 failed";
  (* Paths of depth 2 *)
  (* .b171.#a141 *)
  let actual = r.b171.#a141 in
  let expected = #1. in
  mark_test_run 1384;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1384 failed";
  (* .b171.#b141 *)
  let actual = r.b171.#b141 in
  let expected = #2. in
  mark_test_run 1385;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1385 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a171 = a1711; b171 = b1711 } { a171 = a1712; b171 = b1712 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1711 a1712 && (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) b1711 b1712) in
  let next_r = { a171 = #100.; b171 = #{ a141 = #101.; b141 = #102. } } in
  let r_expected = { a171 = #0.; b171 = #{ a141 = #1.; b141 = #2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a171 *)
  r.a171 <- next_r.a171;
  let r_expected = { r_expected with a171 = next_r.a171 } in
  mark_test_run 1386;
  let test = eq r r_expected in
  if not test then failwithf "test 1386 failed";
  Gc.compact ();
  (* .b171 *)
  r.b171 <- next_r.b171;
  let r_expected = { r_expected with b171 = next_r.b171 } in
  mark_test_run 1387;
  let test = eq r r_expected in
  if not test then failwithf "test 1387 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a171; b171 = #{ a141; b141 } } = r in
  let expected_a171 = #100. in
  mark_test_run 1388;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a171 a171 in
  if not test then failwithf "test 1388 failed";
  let expected_a141 = #101. in
  mark_test_run 1389;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a141 a141 in
  if not test then failwithf "test 1389 failed";
  let expected_b141 = #102. in
  mark_test_run 1390;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b141 b141 in
  if not test then failwithf "test 1390 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a171; b171 } = r in
  let expected_a171 = #100. in
  mark_test_run 1391;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a171 a171 in
  if not test then failwithf "test 1391 failed";
  let expected_b171 = #{ a141 = #101.; b141 = #102. } in
  mark_test_run 1392;
  let test = (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) expected_b171 b171 in
  if not test then failwithf "test 1392 failed";

  (**************************************************)
  (*   t172 = { float#; #{ float#; #{ float } } }   *)
  (**************************************************)
  let r = { a172 = #0.; b172 = #{ a143 = #1.; b143 = #{ a27 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a172 *)
  let actual = r.a172 in
  let expected = #0. in
  mark_test_run 1393;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1393 failed";
  (* Paths of depth 1 *)
  (* .b172 *)
  let actual = r.b172 in
  let expected = #{ a143 = #1.; b143 = #{ a27 = 2. } } in
  mark_test_run 1394;
  let test = (fun #{ a143 = a1431; b143 = b1431 } #{ a143 = a1432; b143 = b1432 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1431 a1432 && (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) b1431 b1432) actual expected in
  if not test then failwithf "test 1394 failed";
  (* Paths of depth 2 *)
  (* .b172.#a143 *)
  let actual = r.b172.#a143 in
  let expected = #1. in
  mark_test_run 1395;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1395 failed";
  (* .b172.#b143 *)
  let actual = r.b172.#b143 in
  let expected = #{ a27 = 2. } in
  mark_test_run 1396;
  let test = (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) actual expected in
  if not test then failwithf "test 1396 failed";
  (* Paths of depth 3 *)
  (* .b172.#b143.#a27 *)
  let actual = r.b172.#b143.#a27 in
  let expected = 2. in
  mark_test_run 1397;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1397 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a172 = a1721; b172 = b1721 } { a172 = a1722; b172 = b1722 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1721 a1722 && (fun #{ a143 = a1431; b143 = b1431 } #{ a143 = a1432; b143 = b1432 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1431 a1432 && (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) b1431 b1432) b1721 b1722) in
  let next_r = { a172 = #100.; b172 = #{ a143 = #101.; b143 = #{ a27 = 102. } } } in
  let r_expected = { a172 = #0.; b172 = #{ a143 = #1.; b143 = #{ a27 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a172 *)
  r.a172 <- next_r.a172;
  let r_expected = { r_expected with a172 = next_r.a172 } in
  mark_test_run 1398;
  let test = eq r r_expected in
  if not test then failwithf "test 1398 failed";
  Gc.compact ();
  (* .b172 *)
  r.b172 <- next_r.b172;
  let r_expected = { r_expected with b172 = next_r.b172 } in
  mark_test_run 1399;
  let test = eq r r_expected in
  if not test then failwithf "test 1399 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a172; b172 = #{ a143; b143 = #{ a27 } } } = r in
  let expected_a172 = #100. in
  mark_test_run 1400;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a172 a172 in
  if not test then failwithf "test 1400 failed";
  let expected_a143 = #101. in
  mark_test_run 1401;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a143 a143 in
  if not test then failwithf "test 1401 failed";
  let expected_a27 = 102. in
  mark_test_run 1402;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a27 a27 in
  if not test then failwithf "test 1402 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a172; b172 } = r in
  let expected_a172 = #100. in
  mark_test_run 1403;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a172 a172 in
  if not test then failwithf "test 1403 failed";
  let expected_b172 = #{ a143 = #101.; b143 = #{ a27 = 102. } } in
  mark_test_run 1404;
  let test = (fun #{ a143 = a1431; b143 = b1431 } #{ a143 = a1432; b143 = b1432 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1431 a1432 && (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) b1431 b1432) expected_b172 b172 in
  if not test then failwithf "test 1404 failed";

  (***************************************************)
  (*   t173 = { float#; #{ float#; #{ float# } } }   *)
  (***************************************************)
  let r = { a173 = #0.; b173 = #{ a145 = #1.; b145 = #{ a135 = #2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a173 *)
  let actual = r.a173 in
  let expected = #0. in
  mark_test_run 1405;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1405 failed";
  (* Paths of depth 1 *)
  (* .b173 *)
  let actual = r.b173 in
  let expected = #{ a145 = #1.; b145 = #{ a135 = #2. } } in
  mark_test_run 1406;
  let test = (fun #{ a145 = a1451; b145 = b1451 } #{ a145 = a1452; b145 = b1452 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1451 a1452 && (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) b1451 b1452) actual expected in
  if not test then failwithf "test 1406 failed";
  (* Paths of depth 2 *)
  (* .b173.#a145 *)
  let actual = r.b173.#a145 in
  let expected = #1. in
  mark_test_run 1407;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1407 failed";
  (* .b173.#b145 *)
  let actual = r.b173.#b145 in
  let expected = #{ a135 = #2. } in
  mark_test_run 1408;
  let test = (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) actual expected in
  if not test then failwithf "test 1408 failed";
  (* Paths of depth 3 *)
  (* .b173.#b145.#a135 *)
  let actual = r.b173.#b145.#a135 in
  let expected = #2. in
  mark_test_run 1409;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1409 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a173 = a1731; b173 = b1731 } { a173 = a1732; b173 = b1732 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1731 a1732 && (fun #{ a145 = a1451; b145 = b1451 } #{ a145 = a1452; b145 = b1452 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1451 a1452 && (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) b1451 b1452) b1731 b1732) in
  let next_r = { a173 = #100.; b173 = #{ a145 = #101.; b145 = #{ a135 = #102. } } } in
  let r_expected = { a173 = #0.; b173 = #{ a145 = #1.; b145 = #{ a135 = #2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a173 *)
  r.a173 <- next_r.a173;
  let r_expected = { r_expected with a173 = next_r.a173 } in
  mark_test_run 1410;
  let test = eq r r_expected in
  if not test then failwithf "test 1410 failed";
  Gc.compact ();
  (* .b173 *)
  r.b173 <- next_r.b173;
  let r_expected = { r_expected with b173 = next_r.b173 } in
  mark_test_run 1411;
  let test = eq r r_expected in
  if not test then failwithf "test 1411 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a173; b173 = #{ a145; b145 = #{ a135 } } } = r in
  let expected_a173 = #100. in
  mark_test_run 1412;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a173 a173 in
  if not test then failwithf "test 1412 failed";
  let expected_a145 = #101. in
  mark_test_run 1413;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a145 a145 in
  if not test then failwithf "test 1413 failed";
  let expected_a135 = #102. in
  mark_test_run 1414;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a135 a135 in
  if not test then failwithf "test 1414 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a173; b173 } = r in
  let expected_a173 = #100. in
  mark_test_run 1415;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a173 a173 in
  if not test then failwithf "test 1415 failed";
  let expected_b173 = #{ a145 = #101.; b145 = #{ a135 = #102. } } in
  mark_test_run 1416;
  let test = (fun #{ a145 = a1451; b145 = b1451 } #{ a145 = a1452; b145 = b1452 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1451 a1452 && (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) b1451 b1452) expected_b173 b173 in
  if not test then failwithf "test 1416 failed";

  (*************************************************)
  (*   t174 = { float#; #{ #{ float; float } } }   *)
  (*************************************************)
  let r = { a174 = #0.; b174 = #{ a60 = #{ a42 = 1.; b42 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a174 *)
  let actual = r.a174 in
  let expected = #0. in
  mark_test_run 1417;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1417 failed";
  (* Paths of depth 1 *)
  (* .b174 *)
  let actual = r.b174 in
  let expected = #{ a60 = #{ a42 = 1.; b42 = 2. } } in
  mark_test_run 1418;
  let test = (fun #{ a60 = a601 } #{ a60 = a602 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) a601 a602) actual expected in
  if not test then failwithf "test 1418 failed";
  (* Paths of depth 2 *)
  (* .b174.#a60 *)
  let actual = r.b174.#a60 in
  let expected = #{ a42 = 1.; b42 = 2. } in
  mark_test_run 1419;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) actual expected in
  if not test then failwithf "test 1419 failed";
  (* Paths of depth 3 *)
  (* .b174.#a60.#a42 *)
  let actual = r.b174.#a60.#a42 in
  let expected = 1. in
  mark_test_run 1420;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1420 failed";
  (* .b174.#a60.#b42 *)
  let actual = r.b174.#a60.#b42 in
  let expected = 2. in
  mark_test_run 1421;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1421 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a174 = a1741; b174 = b1741 } { a174 = a1742; b174 = b1742 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1741 a1742 && (fun #{ a60 = a601 } #{ a60 = a602 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) a601 a602) b1741 b1742) in
  let next_r = { a174 = #100.; b174 = #{ a60 = #{ a42 = 101.; b42 = 102. } } } in
  let r_expected = { a174 = #0.; b174 = #{ a60 = #{ a42 = 1.; b42 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a174 *)
  r.a174 <- next_r.a174;
  let r_expected = { r_expected with a174 = next_r.a174 } in
  mark_test_run 1422;
  let test = eq r r_expected in
  if not test then failwithf "test 1422 failed";
  Gc.compact ();
  (* .b174 *)
  r.b174 <- next_r.b174;
  let r_expected = { r_expected with b174 = next_r.b174 } in
  mark_test_run 1423;
  let test = eq r r_expected in
  if not test then failwithf "test 1423 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a174; b174 = #{ a60 = #{ a42; b42 } } } = r in
  let expected_a174 = #100. in
  mark_test_run 1424;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a174 a174 in
  if not test then failwithf "test 1424 failed";
  let expected_a42 = 101. in
  mark_test_run 1425;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a42 a42 in
  if not test then failwithf "test 1425 failed";
  let expected_b42 = 102. in
  mark_test_run 1426;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b42 b42 in
  if not test then failwithf "test 1426 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a174; b174 } = r in
  let expected_a174 = #100. in
  mark_test_run 1427;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a174 a174 in
  if not test then failwithf "test 1427 failed";
  let expected_b174 = #{ a60 = #{ a42 = 101.; b42 = 102. } } in
  mark_test_run 1428;
  let test = (fun #{ a60 = a601 } #{ a60 = a602 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) a601 a602) expected_b174 b174 in
  if not test then failwithf "test 1428 failed";

  (**************************************************)
  (*   t175 = { float#; #{ #{ float; float# } } }   *)
  (**************************************************)
  let r = { a175 = #0.; b175 = #{ a151 = #{ a131 = 1.; b131 = #2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a175 *)
  let actual = r.a175 in
  let expected = #0. in
  mark_test_run 1429;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1429 failed";
  (* Paths of depth 1 *)
  (* .b175 *)
  let actual = r.b175 in
  let expected = #{ a151 = #{ a131 = 1.; b131 = #2. } } in
  mark_test_run 1430;
  let test = (fun #{ a151 = a1511 } #{ a151 = a1512 } -> (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) a1511 a1512) actual expected in
  if not test then failwithf "test 1430 failed";
  (* Paths of depth 2 *)
  (* .b175.#a151 *)
  let actual = r.b175.#a151 in
  let expected = #{ a131 = 1.; b131 = #2. } in
  mark_test_run 1431;
  let test = (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) actual expected in
  if not test then failwithf "test 1431 failed";
  (* Paths of depth 3 *)
  (* .b175.#a151.#a131 *)
  let actual = r.b175.#a151.#a131 in
  let expected = 1. in
  mark_test_run 1432;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1432 failed";
  (* .b175.#a151.#b131 *)
  let actual = r.b175.#a151.#b131 in
  let expected = #2. in
  mark_test_run 1433;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1433 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a175 = a1751; b175 = b1751 } { a175 = a1752; b175 = b1752 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1751 a1752 && (fun #{ a151 = a1511 } #{ a151 = a1512 } -> (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) a1511 a1512) b1751 b1752) in
  let next_r = { a175 = #100.; b175 = #{ a151 = #{ a131 = 101.; b131 = #102. } } } in
  let r_expected = { a175 = #0.; b175 = #{ a151 = #{ a131 = 1.; b131 = #2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a175 *)
  r.a175 <- next_r.a175;
  let r_expected = { r_expected with a175 = next_r.a175 } in
  mark_test_run 1434;
  let test = eq r r_expected in
  if not test then failwithf "test 1434 failed";
  Gc.compact ();
  (* .b175 *)
  r.b175 <- next_r.b175;
  let r_expected = { r_expected with b175 = next_r.b175 } in
  mark_test_run 1435;
  let test = eq r r_expected in
  if not test then failwithf "test 1435 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a175; b175 = #{ a151 = #{ a131; b131 } } } = r in
  let expected_a175 = #100. in
  mark_test_run 1436;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a175 a175 in
  if not test then failwithf "test 1436 failed";
  let expected_a131 = 101. in
  mark_test_run 1437;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a131 a131 in
  if not test then failwithf "test 1437 failed";
  let expected_b131 = #102. in
  mark_test_run 1438;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b131 b131 in
  if not test then failwithf "test 1438 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a175; b175 } = r in
  let expected_a175 = #100. in
  mark_test_run 1439;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a175 a175 in
  if not test then failwithf "test 1439 failed";
  let expected_b175 = #{ a151 = #{ a131 = 101.; b131 = #102. } } in
  mark_test_run 1440;
  let test = (fun #{ a151 = a1511 } #{ a151 = a1512 } -> (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) a1511 a1512) expected_b175 b175 in
  if not test then failwithf "test 1440 failed";

  (**************************************************)
  (*   t176 = { float#; #{ #{ float#; float } } }   *)
  (**************************************************)
  let r = { a176 = #0.; b176 = #{ a153 = #{ a139 = #1.; b139 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a176 *)
  let actual = r.a176 in
  let expected = #0. in
  mark_test_run 1441;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1441 failed";
  (* Paths of depth 1 *)
  (* .b176 *)
  let actual = r.b176 in
  let expected = #{ a153 = #{ a139 = #1.; b139 = 2. } } in
  mark_test_run 1442;
  let test = (fun #{ a153 = a1531 } #{ a153 = a1532 } -> (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) a1531 a1532) actual expected in
  if not test then failwithf "test 1442 failed";
  (* Paths of depth 2 *)
  (* .b176.#a153 *)
  let actual = r.b176.#a153 in
  let expected = #{ a139 = #1.; b139 = 2. } in
  mark_test_run 1443;
  let test = (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) actual expected in
  if not test then failwithf "test 1443 failed";
  (* Paths of depth 3 *)
  (* .b176.#a153.#a139 *)
  let actual = r.b176.#a153.#a139 in
  let expected = #1. in
  mark_test_run 1444;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1444 failed";
  (* .b176.#a153.#b139 *)
  let actual = r.b176.#a153.#b139 in
  let expected = 2. in
  mark_test_run 1445;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1445 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a176 = a1761; b176 = b1761 } { a176 = a1762; b176 = b1762 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1761 a1762 && (fun #{ a153 = a1531 } #{ a153 = a1532 } -> (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) a1531 a1532) b1761 b1762) in
  let next_r = { a176 = #100.; b176 = #{ a153 = #{ a139 = #101.; b139 = 102. } } } in
  let r_expected = { a176 = #0.; b176 = #{ a153 = #{ a139 = #1.; b139 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a176 *)
  r.a176 <- next_r.a176;
  let r_expected = { r_expected with a176 = next_r.a176 } in
  mark_test_run 1446;
  let test = eq r r_expected in
  if not test then failwithf "test 1446 failed";
  Gc.compact ();
  (* .b176 *)
  r.b176 <- next_r.b176;
  let r_expected = { r_expected with b176 = next_r.b176 } in
  mark_test_run 1447;
  let test = eq r r_expected in
  if not test then failwithf "test 1447 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a176; b176 = #{ a153 = #{ a139; b139 } } } = r in
  let expected_a176 = #100. in
  mark_test_run 1448;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a176 a176 in
  if not test then failwithf "test 1448 failed";
  let expected_a139 = #101. in
  mark_test_run 1449;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a139 a139 in
  if not test then failwithf "test 1449 failed";
  let expected_b139 = 102. in
  mark_test_run 1450;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b139 b139 in
  if not test then failwithf "test 1450 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a176; b176 } = r in
  let expected_a176 = #100. in
  mark_test_run 1451;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a176 a176 in
  if not test then failwithf "test 1451 failed";
  let expected_b176 = #{ a153 = #{ a139 = #101.; b139 = 102. } } in
  mark_test_run 1452;
  let test = (fun #{ a153 = a1531 } #{ a153 = a1532 } -> (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) a1531 a1532) expected_b176 b176 in
  if not test then failwithf "test 1452 failed";

  (***************************************************)
  (*   t177 = { float#; #{ #{ float#; float# } } }   *)
  (***************************************************)
  let r = { a177 = #0.; b177 = #{ a155 = #{ a141 = #1.; b141 = #2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a177 *)
  let actual = r.a177 in
  let expected = #0. in
  mark_test_run 1453;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1453 failed";
  (* Paths of depth 1 *)
  (* .b177 *)
  let actual = r.b177 in
  let expected = #{ a155 = #{ a141 = #1.; b141 = #2. } } in
  mark_test_run 1454;
  let test = (fun #{ a155 = a1551 } #{ a155 = a1552 } -> (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) a1551 a1552) actual expected in
  if not test then failwithf "test 1454 failed";
  (* Paths of depth 2 *)
  (* .b177.#a155 *)
  let actual = r.b177.#a155 in
  let expected = #{ a141 = #1.; b141 = #2. } in
  mark_test_run 1455;
  let test = (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) actual expected in
  if not test then failwithf "test 1455 failed";
  (* Paths of depth 3 *)
  (* .b177.#a155.#a141 *)
  let actual = r.b177.#a155.#a141 in
  let expected = #1. in
  mark_test_run 1456;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1456 failed";
  (* .b177.#a155.#b141 *)
  let actual = r.b177.#a155.#b141 in
  let expected = #2. in
  mark_test_run 1457;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1457 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a177 = a1771; b177 = b1771 } { a177 = a1772; b177 = b1772 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1771 a1772 && (fun #{ a155 = a1551 } #{ a155 = a1552 } -> (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) a1551 a1552) b1771 b1772) in
  let next_r = { a177 = #100.; b177 = #{ a155 = #{ a141 = #101.; b141 = #102. } } } in
  let r_expected = { a177 = #0.; b177 = #{ a155 = #{ a141 = #1.; b141 = #2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a177 *)
  r.a177 <- next_r.a177;
  let r_expected = { r_expected with a177 = next_r.a177 } in
  mark_test_run 1458;
  let test = eq r r_expected in
  if not test then failwithf "test 1458 failed";
  Gc.compact ();
  (* .b177 *)
  r.b177 <- next_r.b177;
  let r_expected = { r_expected with b177 = next_r.b177 } in
  mark_test_run 1459;
  let test = eq r r_expected in
  if not test then failwithf "test 1459 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a177; b177 = #{ a155 = #{ a141; b141 } } } = r in
  let expected_a177 = #100. in
  mark_test_run 1460;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a177 a177 in
  if not test then failwithf "test 1460 failed";
  let expected_a141 = #101. in
  mark_test_run 1461;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a141 a141 in
  if not test then failwithf "test 1461 failed";
  let expected_b141 = #102. in
  mark_test_run 1462;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b141 b141 in
  if not test then failwithf "test 1462 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a177; b177 } = r in
  let expected_a177 = #100. in
  mark_test_run 1463;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a177 a177 in
  if not test then failwithf "test 1463 failed";
  let expected_b177 = #{ a155 = #{ a141 = #101.; b141 = #102. } } in
  mark_test_run 1464;
  let test = (fun #{ a155 = a1551 } #{ a155 = a1552 } -> (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) a1551 a1552) expected_b177 b177 in
  if not test then failwithf "test 1464 failed";

  (***************************)
  (*   t178 = { #{ int } }   *)
  (***************************)
  let r = { a178 = #{ a14 = 0 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a178 *)
  let actual = r.a178 in
  let expected = #{ a14 = 0 } in
  mark_test_run 1465;
  let test = (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) actual expected in
  if not test then failwithf "test 1465 failed";
  (* Paths of depth 2 *)
  (* .a178.#a14 *)
  let actual = r.a178.#a14 in
  let expected = 0 in
  mark_test_run 1466;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1466 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a178 = a1781 } { a178 = a1782 } -> (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) a1781 a1782) in
  let next_r = { a178 = #{ a14 = 100 } } in
  let r_expected = { a178 = #{ a14 = 0 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a178 *)
  r.a178 <- next_r.a178;
  let r_expected = { r_expected with a178 = next_r.a178 } in
  mark_test_run 1467;
  let test = eq r r_expected in
  if not test then failwithf "test 1467 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a178 = #{ a14 } } = r in
  let expected_a14 = 100 in
  mark_test_run 1468;
  let test = (fun a b -> Int.equal a b) expected_a14 a14 in
  if not test then failwithf "test 1468 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a178 } = r in
  let expected_a178 = #{ a14 = 100 } in
  mark_test_run 1469;
  let test = (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) expected_a178 a178 in
  if not test then failwithf "test 1469 failed";

  (********************************)
  (*   t179 = { #{ int }; int }   *)
  (********************************)
  let r = { a179 = #{ a14 = 0 }; b179 = 1 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a179 *)
  let actual = r.a179 in
  let expected = #{ a14 = 0 } in
  mark_test_run 1470;
  let test = (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) actual expected in
  if not test then failwithf "test 1470 failed";
  (* Paths of depth 2 *)
  (* .a179.#a14 *)
  let actual = r.a179.#a14 in
  let expected = 0 in
  mark_test_run 1471;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1471 failed";
  (* Paths of depth 1 *)
  (* .b179 *)
  let actual = r.b179 in
  let expected = 1 in
  mark_test_run 1472;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1472 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a179 = a1791; b179 = b1791 } { a179 = a1792; b179 = b1792 } -> (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) a1791 a1792 && (fun a b -> Int.equal a b) b1791 b1792) in
  let next_r = { a179 = #{ a14 = 100 }; b179 = 101 } in
  let r_expected = { a179 = #{ a14 = 0 }; b179 = 1 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a179 *)
  r.a179 <- next_r.a179;
  let r_expected = { r_expected with a179 = next_r.a179 } in
  mark_test_run 1473;
  let test = eq r r_expected in
  if not test then failwithf "test 1473 failed";
  Gc.compact ();
  (* .b179 *)
  r.b179 <- next_r.b179;
  let r_expected = { r_expected with b179 = next_r.b179 } in
  mark_test_run 1474;
  let test = eq r r_expected in
  if not test then failwithf "test 1474 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a179 = #{ a14 }; b179 } = r in
  let expected_a14 = 100 in
  mark_test_run 1475;
  let test = (fun a b -> Int.equal a b) expected_a14 a14 in
  if not test then failwithf "test 1475 failed";
  let expected_b179 = 101 in
  mark_test_run 1476;
  let test = (fun a b -> Int.equal a b) expected_b179 b179 in
  if not test then failwithf "test 1476 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a179; b179 } = r in
  let expected_a179 = #{ a14 = 100 } in
  mark_test_run 1477;
  let test = (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) expected_a179 a179 in
  if not test then failwithf "test 1477 failed";
  let expected_b179 = 101 in
  mark_test_run 1478;
  let test = (fun a b -> Int.equal a b) expected_b179 b179 in
  if not test then failwithf "test 1478 failed";

  (***********************************)
  (*   t180 = { #{ int }; int32# }   *)
  (***********************************)
  let r = { a180 = #{ a14 = 0 }; b180 = #1l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a180 *)
  let actual = r.a180 in
  let expected = #{ a14 = 0 } in
  mark_test_run 1479;
  let test = (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) actual expected in
  if not test then failwithf "test 1479 failed";
  (* Paths of depth 2 *)
  (* .a180.#a14 *)
  let actual = r.a180.#a14 in
  let expected = 0 in
  mark_test_run 1480;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1480 failed";
  (* Paths of depth 1 *)
  (* .b180 *)
  let actual = r.b180 in
  let expected = #1l in
  mark_test_run 1481;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1481 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a180 = a1801; b180 = b1801 } { a180 = a1802; b180 = b1802 } -> (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) a1801 a1802 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b1801 b1802) in
  let next_r = { a180 = #{ a14 = 100 }; b180 = #101l } in
  let r_expected = { a180 = #{ a14 = 0 }; b180 = #1l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a180 *)
  r.a180 <- next_r.a180;
  let r_expected = { r_expected with a180 = next_r.a180 } in
  mark_test_run 1482;
  let test = eq r r_expected in
  if not test then failwithf "test 1482 failed";
  Gc.compact ();
  (* .b180 *)
  r.b180 <- next_r.b180;
  let r_expected = { r_expected with b180 = next_r.b180 } in
  mark_test_run 1483;
  let test = eq r r_expected in
  if not test then failwithf "test 1483 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a180 = #{ a14 }; b180 } = r in
  let expected_a14 = 100 in
  mark_test_run 1484;
  let test = (fun a b -> Int.equal a b) expected_a14 a14 in
  if not test then failwithf "test 1484 failed";
  let expected_b180 = #101l in
  mark_test_run 1485;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b180 b180 in
  if not test then failwithf "test 1485 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a180; b180 } = r in
  let expected_a180 = #{ a14 = 100 } in
  mark_test_run 1486;
  let test = (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) expected_a180 a180 in
  if not test then failwithf "test 1486 failed";
  let expected_b180 = #101l in
  mark_test_run 1487;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b180 b180 in
  if not test then failwithf "test 1487 failed";

  (**********************************)
  (*   t181 = { #{ int }; float }   *)
  (**********************************)
  let r = { a181 = #{ a14 = 0 }; b181 = 1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a181 *)
  let actual = r.a181 in
  let expected = #{ a14 = 0 } in
  mark_test_run 1488;
  let test = (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) actual expected in
  if not test then failwithf "test 1488 failed";
  (* Paths of depth 2 *)
  (* .a181.#a14 *)
  let actual = r.a181.#a14 in
  let expected = 0 in
  mark_test_run 1489;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1489 failed";
  (* Paths of depth 1 *)
  (* .b181 *)
  let actual = r.b181 in
  let expected = 1. in
  mark_test_run 1490;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1490 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a181 = a1811; b181 = b1811 } { a181 = a1812; b181 = b1812 } -> (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) a1811 a1812 && (fun a b -> Float.equal (globalize a) (globalize b)) b1811 b1812) in
  let next_r = { a181 = #{ a14 = 100 }; b181 = 101. } in
  let r_expected = { a181 = #{ a14 = 0 }; b181 = 1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a181 *)
  r.a181 <- next_r.a181;
  let r_expected = { r_expected with a181 = next_r.a181 } in
  mark_test_run 1491;
  let test = eq r r_expected in
  if not test then failwithf "test 1491 failed";
  Gc.compact ();
  (* .b181 *)
  r.b181 <- next_r.b181;
  let r_expected = { r_expected with b181 = next_r.b181 } in
  mark_test_run 1492;
  let test = eq r r_expected in
  if not test then failwithf "test 1492 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a181 = #{ a14 }; b181 } = r in
  let expected_a14 = 100 in
  mark_test_run 1493;
  let test = (fun a b -> Int.equal a b) expected_a14 a14 in
  if not test then failwithf "test 1493 failed";
  let expected_b181 = 101. in
  mark_test_run 1494;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b181 b181 in
  if not test then failwithf "test 1494 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a181; b181 } = r in
  let expected_a181 = #{ a14 = 100 } in
  mark_test_run 1495;
  let test = (fun #{ a14 = a141 } #{ a14 = a142 } -> (fun a b -> Int.equal a b) a141 a142) expected_a181 a181 in
  if not test then failwithf "test 1495 failed";
  let expected_b181 = 101. in
  mark_test_run 1496;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b181 b181 in
  if not test then failwithf "test 1496 failed";

  (********************************)
  (*   t182 = { #{ int; int } }   *)
  (********************************)
  let r = { a182 = #{ a16 = 0; b16 = 1 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a182 *)
  let actual = r.a182 in
  let expected = #{ a16 = 0; b16 = 1 } in
  mark_test_run 1497;
  let test = (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) actual expected in
  if not test then failwithf "test 1497 failed";
  (* Paths of depth 2 *)
  (* .a182.#a16 *)
  let actual = r.a182.#a16 in
  let expected = 0 in
  mark_test_run 1498;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1498 failed";
  (* .a182.#b16 *)
  let actual = r.a182.#b16 in
  let expected = 1 in
  mark_test_run 1499;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1499 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a182 = a1821 } { a182 = a1822 } -> (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) a1821 a1822) in
  let next_r = { a182 = #{ a16 = 100; b16 = 101 } } in
  let r_expected = { a182 = #{ a16 = 0; b16 = 1 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a182 *)
  r.a182 <- next_r.a182;
  let r_expected = { r_expected with a182 = next_r.a182 } in
  mark_test_run 1500;
  let test = eq r r_expected in
  if not test then failwithf "test 1500 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a182 = #{ a16; b16 } } = r in
  let expected_a16 = 100 in
  mark_test_run 1501;
  let test = (fun a b -> Int.equal a b) expected_a16 a16 in
  if not test then failwithf "test 1501 failed";
  let expected_b16 = 101 in
  mark_test_run 1502;
  let test = (fun a b -> Int.equal a b) expected_b16 b16 in
  if not test then failwithf "test 1502 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a182 } = r in
  let expected_a182 = #{ a16 = 100; b16 = 101 } in
  mark_test_run 1503;
  let test = (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) expected_a182 a182 in
  if not test then failwithf "test 1503 failed";

  (*************************************)
  (*   t183 = { #{ int; int }; int }   *)
  (*************************************)
  let r = { a183 = #{ a16 = 0; b16 = 1 }; b183 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a183 *)
  let actual = r.a183 in
  let expected = #{ a16 = 0; b16 = 1 } in
  mark_test_run 1504;
  let test = (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) actual expected in
  if not test then failwithf "test 1504 failed";
  (* Paths of depth 2 *)
  (* .a183.#a16 *)
  let actual = r.a183.#a16 in
  let expected = 0 in
  mark_test_run 1505;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1505 failed";
  (* .a183.#b16 *)
  let actual = r.a183.#b16 in
  let expected = 1 in
  mark_test_run 1506;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1506 failed";
  (* Paths of depth 1 *)
  (* .b183 *)
  let actual = r.b183 in
  let expected = 2 in
  mark_test_run 1507;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1507 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a183 = a1831; b183 = b1831 } { a183 = a1832; b183 = b1832 } -> (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) a1831 a1832 && (fun a b -> Int.equal a b) b1831 b1832) in
  let next_r = { a183 = #{ a16 = 100; b16 = 101 }; b183 = 102 } in
  let r_expected = { a183 = #{ a16 = 0; b16 = 1 }; b183 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a183 *)
  r.a183 <- next_r.a183;
  let r_expected = { r_expected with a183 = next_r.a183 } in
  mark_test_run 1508;
  let test = eq r r_expected in
  if not test then failwithf "test 1508 failed";
  Gc.compact ();
  (* .b183 *)
  r.b183 <- next_r.b183;
  let r_expected = { r_expected with b183 = next_r.b183 } in
  mark_test_run 1509;
  let test = eq r r_expected in
  if not test then failwithf "test 1509 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a183 = #{ a16; b16 }; b183 } = r in
  let expected_a16 = 100 in
  mark_test_run 1510;
  let test = (fun a b -> Int.equal a b) expected_a16 a16 in
  if not test then failwithf "test 1510 failed";
  let expected_b16 = 101 in
  mark_test_run 1511;
  let test = (fun a b -> Int.equal a b) expected_b16 b16 in
  if not test then failwithf "test 1511 failed";
  let expected_b183 = 102 in
  mark_test_run 1512;
  let test = (fun a b -> Int.equal a b) expected_b183 b183 in
  if not test then failwithf "test 1512 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a183; b183 } = r in
  let expected_a183 = #{ a16 = 100; b16 = 101 } in
  mark_test_run 1513;
  let test = (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) expected_a183 a183 in
  if not test then failwithf "test 1513 failed";
  let expected_b183 = 102 in
  mark_test_run 1514;
  let test = (fun a b -> Int.equal a b) expected_b183 b183 in
  if not test then failwithf "test 1514 failed";

  (****************************************)
  (*   t184 = { #{ int; int }; int32# }   *)
  (****************************************)
  let r = { a184 = #{ a16 = 0; b16 = 1 }; b184 = #2l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a184 *)
  let actual = r.a184 in
  let expected = #{ a16 = 0; b16 = 1 } in
  mark_test_run 1515;
  let test = (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) actual expected in
  if not test then failwithf "test 1515 failed";
  (* Paths of depth 2 *)
  (* .a184.#a16 *)
  let actual = r.a184.#a16 in
  let expected = 0 in
  mark_test_run 1516;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1516 failed";
  (* .a184.#b16 *)
  let actual = r.a184.#b16 in
  let expected = 1 in
  mark_test_run 1517;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1517 failed";
  (* Paths of depth 1 *)
  (* .b184 *)
  let actual = r.b184 in
  let expected = #2l in
  mark_test_run 1518;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1518 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a184 = a1841; b184 = b1841 } { a184 = a1842; b184 = b1842 } -> (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) a1841 a1842 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b1841 b1842) in
  let next_r = { a184 = #{ a16 = 100; b16 = 101 }; b184 = #102l } in
  let r_expected = { a184 = #{ a16 = 0; b16 = 1 }; b184 = #2l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a184 *)
  r.a184 <- next_r.a184;
  let r_expected = { r_expected with a184 = next_r.a184 } in
  mark_test_run 1519;
  let test = eq r r_expected in
  if not test then failwithf "test 1519 failed";
  Gc.compact ();
  (* .b184 *)
  r.b184 <- next_r.b184;
  let r_expected = { r_expected with b184 = next_r.b184 } in
  mark_test_run 1520;
  let test = eq r r_expected in
  if not test then failwithf "test 1520 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a184 = #{ a16; b16 }; b184 } = r in
  let expected_a16 = 100 in
  mark_test_run 1521;
  let test = (fun a b -> Int.equal a b) expected_a16 a16 in
  if not test then failwithf "test 1521 failed";
  let expected_b16 = 101 in
  mark_test_run 1522;
  let test = (fun a b -> Int.equal a b) expected_b16 b16 in
  if not test then failwithf "test 1522 failed";
  let expected_b184 = #102l in
  mark_test_run 1523;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b184 b184 in
  if not test then failwithf "test 1523 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a184; b184 } = r in
  let expected_a184 = #{ a16 = 100; b16 = 101 } in
  mark_test_run 1524;
  let test = (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) expected_a184 a184 in
  if not test then failwithf "test 1524 failed";
  let expected_b184 = #102l in
  mark_test_run 1525;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b184 b184 in
  if not test then failwithf "test 1525 failed";

  (***************************************)
  (*   t185 = { #{ int; int }; float }   *)
  (***************************************)
  let r = { a185 = #{ a16 = 0; b16 = 1 }; b185 = 2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a185 *)
  let actual = r.a185 in
  let expected = #{ a16 = 0; b16 = 1 } in
  mark_test_run 1526;
  let test = (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) actual expected in
  if not test then failwithf "test 1526 failed";
  (* Paths of depth 2 *)
  (* .a185.#a16 *)
  let actual = r.a185.#a16 in
  let expected = 0 in
  mark_test_run 1527;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1527 failed";
  (* .a185.#b16 *)
  let actual = r.a185.#b16 in
  let expected = 1 in
  mark_test_run 1528;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1528 failed";
  (* Paths of depth 1 *)
  (* .b185 *)
  let actual = r.b185 in
  let expected = 2. in
  mark_test_run 1529;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1529 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a185 = a1851; b185 = b1851 } { a185 = a1852; b185 = b1852 } -> (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) a1851 a1852 && (fun a b -> Float.equal (globalize a) (globalize b)) b1851 b1852) in
  let next_r = { a185 = #{ a16 = 100; b16 = 101 }; b185 = 102. } in
  let r_expected = { a185 = #{ a16 = 0; b16 = 1 }; b185 = 2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a185 *)
  r.a185 <- next_r.a185;
  let r_expected = { r_expected with a185 = next_r.a185 } in
  mark_test_run 1530;
  let test = eq r r_expected in
  if not test then failwithf "test 1530 failed";
  Gc.compact ();
  (* .b185 *)
  r.b185 <- next_r.b185;
  let r_expected = { r_expected with b185 = next_r.b185 } in
  mark_test_run 1531;
  let test = eq r r_expected in
  if not test then failwithf "test 1531 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a185 = #{ a16; b16 }; b185 } = r in
  let expected_a16 = 100 in
  mark_test_run 1532;
  let test = (fun a b -> Int.equal a b) expected_a16 a16 in
  if not test then failwithf "test 1532 failed";
  let expected_b16 = 101 in
  mark_test_run 1533;
  let test = (fun a b -> Int.equal a b) expected_b16 b16 in
  if not test then failwithf "test 1533 failed";
  let expected_b185 = 102. in
  mark_test_run 1534;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b185 b185 in
  if not test then failwithf "test 1534 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a185; b185 } = r in
  let expected_a185 = #{ a16 = 100; b16 = 101 } in
  mark_test_run 1535;
  let test = (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) expected_a185 a185 in
  if not test then failwithf "test 1535 failed";
  let expected_b185 = 102. in
  mark_test_run 1536;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b185 b185 in
  if not test then failwithf "test 1536 failed";

  (***********************************)
  (*   t186 = { #{ int; int32# } }   *)
  (***********************************)
  let r = { a186 = #{ a18 = 0; b18 = #1l } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a186 *)
  let actual = r.a186 in
  let expected = #{ a18 = 0; b18 = #1l } in
  mark_test_run 1537;
  let test = (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) actual expected in
  if not test then failwithf "test 1537 failed";
  (* Paths of depth 2 *)
  (* .a186.#a18 *)
  let actual = r.a186.#a18 in
  let expected = 0 in
  mark_test_run 1538;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1538 failed";
  (* .a186.#b18 *)
  let actual = r.a186.#b18 in
  let expected = #1l in
  mark_test_run 1539;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1539 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a186 = a1861 } { a186 = a1862 } -> (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) a1861 a1862) in
  let next_r = { a186 = #{ a18 = 100; b18 = #101l } } in
  let r_expected = { a186 = #{ a18 = 0; b18 = #1l } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a186 *)
  r.a186 <- next_r.a186;
  let r_expected = { r_expected with a186 = next_r.a186 } in
  mark_test_run 1540;
  let test = eq r r_expected in
  if not test then failwithf "test 1540 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a186 = #{ a18; b18 } } = r in
  let expected_a18 = 100 in
  mark_test_run 1541;
  let test = (fun a b -> Int.equal a b) expected_a18 a18 in
  if not test then failwithf "test 1541 failed";
  let expected_b18 = #101l in
  mark_test_run 1542;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b18 b18 in
  if not test then failwithf "test 1542 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a186 } = r in
  let expected_a186 = #{ a18 = 100; b18 = #101l } in
  mark_test_run 1543;
  let test = (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) expected_a186 a186 in
  if not test then failwithf "test 1543 failed";

  (****************************************)
  (*   t187 = { #{ int; int32# }; int }   *)
  (****************************************)
  let r = { a187 = #{ a18 = 0; b18 = #1l }; b187 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a187 *)
  let actual = r.a187 in
  let expected = #{ a18 = 0; b18 = #1l } in
  mark_test_run 1544;
  let test = (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) actual expected in
  if not test then failwithf "test 1544 failed";
  (* Paths of depth 2 *)
  (* .a187.#a18 *)
  let actual = r.a187.#a18 in
  let expected = 0 in
  mark_test_run 1545;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1545 failed";
  (* .a187.#b18 *)
  let actual = r.a187.#b18 in
  let expected = #1l in
  mark_test_run 1546;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1546 failed";
  (* Paths of depth 1 *)
  (* .b187 *)
  let actual = r.b187 in
  let expected = 2 in
  mark_test_run 1547;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1547 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a187 = a1871; b187 = b1871 } { a187 = a1872; b187 = b1872 } -> (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) a1871 a1872 && (fun a b -> Int.equal a b) b1871 b1872) in
  let next_r = { a187 = #{ a18 = 100; b18 = #101l }; b187 = 102 } in
  let r_expected = { a187 = #{ a18 = 0; b18 = #1l }; b187 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a187 *)
  r.a187 <- next_r.a187;
  let r_expected = { r_expected with a187 = next_r.a187 } in
  mark_test_run 1548;
  let test = eq r r_expected in
  if not test then failwithf "test 1548 failed";
  Gc.compact ();
  (* .b187 *)
  r.b187 <- next_r.b187;
  let r_expected = { r_expected with b187 = next_r.b187 } in
  mark_test_run 1549;
  let test = eq r r_expected in
  if not test then failwithf "test 1549 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a187 = #{ a18; b18 }; b187 } = r in
  let expected_a18 = 100 in
  mark_test_run 1550;
  let test = (fun a b -> Int.equal a b) expected_a18 a18 in
  if not test then failwithf "test 1550 failed";
  let expected_b18 = #101l in
  mark_test_run 1551;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b18 b18 in
  if not test then failwithf "test 1551 failed";
  let expected_b187 = 102 in
  mark_test_run 1552;
  let test = (fun a b -> Int.equal a b) expected_b187 b187 in
  if not test then failwithf "test 1552 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a187; b187 } = r in
  let expected_a187 = #{ a18 = 100; b18 = #101l } in
  mark_test_run 1553;
  let test = (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) expected_a187 a187 in
  if not test then failwithf "test 1553 failed";
  let expected_b187 = 102 in
  mark_test_run 1554;
  let test = (fun a b -> Int.equal a b) expected_b187 b187 in
  if not test then failwithf "test 1554 failed";

  (*******************************************)
  (*   t188 = { #{ int; int32# }; int32# }   *)
  (*******************************************)
  let r = { a188 = #{ a18 = 0; b18 = #1l }; b188 = #2l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a188 *)
  let actual = r.a188 in
  let expected = #{ a18 = 0; b18 = #1l } in
  mark_test_run 1555;
  let test = (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) actual expected in
  if not test then failwithf "test 1555 failed";
  (* Paths of depth 2 *)
  (* .a188.#a18 *)
  let actual = r.a188.#a18 in
  let expected = 0 in
  mark_test_run 1556;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1556 failed";
  (* .a188.#b18 *)
  let actual = r.a188.#b18 in
  let expected = #1l in
  mark_test_run 1557;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1557 failed";
  (* Paths of depth 1 *)
  (* .b188 *)
  let actual = r.b188 in
  let expected = #2l in
  mark_test_run 1558;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1558 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a188 = a1881; b188 = b1881 } { a188 = a1882; b188 = b1882 } -> (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) a1881 a1882 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b1881 b1882) in
  let next_r = { a188 = #{ a18 = 100; b18 = #101l }; b188 = #102l } in
  let r_expected = { a188 = #{ a18 = 0; b18 = #1l }; b188 = #2l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a188 *)
  r.a188 <- next_r.a188;
  let r_expected = { r_expected with a188 = next_r.a188 } in
  mark_test_run 1559;
  let test = eq r r_expected in
  if not test then failwithf "test 1559 failed";
  Gc.compact ();
  (* .b188 *)
  r.b188 <- next_r.b188;
  let r_expected = { r_expected with b188 = next_r.b188 } in
  mark_test_run 1560;
  let test = eq r r_expected in
  if not test then failwithf "test 1560 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a188 = #{ a18; b18 }; b188 } = r in
  let expected_a18 = 100 in
  mark_test_run 1561;
  let test = (fun a b -> Int.equal a b) expected_a18 a18 in
  if not test then failwithf "test 1561 failed";
  let expected_b18 = #101l in
  mark_test_run 1562;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b18 b18 in
  if not test then failwithf "test 1562 failed";
  let expected_b188 = #102l in
  mark_test_run 1563;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b188 b188 in
  if not test then failwithf "test 1563 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a188; b188 } = r in
  let expected_a188 = #{ a18 = 100; b18 = #101l } in
  mark_test_run 1564;
  let test = (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) expected_a188 a188 in
  if not test then failwithf "test 1564 failed";
  let expected_b188 = #102l in
  mark_test_run 1565;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b188 b188 in
  if not test then failwithf "test 1565 failed";

  (**********************************)
  (*   t189 = { #{ int; float } }   *)
  (**********************************)
  let r = { a189 = #{ a20 = 0; b20 = 1. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a189 *)
  let actual = r.a189 in
  let expected = #{ a20 = 0; b20 = 1. } in
  mark_test_run 1566;
  let test = (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) actual expected in
  if not test then failwithf "test 1566 failed";
  (* Paths of depth 2 *)
  (* .a189.#a20 *)
  let actual = r.a189.#a20 in
  let expected = 0 in
  mark_test_run 1567;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1567 failed";
  (* .a189.#b20 *)
  let actual = r.a189.#b20 in
  let expected = 1. in
  mark_test_run 1568;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1568 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a189 = a1891 } { a189 = a1892 } -> (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) a1891 a1892) in
  let next_r = { a189 = #{ a20 = 100; b20 = 101. } } in
  let r_expected = { a189 = #{ a20 = 0; b20 = 1. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a189 *)
  r.a189 <- next_r.a189;
  let r_expected = { r_expected with a189 = next_r.a189 } in
  mark_test_run 1569;
  let test = eq r r_expected in
  if not test then failwithf "test 1569 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a189 = #{ a20; b20 } } = r in
  let expected_a20 = 100 in
  mark_test_run 1570;
  let test = (fun a b -> Int.equal a b) expected_a20 a20 in
  if not test then failwithf "test 1570 failed";
  let expected_b20 = 101. in
  mark_test_run 1571;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b20 b20 in
  if not test then failwithf "test 1571 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a189 } = r in
  let expected_a189 = #{ a20 = 100; b20 = 101. } in
  mark_test_run 1572;
  let test = (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) expected_a189 a189 in
  if not test then failwithf "test 1572 failed";

  (***************************************)
  (*   t190 = { #{ int; float }; int }   *)
  (***************************************)
  let r = { a190 = #{ a20 = 0; b20 = 1. }; b190 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a190 *)
  let actual = r.a190 in
  let expected = #{ a20 = 0; b20 = 1. } in
  mark_test_run 1573;
  let test = (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) actual expected in
  if not test then failwithf "test 1573 failed";
  (* Paths of depth 2 *)
  (* .a190.#a20 *)
  let actual = r.a190.#a20 in
  let expected = 0 in
  mark_test_run 1574;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1574 failed";
  (* .a190.#b20 *)
  let actual = r.a190.#b20 in
  let expected = 1. in
  mark_test_run 1575;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1575 failed";
  (* Paths of depth 1 *)
  (* .b190 *)
  let actual = r.b190 in
  let expected = 2 in
  mark_test_run 1576;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1576 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a190 = a1901; b190 = b1901 } { a190 = a1902; b190 = b1902 } -> (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) a1901 a1902 && (fun a b -> Int.equal a b) b1901 b1902) in
  let next_r = { a190 = #{ a20 = 100; b20 = 101. }; b190 = 102 } in
  let r_expected = { a190 = #{ a20 = 0; b20 = 1. }; b190 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a190 *)
  r.a190 <- next_r.a190;
  let r_expected = { r_expected with a190 = next_r.a190 } in
  mark_test_run 1577;
  let test = eq r r_expected in
  if not test then failwithf "test 1577 failed";
  Gc.compact ();
  (* .b190 *)
  r.b190 <- next_r.b190;
  let r_expected = { r_expected with b190 = next_r.b190 } in
  mark_test_run 1578;
  let test = eq r r_expected in
  if not test then failwithf "test 1578 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a190 = #{ a20; b20 }; b190 } = r in
  let expected_a20 = 100 in
  mark_test_run 1579;
  let test = (fun a b -> Int.equal a b) expected_a20 a20 in
  if not test then failwithf "test 1579 failed";
  let expected_b20 = 101. in
  mark_test_run 1580;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b20 b20 in
  if not test then failwithf "test 1580 failed";
  let expected_b190 = 102 in
  mark_test_run 1581;
  let test = (fun a b -> Int.equal a b) expected_b190 b190 in
  if not test then failwithf "test 1581 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a190; b190 } = r in
  let expected_a190 = #{ a20 = 100; b20 = 101. } in
  mark_test_run 1582;
  let test = (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) expected_a190 a190 in
  if not test then failwithf "test 1582 failed";
  let expected_b190 = 102 in
  mark_test_run 1583;
  let test = (fun a b -> Int.equal a b) expected_b190 b190 in
  if not test then failwithf "test 1583 failed";

  (*****************************************)
  (*   t191 = { #{ int; float }; float }   *)
  (*****************************************)
  let r = { a191 = #{ a20 = 0; b20 = 1. }; b191 = 2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a191 *)
  let actual = r.a191 in
  let expected = #{ a20 = 0; b20 = 1. } in
  mark_test_run 1584;
  let test = (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) actual expected in
  if not test then failwithf "test 1584 failed";
  (* Paths of depth 2 *)
  (* .a191.#a20 *)
  let actual = r.a191.#a20 in
  let expected = 0 in
  mark_test_run 1585;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1585 failed";
  (* .a191.#b20 *)
  let actual = r.a191.#b20 in
  let expected = 1. in
  mark_test_run 1586;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1586 failed";
  (* Paths of depth 1 *)
  (* .b191 *)
  let actual = r.b191 in
  let expected = 2. in
  mark_test_run 1587;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1587 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a191 = a1911; b191 = b1911 } { a191 = a1912; b191 = b1912 } -> (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) a1911 a1912 && (fun a b -> Float.equal (globalize a) (globalize b)) b1911 b1912) in
  let next_r = { a191 = #{ a20 = 100; b20 = 101. }; b191 = 102. } in
  let r_expected = { a191 = #{ a20 = 0; b20 = 1. }; b191 = 2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a191 *)
  r.a191 <- next_r.a191;
  let r_expected = { r_expected with a191 = next_r.a191 } in
  mark_test_run 1588;
  let test = eq r r_expected in
  if not test then failwithf "test 1588 failed";
  Gc.compact ();
  (* .b191 *)
  r.b191 <- next_r.b191;
  let r_expected = { r_expected with b191 = next_r.b191 } in
  mark_test_run 1589;
  let test = eq r r_expected in
  if not test then failwithf "test 1589 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a191 = #{ a20; b20 }; b191 } = r in
  let expected_a20 = 100 in
  mark_test_run 1590;
  let test = (fun a b -> Int.equal a b) expected_a20 a20 in
  if not test then failwithf "test 1590 failed";
  let expected_b20 = 101. in
  mark_test_run 1591;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b20 b20 in
  if not test then failwithf "test 1591 failed";
  let expected_b191 = 102. in
  mark_test_run 1592;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b191 b191 in
  if not test then failwithf "test 1592 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a191; b191 } = r in
  let expected_a191 = #{ a20 = 100; b20 = 101. } in
  mark_test_run 1593;
  let test = (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) expected_a191 a191 in
  if not test then failwithf "test 1593 failed";
  let expected_b191 = 102. in
  mark_test_run 1594;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b191 b191 in
  if not test then failwithf "test 1594 failed";

  (******************************************)
  (*   t193 = { #{ int; #{ int; int } } }   *)
  (******************************************)
  let r = { a193 = #{ a192 = 0; b192 = #{ a16 = 1; b16 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a193 *)
  let actual = r.a193 in
  let expected = #{ a192 = 0; b192 = #{ a16 = 1; b16 = 2 } } in
  mark_test_run 1595;
  let test = (fun #{ a192 = a1921; b192 = b1921 } #{ a192 = a1922; b192 = b1922 } -> (fun a b -> Int.equal a b) a1921 a1922 && (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) b1921 b1922) actual expected in
  if not test then failwithf "test 1595 failed";
  (* Paths of depth 2 *)
  (* .a193.#a192 *)
  let actual = r.a193.#a192 in
  let expected = 0 in
  mark_test_run 1596;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1596 failed";
  (* .a193.#b192 *)
  let actual = r.a193.#b192 in
  let expected = #{ a16 = 1; b16 = 2 } in
  mark_test_run 1597;
  let test = (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) actual expected in
  if not test then failwithf "test 1597 failed";
  (* Paths of depth 3 *)
  (* .a193.#b192.#a16 *)
  let actual = r.a193.#b192.#a16 in
  let expected = 1 in
  mark_test_run 1598;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1598 failed";
  (* .a193.#b192.#b16 *)
  let actual = r.a193.#b192.#b16 in
  let expected = 2 in
  mark_test_run 1599;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1599 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a193 = a1931 } { a193 = a1932 } -> (fun #{ a192 = a1921; b192 = b1921 } #{ a192 = a1922; b192 = b1922 } -> (fun a b -> Int.equal a b) a1921 a1922 && (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) b1921 b1922) a1931 a1932) in
  let next_r = { a193 = #{ a192 = 100; b192 = #{ a16 = 101; b16 = 102 } } } in
  let r_expected = { a193 = #{ a192 = 0; b192 = #{ a16 = 1; b16 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a193 *)
  r.a193 <- next_r.a193;
  let r_expected = { r_expected with a193 = next_r.a193 } in
  mark_test_run 1600;
  let test = eq r r_expected in
  if not test then failwithf "test 1600 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a193 = #{ a192; b192 = #{ a16; b16 } } } = r in
  let expected_a192 = 100 in
  mark_test_run 1601;
  let test = (fun a b -> Int.equal a b) expected_a192 a192 in
  if not test then failwithf "test 1601 failed";
  let expected_a16 = 101 in
  mark_test_run 1602;
  let test = (fun a b -> Int.equal a b) expected_a16 a16 in
  if not test then failwithf "test 1602 failed";
  let expected_b16 = 102 in
  mark_test_run 1603;
  let test = (fun a b -> Int.equal a b) expected_b16 b16 in
  if not test then failwithf "test 1603 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a193 } = r in
  let expected_a193 = #{ a192 = 100; b192 = #{ a16 = 101; b16 = 102 } } in
  mark_test_run 1604;
  let test = (fun #{ a192 = a1921; b192 = b1921 } #{ a192 = a1922; b192 = b1922 } -> (fun a b -> Int.equal a b) a1921 a1922 && (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) b1921 b1922) expected_a193 a193 in
  if not test then failwithf "test 1604 failed";

  (*********************************************)
  (*   t195 = { #{ int; #{ int; int32# } } }   *)
  (*********************************************)
  let r = { a195 = #{ a194 = 0; b194 = #{ a18 = 1; b18 = #2l } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a195 *)
  let actual = r.a195 in
  let expected = #{ a194 = 0; b194 = #{ a18 = 1; b18 = #2l } } in
  mark_test_run 1605;
  let test = (fun #{ a194 = a1941; b194 = b1941 } #{ a194 = a1942; b194 = b1942 } -> (fun a b -> Int.equal a b) a1941 a1942 && (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) b1941 b1942) actual expected in
  if not test then failwithf "test 1605 failed";
  (* Paths of depth 2 *)
  (* .a195.#a194 *)
  let actual = r.a195.#a194 in
  let expected = 0 in
  mark_test_run 1606;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1606 failed";
  (* .a195.#b194 *)
  let actual = r.a195.#b194 in
  let expected = #{ a18 = 1; b18 = #2l } in
  mark_test_run 1607;
  let test = (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) actual expected in
  if not test then failwithf "test 1607 failed";
  (* Paths of depth 3 *)
  (* .a195.#b194.#a18 *)
  let actual = r.a195.#b194.#a18 in
  let expected = 1 in
  mark_test_run 1608;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1608 failed";
  (* .a195.#b194.#b18 *)
  let actual = r.a195.#b194.#b18 in
  let expected = #2l in
  mark_test_run 1609;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1609 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a195 = a1951 } { a195 = a1952 } -> (fun #{ a194 = a1941; b194 = b1941 } #{ a194 = a1942; b194 = b1942 } -> (fun a b -> Int.equal a b) a1941 a1942 && (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) b1941 b1942) a1951 a1952) in
  let next_r = { a195 = #{ a194 = 100; b194 = #{ a18 = 101; b18 = #102l } } } in
  let r_expected = { a195 = #{ a194 = 0; b194 = #{ a18 = 1; b18 = #2l } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a195 *)
  r.a195 <- next_r.a195;
  let r_expected = { r_expected with a195 = next_r.a195 } in
  mark_test_run 1610;
  let test = eq r r_expected in
  if not test then failwithf "test 1610 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a195 = #{ a194; b194 = #{ a18; b18 } } } = r in
  let expected_a194 = 100 in
  mark_test_run 1611;
  let test = (fun a b -> Int.equal a b) expected_a194 a194 in
  if not test then failwithf "test 1611 failed";
  let expected_a18 = 101 in
  mark_test_run 1612;
  let test = (fun a b -> Int.equal a b) expected_a18 a18 in
  if not test then failwithf "test 1612 failed";
  let expected_b18 = #102l in
  mark_test_run 1613;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b18 b18 in
  if not test then failwithf "test 1613 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a195 } = r in
  let expected_a195 = #{ a194 = 100; b194 = #{ a18 = 101; b18 = #102l } } in
  mark_test_run 1614;
  let test = (fun #{ a194 = a1941; b194 = b1941 } #{ a194 = a1942; b194 = b1942 } -> (fun a b -> Int.equal a b) a1941 a1942 && (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) b1941 b1942) expected_a195 a195 in
  if not test then failwithf "test 1614 failed";

  (********************************************)
  (*   t197 = { #{ int; #{ int; float } } }   *)
  (********************************************)
  let r = { a197 = #{ a196 = 0; b196 = #{ a20 = 1; b20 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a197 *)
  let actual = r.a197 in
  let expected = #{ a196 = 0; b196 = #{ a20 = 1; b20 = 2. } } in
  mark_test_run 1615;
  let test = (fun #{ a196 = a1961; b196 = b1961 } #{ a196 = a1962; b196 = b1962 } -> (fun a b -> Int.equal a b) a1961 a1962 && (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) b1961 b1962) actual expected in
  if not test then failwithf "test 1615 failed";
  (* Paths of depth 2 *)
  (* .a197.#a196 *)
  let actual = r.a197.#a196 in
  let expected = 0 in
  mark_test_run 1616;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1616 failed";
  (* .a197.#b196 *)
  let actual = r.a197.#b196 in
  let expected = #{ a20 = 1; b20 = 2. } in
  mark_test_run 1617;
  let test = (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) actual expected in
  if not test then failwithf "test 1617 failed";
  (* Paths of depth 3 *)
  (* .a197.#b196.#a20 *)
  let actual = r.a197.#b196.#a20 in
  let expected = 1 in
  mark_test_run 1618;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1618 failed";
  (* .a197.#b196.#b20 *)
  let actual = r.a197.#b196.#b20 in
  let expected = 2. in
  mark_test_run 1619;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1619 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a197 = a1971 } { a197 = a1972 } -> (fun #{ a196 = a1961; b196 = b1961 } #{ a196 = a1962; b196 = b1962 } -> (fun a b -> Int.equal a b) a1961 a1962 && (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) b1961 b1962) a1971 a1972) in
  let next_r = { a197 = #{ a196 = 100; b196 = #{ a20 = 101; b20 = 102. } } } in
  let r_expected = { a197 = #{ a196 = 0; b196 = #{ a20 = 1; b20 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a197 *)
  r.a197 <- next_r.a197;
  let r_expected = { r_expected with a197 = next_r.a197 } in
  mark_test_run 1620;
  let test = eq r r_expected in
  if not test then failwithf "test 1620 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a197 = #{ a196; b196 = #{ a20; b20 } } } = r in
  let expected_a196 = 100 in
  mark_test_run 1621;
  let test = (fun a b -> Int.equal a b) expected_a196 a196 in
  if not test then failwithf "test 1621 failed";
  let expected_a20 = 101 in
  mark_test_run 1622;
  let test = (fun a b -> Int.equal a b) expected_a20 a20 in
  if not test then failwithf "test 1622 failed";
  let expected_b20 = 102. in
  mark_test_run 1623;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b20 b20 in
  if not test then failwithf "test 1623 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a197 } = r in
  let expected_a197 = #{ a196 = 100; b196 = #{ a20 = 101; b20 = 102. } } in
  mark_test_run 1624;
  let test = (fun #{ a196 = a1961; b196 = b1961 } #{ a196 = a1962; b196 = b1962 } -> (fun a b -> Int.equal a b) a1961 a1962 && (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) b1961 b1962) expected_a197 a197 in
  if not test then failwithf "test 1624 failed";

  (*********************************************)
  (*   t199 = { #{ int; #{ int32#; int } } }   *)
  (*********************************************)
  let r = { a199 = #{ a198 = 0; b198 = #{ a31 = #1l; b31 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a199 *)
  let actual = r.a199 in
  let expected = #{ a198 = 0; b198 = #{ a31 = #1l; b31 = 2 } } in
  mark_test_run 1625;
  let test = (fun #{ a198 = a1981; b198 = b1981 } #{ a198 = a1982; b198 = b1982 } -> (fun a b -> Int.equal a b) a1981 a1982 && (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) b1981 b1982) actual expected in
  if not test then failwithf "test 1625 failed";
  (* Paths of depth 2 *)
  (* .a199.#a198 *)
  let actual = r.a199.#a198 in
  let expected = 0 in
  mark_test_run 1626;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1626 failed";
  (* .a199.#b198 *)
  let actual = r.a199.#b198 in
  let expected = #{ a31 = #1l; b31 = 2 } in
  mark_test_run 1627;
  let test = (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) actual expected in
  if not test then failwithf "test 1627 failed";
  (* Paths of depth 3 *)
  (* .a199.#b198.#a31 *)
  let actual = r.a199.#b198.#a31 in
  let expected = #1l in
  mark_test_run 1628;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1628 failed";
  (* .a199.#b198.#b31 *)
  let actual = r.a199.#b198.#b31 in
  let expected = 2 in
  mark_test_run 1629;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1629 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a199 = a1991 } { a199 = a1992 } -> (fun #{ a198 = a1981; b198 = b1981 } #{ a198 = a1982; b198 = b1982 } -> (fun a b -> Int.equal a b) a1981 a1982 && (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) b1981 b1982) a1991 a1992) in
  let next_r = { a199 = #{ a198 = 100; b198 = #{ a31 = #101l; b31 = 102 } } } in
  let r_expected = { a199 = #{ a198 = 0; b198 = #{ a31 = #1l; b31 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a199 *)
  r.a199 <- next_r.a199;
  let r_expected = { r_expected with a199 = next_r.a199 } in
  mark_test_run 1630;
  let test = eq r r_expected in
  if not test then failwithf "test 1630 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a199 = #{ a198; b198 = #{ a31; b31 } } } = r in
  let expected_a198 = 100 in
  mark_test_run 1631;
  let test = (fun a b -> Int.equal a b) expected_a198 a198 in
  if not test then failwithf "test 1631 failed";
  let expected_a31 = #101l in
  mark_test_run 1632;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a31 a31 in
  if not test then failwithf "test 1632 failed";
  let expected_b31 = 102 in
  mark_test_run 1633;
  let test = (fun a b -> Int.equal a b) expected_b31 b31 in
  if not test then failwithf "test 1633 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a199 } = r in
  let expected_a199 = #{ a198 = 100; b198 = #{ a31 = #101l; b31 = 102 } } in
  mark_test_run 1634;
  let test = (fun #{ a198 = a1981; b198 = b1981 } #{ a198 = a1982; b198 = b1982 } -> (fun a b -> Int.equal a b) a1981 a1982 && (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) b1981 b1982) expected_a199 a199 in
  if not test then failwithf "test 1634 failed";

  (************************************************)
  (*   t201 = { #{ int; #{ int32#; int32# } } }   *)
  (************************************************)
  let r = { a201 = #{ a200 = 0; b200 = #{ a33 = #1l; b33 = #2l } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a201 *)
  let actual = r.a201 in
  let expected = #{ a200 = 0; b200 = #{ a33 = #1l; b33 = #2l } } in
  mark_test_run 1635;
  let test = (fun #{ a200 = a2001; b200 = b2001 } #{ a200 = a2002; b200 = b2002 } -> (fun a b -> Int.equal a b) a2001 a2002 && (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) b2001 b2002) actual expected in
  if not test then failwithf "test 1635 failed";
  (* Paths of depth 2 *)
  (* .a201.#a200 *)
  let actual = r.a201.#a200 in
  let expected = 0 in
  mark_test_run 1636;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1636 failed";
  (* .a201.#b200 *)
  let actual = r.a201.#b200 in
  let expected = #{ a33 = #1l; b33 = #2l } in
  mark_test_run 1637;
  let test = (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) actual expected in
  if not test then failwithf "test 1637 failed";
  (* Paths of depth 3 *)
  (* .a201.#b200.#a33 *)
  let actual = r.a201.#b200.#a33 in
  let expected = #1l in
  mark_test_run 1638;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1638 failed";
  (* .a201.#b200.#b33 *)
  let actual = r.a201.#b200.#b33 in
  let expected = #2l in
  mark_test_run 1639;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1639 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a201 = a2011 } { a201 = a2012 } -> (fun #{ a200 = a2001; b200 = b2001 } #{ a200 = a2002; b200 = b2002 } -> (fun a b -> Int.equal a b) a2001 a2002 && (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) b2001 b2002) a2011 a2012) in
  let next_r = { a201 = #{ a200 = 100; b200 = #{ a33 = #101l; b33 = #102l } } } in
  let r_expected = { a201 = #{ a200 = 0; b200 = #{ a33 = #1l; b33 = #2l } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a201 *)
  r.a201 <- next_r.a201;
  let r_expected = { r_expected with a201 = next_r.a201 } in
  mark_test_run 1640;
  let test = eq r r_expected in
  if not test then failwithf "test 1640 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a201 = #{ a200; b200 = #{ a33; b33 } } } = r in
  let expected_a200 = 100 in
  mark_test_run 1641;
  let test = (fun a b -> Int.equal a b) expected_a200 a200 in
  if not test then failwithf "test 1641 failed";
  let expected_a33 = #101l in
  mark_test_run 1642;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a33 a33 in
  if not test then failwithf "test 1642 failed";
  let expected_b33 = #102l in
  mark_test_run 1643;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b33 b33 in
  if not test then failwithf "test 1643 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a201 } = r in
  let expected_a201 = #{ a200 = 100; b200 = #{ a33 = #101l; b33 = #102l } } in
  mark_test_run 1644;
  let test = (fun #{ a200 = a2001; b200 = b2001 } #{ a200 = a2002; b200 = b2002 } -> (fun a b -> Int.equal a b) a2001 a2002 && (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) b2001 b2002) expected_a201 a201 in
  if not test then failwithf "test 1644 failed";

  (********************************************)
  (*   t203 = { #{ int; #{ float; int } } }   *)
  (********************************************)
  let r = { a203 = #{ a202 = 0; b202 = #{ a40 = 1.; b40 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a203 *)
  let actual = r.a203 in
  let expected = #{ a202 = 0; b202 = #{ a40 = 1.; b40 = 2 } } in
  mark_test_run 1645;
  let test = (fun #{ a202 = a2021; b202 = b2021 } #{ a202 = a2022; b202 = b2022 } -> (fun a b -> Int.equal a b) a2021 a2022 && (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) b2021 b2022) actual expected in
  if not test then failwithf "test 1645 failed";
  (* Paths of depth 2 *)
  (* .a203.#a202 *)
  let actual = r.a203.#a202 in
  let expected = 0 in
  mark_test_run 1646;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1646 failed";
  (* .a203.#b202 *)
  let actual = r.a203.#b202 in
  let expected = #{ a40 = 1.; b40 = 2 } in
  mark_test_run 1647;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) actual expected in
  if not test then failwithf "test 1647 failed";
  (* Paths of depth 3 *)
  (* .a203.#b202.#a40 *)
  let actual = r.a203.#b202.#a40 in
  let expected = 1. in
  mark_test_run 1648;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1648 failed";
  (* .a203.#b202.#b40 *)
  let actual = r.a203.#b202.#b40 in
  let expected = 2 in
  mark_test_run 1649;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1649 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a203 = a2031 } { a203 = a2032 } -> (fun #{ a202 = a2021; b202 = b2021 } #{ a202 = a2022; b202 = b2022 } -> (fun a b -> Int.equal a b) a2021 a2022 && (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) b2021 b2022) a2031 a2032) in
  let next_r = { a203 = #{ a202 = 100; b202 = #{ a40 = 101.; b40 = 102 } } } in
  let r_expected = { a203 = #{ a202 = 0; b202 = #{ a40 = 1.; b40 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a203 *)
  r.a203 <- next_r.a203;
  let r_expected = { r_expected with a203 = next_r.a203 } in
  mark_test_run 1650;
  let test = eq r r_expected in
  if not test then failwithf "test 1650 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a203 = #{ a202; b202 = #{ a40; b40 } } } = r in
  let expected_a202 = 100 in
  mark_test_run 1651;
  let test = (fun a b -> Int.equal a b) expected_a202 a202 in
  if not test then failwithf "test 1651 failed";
  let expected_a40 = 101. in
  mark_test_run 1652;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a40 a40 in
  if not test then failwithf "test 1652 failed";
  let expected_b40 = 102 in
  mark_test_run 1653;
  let test = (fun a b -> Int.equal a b) expected_b40 b40 in
  if not test then failwithf "test 1653 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a203 } = r in
  let expected_a203 = #{ a202 = 100; b202 = #{ a40 = 101.; b40 = 102 } } in
  mark_test_run 1654;
  let test = (fun #{ a202 = a2021; b202 = b2021 } #{ a202 = a2022; b202 = b2022 } -> (fun a b -> Int.equal a b) a2021 a2022 && (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) b2021 b2022) expected_a203 a203 in
  if not test then failwithf "test 1654 failed";

  (**********************************************)
  (*   t205 = { #{ int; #{ float; float } } }   *)
  (**********************************************)
  let r = { a205 = #{ a204 = 0; b204 = #{ a42 = 1.; b42 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a205 *)
  let actual = r.a205 in
  let expected = #{ a204 = 0; b204 = #{ a42 = 1.; b42 = 2. } } in
  mark_test_run 1655;
  let test = (fun #{ a204 = a2041; b204 = b2041 } #{ a204 = a2042; b204 = b2042 } -> (fun a b -> Int.equal a b) a2041 a2042 && (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) b2041 b2042) actual expected in
  if not test then failwithf "test 1655 failed";
  (* Paths of depth 2 *)
  (* .a205.#a204 *)
  let actual = r.a205.#a204 in
  let expected = 0 in
  mark_test_run 1656;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1656 failed";
  (* .a205.#b204 *)
  let actual = r.a205.#b204 in
  let expected = #{ a42 = 1.; b42 = 2. } in
  mark_test_run 1657;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) actual expected in
  if not test then failwithf "test 1657 failed";
  (* Paths of depth 3 *)
  (* .a205.#b204.#a42 *)
  let actual = r.a205.#b204.#a42 in
  let expected = 1. in
  mark_test_run 1658;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1658 failed";
  (* .a205.#b204.#b42 *)
  let actual = r.a205.#b204.#b42 in
  let expected = 2. in
  mark_test_run 1659;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1659 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a205 = a2051 } { a205 = a2052 } -> (fun #{ a204 = a2041; b204 = b2041 } #{ a204 = a2042; b204 = b2042 } -> (fun a b -> Int.equal a b) a2041 a2042 && (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) b2041 b2042) a2051 a2052) in
  let next_r = { a205 = #{ a204 = 100; b204 = #{ a42 = 101.; b42 = 102. } } } in
  let r_expected = { a205 = #{ a204 = 0; b204 = #{ a42 = 1.; b42 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a205 *)
  r.a205 <- next_r.a205;
  let r_expected = { r_expected with a205 = next_r.a205 } in
  mark_test_run 1660;
  let test = eq r r_expected in
  if not test then failwithf "test 1660 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a205 = #{ a204; b204 = #{ a42; b42 } } } = r in
  let expected_a204 = 100 in
  mark_test_run 1661;
  let test = (fun a b -> Int.equal a b) expected_a204 a204 in
  if not test then failwithf "test 1661 failed";
  let expected_a42 = 101. in
  mark_test_run 1662;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a42 a42 in
  if not test then failwithf "test 1662 failed";
  let expected_b42 = 102. in
  mark_test_run 1663;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b42 b42 in
  if not test then failwithf "test 1663 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a205 } = r in
  let expected_a205 = #{ a204 = 100; b204 = #{ a42 = 101.; b42 = 102. } } in
  mark_test_run 1664;
  let test = (fun #{ a204 = a2041; b204 = b2041 } #{ a204 = a2042; b204 = b2042 } -> (fun a b -> Int.equal a b) a2041 a2042 && (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) b2041 b2042) expected_a205 a205 in
  if not test then failwithf "test 1664 failed";

  (**********************************************************)
  (*   t208 = { #{ int64; int64# }; #{ int64#; float# } }   *)
  (**********************************************************)
  let r = { a208 = #{ a206 = 0L; b206 = #1L }; b208 = #{ a207 = #2L; b207 = #3. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a208 *)
  let actual = r.a208 in
  let expected = #{ a206 = 0L; b206 = #1L } in
  mark_test_run 1665;
  let test = (fun #{ a206 = a2061; b206 = b2061 } #{ a206 = a2062; b206 = b2062 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a2061 a2062 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b2061 b2062) actual expected in
  if not test then failwithf "test 1665 failed";
  (* Paths of depth 2 *)
  (* .a208.#a206 *)
  let actual = r.a208.#a206 in
  let expected = 0L in
  mark_test_run 1666;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1666 failed";
  (* .a208.#b206 *)
  let actual = r.a208.#b206 in
  let expected = #1L in
  mark_test_run 1667;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 1667 failed";
  (* Paths of depth 1 *)
  (* .b208 *)
  let actual = r.b208 in
  let expected = #{ a207 = #2L; b207 = #3. } in
  mark_test_run 1668;
  let test = (fun #{ a207 = a2071; b207 = b2071 } #{ a207 = a2072; b207 = b2072 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a2071 a2072 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2071 b2072) actual expected in
  if not test then failwithf "test 1668 failed";
  (* Paths of depth 2 *)
  (* .b208.#a207 *)
  let actual = r.b208.#a207 in
  let expected = #2L in
  mark_test_run 1669;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 1669 failed";
  (* .b208.#b207 *)
  let actual = r.b208.#b207 in
  let expected = #3. in
  mark_test_run 1670;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1670 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a208 = a2081; b208 = b2081 } { a208 = a2082; b208 = b2082 } -> (fun #{ a206 = a2061; b206 = b2061 } #{ a206 = a2062; b206 = b2062 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a2061 a2062 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b2061 b2062) a2081 a2082 && (fun #{ a207 = a2071; b207 = b2071 } #{ a207 = a2072; b207 = b2072 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a2071 a2072 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2071 b2072) b2081 b2082) in
  let next_r = { a208 = #{ a206 = 100L; b206 = #101L }; b208 = #{ a207 = #102L; b207 = #103. } } in
  let r_expected = { a208 = #{ a206 = 0L; b206 = #1L }; b208 = #{ a207 = #2L; b207 = #3. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a208 *)
  r.a208 <- next_r.a208;
  let r_expected = { r_expected with a208 = next_r.a208 } in
  mark_test_run 1671;
  let test = eq r r_expected in
  if not test then failwithf "test 1671 failed";
  Gc.compact ();
  (* .b208 *)
  r.b208 <- next_r.b208;
  let r_expected = { r_expected with b208 = next_r.b208 } in
  mark_test_run 1672;
  let test = eq r r_expected in
  if not test then failwithf "test 1672 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a208 = #{ a206; b206 }; b208 = #{ a207; b207 } } = r in
  let expected_a206 = 100L in
  mark_test_run 1673;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a206 a206 in
  if not test then failwithf "test 1673 failed";
  let expected_b206 = #101L in
  mark_test_run 1674;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b206 b206 in
  if not test then failwithf "test 1674 failed";
  let expected_a207 = #102L in
  mark_test_run 1675;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a207 a207 in
  if not test then failwithf "test 1675 failed";
  let expected_b207 = #103. in
  mark_test_run 1676;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b207 b207 in
  if not test then failwithf "test 1676 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a208; b208 } = r in
  let expected_a208 = #{ a206 = 100L; b206 = #101L } in
  mark_test_run 1677;
  let test = (fun #{ a206 = a2061; b206 = b2061 } #{ a206 = a2062; b206 = b2062 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a2061 a2062 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b2061 b2062) expected_a208 a208 in
  if not test then failwithf "test 1677 failed";
  let expected_b208 = #{ a207 = #102L; b207 = #103. } in
  mark_test_run 1678;
  let test = (fun #{ a207 = a2071; b207 = b2071 } #{ a207 = a2072; b207 = b2072 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a2071 a2072 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2071 b2072) expected_b208 b208 in
  if not test then failwithf "test 1678 failed";

  (**********************************************************)
  (*   t211 = { #{ int64; string }; #{ int64#; string } }   *)
  (**********************************************************)
  let r = { a211 = #{ a209 = 0L; b209 = "1" }; b211 = #{ a210 = #2L; b210 = "3" } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a211 *)
  let actual = r.a211 in
  let expected = #{ a209 = 0L; b209 = "1" } in
  mark_test_run 1679;
  let test = (fun #{ a209 = a2091; b209 = b2091 } #{ a209 = a2092; b209 = b2092 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a2091 a2092 && (fun a b -> String.equal (globalize a) (globalize b)) b2091 b2092) actual expected in
  if not test then failwithf "test 1679 failed";
  (* Paths of depth 2 *)
  (* .a211.#a209 *)
  let actual = r.a211.#a209 in
  let expected = 0L in
  mark_test_run 1680;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1680 failed";
  (* .a211.#b209 *)
  let actual = r.a211.#b209 in
  let expected = "1" in
  mark_test_run 1681;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1681 failed";
  (* Paths of depth 1 *)
  (* .b211 *)
  let actual = r.b211 in
  let expected = #{ a210 = #2L; b210 = "3" } in
  mark_test_run 1682;
  let test = (fun #{ a210 = a2101; b210 = b2101 } #{ a210 = a2102; b210 = b2102 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a2101 a2102 && (fun a b -> String.equal (globalize a) (globalize b)) b2101 b2102) actual expected in
  if not test then failwithf "test 1682 failed";
  (* Paths of depth 2 *)
  (* .b211.#a210 *)
  let actual = r.b211.#a210 in
  let expected = #2L in
  mark_test_run 1683;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 1683 failed";
  (* .b211.#b210 *)
  let actual = r.b211.#b210 in
  let expected = "3" in
  mark_test_run 1684;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1684 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a211 = a2111; b211 = b2111 } { a211 = a2112; b211 = b2112 } -> (fun #{ a209 = a2091; b209 = b2091 } #{ a209 = a2092; b209 = b2092 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a2091 a2092 && (fun a b -> String.equal (globalize a) (globalize b)) b2091 b2092) a2111 a2112 && (fun #{ a210 = a2101; b210 = b2101 } #{ a210 = a2102; b210 = b2102 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a2101 a2102 && (fun a b -> String.equal (globalize a) (globalize b)) b2101 b2102) b2111 b2112) in
  let next_r = { a211 = #{ a209 = 100L; b209 = "101" }; b211 = #{ a210 = #102L; b210 = "103" } } in
  let r_expected = { a211 = #{ a209 = 0L; b209 = "1" }; b211 = #{ a210 = #2L; b210 = "3" } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a211 *)
  r.a211 <- next_r.a211;
  let r_expected = { r_expected with a211 = next_r.a211 } in
  mark_test_run 1685;
  let test = eq r r_expected in
  if not test then failwithf "test 1685 failed";
  Gc.compact ();
  (* .b211 *)
  r.b211 <- next_r.b211;
  let r_expected = { r_expected with b211 = next_r.b211 } in
  mark_test_run 1686;
  let test = eq r r_expected in
  if not test then failwithf "test 1686 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a211 = #{ a209; b209 }; b211 = #{ a210; b210 } } = r in
  let expected_a209 = 100L in
  mark_test_run 1687;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a209 a209 in
  if not test then failwithf "test 1687 failed";
  let expected_b209 = "101" in
  mark_test_run 1688;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b209 b209 in
  if not test then failwithf "test 1688 failed";
  let expected_a210 = #102L in
  mark_test_run 1689;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a210 a210 in
  if not test then failwithf "test 1689 failed";
  let expected_b210 = "103" in
  mark_test_run 1690;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_b210 b210 in
  if not test then failwithf "test 1690 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a211; b211 } = r in
  let expected_a211 = #{ a209 = 100L; b209 = "101" } in
  mark_test_run 1691;
  let test = (fun #{ a209 = a2091; b209 = b2091 } #{ a209 = a2092; b209 = b2092 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a2091 a2092 && (fun a b -> String.equal (globalize a) (globalize b)) b2091 b2092) expected_a211 a211 in
  if not test then failwithf "test 1691 failed";
  let expected_b211 = #{ a210 = #102L; b210 = "103" } in
  mark_test_run 1692;
  let test = (fun #{ a210 = a2101; b210 = b2101 } #{ a210 = a2102; b210 = b2102 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a2101 a2102 && (fun a b -> String.equal (globalize a) (globalize b)) b2101 b2102) expected_b211 b211 in
  if not test then failwithf "test 1692 failed";

  (********************************************************)
  (*   t214 = { #{ int64#; int64 }; #{ int64; int64 } }   *)
  (********************************************************)
  let r = { a214 = #{ a212 = #0L; b212 = 1L }; b214 = #{ a213 = 2L; b213 = 3L } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a214 *)
  let actual = r.a214 in
  let expected = #{ a212 = #0L; b212 = 1L } in
  mark_test_run 1693;
  let test = (fun #{ a212 = a2121; b212 = b2121 } #{ a212 = a2122; b212 = b2122 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a2121 a2122 && (fun a b -> Int64.equal (globalize a) (globalize b)) b2121 b2122) actual expected in
  if not test then failwithf "test 1693 failed";
  (* Paths of depth 2 *)
  (* .a214.#a212 *)
  let actual = r.a214.#a212 in
  let expected = #0L in
  mark_test_run 1694;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 1694 failed";
  (* .a214.#b212 *)
  let actual = r.a214.#b212 in
  let expected = 1L in
  mark_test_run 1695;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1695 failed";
  (* Paths of depth 1 *)
  (* .b214 *)
  let actual = r.b214 in
  let expected = #{ a213 = 2L; b213 = 3L } in
  mark_test_run 1696;
  let test = (fun #{ a213 = a2131; b213 = b2131 } #{ a213 = a2132; b213 = b2132 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a2131 a2132 && (fun a b -> Int64.equal (globalize a) (globalize b)) b2131 b2132) actual expected in
  if not test then failwithf "test 1696 failed";
  (* Paths of depth 2 *)
  (* .b214.#a213 *)
  let actual = r.b214.#a213 in
  let expected = 2L in
  mark_test_run 1697;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1697 failed";
  (* .b214.#b213 *)
  let actual = r.b214.#b213 in
  let expected = 3L in
  mark_test_run 1698;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1698 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a214 = a2141; b214 = b2141 } { a214 = a2142; b214 = b2142 } -> (fun #{ a212 = a2121; b212 = b2121 } #{ a212 = a2122; b212 = b2122 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a2121 a2122 && (fun a b -> Int64.equal (globalize a) (globalize b)) b2121 b2122) a2141 a2142 && (fun #{ a213 = a2131; b213 = b2131 } #{ a213 = a2132; b213 = b2132 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a2131 a2132 && (fun a b -> Int64.equal (globalize a) (globalize b)) b2131 b2132) b2141 b2142) in
  let next_r = { a214 = #{ a212 = #100L; b212 = 101L }; b214 = #{ a213 = 102L; b213 = 103L } } in
  let r_expected = { a214 = #{ a212 = #0L; b212 = 1L }; b214 = #{ a213 = 2L; b213 = 3L } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a214 *)
  r.a214 <- next_r.a214;
  let r_expected = { r_expected with a214 = next_r.a214 } in
  mark_test_run 1699;
  let test = eq r r_expected in
  if not test then failwithf "test 1699 failed";
  Gc.compact ();
  (* .b214 *)
  r.b214 <- next_r.b214;
  let r_expected = { r_expected with b214 = next_r.b214 } in
  mark_test_run 1700;
  let test = eq r r_expected in
  if not test then failwithf "test 1700 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a214 = #{ a212; b212 }; b214 = #{ a213; b213 } } = r in
  let expected_a212 = #100L in
  mark_test_run 1701;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a212 a212 in
  if not test then failwithf "test 1701 failed";
  let expected_b212 = 101L in
  mark_test_run 1702;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b212 b212 in
  if not test then failwithf "test 1702 failed";
  let expected_a213 = 102L in
  mark_test_run 1703;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_a213 a213 in
  if not test then failwithf "test 1703 failed";
  let expected_b213 = 103L in
  mark_test_run 1704;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b213 b213 in
  if not test then failwithf "test 1704 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a214; b214 } = r in
  let expected_a214 = #{ a212 = #100L; b212 = 101L } in
  mark_test_run 1705;
  let test = (fun #{ a212 = a2121; b212 = b2121 } #{ a212 = a2122; b212 = b2122 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a2121 a2122 && (fun a b -> Int64.equal (globalize a) (globalize b)) b2121 b2122) expected_a214 a214 in
  if not test then failwithf "test 1705 failed";
  let expected_b214 = #{ a213 = 102L; b213 = 103L } in
  mark_test_run 1706;
  let test = (fun #{ a213 = a2131; b213 = b2131 } #{ a213 = a2132; b213 = b2132 } -> (fun a b -> Int64.equal (globalize a) (globalize b)) a2131 a2132 && (fun a b -> Int64.equal (globalize a) (globalize b)) b2131 b2132) expected_b214 b214 in
  if not test then failwithf "test 1706 failed";

  (***********************************************************)
  (*   t216 = { #{ int64#; int64 }; #{ float32#; float } }   *)
  (***********************************************************)
  let r = { a216 = #{ a212 = #0L; b212 = 1L }; b216 = #{ a215 = #2.s; b215 = 3. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a216 *)
  let actual = r.a216 in
  let expected = #{ a212 = #0L; b212 = 1L } in
  mark_test_run 1707;
  let test = (fun #{ a212 = a2121; b212 = b2121 } #{ a212 = a2122; b212 = b2122 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a2121 a2122 && (fun a b -> Int64.equal (globalize a) (globalize b)) b2121 b2122) actual expected in
  if not test then failwithf "test 1707 failed";
  (* Paths of depth 2 *)
  (* .a216.#a212 *)
  let actual = r.a216.#a212 in
  let expected = #0L in
  mark_test_run 1708;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 1708 failed";
  (* .a216.#b212 *)
  let actual = r.a216.#b212 in
  let expected = 1L in
  mark_test_run 1709;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1709 failed";
  (* Paths of depth 1 *)
  (* .b216 *)
  let actual = r.b216 in
  let expected = #{ a215 = #2.s; b215 = 3. } in
  mark_test_run 1710;
  let test = (fun #{ a215 = a2151; b215 = b2151 } #{ a215 = a2152; b215 = b2152 } -> (fun a b -> Float32_u.(equal (add #0.s a) (add #0.s b))) a2151 a2152 && (fun a b -> Float.equal (globalize a) (globalize b)) b2151 b2152) actual expected in
  if not test then failwithf "test 1710 failed";
  (* Paths of depth 2 *)
  (* .b216.#a215 *)
  let actual = r.b216.#a215 in
  let expected = #2.s in
  mark_test_run 1711;
  let test = (fun a b -> Float32_u.(equal (add #0.s a) (add #0.s b))) actual expected in
  if not test then failwithf "test 1711 failed";
  (* .b216.#b215 *)
  let actual = r.b216.#b215 in
  let expected = 3. in
  mark_test_run 1712;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1712 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a216 = a2161; b216 = b2161 } { a216 = a2162; b216 = b2162 } -> (fun #{ a212 = a2121; b212 = b2121 } #{ a212 = a2122; b212 = b2122 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a2121 a2122 && (fun a b -> Int64.equal (globalize a) (globalize b)) b2121 b2122) a2161 a2162 && (fun #{ a215 = a2151; b215 = b2151 } #{ a215 = a2152; b215 = b2152 } -> (fun a b -> Float32_u.(equal (add #0.s a) (add #0.s b))) a2151 a2152 && (fun a b -> Float.equal (globalize a) (globalize b)) b2151 b2152) b2161 b2162) in
  let next_r = { a216 = #{ a212 = #100L; b212 = 101L }; b216 = #{ a215 = #102.s; b215 = 103. } } in
  let r_expected = { a216 = #{ a212 = #0L; b212 = 1L }; b216 = #{ a215 = #2.s; b215 = 3. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a216 *)
  r.a216 <- next_r.a216;
  let r_expected = { r_expected with a216 = next_r.a216 } in
  mark_test_run 1713;
  let test = eq r r_expected in
  if not test then failwithf "test 1713 failed";
  Gc.compact ();
  (* .b216 *)
  r.b216 <- next_r.b216;
  let r_expected = { r_expected with b216 = next_r.b216 } in
  mark_test_run 1714;
  let test = eq r r_expected in
  if not test then failwithf "test 1714 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a216 = #{ a212; b212 }; b216 = #{ a215; b215 } } = r in
  let expected_a212 = #100L in
  mark_test_run 1715;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_a212 a212 in
  if not test then failwithf "test 1715 failed";
  let expected_b212 = 101L in
  mark_test_run 1716;
  let test = (fun a b -> Int64.equal (globalize a) (globalize b)) expected_b212 b212 in
  if not test then failwithf "test 1716 failed";
  let expected_a215 = #102.s in
  mark_test_run 1717;
  let test = (fun a b -> Float32_u.(equal (add #0.s a) (add #0.s b))) expected_a215 a215 in
  if not test then failwithf "test 1717 failed";
  let expected_b215 = 103. in
  mark_test_run 1718;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b215 b215 in
  if not test then failwithf "test 1718 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a216; b216 } = r in
  let expected_a216 = #{ a212 = #100L; b212 = 101L } in
  mark_test_run 1719;
  let test = (fun #{ a212 = a2121; b212 = b2121 } #{ a212 = a2122; b212 = b2122 } -> (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) a2121 a2122 && (fun a b -> Int64.equal (globalize a) (globalize b)) b2121 b2122) expected_a216 a216 in
  if not test then failwithf "test 1719 failed";
  let expected_b216 = #{ a215 = #102.s; b215 = 103. } in
  mark_test_run 1720;
  let test = (fun #{ a215 = a2151; b215 = b2151 } #{ a215 = a2152; b215 = b2152 } -> (fun a b -> Float32_u.(equal (add #0.s a) (add #0.s b))) a2151 a2152 && (fun a b -> Float.equal (globalize a) (globalize b)) b2151 b2152) expected_b216 b216 in
  if not test then failwithf "test 1720 failed";

  (******************************)
  (*   t217 = { #{ int32# } }   *)
  (******************************)
  let r = { a217 = #{ a24 = #0l } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a217 *)
  let actual = r.a217 in
  let expected = #{ a24 = #0l } in
  mark_test_run 1721;
  let test = (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) actual expected in
  if not test then failwithf "test 1721 failed";
  (* Paths of depth 2 *)
  (* .a217.#a24 *)
  let actual = r.a217.#a24 in
  let expected = #0l in
  mark_test_run 1722;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1722 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a217 = a2171 } { a217 = a2172 } -> (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) a2171 a2172) in
  let next_r = { a217 = #{ a24 = #100l } } in
  let r_expected = { a217 = #{ a24 = #0l } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a217 *)
  r.a217 <- next_r.a217;
  let r_expected = { r_expected with a217 = next_r.a217 } in
  mark_test_run 1723;
  let test = eq r r_expected in
  if not test then failwithf "test 1723 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a217 = #{ a24 } } = r in
  let expected_a24 = #100l in
  mark_test_run 1724;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a24 a24 in
  if not test then failwithf "test 1724 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a217 } = r in
  let expected_a217 = #{ a24 = #100l } in
  mark_test_run 1725;
  let test = (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) expected_a217 a217 in
  if not test then failwithf "test 1725 failed";

  (***********************************)
  (*   t218 = { #{ int32# }; int }   *)
  (***********************************)
  let r = { a218 = #{ a24 = #0l }; b218 = 1 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a218 *)
  let actual = r.a218 in
  let expected = #{ a24 = #0l } in
  mark_test_run 1726;
  let test = (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) actual expected in
  if not test then failwithf "test 1726 failed";
  (* Paths of depth 2 *)
  (* .a218.#a24 *)
  let actual = r.a218.#a24 in
  let expected = #0l in
  mark_test_run 1727;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1727 failed";
  (* Paths of depth 1 *)
  (* .b218 *)
  let actual = r.b218 in
  let expected = 1 in
  mark_test_run 1728;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1728 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a218 = a2181; b218 = b2181 } { a218 = a2182; b218 = b2182 } -> (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) a2181 a2182 && (fun a b -> Int.equal a b) b2181 b2182) in
  let next_r = { a218 = #{ a24 = #100l }; b218 = 101 } in
  let r_expected = { a218 = #{ a24 = #0l }; b218 = 1 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a218 *)
  r.a218 <- next_r.a218;
  let r_expected = { r_expected with a218 = next_r.a218 } in
  mark_test_run 1729;
  let test = eq r r_expected in
  if not test then failwithf "test 1729 failed";
  Gc.compact ();
  (* .b218 *)
  r.b218 <- next_r.b218;
  let r_expected = { r_expected with b218 = next_r.b218 } in
  mark_test_run 1730;
  let test = eq r r_expected in
  if not test then failwithf "test 1730 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a218 = #{ a24 }; b218 } = r in
  let expected_a24 = #100l in
  mark_test_run 1731;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a24 a24 in
  if not test then failwithf "test 1731 failed";
  let expected_b218 = 101 in
  mark_test_run 1732;
  let test = (fun a b -> Int.equal a b) expected_b218 b218 in
  if not test then failwithf "test 1732 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a218; b218 } = r in
  let expected_a218 = #{ a24 = #100l } in
  mark_test_run 1733;
  let test = (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) expected_a218 a218 in
  if not test then failwithf "test 1733 failed";
  let expected_b218 = 101 in
  mark_test_run 1734;
  let test = (fun a b -> Int.equal a b) expected_b218 b218 in
  if not test then failwithf "test 1734 failed";

  (**************************************)
  (*   t219 = { #{ int32# }; int32# }   *)
  (**************************************)
  let r = { a219 = #{ a24 = #0l }; b219 = #1l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a219 *)
  let actual = r.a219 in
  let expected = #{ a24 = #0l } in
  mark_test_run 1735;
  let test = (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) actual expected in
  if not test then failwithf "test 1735 failed";
  (* Paths of depth 2 *)
  (* .a219.#a24 *)
  let actual = r.a219.#a24 in
  let expected = #0l in
  mark_test_run 1736;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1736 failed";
  (* Paths of depth 1 *)
  (* .b219 *)
  let actual = r.b219 in
  let expected = #1l in
  mark_test_run 1737;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1737 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a219 = a2191; b219 = b2191 } { a219 = a2192; b219 = b2192 } -> (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) a2191 a2192 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b2191 b2192) in
  let next_r = { a219 = #{ a24 = #100l }; b219 = #101l } in
  let r_expected = { a219 = #{ a24 = #0l }; b219 = #1l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a219 *)
  r.a219 <- next_r.a219;
  let r_expected = { r_expected with a219 = next_r.a219 } in
  mark_test_run 1738;
  let test = eq r r_expected in
  if not test then failwithf "test 1738 failed";
  Gc.compact ();
  (* .b219 *)
  r.b219 <- next_r.b219;
  let r_expected = { r_expected with b219 = next_r.b219 } in
  mark_test_run 1739;
  let test = eq r r_expected in
  if not test then failwithf "test 1739 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a219 = #{ a24 }; b219 } = r in
  let expected_a24 = #100l in
  mark_test_run 1740;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a24 a24 in
  if not test then failwithf "test 1740 failed";
  let expected_b219 = #101l in
  mark_test_run 1741;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b219 b219 in
  if not test then failwithf "test 1741 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a219; b219 } = r in
  let expected_a219 = #{ a24 = #100l } in
  mark_test_run 1742;
  let test = (fun #{ a24 = a241 } #{ a24 = a242 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a241 a242) expected_a219 a219 in
  if not test then failwithf "test 1742 failed";
  let expected_b219 = #101l in
  mark_test_run 1743;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b219 b219 in
  if not test then failwithf "test 1743 failed";

  (***********************************)
  (*   t220 = { #{ int32#; int } }   *)
  (***********************************)
  let r = { a220 = #{ a31 = #0l; b31 = 1 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a220 *)
  let actual = r.a220 in
  let expected = #{ a31 = #0l; b31 = 1 } in
  mark_test_run 1744;
  let test = (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) actual expected in
  if not test then failwithf "test 1744 failed";
  (* Paths of depth 2 *)
  (* .a220.#a31 *)
  let actual = r.a220.#a31 in
  let expected = #0l in
  mark_test_run 1745;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1745 failed";
  (* .a220.#b31 *)
  let actual = r.a220.#b31 in
  let expected = 1 in
  mark_test_run 1746;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1746 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a220 = a2201 } { a220 = a2202 } -> (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) a2201 a2202) in
  let next_r = { a220 = #{ a31 = #100l; b31 = 101 } } in
  let r_expected = { a220 = #{ a31 = #0l; b31 = 1 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a220 *)
  r.a220 <- next_r.a220;
  let r_expected = { r_expected with a220 = next_r.a220 } in
  mark_test_run 1747;
  let test = eq r r_expected in
  if not test then failwithf "test 1747 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a220 = #{ a31; b31 } } = r in
  let expected_a31 = #100l in
  mark_test_run 1748;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a31 a31 in
  if not test then failwithf "test 1748 failed";
  let expected_b31 = 101 in
  mark_test_run 1749;
  let test = (fun a b -> Int.equal a b) expected_b31 b31 in
  if not test then failwithf "test 1749 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a220 } = r in
  let expected_a220 = #{ a31 = #100l; b31 = 101 } in
  mark_test_run 1750;
  let test = (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) expected_a220 a220 in
  if not test then failwithf "test 1750 failed";

  (****************************************)
  (*   t221 = { #{ int32#; int }; int }   *)
  (****************************************)
  let r = { a221 = #{ a31 = #0l; b31 = 1 }; b221 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a221 *)
  let actual = r.a221 in
  let expected = #{ a31 = #0l; b31 = 1 } in
  mark_test_run 1751;
  let test = (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) actual expected in
  if not test then failwithf "test 1751 failed";
  (* Paths of depth 2 *)
  (* .a221.#a31 *)
  let actual = r.a221.#a31 in
  let expected = #0l in
  mark_test_run 1752;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1752 failed";
  (* .a221.#b31 *)
  let actual = r.a221.#b31 in
  let expected = 1 in
  mark_test_run 1753;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1753 failed";
  (* Paths of depth 1 *)
  (* .b221 *)
  let actual = r.b221 in
  let expected = 2 in
  mark_test_run 1754;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1754 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a221 = a2211; b221 = b2211 } { a221 = a2212; b221 = b2212 } -> (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) a2211 a2212 && (fun a b -> Int.equal a b) b2211 b2212) in
  let next_r = { a221 = #{ a31 = #100l; b31 = 101 }; b221 = 102 } in
  let r_expected = { a221 = #{ a31 = #0l; b31 = 1 }; b221 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a221 *)
  r.a221 <- next_r.a221;
  let r_expected = { r_expected with a221 = next_r.a221 } in
  mark_test_run 1755;
  let test = eq r r_expected in
  if not test then failwithf "test 1755 failed";
  Gc.compact ();
  (* .b221 *)
  r.b221 <- next_r.b221;
  let r_expected = { r_expected with b221 = next_r.b221 } in
  mark_test_run 1756;
  let test = eq r r_expected in
  if not test then failwithf "test 1756 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a221 = #{ a31; b31 }; b221 } = r in
  let expected_a31 = #100l in
  mark_test_run 1757;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a31 a31 in
  if not test then failwithf "test 1757 failed";
  let expected_b31 = 101 in
  mark_test_run 1758;
  let test = (fun a b -> Int.equal a b) expected_b31 b31 in
  if not test then failwithf "test 1758 failed";
  let expected_b221 = 102 in
  mark_test_run 1759;
  let test = (fun a b -> Int.equal a b) expected_b221 b221 in
  if not test then failwithf "test 1759 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a221; b221 } = r in
  let expected_a221 = #{ a31 = #100l; b31 = 101 } in
  mark_test_run 1760;
  let test = (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) expected_a221 a221 in
  if not test then failwithf "test 1760 failed";
  let expected_b221 = 102 in
  mark_test_run 1761;
  let test = (fun a b -> Int.equal a b) expected_b221 b221 in
  if not test then failwithf "test 1761 failed";

  (*******************************************)
  (*   t222 = { #{ int32#; int }; int32# }   *)
  (*******************************************)
  let r = { a222 = #{ a31 = #0l; b31 = 1 }; b222 = #2l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a222 *)
  let actual = r.a222 in
  let expected = #{ a31 = #0l; b31 = 1 } in
  mark_test_run 1762;
  let test = (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) actual expected in
  if not test then failwithf "test 1762 failed";
  (* Paths of depth 2 *)
  (* .a222.#a31 *)
  let actual = r.a222.#a31 in
  let expected = #0l in
  mark_test_run 1763;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1763 failed";
  (* .a222.#b31 *)
  let actual = r.a222.#b31 in
  let expected = 1 in
  mark_test_run 1764;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1764 failed";
  (* Paths of depth 1 *)
  (* .b222 *)
  let actual = r.b222 in
  let expected = #2l in
  mark_test_run 1765;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1765 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a222 = a2221; b222 = b2221 } { a222 = a2222; b222 = b2222 } -> (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) a2221 a2222 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b2221 b2222) in
  let next_r = { a222 = #{ a31 = #100l; b31 = 101 }; b222 = #102l } in
  let r_expected = { a222 = #{ a31 = #0l; b31 = 1 }; b222 = #2l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a222 *)
  r.a222 <- next_r.a222;
  let r_expected = { r_expected with a222 = next_r.a222 } in
  mark_test_run 1766;
  let test = eq r r_expected in
  if not test then failwithf "test 1766 failed";
  Gc.compact ();
  (* .b222 *)
  r.b222 <- next_r.b222;
  let r_expected = { r_expected with b222 = next_r.b222 } in
  mark_test_run 1767;
  let test = eq r r_expected in
  if not test then failwithf "test 1767 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a222 = #{ a31; b31 }; b222 } = r in
  let expected_a31 = #100l in
  mark_test_run 1768;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a31 a31 in
  if not test then failwithf "test 1768 failed";
  let expected_b31 = 101 in
  mark_test_run 1769;
  let test = (fun a b -> Int.equal a b) expected_b31 b31 in
  if not test then failwithf "test 1769 failed";
  let expected_b222 = #102l in
  mark_test_run 1770;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b222 b222 in
  if not test then failwithf "test 1770 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a222; b222 } = r in
  let expected_a222 = #{ a31 = #100l; b31 = 101 } in
  mark_test_run 1771;
  let test = (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) expected_a222 a222 in
  if not test then failwithf "test 1771 failed";
  let expected_b222 = #102l in
  mark_test_run 1772;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b222 b222 in
  if not test then failwithf "test 1772 failed";

  (**************************************)
  (*   t223 = { #{ int32#; int32# } }   *)
  (**************************************)
  let r = { a223 = #{ a33 = #0l; b33 = #1l } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a223 *)
  let actual = r.a223 in
  let expected = #{ a33 = #0l; b33 = #1l } in
  mark_test_run 1773;
  let test = (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) actual expected in
  if not test then failwithf "test 1773 failed";
  (* Paths of depth 2 *)
  (* .a223.#a33 *)
  let actual = r.a223.#a33 in
  let expected = #0l in
  mark_test_run 1774;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1774 failed";
  (* .a223.#b33 *)
  let actual = r.a223.#b33 in
  let expected = #1l in
  mark_test_run 1775;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1775 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a223 = a2231 } { a223 = a2232 } -> (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) a2231 a2232) in
  let next_r = { a223 = #{ a33 = #100l; b33 = #101l } } in
  let r_expected = { a223 = #{ a33 = #0l; b33 = #1l } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a223 *)
  r.a223 <- next_r.a223;
  let r_expected = { r_expected with a223 = next_r.a223 } in
  mark_test_run 1776;
  let test = eq r r_expected in
  if not test then failwithf "test 1776 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a223 = #{ a33; b33 } } = r in
  let expected_a33 = #100l in
  mark_test_run 1777;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a33 a33 in
  if not test then failwithf "test 1777 failed";
  let expected_b33 = #101l in
  mark_test_run 1778;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b33 b33 in
  if not test then failwithf "test 1778 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a223 } = r in
  let expected_a223 = #{ a33 = #100l; b33 = #101l } in
  mark_test_run 1779;
  let test = (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) expected_a223 a223 in
  if not test then failwithf "test 1779 failed";

  (*******************************************)
  (*   t224 = { #{ int32#; int32# }; int }   *)
  (*******************************************)
  let r = { a224 = #{ a33 = #0l; b33 = #1l }; b224 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a224 *)
  let actual = r.a224 in
  let expected = #{ a33 = #0l; b33 = #1l } in
  mark_test_run 1780;
  let test = (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) actual expected in
  if not test then failwithf "test 1780 failed";
  (* Paths of depth 2 *)
  (* .a224.#a33 *)
  let actual = r.a224.#a33 in
  let expected = #0l in
  mark_test_run 1781;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1781 failed";
  (* .a224.#b33 *)
  let actual = r.a224.#b33 in
  let expected = #1l in
  mark_test_run 1782;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1782 failed";
  (* Paths of depth 1 *)
  (* .b224 *)
  let actual = r.b224 in
  let expected = 2 in
  mark_test_run 1783;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1783 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a224 = a2241; b224 = b2241 } { a224 = a2242; b224 = b2242 } -> (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) a2241 a2242 && (fun a b -> Int.equal a b) b2241 b2242) in
  let next_r = { a224 = #{ a33 = #100l; b33 = #101l }; b224 = 102 } in
  let r_expected = { a224 = #{ a33 = #0l; b33 = #1l }; b224 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a224 *)
  r.a224 <- next_r.a224;
  let r_expected = { r_expected with a224 = next_r.a224 } in
  mark_test_run 1784;
  let test = eq r r_expected in
  if not test then failwithf "test 1784 failed";
  Gc.compact ();
  (* .b224 *)
  r.b224 <- next_r.b224;
  let r_expected = { r_expected with b224 = next_r.b224 } in
  mark_test_run 1785;
  let test = eq r r_expected in
  if not test then failwithf "test 1785 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a224 = #{ a33; b33 }; b224 } = r in
  let expected_a33 = #100l in
  mark_test_run 1786;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a33 a33 in
  if not test then failwithf "test 1786 failed";
  let expected_b33 = #101l in
  mark_test_run 1787;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b33 b33 in
  if not test then failwithf "test 1787 failed";
  let expected_b224 = 102 in
  mark_test_run 1788;
  let test = (fun a b -> Int.equal a b) expected_b224 b224 in
  if not test then failwithf "test 1788 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a224; b224 } = r in
  let expected_a224 = #{ a33 = #100l; b33 = #101l } in
  mark_test_run 1789;
  let test = (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) expected_a224 a224 in
  if not test then failwithf "test 1789 failed";
  let expected_b224 = 102 in
  mark_test_run 1790;
  let test = (fun a b -> Int.equal a b) expected_b224 b224 in
  if not test then failwithf "test 1790 failed";

  (**********************************************)
  (*   t225 = { #{ int32#; int32# }; int32# }   *)
  (**********************************************)
  let r = { a225 = #{ a33 = #0l; b33 = #1l }; b225 = #2l } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a225 *)
  let actual = r.a225 in
  let expected = #{ a33 = #0l; b33 = #1l } in
  mark_test_run 1791;
  let test = (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) actual expected in
  if not test then failwithf "test 1791 failed";
  (* Paths of depth 2 *)
  (* .a225.#a33 *)
  let actual = r.a225.#a33 in
  let expected = #0l in
  mark_test_run 1792;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1792 failed";
  (* .a225.#b33 *)
  let actual = r.a225.#b33 in
  let expected = #1l in
  mark_test_run 1793;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1793 failed";
  (* Paths of depth 1 *)
  (* .b225 *)
  let actual = r.b225 in
  let expected = #2l in
  mark_test_run 1794;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1794 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a225 = a2251; b225 = b2251 } { a225 = a2252; b225 = b2252 } -> (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) a2251 a2252 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b2251 b2252) in
  let next_r = { a225 = #{ a33 = #100l; b33 = #101l }; b225 = #102l } in
  let r_expected = { a225 = #{ a33 = #0l; b33 = #1l }; b225 = #2l } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a225 *)
  r.a225 <- next_r.a225;
  let r_expected = { r_expected with a225 = next_r.a225 } in
  mark_test_run 1795;
  let test = eq r r_expected in
  if not test then failwithf "test 1795 failed";
  Gc.compact ();
  (* .b225 *)
  r.b225 <- next_r.b225;
  let r_expected = { r_expected with b225 = next_r.b225 } in
  mark_test_run 1796;
  let test = eq r r_expected in
  if not test then failwithf "test 1796 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a225 = #{ a33; b33 }; b225 } = r in
  let expected_a33 = #100l in
  mark_test_run 1797;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a33 a33 in
  if not test then failwithf "test 1797 failed";
  let expected_b33 = #101l in
  mark_test_run 1798;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b33 b33 in
  if not test then failwithf "test 1798 failed";
  let expected_b225 = #102l in
  mark_test_run 1799;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b225 b225 in
  if not test then failwithf "test 1799 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a225; b225 } = r in
  let expected_a225 = #{ a33 = #100l; b33 = #101l } in
  mark_test_run 1800;
  let test = (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) expected_a225 a225 in
  if not test then failwithf "test 1800 failed";
  let expected_b225 = #102l in
  mark_test_run 1801;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b225 b225 in
  if not test then failwithf "test 1801 failed";

  (*********************************************)
  (*   t227 = { #{ int32#; #{ int; int } } }   *)
  (*********************************************)
  let r = { a227 = #{ a226 = #0l; b226 = #{ a16 = 1; b16 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a227 *)
  let actual = r.a227 in
  let expected = #{ a226 = #0l; b226 = #{ a16 = 1; b16 = 2 } } in
  mark_test_run 1802;
  let test = (fun #{ a226 = a2261; b226 = b2261 } #{ a226 = a2262; b226 = b2262 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a2261 a2262 && (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) b2261 b2262) actual expected in
  if not test then failwithf "test 1802 failed";
  (* Paths of depth 2 *)
  (* .a227.#a226 *)
  let actual = r.a227.#a226 in
  let expected = #0l in
  mark_test_run 1803;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1803 failed";
  (* .a227.#b226 *)
  let actual = r.a227.#b226 in
  let expected = #{ a16 = 1; b16 = 2 } in
  mark_test_run 1804;
  let test = (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) actual expected in
  if not test then failwithf "test 1804 failed";
  (* Paths of depth 3 *)
  (* .a227.#b226.#a16 *)
  let actual = r.a227.#b226.#a16 in
  let expected = 1 in
  mark_test_run 1805;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1805 failed";
  (* .a227.#b226.#b16 *)
  let actual = r.a227.#b226.#b16 in
  let expected = 2 in
  mark_test_run 1806;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1806 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a227 = a2271 } { a227 = a2272 } -> (fun #{ a226 = a2261; b226 = b2261 } #{ a226 = a2262; b226 = b2262 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a2261 a2262 && (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) b2261 b2262) a2271 a2272) in
  let next_r = { a227 = #{ a226 = #100l; b226 = #{ a16 = 101; b16 = 102 } } } in
  let r_expected = { a227 = #{ a226 = #0l; b226 = #{ a16 = 1; b16 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a227 *)
  r.a227 <- next_r.a227;
  let r_expected = { r_expected with a227 = next_r.a227 } in
  mark_test_run 1807;
  let test = eq r r_expected in
  if not test then failwithf "test 1807 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a227 = #{ a226; b226 = #{ a16; b16 } } } = r in
  let expected_a226 = #100l in
  mark_test_run 1808;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a226 a226 in
  if not test then failwithf "test 1808 failed";
  let expected_a16 = 101 in
  mark_test_run 1809;
  let test = (fun a b -> Int.equal a b) expected_a16 a16 in
  if not test then failwithf "test 1809 failed";
  let expected_b16 = 102 in
  mark_test_run 1810;
  let test = (fun a b -> Int.equal a b) expected_b16 b16 in
  if not test then failwithf "test 1810 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a227 } = r in
  let expected_a227 = #{ a226 = #100l; b226 = #{ a16 = 101; b16 = 102 } } in
  mark_test_run 1811;
  let test = (fun #{ a226 = a2261; b226 = b2261 } #{ a226 = a2262; b226 = b2262 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a2261 a2262 && (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) b2261 b2262) expected_a227 a227 in
  if not test then failwithf "test 1811 failed";

  (************************************************)
  (*   t229 = { #{ int32#; #{ int; int32# } } }   *)
  (************************************************)
  let r = { a229 = #{ a228 = #0l; b228 = #{ a18 = 1; b18 = #2l } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a229 *)
  let actual = r.a229 in
  let expected = #{ a228 = #0l; b228 = #{ a18 = 1; b18 = #2l } } in
  mark_test_run 1812;
  let test = (fun #{ a228 = a2281; b228 = b2281 } #{ a228 = a2282; b228 = b2282 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a2281 a2282 && (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) b2281 b2282) actual expected in
  if not test then failwithf "test 1812 failed";
  (* Paths of depth 2 *)
  (* .a229.#a228 *)
  let actual = r.a229.#a228 in
  let expected = #0l in
  mark_test_run 1813;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1813 failed";
  (* .a229.#b228 *)
  let actual = r.a229.#b228 in
  let expected = #{ a18 = 1; b18 = #2l } in
  mark_test_run 1814;
  let test = (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) actual expected in
  if not test then failwithf "test 1814 failed";
  (* Paths of depth 3 *)
  (* .a229.#b228.#a18 *)
  let actual = r.a229.#b228.#a18 in
  let expected = 1 in
  mark_test_run 1815;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1815 failed";
  (* .a229.#b228.#b18 *)
  let actual = r.a229.#b228.#b18 in
  let expected = #2l in
  mark_test_run 1816;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1816 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a229 = a2291 } { a229 = a2292 } -> (fun #{ a228 = a2281; b228 = b2281 } #{ a228 = a2282; b228 = b2282 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a2281 a2282 && (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) b2281 b2282) a2291 a2292) in
  let next_r = { a229 = #{ a228 = #100l; b228 = #{ a18 = 101; b18 = #102l } } } in
  let r_expected = { a229 = #{ a228 = #0l; b228 = #{ a18 = 1; b18 = #2l } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a229 *)
  r.a229 <- next_r.a229;
  let r_expected = { r_expected with a229 = next_r.a229 } in
  mark_test_run 1817;
  let test = eq r r_expected in
  if not test then failwithf "test 1817 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a229 = #{ a228; b228 = #{ a18; b18 } } } = r in
  let expected_a228 = #100l in
  mark_test_run 1818;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a228 a228 in
  if not test then failwithf "test 1818 failed";
  let expected_a18 = 101 in
  mark_test_run 1819;
  let test = (fun a b -> Int.equal a b) expected_a18 a18 in
  if not test then failwithf "test 1819 failed";
  let expected_b18 = #102l in
  mark_test_run 1820;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b18 b18 in
  if not test then failwithf "test 1820 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a229 } = r in
  let expected_a229 = #{ a228 = #100l; b228 = #{ a18 = 101; b18 = #102l } } in
  mark_test_run 1821;
  let test = (fun #{ a228 = a2281; b228 = b2281 } #{ a228 = a2282; b228 = b2282 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a2281 a2282 && (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) b2281 b2282) expected_a229 a229 in
  if not test then failwithf "test 1821 failed";

  (************************************************)
  (*   t231 = { #{ int32#; #{ int32#; int } } }   *)
  (************************************************)
  let r = { a231 = #{ a230 = #0l; b230 = #{ a31 = #1l; b31 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a231 *)
  let actual = r.a231 in
  let expected = #{ a230 = #0l; b230 = #{ a31 = #1l; b31 = 2 } } in
  mark_test_run 1822;
  let test = (fun #{ a230 = a2301; b230 = b2301 } #{ a230 = a2302; b230 = b2302 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a2301 a2302 && (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) b2301 b2302) actual expected in
  if not test then failwithf "test 1822 failed";
  (* Paths of depth 2 *)
  (* .a231.#a230 *)
  let actual = r.a231.#a230 in
  let expected = #0l in
  mark_test_run 1823;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1823 failed";
  (* .a231.#b230 *)
  let actual = r.a231.#b230 in
  let expected = #{ a31 = #1l; b31 = 2 } in
  mark_test_run 1824;
  let test = (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) actual expected in
  if not test then failwithf "test 1824 failed";
  (* Paths of depth 3 *)
  (* .a231.#b230.#a31 *)
  let actual = r.a231.#b230.#a31 in
  let expected = #1l in
  mark_test_run 1825;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1825 failed";
  (* .a231.#b230.#b31 *)
  let actual = r.a231.#b230.#b31 in
  let expected = 2 in
  mark_test_run 1826;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1826 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a231 = a2311 } { a231 = a2312 } -> (fun #{ a230 = a2301; b230 = b2301 } #{ a230 = a2302; b230 = b2302 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a2301 a2302 && (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) b2301 b2302) a2311 a2312) in
  let next_r = { a231 = #{ a230 = #100l; b230 = #{ a31 = #101l; b31 = 102 } } } in
  let r_expected = { a231 = #{ a230 = #0l; b230 = #{ a31 = #1l; b31 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a231 *)
  r.a231 <- next_r.a231;
  let r_expected = { r_expected with a231 = next_r.a231 } in
  mark_test_run 1827;
  let test = eq r r_expected in
  if not test then failwithf "test 1827 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a231 = #{ a230; b230 = #{ a31; b31 } } } = r in
  let expected_a230 = #100l in
  mark_test_run 1828;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a230 a230 in
  if not test then failwithf "test 1828 failed";
  let expected_a31 = #101l in
  mark_test_run 1829;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a31 a31 in
  if not test then failwithf "test 1829 failed";
  let expected_b31 = 102 in
  mark_test_run 1830;
  let test = (fun a b -> Int.equal a b) expected_b31 b31 in
  if not test then failwithf "test 1830 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a231 } = r in
  let expected_a231 = #{ a230 = #100l; b230 = #{ a31 = #101l; b31 = 102 } } in
  mark_test_run 1831;
  let test = (fun #{ a230 = a2301; b230 = b2301 } #{ a230 = a2302; b230 = b2302 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a2301 a2302 && (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) b2301 b2302) expected_a231 a231 in
  if not test then failwithf "test 1831 failed";

  (***************************************************)
  (*   t233 = { #{ int32#; #{ int32#; int32# } } }   *)
  (***************************************************)
  let r = { a233 = #{ a232 = #0l; b232 = #{ a33 = #1l; b33 = #2l } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a233 *)
  let actual = r.a233 in
  let expected = #{ a232 = #0l; b232 = #{ a33 = #1l; b33 = #2l } } in
  mark_test_run 1832;
  let test = (fun #{ a232 = a2321; b232 = b2321 } #{ a232 = a2322; b232 = b2322 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a2321 a2322 && (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) b2321 b2322) actual expected in
  if not test then failwithf "test 1832 failed";
  (* Paths of depth 2 *)
  (* .a233.#a232 *)
  let actual = r.a233.#a232 in
  let expected = #0l in
  mark_test_run 1833;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1833 failed";
  (* .a233.#b232 *)
  let actual = r.a233.#b232 in
  let expected = #{ a33 = #1l; b33 = #2l } in
  mark_test_run 1834;
  let test = (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) actual expected in
  if not test then failwithf "test 1834 failed";
  (* Paths of depth 3 *)
  (* .a233.#b232.#a33 *)
  let actual = r.a233.#b232.#a33 in
  let expected = #1l in
  mark_test_run 1835;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1835 failed";
  (* .a233.#b232.#b33 *)
  let actual = r.a233.#b232.#b33 in
  let expected = #2l in
  mark_test_run 1836;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 1836 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a233 = a2331 } { a233 = a2332 } -> (fun #{ a232 = a2321; b232 = b2321 } #{ a232 = a2322; b232 = b2322 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a2321 a2322 && (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) b2321 b2322) a2331 a2332) in
  let next_r = { a233 = #{ a232 = #100l; b232 = #{ a33 = #101l; b33 = #102l } } } in
  let r_expected = { a233 = #{ a232 = #0l; b232 = #{ a33 = #1l; b33 = #2l } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a233 *)
  r.a233 <- next_r.a233;
  let r_expected = { r_expected with a233 = next_r.a233 } in
  mark_test_run 1837;
  let test = eq r r_expected in
  if not test then failwithf "test 1837 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a233 = #{ a232; b232 = #{ a33; b33 } } } = r in
  let expected_a232 = #100l in
  mark_test_run 1838;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a232 a232 in
  if not test then failwithf "test 1838 failed";
  let expected_a33 = #101l in
  mark_test_run 1839;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a33 a33 in
  if not test then failwithf "test 1839 failed";
  let expected_b33 = #102l in
  mark_test_run 1840;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b33 b33 in
  if not test then failwithf "test 1840 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a233 } = r in
  let expected_a233 = #{ a232 = #100l; b232 = #{ a33 = #101l; b33 = #102l } } in
  mark_test_run 1841;
  let test = (fun #{ a232 = a2321; b232 = b2321 } #{ a232 = a2322; b232 = b2322 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a2321 a2322 && (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) b2321 b2322) expected_a233 a233 in
  if not test then failwithf "test 1841 failed";

  (*****************************)
  (*   t234 = { #{ float } }   *)
  (*****************************)
  let r = { a234 = #{ a27 = 0. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a234 *)
  let actual = r.a234 in
  let expected = #{ a27 = 0. } in
  mark_test_run 1842;
  let test = (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) actual expected in
  if not test then failwithf "test 1842 failed";
  (* Paths of depth 2 *)
  (* .a234.#a27 *)
  let actual = r.a234.#a27 in
  let expected = 0. in
  mark_test_run 1843;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1843 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a234 = a2341 } { a234 = a2342 } -> (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) a2341 a2342) in
  let next_r = { a234 = #{ a27 = 100. } } in
  let r_expected = { a234 = #{ a27 = 0. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a234 *)
  r.a234 <- next_r.a234;
  let r_expected = { r_expected with a234 = next_r.a234 } in
  mark_test_run 1844;
  let test = eq r r_expected in
  if not test then failwithf "test 1844 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a234 = #{ a27 } } = r in
  let expected_a27 = 100. in
  mark_test_run 1845;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a27 a27 in
  if not test then failwithf "test 1845 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a234 } = r in
  let expected_a234 = #{ a27 = 100. } in
  mark_test_run 1846;
  let test = (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) expected_a234 a234 in
  if not test then failwithf "test 1846 failed";

  (**********************************)
  (*   t235 = { #{ float }; int }   *)
  (**********************************)
  let r = { a235 = #{ a27 = 0. }; b235 = 1 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a235 *)
  let actual = r.a235 in
  let expected = #{ a27 = 0. } in
  mark_test_run 1847;
  let test = (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) actual expected in
  if not test then failwithf "test 1847 failed";
  (* Paths of depth 2 *)
  (* .a235.#a27 *)
  let actual = r.a235.#a27 in
  let expected = 0. in
  mark_test_run 1848;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1848 failed";
  (* Paths of depth 1 *)
  (* .b235 *)
  let actual = r.b235 in
  let expected = 1 in
  mark_test_run 1849;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1849 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a235 = a2351; b235 = b2351 } { a235 = a2352; b235 = b2352 } -> (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) a2351 a2352 && (fun a b -> Int.equal a b) b2351 b2352) in
  let next_r = { a235 = #{ a27 = 100. }; b235 = 101 } in
  let r_expected = { a235 = #{ a27 = 0. }; b235 = 1 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a235 *)
  r.a235 <- next_r.a235;
  let r_expected = { r_expected with a235 = next_r.a235 } in
  mark_test_run 1850;
  let test = eq r r_expected in
  if not test then failwithf "test 1850 failed";
  Gc.compact ();
  (* .b235 *)
  r.b235 <- next_r.b235;
  let r_expected = { r_expected with b235 = next_r.b235 } in
  mark_test_run 1851;
  let test = eq r r_expected in
  if not test then failwithf "test 1851 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a235 = #{ a27 }; b235 } = r in
  let expected_a27 = 100. in
  mark_test_run 1852;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a27 a27 in
  if not test then failwithf "test 1852 failed";
  let expected_b235 = 101 in
  mark_test_run 1853;
  let test = (fun a b -> Int.equal a b) expected_b235 b235 in
  if not test then failwithf "test 1853 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a235; b235 } = r in
  let expected_a235 = #{ a27 = 100. } in
  mark_test_run 1854;
  let test = (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) expected_a235 a235 in
  if not test then failwithf "test 1854 failed";
  let expected_b235 = 101 in
  mark_test_run 1855;
  let test = (fun a b -> Int.equal a b) expected_b235 b235 in
  if not test then failwithf "test 1855 failed";

  (************************************)
  (*   t236 = { #{ float }; float }   *)
  (************************************)
  let r = { a236 = #{ a27 = 0. }; b236 = 1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a236 *)
  let actual = r.a236 in
  let expected = #{ a27 = 0. } in
  mark_test_run 1856;
  let test = (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) actual expected in
  if not test then failwithf "test 1856 failed";
  (* Paths of depth 2 *)
  (* .a236.#a27 *)
  let actual = r.a236.#a27 in
  let expected = 0. in
  mark_test_run 1857;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1857 failed";
  (* Paths of depth 1 *)
  (* .b236 *)
  let actual = r.b236 in
  let expected = 1. in
  mark_test_run 1858;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1858 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a236 = a2361; b236 = b2361 } { a236 = a2362; b236 = b2362 } -> (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) a2361 a2362 && (fun a b -> Float.equal (globalize a) (globalize b)) b2361 b2362) in
  let next_r = { a236 = #{ a27 = 100. }; b236 = 101. } in
  let r_expected = { a236 = #{ a27 = 0. }; b236 = 1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a236 *)
  r.a236 <- next_r.a236;
  let r_expected = { r_expected with a236 = next_r.a236 } in
  mark_test_run 1859;
  let test = eq r r_expected in
  if not test then failwithf "test 1859 failed";
  Gc.compact ();
  (* .b236 *)
  r.b236 <- next_r.b236;
  let r_expected = { r_expected with b236 = next_r.b236 } in
  mark_test_run 1860;
  let test = eq r r_expected in
  if not test then failwithf "test 1860 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a236 = #{ a27 }; b236 } = r in
  let expected_a27 = 100. in
  mark_test_run 1861;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a27 a27 in
  if not test then failwithf "test 1861 failed";
  let expected_b236 = 101. in
  mark_test_run 1862;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b236 b236 in
  if not test then failwithf "test 1862 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a236; b236 } = r in
  let expected_a236 = #{ a27 = 100. } in
  mark_test_run 1863;
  let test = (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) expected_a236 a236 in
  if not test then failwithf "test 1863 failed";
  let expected_b236 = 101. in
  mark_test_run 1864;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b236 b236 in
  if not test then failwithf "test 1864 failed";

  (*************************************)
  (*   t237 = { #{ float }; float# }   *)
  (*************************************)
  let r = { a237 = #{ a27 = 0. }; b237 = #1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a237 *)
  let actual = r.a237 in
  let expected = #{ a27 = 0. } in
  mark_test_run 1865;
  let test = (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) actual expected in
  if not test then failwithf "test 1865 failed";
  (* Paths of depth 2 *)
  (* .a237.#a27 *)
  let actual = r.a237.#a27 in
  let expected = 0. in
  mark_test_run 1866;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1866 failed";
  (* Paths of depth 1 *)
  (* .b237 *)
  let actual = r.b237 in
  let expected = #1. in
  mark_test_run 1867;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1867 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a237 = a2371; b237 = b2371 } { a237 = a2372; b237 = b2372 } -> (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) a2371 a2372 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2371 b2372) in
  let next_r = { a237 = #{ a27 = 100. }; b237 = #101. } in
  let r_expected = { a237 = #{ a27 = 0. }; b237 = #1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a237 *)
  r.a237 <- next_r.a237;
  let r_expected = { r_expected with a237 = next_r.a237 } in
  mark_test_run 1868;
  let test = eq r r_expected in
  if not test then failwithf "test 1868 failed";
  Gc.compact ();
  (* .b237 *)
  r.b237 <- next_r.b237;
  let r_expected = { r_expected with b237 = next_r.b237 } in
  mark_test_run 1869;
  let test = eq r r_expected in
  if not test then failwithf "test 1869 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a237 = #{ a27 }; b237 } = r in
  let expected_a27 = 100. in
  mark_test_run 1870;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a27 a27 in
  if not test then failwithf "test 1870 failed";
  let expected_b237 = #101. in
  mark_test_run 1871;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b237 b237 in
  if not test then failwithf "test 1871 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a237; b237 } = r in
  let expected_a237 = #{ a27 = 100. } in
  mark_test_run 1872;
  let test = (fun #{ a27 = a271 } #{ a27 = a272 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a271 a272) expected_a237 a237 in
  if not test then failwithf "test 1872 failed";
  let expected_b237 = #101. in
  mark_test_run 1873;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b237 b237 in
  if not test then failwithf "test 1873 failed";

  (**********************************)
  (*   t238 = { #{ float; int } }   *)
  (**********************************)
  let r = { a238 = #{ a40 = 0.; b40 = 1 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a238 *)
  let actual = r.a238 in
  let expected = #{ a40 = 0.; b40 = 1 } in
  mark_test_run 1874;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) actual expected in
  if not test then failwithf "test 1874 failed";
  (* Paths of depth 2 *)
  (* .a238.#a40 *)
  let actual = r.a238.#a40 in
  let expected = 0. in
  mark_test_run 1875;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1875 failed";
  (* .a238.#b40 *)
  let actual = r.a238.#b40 in
  let expected = 1 in
  mark_test_run 1876;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1876 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a238 = a2381 } { a238 = a2382 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a2381 a2382) in
  let next_r = { a238 = #{ a40 = 100.; b40 = 101 } } in
  let r_expected = { a238 = #{ a40 = 0.; b40 = 1 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a238 *)
  r.a238 <- next_r.a238;
  let r_expected = { r_expected with a238 = next_r.a238 } in
  mark_test_run 1877;
  let test = eq r r_expected in
  if not test then failwithf "test 1877 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a238 = #{ a40; b40 } } = r in
  let expected_a40 = 100. in
  mark_test_run 1878;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a40 a40 in
  if not test then failwithf "test 1878 failed";
  let expected_b40 = 101 in
  mark_test_run 1879;
  let test = (fun a b -> Int.equal a b) expected_b40 b40 in
  if not test then failwithf "test 1879 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a238 } = r in
  let expected_a238 = #{ a40 = 100.; b40 = 101 } in
  mark_test_run 1880;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) expected_a238 a238 in
  if not test then failwithf "test 1880 failed";

  (***************************************)
  (*   t239 = { #{ float; int }; int }   *)
  (***************************************)
  let r = { a239 = #{ a40 = 0.; b40 = 1 }; b239 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a239 *)
  let actual = r.a239 in
  let expected = #{ a40 = 0.; b40 = 1 } in
  mark_test_run 1881;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) actual expected in
  if not test then failwithf "test 1881 failed";
  (* Paths of depth 2 *)
  (* .a239.#a40 *)
  let actual = r.a239.#a40 in
  let expected = 0. in
  mark_test_run 1882;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1882 failed";
  (* .a239.#b40 *)
  let actual = r.a239.#b40 in
  let expected = 1 in
  mark_test_run 1883;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1883 failed";
  (* Paths of depth 1 *)
  (* .b239 *)
  let actual = r.b239 in
  let expected = 2 in
  mark_test_run 1884;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1884 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a239 = a2391; b239 = b2391 } { a239 = a2392; b239 = b2392 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a2391 a2392 && (fun a b -> Int.equal a b) b2391 b2392) in
  let next_r = { a239 = #{ a40 = 100.; b40 = 101 }; b239 = 102 } in
  let r_expected = { a239 = #{ a40 = 0.; b40 = 1 }; b239 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a239 *)
  r.a239 <- next_r.a239;
  let r_expected = { r_expected with a239 = next_r.a239 } in
  mark_test_run 1885;
  let test = eq r r_expected in
  if not test then failwithf "test 1885 failed";
  Gc.compact ();
  (* .b239 *)
  r.b239 <- next_r.b239;
  let r_expected = { r_expected with b239 = next_r.b239 } in
  mark_test_run 1886;
  let test = eq r r_expected in
  if not test then failwithf "test 1886 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a239 = #{ a40; b40 }; b239 } = r in
  let expected_a40 = 100. in
  mark_test_run 1887;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a40 a40 in
  if not test then failwithf "test 1887 failed";
  let expected_b40 = 101 in
  mark_test_run 1888;
  let test = (fun a b -> Int.equal a b) expected_b40 b40 in
  if not test then failwithf "test 1888 failed";
  let expected_b239 = 102 in
  mark_test_run 1889;
  let test = (fun a b -> Int.equal a b) expected_b239 b239 in
  if not test then failwithf "test 1889 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a239; b239 } = r in
  let expected_a239 = #{ a40 = 100.; b40 = 101 } in
  mark_test_run 1890;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) expected_a239 a239 in
  if not test then failwithf "test 1890 failed";
  let expected_b239 = 102 in
  mark_test_run 1891;
  let test = (fun a b -> Int.equal a b) expected_b239 b239 in
  if not test then failwithf "test 1891 failed";

  (*****************************************)
  (*   t240 = { #{ float; int }; float }   *)
  (*****************************************)
  let r = { a240 = #{ a40 = 0.; b40 = 1 }; b240 = 2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a240 *)
  let actual = r.a240 in
  let expected = #{ a40 = 0.; b40 = 1 } in
  mark_test_run 1892;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) actual expected in
  if not test then failwithf "test 1892 failed";
  (* Paths of depth 2 *)
  (* .a240.#a40 *)
  let actual = r.a240.#a40 in
  let expected = 0. in
  mark_test_run 1893;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1893 failed";
  (* .a240.#b40 *)
  let actual = r.a240.#b40 in
  let expected = 1 in
  mark_test_run 1894;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1894 failed";
  (* Paths of depth 1 *)
  (* .b240 *)
  let actual = r.b240 in
  let expected = 2. in
  mark_test_run 1895;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1895 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a240 = a2401; b240 = b2401 } { a240 = a2402; b240 = b2402 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a2401 a2402 && (fun a b -> Float.equal (globalize a) (globalize b)) b2401 b2402) in
  let next_r = { a240 = #{ a40 = 100.; b40 = 101 }; b240 = 102. } in
  let r_expected = { a240 = #{ a40 = 0.; b40 = 1 }; b240 = 2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a240 *)
  r.a240 <- next_r.a240;
  let r_expected = { r_expected with a240 = next_r.a240 } in
  mark_test_run 1896;
  let test = eq r r_expected in
  if not test then failwithf "test 1896 failed";
  Gc.compact ();
  (* .b240 *)
  r.b240 <- next_r.b240;
  let r_expected = { r_expected with b240 = next_r.b240 } in
  mark_test_run 1897;
  let test = eq r r_expected in
  if not test then failwithf "test 1897 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a240 = #{ a40; b40 }; b240 } = r in
  let expected_a40 = 100. in
  mark_test_run 1898;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a40 a40 in
  if not test then failwithf "test 1898 failed";
  let expected_b40 = 101 in
  mark_test_run 1899;
  let test = (fun a b -> Int.equal a b) expected_b40 b40 in
  if not test then failwithf "test 1899 failed";
  let expected_b240 = 102. in
  mark_test_run 1900;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b240 b240 in
  if not test then failwithf "test 1900 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a240; b240 } = r in
  let expected_a240 = #{ a40 = 100.; b40 = 101 } in
  mark_test_run 1901;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) expected_a240 a240 in
  if not test then failwithf "test 1901 failed";
  let expected_b240 = 102. in
  mark_test_run 1902;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b240 b240 in
  if not test then failwithf "test 1902 failed";

  (************************************)
  (*   t241 = { #{ float; float } }   *)
  (************************************)
  let r = { a241 = #{ a42 = 0.; b42 = 1. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a241 *)
  let actual = r.a241 in
  let expected = #{ a42 = 0.; b42 = 1. } in
  mark_test_run 1903;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) actual expected in
  if not test then failwithf "test 1903 failed";
  (* Paths of depth 2 *)
  (* .a241.#a42 *)
  let actual = r.a241.#a42 in
  let expected = 0. in
  mark_test_run 1904;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1904 failed";
  (* .a241.#b42 *)
  let actual = r.a241.#b42 in
  let expected = 1. in
  mark_test_run 1905;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1905 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a241 = a2411 } { a241 = a2412 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) a2411 a2412) in
  let next_r = { a241 = #{ a42 = 100.; b42 = 101. } } in
  let r_expected = { a241 = #{ a42 = 0.; b42 = 1. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a241 *)
  r.a241 <- next_r.a241;
  let r_expected = { r_expected with a241 = next_r.a241 } in
  mark_test_run 1906;
  let test = eq r r_expected in
  if not test then failwithf "test 1906 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a241 = #{ a42; b42 } } = r in
  let expected_a42 = 100. in
  mark_test_run 1907;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a42 a42 in
  if not test then failwithf "test 1907 failed";
  let expected_b42 = 101. in
  mark_test_run 1908;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b42 b42 in
  if not test then failwithf "test 1908 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a241 } = r in
  let expected_a241 = #{ a42 = 100.; b42 = 101. } in
  mark_test_run 1909;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) expected_a241 a241 in
  if not test then failwithf "test 1909 failed";

  (*****************************************)
  (*   t242 = { #{ float; float }; int }   *)
  (*****************************************)
  let r = { a242 = #{ a42 = 0.; b42 = 1. }; b242 = 2 } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a242 *)
  let actual = r.a242 in
  let expected = #{ a42 = 0.; b42 = 1. } in
  mark_test_run 1910;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) actual expected in
  if not test then failwithf "test 1910 failed";
  (* Paths of depth 2 *)
  (* .a242.#a42 *)
  let actual = r.a242.#a42 in
  let expected = 0. in
  mark_test_run 1911;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1911 failed";
  (* .a242.#b42 *)
  let actual = r.a242.#b42 in
  let expected = 1. in
  mark_test_run 1912;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1912 failed";
  (* Paths of depth 1 *)
  (* .b242 *)
  let actual = r.b242 in
  let expected = 2 in
  mark_test_run 1913;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1913 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a242 = a2421; b242 = b2421 } { a242 = a2422; b242 = b2422 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) a2421 a2422 && (fun a b -> Int.equal a b) b2421 b2422) in
  let next_r = { a242 = #{ a42 = 100.; b42 = 101. }; b242 = 102 } in
  let r_expected = { a242 = #{ a42 = 0.; b42 = 1. }; b242 = 2 } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a242 *)
  r.a242 <- next_r.a242;
  let r_expected = { r_expected with a242 = next_r.a242 } in
  mark_test_run 1914;
  let test = eq r r_expected in
  if not test then failwithf "test 1914 failed";
  Gc.compact ();
  (* .b242 *)
  r.b242 <- next_r.b242;
  let r_expected = { r_expected with b242 = next_r.b242 } in
  mark_test_run 1915;
  let test = eq r r_expected in
  if not test then failwithf "test 1915 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a242 = #{ a42; b42 }; b242 } = r in
  let expected_a42 = 100. in
  mark_test_run 1916;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a42 a42 in
  if not test then failwithf "test 1916 failed";
  let expected_b42 = 101. in
  mark_test_run 1917;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b42 b42 in
  if not test then failwithf "test 1917 failed";
  let expected_b242 = 102 in
  mark_test_run 1918;
  let test = (fun a b -> Int.equal a b) expected_b242 b242 in
  if not test then failwithf "test 1918 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a242; b242 } = r in
  let expected_a242 = #{ a42 = 100.; b42 = 101. } in
  mark_test_run 1919;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) expected_a242 a242 in
  if not test then failwithf "test 1919 failed";
  let expected_b242 = 102 in
  mark_test_run 1920;
  let test = (fun a b -> Int.equal a b) expected_b242 b242 in
  if not test then failwithf "test 1920 failed";

  (*******************************************)
  (*   t243 = { #{ float; float }; float }   *)
  (*******************************************)
  let r = { a243 = #{ a42 = 0.; b42 = 1. }; b243 = 2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a243 *)
  let actual = r.a243 in
  let expected = #{ a42 = 0.; b42 = 1. } in
  mark_test_run 1921;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) actual expected in
  if not test then failwithf "test 1921 failed";
  (* Paths of depth 2 *)
  (* .a243.#a42 *)
  let actual = r.a243.#a42 in
  let expected = 0. in
  mark_test_run 1922;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1922 failed";
  (* .a243.#b42 *)
  let actual = r.a243.#b42 in
  let expected = 1. in
  mark_test_run 1923;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1923 failed";
  (* Paths of depth 1 *)
  (* .b243 *)
  let actual = r.b243 in
  let expected = 2. in
  mark_test_run 1924;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1924 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a243 = a2431; b243 = b2431 } { a243 = a2432; b243 = b2432 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) a2431 a2432 && (fun a b -> Float.equal (globalize a) (globalize b)) b2431 b2432) in
  let next_r = { a243 = #{ a42 = 100.; b42 = 101. }; b243 = 102. } in
  let r_expected = { a243 = #{ a42 = 0.; b42 = 1. }; b243 = 2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a243 *)
  r.a243 <- next_r.a243;
  let r_expected = { r_expected with a243 = next_r.a243 } in
  mark_test_run 1925;
  let test = eq r r_expected in
  if not test then failwithf "test 1925 failed";
  Gc.compact ();
  (* .b243 *)
  r.b243 <- next_r.b243;
  let r_expected = { r_expected with b243 = next_r.b243 } in
  mark_test_run 1926;
  let test = eq r r_expected in
  if not test then failwithf "test 1926 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a243 = #{ a42; b42 }; b243 } = r in
  let expected_a42 = 100. in
  mark_test_run 1927;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a42 a42 in
  if not test then failwithf "test 1927 failed";
  let expected_b42 = 101. in
  mark_test_run 1928;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b42 b42 in
  if not test then failwithf "test 1928 failed";
  let expected_b243 = 102. in
  mark_test_run 1929;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b243 b243 in
  if not test then failwithf "test 1929 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a243; b243 } = r in
  let expected_a243 = #{ a42 = 100.; b42 = 101. } in
  mark_test_run 1930;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) expected_a243 a243 in
  if not test then failwithf "test 1930 failed";
  let expected_b243 = 102. in
  mark_test_run 1931;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b243 b243 in
  if not test then failwithf "test 1931 failed";

  (********************************************)
  (*   t244 = { #{ float; float }; float# }   *)
  (********************************************)
  let r = { a244 = #{ a42 = 0.; b42 = 1. }; b244 = #2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a244 *)
  let actual = r.a244 in
  let expected = #{ a42 = 0.; b42 = 1. } in
  mark_test_run 1932;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) actual expected in
  if not test then failwithf "test 1932 failed";
  (* Paths of depth 2 *)
  (* .a244.#a42 *)
  let actual = r.a244.#a42 in
  let expected = 0. in
  mark_test_run 1933;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1933 failed";
  (* .a244.#b42 *)
  let actual = r.a244.#b42 in
  let expected = 1. in
  mark_test_run 1934;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1934 failed";
  (* Paths of depth 1 *)
  (* .b244 *)
  let actual = r.b244 in
  let expected = #2. in
  mark_test_run 1935;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1935 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a244 = a2441; b244 = b2441 } { a244 = a2442; b244 = b2442 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) a2441 a2442 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2441 b2442) in
  let next_r = { a244 = #{ a42 = 100.; b42 = 101. }; b244 = #102. } in
  let r_expected = { a244 = #{ a42 = 0.; b42 = 1. }; b244 = #2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a244 *)
  r.a244 <- next_r.a244;
  let r_expected = { r_expected with a244 = next_r.a244 } in
  mark_test_run 1936;
  let test = eq r r_expected in
  if not test then failwithf "test 1936 failed";
  Gc.compact ();
  (* .b244 *)
  r.b244 <- next_r.b244;
  let r_expected = { r_expected with b244 = next_r.b244 } in
  mark_test_run 1937;
  let test = eq r r_expected in
  if not test then failwithf "test 1937 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a244 = #{ a42; b42 }; b244 } = r in
  let expected_a42 = 100. in
  mark_test_run 1938;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a42 a42 in
  if not test then failwithf "test 1938 failed";
  let expected_b42 = 101. in
  mark_test_run 1939;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b42 b42 in
  if not test then failwithf "test 1939 failed";
  let expected_b244 = #102. in
  mark_test_run 1940;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b244 b244 in
  if not test then failwithf "test 1940 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a244; b244 } = r in
  let expected_a244 = #{ a42 = 100.; b42 = 101. } in
  mark_test_run 1941;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) expected_a244 a244 in
  if not test then failwithf "test 1941 failed";
  let expected_b244 = #102. in
  mark_test_run 1942;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b244 b244 in
  if not test then failwithf "test 1942 failed";

  (*************************************)
  (*   t245 = { #{ float; float# } }   *)
  (*************************************)
  let r = { a245 = #{ a131 = 0.; b131 = #1. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a245 *)
  let actual = r.a245 in
  let expected = #{ a131 = 0.; b131 = #1. } in
  mark_test_run 1943;
  let test = (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) actual expected in
  if not test then failwithf "test 1943 failed";
  (* Paths of depth 2 *)
  (* .a245.#a131 *)
  let actual = r.a245.#a131 in
  let expected = 0. in
  mark_test_run 1944;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1944 failed";
  (* .a245.#b131 *)
  let actual = r.a245.#b131 in
  let expected = #1. in
  mark_test_run 1945;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1945 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a245 = a2451 } { a245 = a2452 } -> (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) a2451 a2452) in
  let next_r = { a245 = #{ a131 = 100.; b131 = #101. } } in
  let r_expected = { a245 = #{ a131 = 0.; b131 = #1. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a245 *)
  r.a245 <- next_r.a245;
  let r_expected = { r_expected with a245 = next_r.a245 } in
  mark_test_run 1946;
  let test = eq r r_expected in
  if not test then failwithf "test 1946 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a245 = #{ a131; b131 } } = r in
  let expected_a131 = 100. in
  mark_test_run 1947;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a131 a131 in
  if not test then failwithf "test 1947 failed";
  let expected_b131 = #101. in
  mark_test_run 1948;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b131 b131 in
  if not test then failwithf "test 1948 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a245 } = r in
  let expected_a245 = #{ a131 = 100.; b131 = #101. } in
  mark_test_run 1949;
  let test = (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) expected_a245 a245 in
  if not test then failwithf "test 1949 failed";

  (********************************************)
  (*   t246 = { #{ float; float# }; float }   *)
  (********************************************)
  let r = { a246 = #{ a131 = 0.; b131 = #1. }; b246 = 2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a246 *)
  let actual = r.a246 in
  let expected = #{ a131 = 0.; b131 = #1. } in
  mark_test_run 1950;
  let test = (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) actual expected in
  if not test then failwithf "test 1950 failed";
  (* Paths of depth 2 *)
  (* .a246.#a131 *)
  let actual = r.a246.#a131 in
  let expected = 0. in
  mark_test_run 1951;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1951 failed";
  (* .a246.#b131 *)
  let actual = r.a246.#b131 in
  let expected = #1. in
  mark_test_run 1952;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1952 failed";
  (* Paths of depth 1 *)
  (* .b246 *)
  let actual = r.b246 in
  let expected = 2. in
  mark_test_run 1953;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1953 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a246 = a2461; b246 = b2461 } { a246 = a2462; b246 = b2462 } -> (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) a2461 a2462 && (fun a b -> Float.equal (globalize a) (globalize b)) b2461 b2462) in
  let next_r = { a246 = #{ a131 = 100.; b131 = #101. }; b246 = 102. } in
  let r_expected = { a246 = #{ a131 = 0.; b131 = #1. }; b246 = 2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a246 *)
  r.a246 <- next_r.a246;
  let r_expected = { r_expected with a246 = next_r.a246 } in
  mark_test_run 1954;
  let test = eq r r_expected in
  if not test then failwithf "test 1954 failed";
  Gc.compact ();
  (* .b246 *)
  r.b246 <- next_r.b246;
  let r_expected = { r_expected with b246 = next_r.b246 } in
  mark_test_run 1955;
  let test = eq r r_expected in
  if not test then failwithf "test 1955 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a246 = #{ a131; b131 }; b246 } = r in
  let expected_a131 = 100. in
  mark_test_run 1956;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a131 a131 in
  if not test then failwithf "test 1956 failed";
  let expected_b131 = #101. in
  mark_test_run 1957;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b131 b131 in
  if not test then failwithf "test 1957 failed";
  let expected_b246 = 102. in
  mark_test_run 1958;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b246 b246 in
  if not test then failwithf "test 1958 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a246; b246 } = r in
  let expected_a246 = #{ a131 = 100.; b131 = #101. } in
  mark_test_run 1959;
  let test = (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) expected_a246 a246 in
  if not test then failwithf "test 1959 failed";
  let expected_b246 = 102. in
  mark_test_run 1960;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b246 b246 in
  if not test then failwithf "test 1960 failed";

  (*********************************************)
  (*   t247 = { #{ float; float# }; float# }   *)
  (*********************************************)
  let r = { a247 = #{ a131 = 0.; b131 = #1. }; b247 = #2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a247 *)
  let actual = r.a247 in
  let expected = #{ a131 = 0.; b131 = #1. } in
  mark_test_run 1961;
  let test = (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) actual expected in
  if not test then failwithf "test 1961 failed";
  (* Paths of depth 2 *)
  (* .a247.#a131 *)
  let actual = r.a247.#a131 in
  let expected = 0. in
  mark_test_run 1962;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1962 failed";
  (* .a247.#b131 *)
  let actual = r.a247.#b131 in
  let expected = #1. in
  mark_test_run 1963;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1963 failed";
  (* Paths of depth 1 *)
  (* .b247 *)
  let actual = r.b247 in
  let expected = #2. in
  mark_test_run 1964;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 1964 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a247 = a2471; b247 = b2471 } { a247 = a2472; b247 = b2472 } -> (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) a2471 a2472 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2471 b2472) in
  let next_r = { a247 = #{ a131 = 100.; b131 = #101. }; b247 = #102. } in
  let r_expected = { a247 = #{ a131 = 0.; b131 = #1. }; b247 = #2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a247 *)
  r.a247 <- next_r.a247;
  let r_expected = { r_expected with a247 = next_r.a247 } in
  mark_test_run 1965;
  let test = eq r r_expected in
  if not test then failwithf "test 1965 failed";
  Gc.compact ();
  (* .b247 *)
  r.b247 <- next_r.b247;
  let r_expected = { r_expected with b247 = next_r.b247 } in
  mark_test_run 1966;
  let test = eq r r_expected in
  if not test then failwithf "test 1966 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a247 = #{ a131; b131 }; b247 } = r in
  let expected_a131 = 100. in
  mark_test_run 1967;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a131 a131 in
  if not test then failwithf "test 1967 failed";
  let expected_b131 = #101. in
  mark_test_run 1968;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b131 b131 in
  if not test then failwithf "test 1968 failed";
  let expected_b247 = #102. in
  mark_test_run 1969;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b247 b247 in
  if not test then failwithf "test 1969 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a247; b247 } = r in
  let expected_a247 = #{ a131 = 100.; b131 = #101. } in
  mark_test_run 1970;
  let test = (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) expected_a247 a247 in
  if not test then failwithf "test 1970 failed";
  let expected_b247 = #102. in
  mark_test_run 1971;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b247 b247 in
  if not test then failwithf "test 1971 failed";

  (********************************************)
  (*   t249 = { #{ float; #{ int; int } } }   *)
  (********************************************)
  let r = { a249 = #{ a248 = 0.; b248 = #{ a16 = 1; b16 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a249 *)
  let actual = r.a249 in
  let expected = #{ a248 = 0.; b248 = #{ a16 = 1; b16 = 2 } } in
  mark_test_run 1972;
  let test = (fun #{ a248 = a2481; b248 = b2481 } #{ a248 = a2482; b248 = b2482 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2481 a2482 && (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) b2481 b2482) actual expected in
  if not test then failwithf "test 1972 failed";
  (* Paths of depth 2 *)
  (* .a249.#a248 *)
  let actual = r.a249.#a248 in
  let expected = 0. in
  mark_test_run 1973;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1973 failed";
  (* .a249.#b248 *)
  let actual = r.a249.#b248 in
  let expected = #{ a16 = 1; b16 = 2 } in
  mark_test_run 1974;
  let test = (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) actual expected in
  if not test then failwithf "test 1974 failed";
  (* Paths of depth 3 *)
  (* .a249.#b248.#a16 *)
  let actual = r.a249.#b248.#a16 in
  let expected = 1 in
  mark_test_run 1975;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1975 failed";
  (* .a249.#b248.#b16 *)
  let actual = r.a249.#b248.#b16 in
  let expected = 2 in
  mark_test_run 1976;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1976 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a249 = a2491 } { a249 = a2492 } -> (fun #{ a248 = a2481; b248 = b2481 } #{ a248 = a2482; b248 = b2482 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2481 a2482 && (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) b2481 b2482) a2491 a2492) in
  let next_r = { a249 = #{ a248 = 100.; b248 = #{ a16 = 101; b16 = 102 } } } in
  let r_expected = { a249 = #{ a248 = 0.; b248 = #{ a16 = 1; b16 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a249 *)
  r.a249 <- next_r.a249;
  let r_expected = { r_expected with a249 = next_r.a249 } in
  mark_test_run 1977;
  let test = eq r r_expected in
  if not test then failwithf "test 1977 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a249 = #{ a248; b248 = #{ a16; b16 } } } = r in
  let expected_a248 = 100. in
  mark_test_run 1978;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a248 a248 in
  if not test then failwithf "test 1978 failed";
  let expected_a16 = 101 in
  mark_test_run 1979;
  let test = (fun a b -> Int.equal a b) expected_a16 a16 in
  if not test then failwithf "test 1979 failed";
  let expected_b16 = 102 in
  mark_test_run 1980;
  let test = (fun a b -> Int.equal a b) expected_b16 b16 in
  if not test then failwithf "test 1980 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a249 } = r in
  let expected_a249 = #{ a248 = 100.; b248 = #{ a16 = 101; b16 = 102 } } in
  mark_test_run 1981;
  let test = (fun #{ a248 = a2481; b248 = b2481 } #{ a248 = a2482; b248 = b2482 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2481 a2482 && (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) b2481 b2482) expected_a249 a249 in
  if not test then failwithf "test 1981 failed";

  (**********************************************)
  (*   t251 = { #{ float; #{ int; float } } }   *)
  (**********************************************)
  let r = { a251 = #{ a250 = 0.; b250 = #{ a20 = 1; b20 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a251 *)
  let actual = r.a251 in
  let expected = #{ a250 = 0.; b250 = #{ a20 = 1; b20 = 2. } } in
  mark_test_run 1982;
  let test = (fun #{ a250 = a2501; b250 = b2501 } #{ a250 = a2502; b250 = b2502 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2501 a2502 && (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) b2501 b2502) actual expected in
  if not test then failwithf "test 1982 failed";
  (* Paths of depth 2 *)
  (* .a251.#a250 *)
  let actual = r.a251.#a250 in
  let expected = 0. in
  mark_test_run 1983;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1983 failed";
  (* .a251.#b250 *)
  let actual = r.a251.#b250 in
  let expected = #{ a20 = 1; b20 = 2. } in
  mark_test_run 1984;
  let test = (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) actual expected in
  if not test then failwithf "test 1984 failed";
  (* Paths of depth 3 *)
  (* .a251.#b250.#a20 *)
  let actual = r.a251.#b250.#a20 in
  let expected = 1 in
  mark_test_run 1985;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1985 failed";
  (* .a251.#b250.#b20 *)
  let actual = r.a251.#b250.#b20 in
  let expected = 2. in
  mark_test_run 1986;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1986 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a251 = a2511 } { a251 = a2512 } -> (fun #{ a250 = a2501; b250 = b2501 } #{ a250 = a2502; b250 = b2502 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2501 a2502 && (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) b2501 b2502) a2511 a2512) in
  let next_r = { a251 = #{ a250 = 100.; b250 = #{ a20 = 101; b20 = 102. } } } in
  let r_expected = { a251 = #{ a250 = 0.; b250 = #{ a20 = 1; b20 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a251 *)
  r.a251 <- next_r.a251;
  let r_expected = { r_expected with a251 = next_r.a251 } in
  mark_test_run 1987;
  let test = eq r r_expected in
  if not test then failwithf "test 1987 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a251 = #{ a250; b250 = #{ a20; b20 } } } = r in
  let expected_a250 = 100. in
  mark_test_run 1988;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a250 a250 in
  if not test then failwithf "test 1988 failed";
  let expected_a20 = 101 in
  mark_test_run 1989;
  let test = (fun a b -> Int.equal a b) expected_a20 a20 in
  if not test then failwithf "test 1989 failed";
  let expected_b20 = 102. in
  mark_test_run 1990;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b20 b20 in
  if not test then failwithf "test 1990 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a251 } = r in
  let expected_a251 = #{ a250 = 100.; b250 = #{ a20 = 101; b20 = 102. } } in
  mark_test_run 1991;
  let test = (fun #{ a250 = a2501; b250 = b2501 } #{ a250 = a2502; b250 = b2502 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2501 a2502 && (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) b2501 b2502) expected_a251 a251 in
  if not test then failwithf "test 1991 failed";

  (**********************************************)
  (*   t253 = { #{ float; #{ float; int } } }   *)
  (**********************************************)
  let r = { a253 = #{ a252 = 0.; b252 = #{ a40 = 1.; b40 = 2 } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a253 *)
  let actual = r.a253 in
  let expected = #{ a252 = 0.; b252 = #{ a40 = 1.; b40 = 2 } } in
  mark_test_run 1992;
  let test = (fun #{ a252 = a2521; b252 = b2521 } #{ a252 = a2522; b252 = b2522 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2521 a2522 && (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) b2521 b2522) actual expected in
  if not test then failwithf "test 1992 failed";
  (* Paths of depth 2 *)
  (* .a253.#a252 *)
  let actual = r.a253.#a252 in
  let expected = 0. in
  mark_test_run 1993;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1993 failed";
  (* .a253.#b252 *)
  let actual = r.a253.#b252 in
  let expected = #{ a40 = 1.; b40 = 2 } in
  mark_test_run 1994;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) actual expected in
  if not test then failwithf "test 1994 failed";
  (* Paths of depth 3 *)
  (* .a253.#b252.#a40 *)
  let actual = r.a253.#b252.#a40 in
  let expected = 1. in
  mark_test_run 1995;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 1995 failed";
  (* .a253.#b252.#b40 *)
  let actual = r.a253.#b252.#b40 in
  let expected = 2 in
  mark_test_run 1996;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 1996 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a253 = a2531 } { a253 = a2532 } -> (fun #{ a252 = a2521; b252 = b2521 } #{ a252 = a2522; b252 = b2522 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2521 a2522 && (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) b2521 b2522) a2531 a2532) in
  let next_r = { a253 = #{ a252 = 100.; b252 = #{ a40 = 101.; b40 = 102 } } } in
  let r_expected = { a253 = #{ a252 = 0.; b252 = #{ a40 = 1.; b40 = 2 } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a253 *)
  r.a253 <- next_r.a253;
  let r_expected = { r_expected with a253 = next_r.a253 } in
  mark_test_run 1997;
  let test = eq r r_expected in
  if not test then failwithf "test 1997 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a253 = #{ a252; b252 = #{ a40; b40 } } } = r in
  let expected_a252 = 100. in
  mark_test_run 1998;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a252 a252 in
  if not test then failwithf "test 1998 failed";
  let expected_a40 = 101. in
  mark_test_run 1999;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a40 a40 in
  if not test then failwithf "test 1999 failed";
  let expected_b40 = 102 in
  mark_test_run 2000;
  let test = (fun a b -> Int.equal a b) expected_b40 b40 in
  if not test then failwithf "test 2000 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a253 } = r in
  let expected_a253 = #{ a252 = 100.; b252 = #{ a40 = 101.; b40 = 102 } } in
  mark_test_run 2001;
  let test = (fun #{ a252 = a2521; b252 = b2521 } #{ a252 = a2522; b252 = b2522 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2521 a2522 && (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) b2521 b2522) expected_a253 a253 in
  if not test then failwithf "test 2001 failed";

  (************************************************)
  (*   t255 = { #{ float; #{ float; float } } }   *)
  (************************************************)
  let r = { a255 = #{ a254 = 0.; b254 = #{ a42 = 1.; b42 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a255 *)
  let actual = r.a255 in
  let expected = #{ a254 = 0.; b254 = #{ a42 = 1.; b42 = 2. } } in
  mark_test_run 2002;
  let test = (fun #{ a254 = a2541; b254 = b2541 } #{ a254 = a2542; b254 = b2542 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2541 a2542 && (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) b2541 b2542) actual expected in
  if not test then failwithf "test 2002 failed";
  (* Paths of depth 2 *)
  (* .a255.#a254 *)
  let actual = r.a255.#a254 in
  let expected = 0. in
  mark_test_run 2003;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2003 failed";
  (* .a255.#b254 *)
  let actual = r.a255.#b254 in
  let expected = #{ a42 = 1.; b42 = 2. } in
  mark_test_run 2004;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) actual expected in
  if not test then failwithf "test 2004 failed";
  (* Paths of depth 3 *)
  (* .a255.#b254.#a42 *)
  let actual = r.a255.#b254.#a42 in
  let expected = 1. in
  mark_test_run 2005;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2005 failed";
  (* .a255.#b254.#b42 *)
  let actual = r.a255.#b254.#b42 in
  let expected = 2. in
  mark_test_run 2006;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2006 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a255 = a2551 } { a255 = a2552 } -> (fun #{ a254 = a2541; b254 = b2541 } #{ a254 = a2542; b254 = b2542 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2541 a2542 && (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) b2541 b2542) a2551 a2552) in
  let next_r = { a255 = #{ a254 = 100.; b254 = #{ a42 = 101.; b42 = 102. } } } in
  let r_expected = { a255 = #{ a254 = 0.; b254 = #{ a42 = 1.; b42 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a255 *)
  r.a255 <- next_r.a255;
  let r_expected = { r_expected with a255 = next_r.a255 } in
  mark_test_run 2007;
  let test = eq r r_expected in
  if not test then failwithf "test 2007 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a255 = #{ a254; b254 = #{ a42; b42 } } } = r in
  let expected_a254 = 100. in
  mark_test_run 2008;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a254 a254 in
  if not test then failwithf "test 2008 failed";
  let expected_a42 = 101. in
  mark_test_run 2009;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a42 a42 in
  if not test then failwithf "test 2009 failed";
  let expected_b42 = 102. in
  mark_test_run 2010;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b42 b42 in
  if not test then failwithf "test 2010 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a255 } = r in
  let expected_a255 = #{ a254 = 100.; b254 = #{ a42 = 101.; b42 = 102. } } in
  mark_test_run 2011;
  let test = (fun #{ a254 = a2541; b254 = b2541 } #{ a254 = a2542; b254 = b2542 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2541 a2542 && (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) b2541 b2542) expected_a255 a255 in
  if not test then failwithf "test 2011 failed";

  (*************************************************)
  (*   t257 = { #{ float; #{ float; float# } } }   *)
  (*************************************************)
  let r = { a257 = #{ a256 = 0.; b256 = #{ a131 = 1.; b131 = #2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a257 *)
  let actual = r.a257 in
  let expected = #{ a256 = 0.; b256 = #{ a131 = 1.; b131 = #2. } } in
  mark_test_run 2012;
  let test = (fun #{ a256 = a2561; b256 = b2561 } #{ a256 = a2562; b256 = b2562 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2561 a2562 && (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) b2561 b2562) actual expected in
  if not test then failwithf "test 2012 failed";
  (* Paths of depth 2 *)
  (* .a257.#a256 *)
  let actual = r.a257.#a256 in
  let expected = 0. in
  mark_test_run 2013;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2013 failed";
  (* .a257.#b256 *)
  let actual = r.a257.#b256 in
  let expected = #{ a131 = 1.; b131 = #2. } in
  mark_test_run 2014;
  let test = (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) actual expected in
  if not test then failwithf "test 2014 failed";
  (* Paths of depth 3 *)
  (* .a257.#b256.#a131 *)
  let actual = r.a257.#b256.#a131 in
  let expected = 1. in
  mark_test_run 2015;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2015 failed";
  (* .a257.#b256.#b131 *)
  let actual = r.a257.#b256.#b131 in
  let expected = #2. in
  mark_test_run 2016;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2016 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a257 = a2571 } { a257 = a2572 } -> (fun #{ a256 = a2561; b256 = b2561 } #{ a256 = a2562; b256 = b2562 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2561 a2562 && (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) b2561 b2562) a2571 a2572) in
  let next_r = { a257 = #{ a256 = 100.; b256 = #{ a131 = 101.; b131 = #102. } } } in
  let r_expected = { a257 = #{ a256 = 0.; b256 = #{ a131 = 1.; b131 = #2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a257 *)
  r.a257 <- next_r.a257;
  let r_expected = { r_expected with a257 = next_r.a257 } in
  mark_test_run 2017;
  let test = eq r r_expected in
  if not test then failwithf "test 2017 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a257 = #{ a256; b256 = #{ a131; b131 } } } = r in
  let expected_a256 = 100. in
  mark_test_run 2018;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a256 a256 in
  if not test then failwithf "test 2018 failed";
  let expected_a131 = 101. in
  mark_test_run 2019;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a131 a131 in
  if not test then failwithf "test 2019 failed";
  let expected_b131 = #102. in
  mark_test_run 2020;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b131 b131 in
  if not test then failwithf "test 2020 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a257 } = r in
  let expected_a257 = #{ a256 = 100.; b256 = #{ a131 = 101.; b131 = #102. } } in
  mark_test_run 2021;
  let test = (fun #{ a256 = a2561; b256 = b2561 } #{ a256 = a2562; b256 = b2562 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2561 a2562 && (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) b2561 b2562) expected_a257 a257 in
  if not test then failwithf "test 2021 failed";

  (*************************************************)
  (*   t259 = { #{ float; #{ float#; float } } }   *)
  (*************************************************)
  let r = { a259 = #{ a258 = 0.; b258 = #{ a139 = #1.; b139 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a259 *)
  let actual = r.a259 in
  let expected = #{ a258 = 0.; b258 = #{ a139 = #1.; b139 = 2. } } in
  mark_test_run 2022;
  let test = (fun #{ a258 = a2581; b258 = b2581 } #{ a258 = a2582; b258 = b2582 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2581 a2582 && (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) b2581 b2582) actual expected in
  if not test then failwithf "test 2022 failed";
  (* Paths of depth 2 *)
  (* .a259.#a258 *)
  let actual = r.a259.#a258 in
  let expected = 0. in
  mark_test_run 2023;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2023 failed";
  (* .a259.#b258 *)
  let actual = r.a259.#b258 in
  let expected = #{ a139 = #1.; b139 = 2. } in
  mark_test_run 2024;
  let test = (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) actual expected in
  if not test then failwithf "test 2024 failed";
  (* Paths of depth 3 *)
  (* .a259.#b258.#a139 *)
  let actual = r.a259.#b258.#a139 in
  let expected = #1. in
  mark_test_run 2025;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2025 failed";
  (* .a259.#b258.#b139 *)
  let actual = r.a259.#b258.#b139 in
  let expected = 2. in
  mark_test_run 2026;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2026 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a259 = a2591 } { a259 = a2592 } -> (fun #{ a258 = a2581; b258 = b2581 } #{ a258 = a2582; b258 = b2582 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2581 a2582 && (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) b2581 b2582) a2591 a2592) in
  let next_r = { a259 = #{ a258 = 100.; b258 = #{ a139 = #101.; b139 = 102. } } } in
  let r_expected = { a259 = #{ a258 = 0.; b258 = #{ a139 = #1.; b139 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a259 *)
  r.a259 <- next_r.a259;
  let r_expected = { r_expected with a259 = next_r.a259 } in
  mark_test_run 2027;
  let test = eq r r_expected in
  if not test then failwithf "test 2027 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a259 = #{ a258; b258 = #{ a139; b139 } } } = r in
  let expected_a258 = 100. in
  mark_test_run 2028;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a258 a258 in
  if not test then failwithf "test 2028 failed";
  let expected_a139 = #101. in
  mark_test_run 2029;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a139 a139 in
  if not test then failwithf "test 2029 failed";
  let expected_b139 = 102. in
  mark_test_run 2030;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b139 b139 in
  if not test then failwithf "test 2030 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a259 } = r in
  let expected_a259 = #{ a258 = 100.; b258 = #{ a139 = #101.; b139 = 102. } } in
  mark_test_run 2031;
  let test = (fun #{ a258 = a2581; b258 = b2581 } #{ a258 = a2582; b258 = b2582 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2581 a2582 && (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) b2581 b2582) expected_a259 a259 in
  if not test then failwithf "test 2031 failed";

  (**************************************************)
  (*   t261 = { #{ float; #{ float#; float# } } }   *)
  (**************************************************)
  let r = { a261 = #{ a260 = 0.; b260 = #{ a141 = #1.; b141 = #2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a261 *)
  let actual = r.a261 in
  let expected = #{ a260 = 0.; b260 = #{ a141 = #1.; b141 = #2. } } in
  mark_test_run 2032;
  let test = (fun #{ a260 = a2601; b260 = b2601 } #{ a260 = a2602; b260 = b2602 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2601 a2602 && (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) b2601 b2602) actual expected in
  if not test then failwithf "test 2032 failed";
  (* Paths of depth 2 *)
  (* .a261.#a260 *)
  let actual = r.a261.#a260 in
  let expected = 0. in
  mark_test_run 2033;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2033 failed";
  (* .a261.#b260 *)
  let actual = r.a261.#b260 in
  let expected = #{ a141 = #1.; b141 = #2. } in
  mark_test_run 2034;
  let test = (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) actual expected in
  if not test then failwithf "test 2034 failed";
  (* Paths of depth 3 *)
  (* .a261.#b260.#a141 *)
  let actual = r.a261.#b260.#a141 in
  let expected = #1. in
  mark_test_run 2035;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2035 failed";
  (* .a261.#b260.#b141 *)
  let actual = r.a261.#b260.#b141 in
  let expected = #2. in
  mark_test_run 2036;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2036 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a261 = a2611 } { a261 = a2612 } -> (fun #{ a260 = a2601; b260 = b2601 } #{ a260 = a2602; b260 = b2602 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2601 a2602 && (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) b2601 b2602) a2611 a2612) in
  let next_r = { a261 = #{ a260 = 100.; b260 = #{ a141 = #101.; b141 = #102. } } } in
  let r_expected = { a261 = #{ a260 = 0.; b260 = #{ a141 = #1.; b141 = #2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a261 *)
  r.a261 <- next_r.a261;
  let r_expected = { r_expected with a261 = next_r.a261 } in
  mark_test_run 2037;
  let test = eq r r_expected in
  if not test then failwithf "test 2037 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a261 = #{ a260; b260 = #{ a141; b141 } } } = r in
  let expected_a260 = 100. in
  mark_test_run 2038;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a260 a260 in
  if not test then failwithf "test 2038 failed";
  let expected_a141 = #101. in
  mark_test_run 2039;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a141 a141 in
  if not test then failwithf "test 2039 failed";
  let expected_b141 = #102. in
  mark_test_run 2040;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b141 b141 in
  if not test then failwithf "test 2040 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a261 } = r in
  let expected_a261 = #{ a260 = 100.; b260 = #{ a141 = #101.; b141 = #102. } } in
  mark_test_run 2041;
  let test = (fun #{ a260 = a2601; b260 = b2601 } #{ a260 = a2602; b260 = b2602 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a2601 a2602 && (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) b2601 b2602) expected_a261 a261 in
  if not test then failwithf "test 2041 failed";

  (******************************)
  (*   t262 = { #{ float# } }   *)
  (******************************)
  let r = { a262 = #{ a135 = #0. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a262 *)
  let actual = r.a262 in
  let expected = #{ a135 = #0. } in
  mark_test_run 2042;
  let test = (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) actual expected in
  if not test then failwithf "test 2042 failed";
  (* Paths of depth 2 *)
  (* .a262.#a135 *)
  let actual = r.a262.#a135 in
  let expected = #0. in
  mark_test_run 2043;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2043 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a262 = a2621 } { a262 = a2622 } -> (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) a2621 a2622) in
  let next_r = { a262 = #{ a135 = #100. } } in
  let r_expected = { a262 = #{ a135 = #0. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a262 *)
  r.a262 <- next_r.a262;
  let r_expected = { r_expected with a262 = next_r.a262 } in
  mark_test_run 2044;
  let test = eq r r_expected in
  if not test then failwithf "test 2044 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a262 = #{ a135 } } = r in
  let expected_a135 = #100. in
  mark_test_run 2045;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a135 a135 in
  if not test then failwithf "test 2045 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a262 } = r in
  let expected_a262 = #{ a135 = #100. } in
  mark_test_run 2046;
  let test = (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) expected_a262 a262 in
  if not test then failwithf "test 2046 failed";

  (*************************************)
  (*   t263 = { #{ float# }; float }   *)
  (*************************************)
  let r = { a263 = #{ a135 = #0. }; b263 = 1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a263 *)
  let actual = r.a263 in
  let expected = #{ a135 = #0. } in
  mark_test_run 2047;
  let test = (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) actual expected in
  if not test then failwithf "test 2047 failed";
  (* Paths of depth 2 *)
  (* .a263.#a135 *)
  let actual = r.a263.#a135 in
  let expected = #0. in
  mark_test_run 2048;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2048 failed";
  (* Paths of depth 1 *)
  (* .b263 *)
  let actual = r.b263 in
  let expected = 1. in
  mark_test_run 2049;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2049 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a263 = a2631; b263 = b2631 } { a263 = a2632; b263 = b2632 } -> (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) a2631 a2632 && (fun a b -> Float.equal (globalize a) (globalize b)) b2631 b2632) in
  let next_r = { a263 = #{ a135 = #100. }; b263 = 101. } in
  let r_expected = { a263 = #{ a135 = #0. }; b263 = 1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a263 *)
  r.a263 <- next_r.a263;
  let r_expected = { r_expected with a263 = next_r.a263 } in
  mark_test_run 2050;
  let test = eq r r_expected in
  if not test then failwithf "test 2050 failed";
  Gc.compact ();
  (* .b263 *)
  r.b263 <- next_r.b263;
  let r_expected = { r_expected with b263 = next_r.b263 } in
  mark_test_run 2051;
  let test = eq r r_expected in
  if not test then failwithf "test 2051 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a263 = #{ a135 }; b263 } = r in
  let expected_a135 = #100. in
  mark_test_run 2052;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a135 a135 in
  if not test then failwithf "test 2052 failed";
  let expected_b263 = 101. in
  mark_test_run 2053;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b263 b263 in
  if not test then failwithf "test 2053 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a263; b263 } = r in
  let expected_a263 = #{ a135 = #100. } in
  mark_test_run 2054;
  let test = (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) expected_a263 a263 in
  if not test then failwithf "test 2054 failed";
  let expected_b263 = 101. in
  mark_test_run 2055;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b263 b263 in
  if not test then failwithf "test 2055 failed";

  (**************************************)
  (*   t264 = { #{ float# }; float# }   *)
  (**************************************)
  let r = { a264 = #{ a135 = #0. }; b264 = #1. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a264 *)
  let actual = r.a264 in
  let expected = #{ a135 = #0. } in
  mark_test_run 2056;
  let test = (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) actual expected in
  if not test then failwithf "test 2056 failed";
  (* Paths of depth 2 *)
  (* .a264.#a135 *)
  let actual = r.a264.#a135 in
  let expected = #0. in
  mark_test_run 2057;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2057 failed";
  (* Paths of depth 1 *)
  (* .b264 *)
  let actual = r.b264 in
  let expected = #1. in
  mark_test_run 2058;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2058 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a264 = a2641; b264 = b2641 } { a264 = a2642; b264 = b2642 } -> (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) a2641 a2642 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2641 b2642) in
  let next_r = { a264 = #{ a135 = #100. }; b264 = #101. } in
  let r_expected = { a264 = #{ a135 = #0. }; b264 = #1. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a264 *)
  r.a264 <- next_r.a264;
  let r_expected = { r_expected with a264 = next_r.a264 } in
  mark_test_run 2059;
  let test = eq r r_expected in
  if not test then failwithf "test 2059 failed";
  Gc.compact ();
  (* .b264 *)
  r.b264 <- next_r.b264;
  let r_expected = { r_expected with b264 = next_r.b264 } in
  mark_test_run 2060;
  let test = eq r r_expected in
  if not test then failwithf "test 2060 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a264 = #{ a135 }; b264 } = r in
  let expected_a135 = #100. in
  mark_test_run 2061;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a135 a135 in
  if not test then failwithf "test 2061 failed";
  let expected_b264 = #101. in
  mark_test_run 2062;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b264 b264 in
  if not test then failwithf "test 2062 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a264; b264 } = r in
  let expected_a264 = #{ a135 = #100. } in
  mark_test_run 2063;
  let test = (fun #{ a135 = a1351 } #{ a135 = a1352 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1351 a1352) expected_a264 a264 in
  if not test then failwithf "test 2063 failed";
  let expected_b264 = #101. in
  mark_test_run 2064;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b264 b264 in
  if not test then failwithf "test 2064 failed";

  (*************************************)
  (*   t265 = { #{ float#; float } }   *)
  (*************************************)
  let r = { a265 = #{ a139 = #0.; b139 = 1. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a265 *)
  let actual = r.a265 in
  let expected = #{ a139 = #0.; b139 = 1. } in
  mark_test_run 2065;
  let test = (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) actual expected in
  if not test then failwithf "test 2065 failed";
  (* Paths of depth 2 *)
  (* .a265.#a139 *)
  let actual = r.a265.#a139 in
  let expected = #0. in
  mark_test_run 2066;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2066 failed";
  (* .a265.#b139 *)
  let actual = r.a265.#b139 in
  let expected = 1. in
  mark_test_run 2067;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2067 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a265 = a2651 } { a265 = a2652 } -> (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) a2651 a2652) in
  let next_r = { a265 = #{ a139 = #100.; b139 = 101. } } in
  let r_expected = { a265 = #{ a139 = #0.; b139 = 1. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a265 *)
  r.a265 <- next_r.a265;
  let r_expected = { r_expected with a265 = next_r.a265 } in
  mark_test_run 2068;
  let test = eq r r_expected in
  if not test then failwithf "test 2068 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a265 = #{ a139; b139 } } = r in
  let expected_a139 = #100. in
  mark_test_run 2069;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a139 a139 in
  if not test then failwithf "test 2069 failed";
  let expected_b139 = 101. in
  mark_test_run 2070;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b139 b139 in
  if not test then failwithf "test 2070 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a265 } = r in
  let expected_a265 = #{ a139 = #100.; b139 = 101. } in
  mark_test_run 2071;
  let test = (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) expected_a265 a265 in
  if not test then failwithf "test 2071 failed";

  (********************************************)
  (*   t266 = { #{ float#; float }; float }   *)
  (********************************************)
  let r = { a266 = #{ a139 = #0.; b139 = 1. }; b266 = 2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a266 *)
  let actual = r.a266 in
  let expected = #{ a139 = #0.; b139 = 1. } in
  mark_test_run 2072;
  let test = (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) actual expected in
  if not test then failwithf "test 2072 failed";
  (* Paths of depth 2 *)
  (* .a266.#a139 *)
  let actual = r.a266.#a139 in
  let expected = #0. in
  mark_test_run 2073;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2073 failed";
  (* .a266.#b139 *)
  let actual = r.a266.#b139 in
  let expected = 1. in
  mark_test_run 2074;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2074 failed";
  (* Paths of depth 1 *)
  (* .b266 *)
  let actual = r.b266 in
  let expected = 2. in
  mark_test_run 2075;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2075 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a266 = a2661; b266 = b2661 } { a266 = a2662; b266 = b2662 } -> (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) a2661 a2662 && (fun a b -> Float.equal (globalize a) (globalize b)) b2661 b2662) in
  let next_r = { a266 = #{ a139 = #100.; b139 = 101. }; b266 = 102. } in
  let r_expected = { a266 = #{ a139 = #0.; b139 = 1. }; b266 = 2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a266 *)
  r.a266 <- next_r.a266;
  let r_expected = { r_expected with a266 = next_r.a266 } in
  mark_test_run 2076;
  let test = eq r r_expected in
  if not test then failwithf "test 2076 failed";
  Gc.compact ();
  (* .b266 *)
  r.b266 <- next_r.b266;
  let r_expected = { r_expected with b266 = next_r.b266 } in
  mark_test_run 2077;
  let test = eq r r_expected in
  if not test then failwithf "test 2077 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a266 = #{ a139; b139 }; b266 } = r in
  let expected_a139 = #100. in
  mark_test_run 2078;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a139 a139 in
  if not test then failwithf "test 2078 failed";
  let expected_b139 = 101. in
  mark_test_run 2079;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b139 b139 in
  if not test then failwithf "test 2079 failed";
  let expected_b266 = 102. in
  mark_test_run 2080;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b266 b266 in
  if not test then failwithf "test 2080 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a266; b266 } = r in
  let expected_a266 = #{ a139 = #100.; b139 = 101. } in
  mark_test_run 2081;
  let test = (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) expected_a266 a266 in
  if not test then failwithf "test 2081 failed";
  let expected_b266 = 102. in
  mark_test_run 2082;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b266 b266 in
  if not test then failwithf "test 2082 failed";

  (*********************************************)
  (*   t267 = { #{ float#; float }; float# }   *)
  (*********************************************)
  let r = { a267 = #{ a139 = #0.; b139 = 1. }; b267 = #2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a267 *)
  let actual = r.a267 in
  let expected = #{ a139 = #0.; b139 = 1. } in
  mark_test_run 2083;
  let test = (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) actual expected in
  if not test then failwithf "test 2083 failed";
  (* Paths of depth 2 *)
  (* .a267.#a139 *)
  let actual = r.a267.#a139 in
  let expected = #0. in
  mark_test_run 2084;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2084 failed";
  (* .a267.#b139 *)
  let actual = r.a267.#b139 in
  let expected = 1. in
  mark_test_run 2085;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2085 failed";
  (* Paths of depth 1 *)
  (* .b267 *)
  let actual = r.b267 in
  let expected = #2. in
  mark_test_run 2086;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2086 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a267 = a2671; b267 = b2671 } { a267 = a2672; b267 = b2672 } -> (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) a2671 a2672 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2671 b2672) in
  let next_r = { a267 = #{ a139 = #100.; b139 = 101. }; b267 = #102. } in
  let r_expected = { a267 = #{ a139 = #0.; b139 = 1. }; b267 = #2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a267 *)
  r.a267 <- next_r.a267;
  let r_expected = { r_expected with a267 = next_r.a267 } in
  mark_test_run 2087;
  let test = eq r r_expected in
  if not test then failwithf "test 2087 failed";
  Gc.compact ();
  (* .b267 *)
  r.b267 <- next_r.b267;
  let r_expected = { r_expected with b267 = next_r.b267 } in
  mark_test_run 2088;
  let test = eq r r_expected in
  if not test then failwithf "test 2088 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a267 = #{ a139; b139 }; b267 } = r in
  let expected_a139 = #100. in
  mark_test_run 2089;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a139 a139 in
  if not test then failwithf "test 2089 failed";
  let expected_b139 = 101. in
  mark_test_run 2090;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b139 b139 in
  if not test then failwithf "test 2090 failed";
  let expected_b267 = #102. in
  mark_test_run 2091;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b267 b267 in
  if not test then failwithf "test 2091 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a267; b267 } = r in
  let expected_a267 = #{ a139 = #100.; b139 = 101. } in
  mark_test_run 2092;
  let test = (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) expected_a267 a267 in
  if not test then failwithf "test 2092 failed";
  let expected_b267 = #102. in
  mark_test_run 2093;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b267 b267 in
  if not test then failwithf "test 2093 failed";

  (**************************************)
  (*   t268 = { #{ float#; float# } }   *)
  (**************************************)
  let r = { a268 = #{ a141 = #0.; b141 = #1. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a268 *)
  let actual = r.a268 in
  let expected = #{ a141 = #0.; b141 = #1. } in
  mark_test_run 2094;
  let test = (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) actual expected in
  if not test then failwithf "test 2094 failed";
  (* Paths of depth 2 *)
  (* .a268.#a141 *)
  let actual = r.a268.#a141 in
  let expected = #0. in
  mark_test_run 2095;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2095 failed";
  (* .a268.#b141 *)
  let actual = r.a268.#b141 in
  let expected = #1. in
  mark_test_run 2096;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2096 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a268 = a2681 } { a268 = a2682 } -> (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) a2681 a2682) in
  let next_r = { a268 = #{ a141 = #100.; b141 = #101. } } in
  let r_expected = { a268 = #{ a141 = #0.; b141 = #1. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a268 *)
  r.a268 <- next_r.a268;
  let r_expected = { r_expected with a268 = next_r.a268 } in
  mark_test_run 2097;
  let test = eq r r_expected in
  if not test then failwithf "test 2097 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a268 = #{ a141; b141 } } = r in
  let expected_a141 = #100. in
  mark_test_run 2098;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a141 a141 in
  if not test then failwithf "test 2098 failed";
  let expected_b141 = #101. in
  mark_test_run 2099;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b141 b141 in
  if not test then failwithf "test 2099 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a268 } = r in
  let expected_a268 = #{ a141 = #100.; b141 = #101. } in
  mark_test_run 2100;
  let test = (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) expected_a268 a268 in
  if not test then failwithf "test 2100 failed";

  (*********************************************)
  (*   t269 = { #{ float#; float# }; float }   *)
  (*********************************************)
  let r = { a269 = #{ a141 = #0.; b141 = #1. }; b269 = 2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a269 *)
  let actual = r.a269 in
  let expected = #{ a141 = #0.; b141 = #1. } in
  mark_test_run 2101;
  let test = (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) actual expected in
  if not test then failwithf "test 2101 failed";
  (* Paths of depth 2 *)
  (* .a269.#a141 *)
  let actual = r.a269.#a141 in
  let expected = #0. in
  mark_test_run 2102;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2102 failed";
  (* .a269.#b141 *)
  let actual = r.a269.#b141 in
  let expected = #1. in
  mark_test_run 2103;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2103 failed";
  (* Paths of depth 1 *)
  (* .b269 *)
  let actual = r.b269 in
  let expected = 2. in
  mark_test_run 2104;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2104 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a269 = a2691; b269 = b2691 } { a269 = a2692; b269 = b2692 } -> (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) a2691 a2692 && (fun a b -> Float.equal (globalize a) (globalize b)) b2691 b2692) in
  let next_r = { a269 = #{ a141 = #100.; b141 = #101. }; b269 = 102. } in
  let r_expected = { a269 = #{ a141 = #0.; b141 = #1. }; b269 = 2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a269 *)
  r.a269 <- next_r.a269;
  let r_expected = { r_expected with a269 = next_r.a269 } in
  mark_test_run 2105;
  let test = eq r r_expected in
  if not test then failwithf "test 2105 failed";
  Gc.compact ();
  (* .b269 *)
  r.b269 <- next_r.b269;
  let r_expected = { r_expected with b269 = next_r.b269 } in
  mark_test_run 2106;
  let test = eq r r_expected in
  if not test then failwithf "test 2106 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a269 = #{ a141; b141 }; b269 } = r in
  let expected_a141 = #100. in
  mark_test_run 2107;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a141 a141 in
  if not test then failwithf "test 2107 failed";
  let expected_b141 = #101. in
  mark_test_run 2108;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b141 b141 in
  if not test then failwithf "test 2108 failed";
  let expected_b269 = 102. in
  mark_test_run 2109;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b269 b269 in
  if not test then failwithf "test 2109 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a269; b269 } = r in
  let expected_a269 = #{ a141 = #100.; b141 = #101. } in
  mark_test_run 2110;
  let test = (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) expected_a269 a269 in
  if not test then failwithf "test 2110 failed";
  let expected_b269 = 102. in
  mark_test_run 2111;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b269 b269 in
  if not test then failwithf "test 2111 failed";

  (**********************************************)
  (*   t270 = { #{ float#; float# }; float# }   *)
  (**********************************************)
  let r = { a270 = #{ a141 = #0.; b141 = #1. }; b270 = #2. } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a270 *)
  let actual = r.a270 in
  let expected = #{ a141 = #0.; b141 = #1. } in
  mark_test_run 2112;
  let test = (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) actual expected in
  if not test then failwithf "test 2112 failed";
  (* Paths of depth 2 *)
  (* .a270.#a141 *)
  let actual = r.a270.#a141 in
  let expected = #0. in
  mark_test_run 2113;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2113 failed";
  (* .a270.#b141 *)
  let actual = r.a270.#b141 in
  let expected = #1. in
  mark_test_run 2114;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2114 failed";
  (* Paths of depth 1 *)
  (* .b270 *)
  let actual = r.b270 in
  let expected = #2. in
  mark_test_run 2115;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2115 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a270 = a2701; b270 = b2701 } { a270 = a2702; b270 = b2702 } -> (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) a2701 a2702 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b2701 b2702) in
  let next_r = { a270 = #{ a141 = #100.; b141 = #101. }; b270 = #102. } in
  let r_expected = { a270 = #{ a141 = #0.; b141 = #1. }; b270 = #2. } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a270 *)
  r.a270 <- next_r.a270;
  let r_expected = { r_expected with a270 = next_r.a270 } in
  mark_test_run 2116;
  let test = eq r r_expected in
  if not test then failwithf "test 2116 failed";
  Gc.compact ();
  (* .b270 *)
  r.b270 <- next_r.b270;
  let r_expected = { r_expected with b270 = next_r.b270 } in
  mark_test_run 2117;
  let test = eq r r_expected in
  if not test then failwithf "test 2117 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a270 = #{ a141; b141 }; b270 } = r in
  let expected_a141 = #100. in
  mark_test_run 2118;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a141 a141 in
  if not test then failwithf "test 2118 failed";
  let expected_b141 = #101. in
  mark_test_run 2119;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b141 b141 in
  if not test then failwithf "test 2119 failed";
  let expected_b270 = #102. in
  mark_test_run 2120;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b270 b270 in
  if not test then failwithf "test 2120 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a270; b270 } = r in
  let expected_a270 = #{ a141 = #100.; b141 = #101. } in
  mark_test_run 2121;
  let test = (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) expected_a270 a270 in
  if not test then failwithf "test 2121 failed";
  let expected_b270 = #102. in
  mark_test_run 2122;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b270 b270 in
  if not test then failwithf "test 2122 failed";

  (*************************************************)
  (*   t272 = { #{ float#; #{ float; float } } }   *)
  (*************************************************)
  let r = { a272 = #{ a271 = #0.; b271 = #{ a42 = 1.; b42 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a272 *)
  let actual = r.a272 in
  let expected = #{ a271 = #0.; b271 = #{ a42 = 1.; b42 = 2. } } in
  mark_test_run 2123;
  let test = (fun #{ a271 = a2711; b271 = b2711 } #{ a271 = a2712; b271 = b2712 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2711 a2712 && (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) b2711 b2712) actual expected in
  if not test then failwithf "test 2123 failed";
  (* Paths of depth 2 *)
  (* .a272.#a271 *)
  let actual = r.a272.#a271 in
  let expected = #0. in
  mark_test_run 2124;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2124 failed";
  (* .a272.#b271 *)
  let actual = r.a272.#b271 in
  let expected = #{ a42 = 1.; b42 = 2. } in
  mark_test_run 2125;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) actual expected in
  if not test then failwithf "test 2125 failed";
  (* Paths of depth 3 *)
  (* .a272.#b271.#a42 *)
  let actual = r.a272.#b271.#a42 in
  let expected = 1. in
  mark_test_run 2126;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2126 failed";
  (* .a272.#b271.#b42 *)
  let actual = r.a272.#b271.#b42 in
  let expected = 2. in
  mark_test_run 2127;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2127 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a272 = a2721 } { a272 = a2722 } -> (fun #{ a271 = a2711; b271 = b2711 } #{ a271 = a2712; b271 = b2712 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2711 a2712 && (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) b2711 b2712) a2721 a2722) in
  let next_r = { a272 = #{ a271 = #100.; b271 = #{ a42 = 101.; b42 = 102. } } } in
  let r_expected = { a272 = #{ a271 = #0.; b271 = #{ a42 = 1.; b42 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a272 *)
  r.a272 <- next_r.a272;
  let r_expected = { r_expected with a272 = next_r.a272 } in
  mark_test_run 2128;
  let test = eq r r_expected in
  if not test then failwithf "test 2128 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a272 = #{ a271; b271 = #{ a42; b42 } } } = r in
  let expected_a271 = #100. in
  mark_test_run 2129;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a271 a271 in
  if not test then failwithf "test 2129 failed";
  let expected_a42 = 101. in
  mark_test_run 2130;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a42 a42 in
  if not test then failwithf "test 2130 failed";
  let expected_b42 = 102. in
  mark_test_run 2131;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b42 b42 in
  if not test then failwithf "test 2131 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a272 } = r in
  let expected_a272 = #{ a271 = #100.; b271 = #{ a42 = 101.; b42 = 102. } } in
  mark_test_run 2132;
  let test = (fun #{ a271 = a2711; b271 = b2711 } #{ a271 = a2712; b271 = b2712 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2711 a2712 && (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) b2711 b2712) expected_a272 a272 in
  if not test then failwithf "test 2132 failed";

  (**************************************************)
  (*   t274 = { #{ float#; #{ float; float# } } }   *)
  (**************************************************)
  let r = { a274 = #{ a273 = #0.; b273 = #{ a131 = 1.; b131 = #2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a274 *)
  let actual = r.a274 in
  let expected = #{ a273 = #0.; b273 = #{ a131 = 1.; b131 = #2. } } in
  mark_test_run 2133;
  let test = (fun #{ a273 = a2731; b273 = b2731 } #{ a273 = a2732; b273 = b2732 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2731 a2732 && (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) b2731 b2732) actual expected in
  if not test then failwithf "test 2133 failed";
  (* Paths of depth 2 *)
  (* .a274.#a273 *)
  let actual = r.a274.#a273 in
  let expected = #0. in
  mark_test_run 2134;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2134 failed";
  (* .a274.#b273 *)
  let actual = r.a274.#b273 in
  let expected = #{ a131 = 1.; b131 = #2. } in
  mark_test_run 2135;
  let test = (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) actual expected in
  if not test then failwithf "test 2135 failed";
  (* Paths of depth 3 *)
  (* .a274.#b273.#a131 *)
  let actual = r.a274.#b273.#a131 in
  let expected = 1. in
  mark_test_run 2136;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2136 failed";
  (* .a274.#b273.#b131 *)
  let actual = r.a274.#b273.#b131 in
  let expected = #2. in
  mark_test_run 2137;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2137 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a274 = a2741 } { a274 = a2742 } -> (fun #{ a273 = a2731; b273 = b2731 } #{ a273 = a2732; b273 = b2732 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2731 a2732 && (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) b2731 b2732) a2741 a2742) in
  let next_r = { a274 = #{ a273 = #100.; b273 = #{ a131 = 101.; b131 = #102. } } } in
  let r_expected = { a274 = #{ a273 = #0.; b273 = #{ a131 = 1.; b131 = #2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a274 *)
  r.a274 <- next_r.a274;
  let r_expected = { r_expected with a274 = next_r.a274 } in
  mark_test_run 2138;
  let test = eq r r_expected in
  if not test then failwithf "test 2138 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a274 = #{ a273; b273 = #{ a131; b131 } } } = r in
  let expected_a273 = #100. in
  mark_test_run 2139;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a273 a273 in
  if not test then failwithf "test 2139 failed";
  let expected_a131 = 101. in
  mark_test_run 2140;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a131 a131 in
  if not test then failwithf "test 2140 failed";
  let expected_b131 = #102. in
  mark_test_run 2141;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b131 b131 in
  if not test then failwithf "test 2141 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a274 } = r in
  let expected_a274 = #{ a273 = #100.; b273 = #{ a131 = 101.; b131 = #102. } } in
  mark_test_run 2142;
  let test = (fun #{ a273 = a2731; b273 = b2731 } #{ a273 = a2732; b273 = b2732 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2731 a2732 && (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) b2731 b2732) expected_a274 a274 in
  if not test then failwithf "test 2142 failed";

  (**************************************************)
  (*   t276 = { #{ float#; #{ float#; float } } }   *)
  (**************************************************)
  let r = { a276 = #{ a275 = #0.; b275 = #{ a139 = #1.; b139 = 2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a276 *)
  let actual = r.a276 in
  let expected = #{ a275 = #0.; b275 = #{ a139 = #1.; b139 = 2. } } in
  mark_test_run 2143;
  let test = (fun #{ a275 = a2751; b275 = b2751 } #{ a275 = a2752; b275 = b2752 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2751 a2752 && (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) b2751 b2752) actual expected in
  if not test then failwithf "test 2143 failed";
  (* Paths of depth 2 *)
  (* .a276.#a275 *)
  let actual = r.a276.#a275 in
  let expected = #0. in
  mark_test_run 2144;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2144 failed";
  (* .a276.#b275 *)
  let actual = r.a276.#b275 in
  let expected = #{ a139 = #1.; b139 = 2. } in
  mark_test_run 2145;
  let test = (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) actual expected in
  if not test then failwithf "test 2145 failed";
  (* Paths of depth 3 *)
  (* .a276.#b275.#a139 *)
  let actual = r.a276.#b275.#a139 in
  let expected = #1. in
  mark_test_run 2146;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2146 failed";
  (* .a276.#b275.#b139 *)
  let actual = r.a276.#b275.#b139 in
  let expected = 2. in
  mark_test_run 2147;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2147 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a276 = a2761 } { a276 = a2762 } -> (fun #{ a275 = a2751; b275 = b2751 } #{ a275 = a2752; b275 = b2752 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2751 a2752 && (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) b2751 b2752) a2761 a2762) in
  let next_r = { a276 = #{ a275 = #100.; b275 = #{ a139 = #101.; b139 = 102. } } } in
  let r_expected = { a276 = #{ a275 = #0.; b275 = #{ a139 = #1.; b139 = 2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a276 *)
  r.a276 <- next_r.a276;
  let r_expected = { r_expected with a276 = next_r.a276 } in
  mark_test_run 2148;
  let test = eq r r_expected in
  if not test then failwithf "test 2148 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a276 = #{ a275; b275 = #{ a139; b139 } } } = r in
  let expected_a275 = #100. in
  mark_test_run 2149;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a275 a275 in
  if not test then failwithf "test 2149 failed";
  let expected_a139 = #101. in
  mark_test_run 2150;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a139 a139 in
  if not test then failwithf "test 2150 failed";
  let expected_b139 = 102. in
  mark_test_run 2151;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b139 b139 in
  if not test then failwithf "test 2151 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a276 } = r in
  let expected_a276 = #{ a275 = #100.; b275 = #{ a139 = #101.; b139 = 102. } } in
  mark_test_run 2152;
  let test = (fun #{ a275 = a2751; b275 = b2751 } #{ a275 = a2752; b275 = b2752 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2751 a2752 && (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) b2751 b2752) expected_a276 a276 in
  if not test then failwithf "test 2152 failed";

  (***************************************************)
  (*   t278 = { #{ float#; #{ float#; float# } } }   *)
  (***************************************************)
  let r = { a278 = #{ a277 = #0.; b277 = #{ a141 = #1.; b141 = #2. } } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a278 *)
  let actual = r.a278 in
  let expected = #{ a277 = #0.; b277 = #{ a141 = #1.; b141 = #2. } } in
  mark_test_run 2153;
  let test = (fun #{ a277 = a2771; b277 = b2771 } #{ a277 = a2772; b277 = b2772 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2771 a2772 && (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) b2771 b2772) actual expected in
  if not test then failwithf "test 2153 failed";
  (* Paths of depth 2 *)
  (* .a278.#a277 *)
  let actual = r.a278.#a277 in
  let expected = #0. in
  mark_test_run 2154;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2154 failed";
  (* .a278.#b277 *)
  let actual = r.a278.#b277 in
  let expected = #{ a141 = #1.; b141 = #2. } in
  mark_test_run 2155;
  let test = (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) actual expected in
  if not test then failwithf "test 2155 failed";
  (* Paths of depth 3 *)
  (* .a278.#b277.#a141 *)
  let actual = r.a278.#b277.#a141 in
  let expected = #1. in
  mark_test_run 2156;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2156 failed";
  (* .a278.#b277.#b141 *)
  let actual = r.a278.#b277.#b141 in
  let expected = #2. in
  mark_test_run 2157;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2157 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a278 = a2781 } { a278 = a2782 } -> (fun #{ a277 = a2771; b277 = b2771 } #{ a277 = a2772; b277 = b2772 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2771 a2772 && (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) b2771 b2772) a2781 a2782) in
  let next_r = { a278 = #{ a277 = #100.; b277 = #{ a141 = #101.; b141 = #102. } } } in
  let r_expected = { a278 = #{ a277 = #0.; b277 = #{ a141 = #1.; b141 = #2. } } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a278 *)
  r.a278 <- next_r.a278;
  let r_expected = { r_expected with a278 = next_r.a278 } in
  mark_test_run 2158;
  let test = eq r r_expected in
  if not test then failwithf "test 2158 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a278 = #{ a277; b277 = #{ a141; b141 } } } = r in
  let expected_a277 = #100. in
  mark_test_run 2159;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a277 a277 in
  if not test then failwithf "test 2159 failed";
  let expected_a141 = #101. in
  mark_test_run 2160;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a141 a141 in
  if not test then failwithf "test 2160 failed";
  let expected_b141 = #102. in
  mark_test_run 2161;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b141 b141 in
  if not test then failwithf "test 2161 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a278 } = r in
  let expected_a278 = #{ a277 = #100.; b277 = #{ a141 = #101.; b141 = #102. } } in
  mark_test_run 2162;
  let test = (fun #{ a277 = a2771; b277 = b2771 } #{ a277 = a2772; b277 = b2772 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a2771 a2772 && (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) b2771 b2772) expected_a278 a278 in
  if not test then failwithf "test 2162 failed";

  (*************************************************************)
  (*   t281 = { #{ float32#; int64# }; #{ string; int64# } }   *)
  (*************************************************************)
  let r = { a281 = #{ a279 = #0.s; b279 = #1L }; b281 = #{ a280 = "2"; b280 = #3L } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a281 *)
  let actual = r.a281 in
  let expected = #{ a279 = #0.s; b279 = #1L } in
  mark_test_run 2163;
  let test = (fun #{ a279 = a2791; b279 = b2791 } #{ a279 = a2792; b279 = b2792 } -> (fun a b -> Float32_u.(equal (add #0.s a) (add #0.s b))) a2791 a2792 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b2791 b2792) actual expected in
  if not test then failwithf "test 2163 failed";
  (* Paths of depth 2 *)
  (* .a281.#a279 *)
  let actual = r.a281.#a279 in
  let expected = #0.s in
  mark_test_run 2164;
  let test = (fun a b -> Float32_u.(equal (add #0.s a) (add #0.s b))) actual expected in
  if not test then failwithf "test 2164 failed";
  (* .a281.#b279 *)
  let actual = r.a281.#b279 in
  let expected = #1L in
  mark_test_run 2165;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 2165 failed";
  (* Paths of depth 1 *)
  (* .b281 *)
  let actual = r.b281 in
  let expected = #{ a280 = "2"; b280 = #3L } in
  mark_test_run 2166;
  let test = (fun #{ a280 = a2801; b280 = b2801 } #{ a280 = a2802; b280 = b2802 } -> (fun a b -> String.equal (globalize a) (globalize b)) a2801 a2802 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b2801 b2802) actual expected in
  if not test then failwithf "test 2166 failed";
  (* Paths of depth 2 *)
  (* .b281.#a280 *)
  let actual = r.b281.#a280 in
  let expected = "2" in
  mark_test_run 2167;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2167 failed";
  (* .b281.#b280 *)
  let actual = r.b281.#b280 in
  let expected = #3L in
  mark_test_run 2168;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) actual expected in
  if not test then failwithf "test 2168 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a281 = a2811; b281 = b2811 } { a281 = a2812; b281 = b2812 } -> (fun #{ a279 = a2791; b279 = b2791 } #{ a279 = a2792; b279 = b2792 } -> (fun a b -> Float32_u.(equal (add #0.s a) (add #0.s b))) a2791 a2792 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b2791 b2792) a2811 a2812 && (fun #{ a280 = a2801; b280 = b2801 } #{ a280 = a2802; b280 = b2802 } -> (fun a b -> String.equal (globalize a) (globalize b)) a2801 a2802 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b2801 b2802) b2811 b2812) in
  let next_r = { a281 = #{ a279 = #100.s; b279 = #101L }; b281 = #{ a280 = "102"; b280 = #103L } } in
  let r_expected = { a281 = #{ a279 = #0.s; b279 = #1L }; b281 = #{ a280 = "2"; b280 = #3L } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a281 *)
  r.a281 <- next_r.a281;
  let r_expected = { r_expected with a281 = next_r.a281 } in
  mark_test_run 2169;
  let test = eq r r_expected in
  if not test then failwithf "test 2169 failed";
  Gc.compact ();
  (* .b281 *)
  r.b281 <- next_r.b281;
  let r_expected = { r_expected with b281 = next_r.b281 } in
  mark_test_run 2170;
  let test = eq r r_expected in
  if not test then failwithf "test 2170 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a281 = #{ a279; b279 }; b281 = #{ a280; b280 } } = r in
  let expected_a279 = #100.s in
  mark_test_run 2171;
  let test = (fun a b -> Float32_u.(equal (add #0.s a) (add #0.s b))) expected_a279 a279 in
  if not test then failwithf "test 2171 failed";
  let expected_b279 = #101L in
  mark_test_run 2172;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b279 b279 in
  if not test then failwithf "test 2172 failed";
  let expected_a280 = "102" in
  mark_test_run 2173;
  let test = (fun a b -> String.equal (globalize a) (globalize b)) expected_a280 a280 in
  if not test then failwithf "test 2173 failed";
  let expected_b280 = #103L in
  mark_test_run 2174;
  let test = (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) expected_b280 b280 in
  if not test then failwithf "test 2174 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a281; b281 } = r in
  let expected_a281 = #{ a279 = #100.s; b279 = #101L } in
  mark_test_run 2175;
  let test = (fun #{ a279 = a2791; b279 = b2791 } #{ a279 = a2792; b279 = b2792 } -> (fun a b -> Float32_u.(equal (add #0.s a) (add #0.s b))) a2791 a2792 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b2791 b2792) expected_a281 a281 in
  if not test then failwithf "test 2175 failed";
  let expected_b281 = #{ a280 = "102"; b280 = #103L } in
  mark_test_run 2176;
  let test = (fun #{ a280 = a2801; b280 = b2801 } #{ a280 = a2802; b280 = b2802 } -> (fun a b -> String.equal (globalize a) (globalize b)) a2801 a2802 && (fun a b -> Int64_u.(equal (add #0L a) (add #0L b))) b2801 b2802) expected_b281 b281 in
  if not test then failwithf "test 2176 failed";

  (******************************************)
  (*   t283 = { #{ #{ int; int }; int } }   *)
  (******************************************)
  let r = { a283 = #{ a282 = #{ a16 = 0; b16 = 1 }; b282 = 2 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a283 *)
  let actual = r.a283 in
  let expected = #{ a282 = #{ a16 = 0; b16 = 1 }; b282 = 2 } in
  mark_test_run 2177;
  let test = (fun #{ a282 = a2821; b282 = b2821 } #{ a282 = a2822; b282 = b2822 } -> (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) a2821 a2822 && (fun a b -> Int.equal a b) b2821 b2822) actual expected in
  if not test then failwithf "test 2177 failed";
  (* Paths of depth 2 *)
  (* .a283.#a282 *)
  let actual = r.a283.#a282 in
  let expected = #{ a16 = 0; b16 = 1 } in
  mark_test_run 2178;
  let test = (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) actual expected in
  if not test then failwithf "test 2178 failed";
  (* .a283.#b282 *)
  let actual = r.a283.#b282 in
  let expected = 2 in
  mark_test_run 2179;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2179 failed";
  (* Paths of depth 3 *)
  (* .a283.#a282.#a16 *)
  let actual = r.a283.#a282.#a16 in
  let expected = 0 in
  mark_test_run 2180;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2180 failed";
  (* .a283.#a282.#b16 *)
  let actual = r.a283.#a282.#b16 in
  let expected = 1 in
  mark_test_run 2181;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2181 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a283 = a2831 } { a283 = a2832 } -> (fun #{ a282 = a2821; b282 = b2821 } #{ a282 = a2822; b282 = b2822 } -> (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) a2821 a2822 && (fun a b -> Int.equal a b) b2821 b2822) a2831 a2832) in
  let next_r = { a283 = #{ a282 = #{ a16 = 100; b16 = 101 }; b282 = 102 } } in
  let r_expected = { a283 = #{ a282 = #{ a16 = 0; b16 = 1 }; b282 = 2 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a283 *)
  r.a283 <- next_r.a283;
  let r_expected = { r_expected with a283 = next_r.a283 } in
  mark_test_run 2182;
  let test = eq r r_expected in
  if not test then failwithf "test 2182 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a283 = #{ a282 = #{ a16; b16 }; b282 } } = r in
  let expected_b282 = 102 in
  mark_test_run 2183;
  let test = (fun a b -> Int.equal a b) expected_b282 b282 in
  if not test then failwithf "test 2183 failed";
  let expected_a16 = 100 in
  mark_test_run 2184;
  let test = (fun a b -> Int.equal a b) expected_a16 a16 in
  if not test then failwithf "test 2184 failed";
  let expected_b16 = 101 in
  mark_test_run 2185;
  let test = (fun a b -> Int.equal a b) expected_b16 b16 in
  if not test then failwithf "test 2185 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a283 } = r in
  let expected_a283 = #{ a282 = #{ a16 = 100; b16 = 101 }; b282 = 102 } in
  mark_test_run 2186;
  let test = (fun #{ a282 = a2821; b282 = b2821 } #{ a282 = a2822; b282 = b2822 } -> (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) a2821 a2822 && (fun a b -> Int.equal a b) b2821 b2822) expected_a283 a283 in
  if not test then failwithf "test 2186 failed";

  (*********************************************)
  (*   t285 = { #{ #{ int; int }; int32# } }   *)
  (*********************************************)
  let r = { a285 = #{ a284 = #{ a16 = 0; b16 = 1 }; b284 = #2l } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a285 *)
  let actual = r.a285 in
  let expected = #{ a284 = #{ a16 = 0; b16 = 1 }; b284 = #2l } in
  mark_test_run 2187;
  let test = (fun #{ a284 = a2841; b284 = b2841 } #{ a284 = a2842; b284 = b2842 } -> (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) a2841 a2842 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b2841 b2842) actual expected in
  if not test then failwithf "test 2187 failed";
  (* Paths of depth 2 *)
  (* .a285.#a284 *)
  let actual = r.a285.#a284 in
  let expected = #{ a16 = 0; b16 = 1 } in
  mark_test_run 2188;
  let test = (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) actual expected in
  if not test then failwithf "test 2188 failed";
  (* .a285.#b284 *)
  let actual = r.a285.#b284 in
  let expected = #2l in
  mark_test_run 2189;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 2189 failed";
  (* Paths of depth 3 *)
  (* .a285.#a284.#a16 *)
  let actual = r.a285.#a284.#a16 in
  let expected = 0 in
  mark_test_run 2190;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2190 failed";
  (* .a285.#a284.#b16 *)
  let actual = r.a285.#a284.#b16 in
  let expected = 1 in
  mark_test_run 2191;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2191 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a285 = a2851 } { a285 = a2852 } -> (fun #{ a284 = a2841; b284 = b2841 } #{ a284 = a2842; b284 = b2842 } -> (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) a2841 a2842 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b2841 b2842) a2851 a2852) in
  let next_r = { a285 = #{ a284 = #{ a16 = 100; b16 = 101 }; b284 = #102l } } in
  let r_expected = { a285 = #{ a284 = #{ a16 = 0; b16 = 1 }; b284 = #2l } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a285 *)
  r.a285 <- next_r.a285;
  let r_expected = { r_expected with a285 = next_r.a285 } in
  mark_test_run 2192;
  let test = eq r r_expected in
  if not test then failwithf "test 2192 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a285 = #{ a284 = #{ a16; b16 }; b284 } } = r in
  let expected_b284 = #102l in
  mark_test_run 2193;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b284 b284 in
  if not test then failwithf "test 2193 failed";
  let expected_a16 = 100 in
  mark_test_run 2194;
  let test = (fun a b -> Int.equal a b) expected_a16 a16 in
  if not test then failwithf "test 2194 failed";
  let expected_b16 = 101 in
  mark_test_run 2195;
  let test = (fun a b -> Int.equal a b) expected_b16 b16 in
  if not test then failwithf "test 2195 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a285 } = r in
  let expected_a285 = #{ a284 = #{ a16 = 100; b16 = 101 }; b284 = #102l } in
  mark_test_run 2196;
  let test = (fun #{ a284 = a2841; b284 = b2841 } #{ a284 = a2842; b284 = b2842 } -> (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) a2841 a2842 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b2841 b2842) expected_a285 a285 in
  if not test then failwithf "test 2196 failed";

  (********************************************)
  (*   t287 = { #{ #{ int; int }; float } }   *)
  (********************************************)
  let r = { a287 = #{ a286 = #{ a16 = 0; b16 = 1 }; b286 = 2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a287 *)
  let actual = r.a287 in
  let expected = #{ a286 = #{ a16 = 0; b16 = 1 }; b286 = 2. } in
  mark_test_run 2197;
  let test = (fun #{ a286 = a2861; b286 = b2861 } #{ a286 = a2862; b286 = b2862 } -> (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) a2861 a2862 && (fun a b -> Float.equal (globalize a) (globalize b)) b2861 b2862) actual expected in
  if not test then failwithf "test 2197 failed";
  (* Paths of depth 2 *)
  (* .a287.#a286 *)
  let actual = r.a287.#a286 in
  let expected = #{ a16 = 0; b16 = 1 } in
  mark_test_run 2198;
  let test = (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) actual expected in
  if not test then failwithf "test 2198 failed";
  (* .a287.#b286 *)
  let actual = r.a287.#b286 in
  let expected = 2. in
  mark_test_run 2199;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2199 failed";
  (* Paths of depth 3 *)
  (* .a287.#a286.#a16 *)
  let actual = r.a287.#a286.#a16 in
  let expected = 0 in
  mark_test_run 2200;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2200 failed";
  (* .a287.#a286.#b16 *)
  let actual = r.a287.#a286.#b16 in
  let expected = 1 in
  mark_test_run 2201;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2201 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a287 = a2871 } { a287 = a2872 } -> (fun #{ a286 = a2861; b286 = b2861 } #{ a286 = a2862; b286 = b2862 } -> (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) a2861 a2862 && (fun a b -> Float.equal (globalize a) (globalize b)) b2861 b2862) a2871 a2872) in
  let next_r = { a287 = #{ a286 = #{ a16 = 100; b16 = 101 }; b286 = 102. } } in
  let r_expected = { a287 = #{ a286 = #{ a16 = 0; b16 = 1 }; b286 = 2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a287 *)
  r.a287 <- next_r.a287;
  let r_expected = { r_expected with a287 = next_r.a287 } in
  mark_test_run 2202;
  let test = eq r r_expected in
  if not test then failwithf "test 2202 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a287 = #{ a286 = #{ a16; b16 }; b286 } } = r in
  let expected_b286 = 102. in
  mark_test_run 2203;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b286 b286 in
  if not test then failwithf "test 2203 failed";
  let expected_a16 = 100 in
  mark_test_run 2204;
  let test = (fun a b -> Int.equal a b) expected_a16 a16 in
  if not test then failwithf "test 2204 failed";
  let expected_b16 = 101 in
  mark_test_run 2205;
  let test = (fun a b -> Int.equal a b) expected_b16 b16 in
  if not test then failwithf "test 2205 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a287 } = r in
  let expected_a287 = #{ a286 = #{ a16 = 100; b16 = 101 }; b286 = 102. } in
  mark_test_run 2206;
  let test = (fun #{ a286 = a2861; b286 = b2861 } #{ a286 = a2862; b286 = b2862 } -> (fun #{ a16 = a161; b16 = b161 } #{ a16 = a162; b16 = b162 } -> (fun a b -> Int.equal a b) a161 a162 && (fun a b -> Int.equal a b) b161 b162) a2861 a2862 && (fun a b -> Float.equal (globalize a) (globalize b)) b2861 b2862) expected_a287 a287 in
  if not test then failwithf "test 2206 failed";

  (*********************************************)
  (*   t289 = { #{ #{ int; int32# }; int } }   *)
  (*********************************************)
  let r = { a289 = #{ a288 = #{ a18 = 0; b18 = #1l }; b288 = 2 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a289 *)
  let actual = r.a289 in
  let expected = #{ a288 = #{ a18 = 0; b18 = #1l }; b288 = 2 } in
  mark_test_run 2207;
  let test = (fun #{ a288 = a2881; b288 = b2881 } #{ a288 = a2882; b288 = b2882 } -> (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) a2881 a2882 && (fun a b -> Int.equal a b) b2881 b2882) actual expected in
  if not test then failwithf "test 2207 failed";
  (* Paths of depth 2 *)
  (* .a289.#a288 *)
  let actual = r.a289.#a288 in
  let expected = #{ a18 = 0; b18 = #1l } in
  mark_test_run 2208;
  let test = (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) actual expected in
  if not test then failwithf "test 2208 failed";
  (* .a289.#b288 *)
  let actual = r.a289.#b288 in
  let expected = 2 in
  mark_test_run 2209;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2209 failed";
  (* Paths of depth 3 *)
  (* .a289.#a288.#a18 *)
  let actual = r.a289.#a288.#a18 in
  let expected = 0 in
  mark_test_run 2210;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2210 failed";
  (* .a289.#a288.#b18 *)
  let actual = r.a289.#a288.#b18 in
  let expected = #1l in
  mark_test_run 2211;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 2211 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a289 = a2891 } { a289 = a2892 } -> (fun #{ a288 = a2881; b288 = b2881 } #{ a288 = a2882; b288 = b2882 } -> (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) a2881 a2882 && (fun a b -> Int.equal a b) b2881 b2882) a2891 a2892) in
  let next_r = { a289 = #{ a288 = #{ a18 = 100; b18 = #101l }; b288 = 102 } } in
  let r_expected = { a289 = #{ a288 = #{ a18 = 0; b18 = #1l }; b288 = 2 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a289 *)
  r.a289 <- next_r.a289;
  let r_expected = { r_expected with a289 = next_r.a289 } in
  mark_test_run 2212;
  let test = eq r r_expected in
  if not test then failwithf "test 2212 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a289 = #{ a288 = #{ a18; b18 }; b288 } } = r in
  let expected_b288 = 102 in
  mark_test_run 2213;
  let test = (fun a b -> Int.equal a b) expected_b288 b288 in
  if not test then failwithf "test 2213 failed";
  let expected_a18 = 100 in
  mark_test_run 2214;
  let test = (fun a b -> Int.equal a b) expected_a18 a18 in
  if not test then failwithf "test 2214 failed";
  let expected_b18 = #101l in
  mark_test_run 2215;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b18 b18 in
  if not test then failwithf "test 2215 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a289 } = r in
  let expected_a289 = #{ a288 = #{ a18 = 100; b18 = #101l }; b288 = 102 } in
  mark_test_run 2216;
  let test = (fun #{ a288 = a2881; b288 = b2881 } #{ a288 = a2882; b288 = b2882 } -> (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) a2881 a2882 && (fun a b -> Int.equal a b) b2881 b2882) expected_a289 a289 in
  if not test then failwithf "test 2216 failed";

  (************************************************)
  (*   t291 = { #{ #{ int; int32# }; int32# } }   *)
  (************************************************)
  let r = { a291 = #{ a290 = #{ a18 = 0; b18 = #1l }; b290 = #2l } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a291 *)
  let actual = r.a291 in
  let expected = #{ a290 = #{ a18 = 0; b18 = #1l }; b290 = #2l } in
  mark_test_run 2217;
  let test = (fun #{ a290 = a2901; b290 = b2901 } #{ a290 = a2902; b290 = b2902 } -> (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) a2901 a2902 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b2901 b2902) actual expected in
  if not test then failwithf "test 2217 failed";
  (* Paths of depth 2 *)
  (* .a291.#a290 *)
  let actual = r.a291.#a290 in
  let expected = #{ a18 = 0; b18 = #1l } in
  mark_test_run 2218;
  let test = (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) actual expected in
  if not test then failwithf "test 2218 failed";
  (* .a291.#b290 *)
  let actual = r.a291.#b290 in
  let expected = #2l in
  mark_test_run 2219;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 2219 failed";
  (* Paths of depth 3 *)
  (* .a291.#a290.#a18 *)
  let actual = r.a291.#a290.#a18 in
  let expected = 0 in
  mark_test_run 2220;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2220 failed";
  (* .a291.#a290.#b18 *)
  let actual = r.a291.#a290.#b18 in
  let expected = #1l in
  mark_test_run 2221;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 2221 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a291 = a2911 } { a291 = a2912 } -> (fun #{ a290 = a2901; b290 = b2901 } #{ a290 = a2902; b290 = b2902 } -> (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) a2901 a2902 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b2901 b2902) a2911 a2912) in
  let next_r = { a291 = #{ a290 = #{ a18 = 100; b18 = #101l }; b290 = #102l } } in
  let r_expected = { a291 = #{ a290 = #{ a18 = 0; b18 = #1l }; b290 = #2l } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a291 *)
  r.a291 <- next_r.a291;
  let r_expected = { r_expected with a291 = next_r.a291 } in
  mark_test_run 2222;
  let test = eq r r_expected in
  if not test then failwithf "test 2222 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a291 = #{ a290 = #{ a18; b18 }; b290 } } = r in
  let expected_b290 = #102l in
  mark_test_run 2223;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b290 b290 in
  if not test then failwithf "test 2223 failed";
  let expected_a18 = 100 in
  mark_test_run 2224;
  let test = (fun a b -> Int.equal a b) expected_a18 a18 in
  if not test then failwithf "test 2224 failed";
  let expected_b18 = #101l in
  mark_test_run 2225;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b18 b18 in
  if not test then failwithf "test 2225 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a291 } = r in
  let expected_a291 = #{ a290 = #{ a18 = 100; b18 = #101l }; b290 = #102l } in
  mark_test_run 2226;
  let test = (fun #{ a290 = a2901; b290 = b2901 } #{ a290 = a2902; b290 = b2902 } -> (fun #{ a18 = a181; b18 = b181 } #{ a18 = a182; b18 = b182 } -> (fun a b -> Int.equal a b) a181 a182 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b181 b182) a2901 a2902 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b2901 b2902) expected_a291 a291 in
  if not test then failwithf "test 2226 failed";

  (********************************************)
  (*   t293 = { #{ #{ int; float }; int } }   *)
  (********************************************)
  let r = { a293 = #{ a292 = #{ a20 = 0; b20 = 1. }; b292 = 2 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a293 *)
  let actual = r.a293 in
  let expected = #{ a292 = #{ a20 = 0; b20 = 1. }; b292 = 2 } in
  mark_test_run 2227;
  let test = (fun #{ a292 = a2921; b292 = b2921 } #{ a292 = a2922; b292 = b2922 } -> (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) a2921 a2922 && (fun a b -> Int.equal a b) b2921 b2922) actual expected in
  if not test then failwithf "test 2227 failed";
  (* Paths of depth 2 *)
  (* .a293.#a292 *)
  let actual = r.a293.#a292 in
  let expected = #{ a20 = 0; b20 = 1. } in
  mark_test_run 2228;
  let test = (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) actual expected in
  if not test then failwithf "test 2228 failed";
  (* .a293.#b292 *)
  let actual = r.a293.#b292 in
  let expected = 2 in
  mark_test_run 2229;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2229 failed";
  (* Paths of depth 3 *)
  (* .a293.#a292.#a20 *)
  let actual = r.a293.#a292.#a20 in
  let expected = 0 in
  mark_test_run 2230;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2230 failed";
  (* .a293.#a292.#b20 *)
  let actual = r.a293.#a292.#b20 in
  let expected = 1. in
  mark_test_run 2231;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2231 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a293 = a2931 } { a293 = a2932 } -> (fun #{ a292 = a2921; b292 = b2921 } #{ a292 = a2922; b292 = b2922 } -> (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) a2921 a2922 && (fun a b -> Int.equal a b) b2921 b2922) a2931 a2932) in
  let next_r = { a293 = #{ a292 = #{ a20 = 100; b20 = 101. }; b292 = 102 } } in
  let r_expected = { a293 = #{ a292 = #{ a20 = 0; b20 = 1. }; b292 = 2 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a293 *)
  r.a293 <- next_r.a293;
  let r_expected = { r_expected with a293 = next_r.a293 } in
  mark_test_run 2232;
  let test = eq r r_expected in
  if not test then failwithf "test 2232 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a293 = #{ a292 = #{ a20; b20 }; b292 } } = r in
  let expected_b292 = 102 in
  mark_test_run 2233;
  let test = (fun a b -> Int.equal a b) expected_b292 b292 in
  if not test then failwithf "test 2233 failed";
  let expected_a20 = 100 in
  mark_test_run 2234;
  let test = (fun a b -> Int.equal a b) expected_a20 a20 in
  if not test then failwithf "test 2234 failed";
  let expected_b20 = 101. in
  mark_test_run 2235;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b20 b20 in
  if not test then failwithf "test 2235 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a293 } = r in
  let expected_a293 = #{ a292 = #{ a20 = 100; b20 = 101. }; b292 = 102 } in
  mark_test_run 2236;
  let test = (fun #{ a292 = a2921; b292 = b2921 } #{ a292 = a2922; b292 = b2922 } -> (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) a2921 a2922 && (fun a b -> Int.equal a b) b2921 b2922) expected_a293 a293 in
  if not test then failwithf "test 2236 failed";

  (**********************************************)
  (*   t295 = { #{ #{ int; float }; float } }   *)
  (**********************************************)
  let r = { a295 = #{ a294 = #{ a20 = 0; b20 = 1. }; b294 = 2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a295 *)
  let actual = r.a295 in
  let expected = #{ a294 = #{ a20 = 0; b20 = 1. }; b294 = 2. } in
  mark_test_run 2237;
  let test = (fun #{ a294 = a2941; b294 = b2941 } #{ a294 = a2942; b294 = b2942 } -> (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) a2941 a2942 && (fun a b -> Float.equal (globalize a) (globalize b)) b2941 b2942) actual expected in
  if not test then failwithf "test 2237 failed";
  (* Paths of depth 2 *)
  (* .a295.#a294 *)
  let actual = r.a295.#a294 in
  let expected = #{ a20 = 0; b20 = 1. } in
  mark_test_run 2238;
  let test = (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) actual expected in
  if not test then failwithf "test 2238 failed";
  (* .a295.#b294 *)
  let actual = r.a295.#b294 in
  let expected = 2. in
  mark_test_run 2239;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2239 failed";
  (* Paths of depth 3 *)
  (* .a295.#a294.#a20 *)
  let actual = r.a295.#a294.#a20 in
  let expected = 0 in
  mark_test_run 2240;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2240 failed";
  (* .a295.#a294.#b20 *)
  let actual = r.a295.#a294.#b20 in
  let expected = 1. in
  mark_test_run 2241;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2241 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a295 = a2951 } { a295 = a2952 } -> (fun #{ a294 = a2941; b294 = b2941 } #{ a294 = a2942; b294 = b2942 } -> (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) a2941 a2942 && (fun a b -> Float.equal (globalize a) (globalize b)) b2941 b2942) a2951 a2952) in
  let next_r = { a295 = #{ a294 = #{ a20 = 100; b20 = 101. }; b294 = 102. } } in
  let r_expected = { a295 = #{ a294 = #{ a20 = 0; b20 = 1. }; b294 = 2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a295 *)
  r.a295 <- next_r.a295;
  let r_expected = { r_expected with a295 = next_r.a295 } in
  mark_test_run 2242;
  let test = eq r r_expected in
  if not test then failwithf "test 2242 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a295 = #{ a294 = #{ a20; b20 }; b294 } } = r in
  let expected_b294 = 102. in
  mark_test_run 2243;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b294 b294 in
  if not test then failwithf "test 2243 failed";
  let expected_a20 = 100 in
  mark_test_run 2244;
  let test = (fun a b -> Int.equal a b) expected_a20 a20 in
  if not test then failwithf "test 2244 failed";
  let expected_b20 = 101. in
  mark_test_run 2245;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b20 b20 in
  if not test then failwithf "test 2245 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a295 } = r in
  let expected_a295 = #{ a294 = #{ a20 = 100; b20 = 101. }; b294 = 102. } in
  mark_test_run 2246;
  let test = (fun #{ a294 = a2941; b294 = b2941 } #{ a294 = a2942; b294 = b2942 } -> (fun #{ a20 = a201; b20 = b201 } #{ a20 = a202; b20 = b202 } -> (fun a b -> Int.equal a b) a201 a202 && (fun a b -> Float.equal (globalize a) (globalize b)) b201 b202) a2941 a2942 && (fun a b -> Float.equal (globalize a) (globalize b)) b2941 b2942) expected_a295 a295 in
  if not test then failwithf "test 2246 failed";

  (*********************************************)
  (*   t297 = { #{ #{ int32#; int }; int } }   *)
  (*********************************************)
  let r = { a297 = #{ a296 = #{ a31 = #0l; b31 = 1 }; b296 = 2 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a297 *)
  let actual = r.a297 in
  let expected = #{ a296 = #{ a31 = #0l; b31 = 1 }; b296 = 2 } in
  mark_test_run 2247;
  let test = (fun #{ a296 = a2961; b296 = b2961 } #{ a296 = a2962; b296 = b2962 } -> (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) a2961 a2962 && (fun a b -> Int.equal a b) b2961 b2962) actual expected in
  if not test then failwithf "test 2247 failed";
  (* Paths of depth 2 *)
  (* .a297.#a296 *)
  let actual = r.a297.#a296 in
  let expected = #{ a31 = #0l; b31 = 1 } in
  mark_test_run 2248;
  let test = (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) actual expected in
  if not test then failwithf "test 2248 failed";
  (* .a297.#b296 *)
  let actual = r.a297.#b296 in
  let expected = 2 in
  mark_test_run 2249;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2249 failed";
  (* Paths of depth 3 *)
  (* .a297.#a296.#a31 *)
  let actual = r.a297.#a296.#a31 in
  let expected = #0l in
  mark_test_run 2250;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 2250 failed";
  (* .a297.#a296.#b31 *)
  let actual = r.a297.#a296.#b31 in
  let expected = 1 in
  mark_test_run 2251;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2251 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a297 = a2971 } { a297 = a2972 } -> (fun #{ a296 = a2961; b296 = b2961 } #{ a296 = a2962; b296 = b2962 } -> (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) a2961 a2962 && (fun a b -> Int.equal a b) b2961 b2962) a2971 a2972) in
  let next_r = { a297 = #{ a296 = #{ a31 = #100l; b31 = 101 }; b296 = 102 } } in
  let r_expected = { a297 = #{ a296 = #{ a31 = #0l; b31 = 1 }; b296 = 2 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a297 *)
  r.a297 <- next_r.a297;
  let r_expected = { r_expected with a297 = next_r.a297 } in
  mark_test_run 2252;
  let test = eq r r_expected in
  if not test then failwithf "test 2252 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a297 = #{ a296 = #{ a31; b31 }; b296 } } = r in
  let expected_b296 = 102 in
  mark_test_run 2253;
  let test = (fun a b -> Int.equal a b) expected_b296 b296 in
  if not test then failwithf "test 2253 failed";
  let expected_a31 = #100l in
  mark_test_run 2254;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a31 a31 in
  if not test then failwithf "test 2254 failed";
  let expected_b31 = 101 in
  mark_test_run 2255;
  let test = (fun a b -> Int.equal a b) expected_b31 b31 in
  if not test then failwithf "test 2255 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a297 } = r in
  let expected_a297 = #{ a296 = #{ a31 = #100l; b31 = 101 }; b296 = 102 } in
  mark_test_run 2256;
  let test = (fun #{ a296 = a2961; b296 = b2961 } #{ a296 = a2962; b296 = b2962 } -> (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) a2961 a2962 && (fun a b -> Int.equal a b) b2961 b2962) expected_a297 a297 in
  if not test then failwithf "test 2256 failed";

  (************************************************)
  (*   t299 = { #{ #{ int32#; int }; int32# } }   *)
  (************************************************)
  let r = { a299 = #{ a298 = #{ a31 = #0l; b31 = 1 }; b298 = #2l } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a299 *)
  let actual = r.a299 in
  let expected = #{ a298 = #{ a31 = #0l; b31 = 1 }; b298 = #2l } in
  mark_test_run 2257;
  let test = (fun #{ a298 = a2981; b298 = b2981 } #{ a298 = a2982; b298 = b2982 } -> (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) a2981 a2982 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b2981 b2982) actual expected in
  if not test then failwithf "test 2257 failed";
  (* Paths of depth 2 *)
  (* .a299.#a298 *)
  let actual = r.a299.#a298 in
  let expected = #{ a31 = #0l; b31 = 1 } in
  mark_test_run 2258;
  let test = (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) actual expected in
  if not test then failwithf "test 2258 failed";
  (* .a299.#b298 *)
  let actual = r.a299.#b298 in
  let expected = #2l in
  mark_test_run 2259;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 2259 failed";
  (* Paths of depth 3 *)
  (* .a299.#a298.#a31 *)
  let actual = r.a299.#a298.#a31 in
  let expected = #0l in
  mark_test_run 2260;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 2260 failed";
  (* .a299.#a298.#b31 *)
  let actual = r.a299.#a298.#b31 in
  let expected = 1 in
  mark_test_run 2261;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2261 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a299 = a2991 } { a299 = a2992 } -> (fun #{ a298 = a2981; b298 = b2981 } #{ a298 = a2982; b298 = b2982 } -> (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) a2981 a2982 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b2981 b2982) a2991 a2992) in
  let next_r = { a299 = #{ a298 = #{ a31 = #100l; b31 = 101 }; b298 = #102l } } in
  let r_expected = { a299 = #{ a298 = #{ a31 = #0l; b31 = 1 }; b298 = #2l } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a299 *)
  r.a299 <- next_r.a299;
  let r_expected = { r_expected with a299 = next_r.a299 } in
  mark_test_run 2262;
  let test = eq r r_expected in
  if not test then failwithf "test 2262 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a299 = #{ a298 = #{ a31; b31 }; b298 } } = r in
  let expected_b298 = #102l in
  mark_test_run 2263;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b298 b298 in
  if not test then failwithf "test 2263 failed";
  let expected_a31 = #100l in
  mark_test_run 2264;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a31 a31 in
  if not test then failwithf "test 2264 failed";
  let expected_b31 = 101 in
  mark_test_run 2265;
  let test = (fun a b -> Int.equal a b) expected_b31 b31 in
  if not test then failwithf "test 2265 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a299 } = r in
  let expected_a299 = #{ a298 = #{ a31 = #100l; b31 = 101 }; b298 = #102l } in
  mark_test_run 2266;
  let test = (fun #{ a298 = a2981; b298 = b2981 } #{ a298 = a2982; b298 = b2982 } -> (fun #{ a31 = a311; b31 = b311 } #{ a31 = a312; b31 = b312 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a311 a312 && (fun a b -> Int.equal a b) b311 b312) a2981 a2982 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b2981 b2982) expected_a299 a299 in
  if not test then failwithf "test 2266 failed";

  (************************************************)
  (*   t301 = { #{ #{ int32#; int32# }; int } }   *)
  (************************************************)
  let r = { a301 = #{ a300 = #{ a33 = #0l; b33 = #1l }; b300 = 2 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a301 *)
  let actual = r.a301 in
  let expected = #{ a300 = #{ a33 = #0l; b33 = #1l }; b300 = 2 } in
  mark_test_run 2267;
  let test = (fun #{ a300 = a3001; b300 = b3001 } #{ a300 = a3002; b300 = b3002 } -> (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) a3001 a3002 && (fun a b -> Int.equal a b) b3001 b3002) actual expected in
  if not test then failwithf "test 2267 failed";
  (* Paths of depth 2 *)
  (* .a301.#a300 *)
  let actual = r.a301.#a300 in
  let expected = #{ a33 = #0l; b33 = #1l } in
  mark_test_run 2268;
  let test = (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) actual expected in
  if not test then failwithf "test 2268 failed";
  (* .a301.#b300 *)
  let actual = r.a301.#b300 in
  let expected = 2 in
  mark_test_run 2269;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2269 failed";
  (* Paths of depth 3 *)
  (* .a301.#a300.#a33 *)
  let actual = r.a301.#a300.#a33 in
  let expected = #0l in
  mark_test_run 2270;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 2270 failed";
  (* .a301.#a300.#b33 *)
  let actual = r.a301.#a300.#b33 in
  let expected = #1l in
  mark_test_run 2271;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 2271 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a301 = a3011 } { a301 = a3012 } -> (fun #{ a300 = a3001; b300 = b3001 } #{ a300 = a3002; b300 = b3002 } -> (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) a3001 a3002 && (fun a b -> Int.equal a b) b3001 b3002) a3011 a3012) in
  let next_r = { a301 = #{ a300 = #{ a33 = #100l; b33 = #101l }; b300 = 102 } } in
  let r_expected = { a301 = #{ a300 = #{ a33 = #0l; b33 = #1l }; b300 = 2 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a301 *)
  r.a301 <- next_r.a301;
  let r_expected = { r_expected with a301 = next_r.a301 } in
  mark_test_run 2272;
  let test = eq r r_expected in
  if not test then failwithf "test 2272 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a301 = #{ a300 = #{ a33; b33 }; b300 } } = r in
  let expected_b300 = 102 in
  mark_test_run 2273;
  let test = (fun a b -> Int.equal a b) expected_b300 b300 in
  if not test then failwithf "test 2273 failed";
  let expected_a33 = #100l in
  mark_test_run 2274;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a33 a33 in
  if not test then failwithf "test 2274 failed";
  let expected_b33 = #101l in
  mark_test_run 2275;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b33 b33 in
  if not test then failwithf "test 2275 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a301 } = r in
  let expected_a301 = #{ a300 = #{ a33 = #100l; b33 = #101l }; b300 = 102 } in
  mark_test_run 2276;
  let test = (fun #{ a300 = a3001; b300 = b3001 } #{ a300 = a3002; b300 = b3002 } -> (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) a3001 a3002 && (fun a b -> Int.equal a b) b3001 b3002) expected_a301 a301 in
  if not test then failwithf "test 2276 failed";

  (***************************************************)
  (*   t303 = { #{ #{ int32#; int32# }; int32# } }   *)
  (***************************************************)
  let r = { a303 = #{ a302 = #{ a33 = #0l; b33 = #1l }; b302 = #2l } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a303 *)
  let actual = r.a303 in
  let expected = #{ a302 = #{ a33 = #0l; b33 = #1l }; b302 = #2l } in
  mark_test_run 2277;
  let test = (fun #{ a302 = a3021; b302 = b3021 } #{ a302 = a3022; b302 = b3022 } -> (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) a3021 a3022 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b3021 b3022) actual expected in
  if not test then failwithf "test 2277 failed";
  (* Paths of depth 2 *)
  (* .a303.#a302 *)
  let actual = r.a303.#a302 in
  let expected = #{ a33 = #0l; b33 = #1l } in
  mark_test_run 2278;
  let test = (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) actual expected in
  if not test then failwithf "test 2278 failed";
  (* .a303.#b302 *)
  let actual = r.a303.#b302 in
  let expected = #2l in
  mark_test_run 2279;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 2279 failed";
  (* Paths of depth 3 *)
  (* .a303.#a302.#a33 *)
  let actual = r.a303.#a302.#a33 in
  let expected = #0l in
  mark_test_run 2280;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 2280 failed";
  (* .a303.#a302.#b33 *)
  let actual = r.a303.#a302.#b33 in
  let expected = #1l in
  mark_test_run 2281;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) actual expected in
  if not test then failwithf "test 2281 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a303 = a3031 } { a303 = a3032 } -> (fun #{ a302 = a3021; b302 = b3021 } #{ a302 = a3022; b302 = b3022 } -> (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) a3021 a3022 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b3021 b3022) a3031 a3032) in
  let next_r = { a303 = #{ a302 = #{ a33 = #100l; b33 = #101l }; b302 = #102l } } in
  let r_expected = { a303 = #{ a302 = #{ a33 = #0l; b33 = #1l }; b302 = #2l } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a303 *)
  r.a303 <- next_r.a303;
  let r_expected = { r_expected with a303 = next_r.a303 } in
  mark_test_run 2282;
  let test = eq r r_expected in
  if not test then failwithf "test 2282 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a303 = #{ a302 = #{ a33; b33 }; b302 } } = r in
  let expected_b302 = #102l in
  mark_test_run 2283;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b302 b302 in
  if not test then failwithf "test 2283 failed";
  let expected_a33 = #100l in
  mark_test_run 2284;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_a33 a33 in
  if not test then failwithf "test 2284 failed";
  let expected_b33 = #101l in
  mark_test_run 2285;
  let test = (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) expected_b33 b33 in
  if not test then failwithf "test 2285 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a303 } = r in
  let expected_a303 = #{ a302 = #{ a33 = #100l; b33 = #101l }; b302 = #102l } in
  mark_test_run 2286;
  let test = (fun #{ a302 = a3021; b302 = b3021 } #{ a302 = a3022; b302 = b3022 } -> (fun #{ a33 = a331; b33 = b331 } #{ a33 = a332; b33 = b332 } -> (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) a331 a332 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b331 b332) a3021 a3022 && (fun a b -> Int32_u.(equal (add #0l a) (add #0l b))) b3021 b3022) expected_a303 a303 in
  if not test then failwithf "test 2286 failed";

  (********************************************)
  (*   t305 = { #{ #{ float; int }; int } }   *)
  (********************************************)
  let r = { a305 = #{ a304 = #{ a40 = 0.; b40 = 1 }; b304 = 2 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a305 *)
  let actual = r.a305 in
  let expected = #{ a304 = #{ a40 = 0.; b40 = 1 }; b304 = 2 } in
  mark_test_run 2287;
  let test = (fun #{ a304 = a3041; b304 = b3041 } #{ a304 = a3042; b304 = b3042 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a3041 a3042 && (fun a b -> Int.equal a b) b3041 b3042) actual expected in
  if not test then failwithf "test 2287 failed";
  (* Paths of depth 2 *)
  (* .a305.#a304 *)
  let actual = r.a305.#a304 in
  let expected = #{ a40 = 0.; b40 = 1 } in
  mark_test_run 2288;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) actual expected in
  if not test then failwithf "test 2288 failed";
  (* .a305.#b304 *)
  let actual = r.a305.#b304 in
  let expected = 2 in
  mark_test_run 2289;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2289 failed";
  (* Paths of depth 3 *)
  (* .a305.#a304.#a40 *)
  let actual = r.a305.#a304.#a40 in
  let expected = 0. in
  mark_test_run 2290;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2290 failed";
  (* .a305.#a304.#b40 *)
  let actual = r.a305.#a304.#b40 in
  let expected = 1 in
  mark_test_run 2291;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2291 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a305 = a3051 } { a305 = a3052 } -> (fun #{ a304 = a3041; b304 = b3041 } #{ a304 = a3042; b304 = b3042 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a3041 a3042 && (fun a b -> Int.equal a b) b3041 b3042) a3051 a3052) in
  let next_r = { a305 = #{ a304 = #{ a40 = 100.; b40 = 101 }; b304 = 102 } } in
  let r_expected = { a305 = #{ a304 = #{ a40 = 0.; b40 = 1 }; b304 = 2 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a305 *)
  r.a305 <- next_r.a305;
  let r_expected = { r_expected with a305 = next_r.a305 } in
  mark_test_run 2292;
  let test = eq r r_expected in
  if not test then failwithf "test 2292 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a305 = #{ a304 = #{ a40; b40 }; b304 } } = r in
  let expected_b304 = 102 in
  mark_test_run 2293;
  let test = (fun a b -> Int.equal a b) expected_b304 b304 in
  if not test then failwithf "test 2293 failed";
  let expected_a40 = 100. in
  mark_test_run 2294;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a40 a40 in
  if not test then failwithf "test 2294 failed";
  let expected_b40 = 101 in
  mark_test_run 2295;
  let test = (fun a b -> Int.equal a b) expected_b40 b40 in
  if not test then failwithf "test 2295 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a305 } = r in
  let expected_a305 = #{ a304 = #{ a40 = 100.; b40 = 101 }; b304 = 102 } in
  mark_test_run 2296;
  let test = (fun #{ a304 = a3041; b304 = b3041 } #{ a304 = a3042; b304 = b3042 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a3041 a3042 && (fun a b -> Int.equal a b) b3041 b3042) expected_a305 a305 in
  if not test then failwithf "test 2296 failed";

  (**********************************************)
  (*   t307 = { #{ #{ float; int }; float } }   *)
  (**********************************************)
  let r = { a307 = #{ a306 = #{ a40 = 0.; b40 = 1 }; b306 = 2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a307 *)
  let actual = r.a307 in
  let expected = #{ a306 = #{ a40 = 0.; b40 = 1 }; b306 = 2. } in
  mark_test_run 2297;
  let test = (fun #{ a306 = a3061; b306 = b3061 } #{ a306 = a3062; b306 = b3062 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a3061 a3062 && (fun a b -> Float.equal (globalize a) (globalize b)) b3061 b3062) actual expected in
  if not test then failwithf "test 2297 failed";
  (* Paths of depth 2 *)
  (* .a307.#a306 *)
  let actual = r.a307.#a306 in
  let expected = #{ a40 = 0.; b40 = 1 } in
  mark_test_run 2298;
  let test = (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) actual expected in
  if not test then failwithf "test 2298 failed";
  (* .a307.#b306 *)
  let actual = r.a307.#b306 in
  let expected = 2. in
  mark_test_run 2299;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2299 failed";
  (* Paths of depth 3 *)
  (* .a307.#a306.#a40 *)
  let actual = r.a307.#a306.#a40 in
  let expected = 0. in
  mark_test_run 2300;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2300 failed";
  (* .a307.#a306.#b40 *)
  let actual = r.a307.#a306.#b40 in
  let expected = 1 in
  mark_test_run 2301;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2301 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a307 = a3071 } { a307 = a3072 } -> (fun #{ a306 = a3061; b306 = b3061 } #{ a306 = a3062; b306 = b3062 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a3061 a3062 && (fun a b -> Float.equal (globalize a) (globalize b)) b3061 b3062) a3071 a3072) in
  let next_r = { a307 = #{ a306 = #{ a40 = 100.; b40 = 101 }; b306 = 102. } } in
  let r_expected = { a307 = #{ a306 = #{ a40 = 0.; b40 = 1 }; b306 = 2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a307 *)
  r.a307 <- next_r.a307;
  let r_expected = { r_expected with a307 = next_r.a307 } in
  mark_test_run 2302;
  let test = eq r r_expected in
  if not test then failwithf "test 2302 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a307 = #{ a306 = #{ a40; b40 }; b306 } } = r in
  let expected_b306 = 102. in
  mark_test_run 2303;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b306 b306 in
  if not test then failwithf "test 2303 failed";
  let expected_a40 = 100. in
  mark_test_run 2304;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a40 a40 in
  if not test then failwithf "test 2304 failed";
  let expected_b40 = 101 in
  mark_test_run 2305;
  let test = (fun a b -> Int.equal a b) expected_b40 b40 in
  if not test then failwithf "test 2305 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a307 } = r in
  let expected_a307 = #{ a306 = #{ a40 = 100.; b40 = 101 }; b306 = 102. } in
  mark_test_run 2306;
  let test = (fun #{ a306 = a3061; b306 = b3061 } #{ a306 = a3062; b306 = b3062 } -> (fun #{ a40 = a401; b40 = b401 } #{ a40 = a402; b40 = b402 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a401 a402 && (fun a b -> Int.equal a b) b401 b402) a3061 a3062 && (fun a b -> Float.equal (globalize a) (globalize b)) b3061 b3062) expected_a307 a307 in
  if not test then failwithf "test 2306 failed";

  (**********************************************)
  (*   t309 = { #{ #{ float; float }; int } }   *)
  (**********************************************)
  let r = { a309 = #{ a308 = #{ a42 = 0.; b42 = 1. }; b308 = 2 } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a309 *)
  let actual = r.a309 in
  let expected = #{ a308 = #{ a42 = 0.; b42 = 1. }; b308 = 2 } in
  mark_test_run 2307;
  let test = (fun #{ a308 = a3081; b308 = b3081 } #{ a308 = a3082; b308 = b3082 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) a3081 a3082 && (fun a b -> Int.equal a b) b3081 b3082) actual expected in
  if not test then failwithf "test 2307 failed";
  (* Paths of depth 2 *)
  (* .a309.#a308 *)
  let actual = r.a309.#a308 in
  let expected = #{ a42 = 0.; b42 = 1. } in
  mark_test_run 2308;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) actual expected in
  if not test then failwithf "test 2308 failed";
  (* .a309.#b308 *)
  let actual = r.a309.#b308 in
  let expected = 2 in
  mark_test_run 2309;
  let test = (fun a b -> Int.equal a b) actual expected in
  if not test then failwithf "test 2309 failed";
  (* Paths of depth 3 *)
  (* .a309.#a308.#a42 *)
  let actual = r.a309.#a308.#a42 in
  let expected = 0. in
  mark_test_run 2310;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2310 failed";
  (* .a309.#a308.#b42 *)
  let actual = r.a309.#a308.#b42 in
  let expected = 1. in
  mark_test_run 2311;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2311 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a309 = a3091 } { a309 = a3092 } -> (fun #{ a308 = a3081; b308 = b3081 } #{ a308 = a3082; b308 = b3082 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) a3081 a3082 && (fun a b -> Int.equal a b) b3081 b3082) a3091 a3092) in
  let next_r = { a309 = #{ a308 = #{ a42 = 100.; b42 = 101. }; b308 = 102 } } in
  let r_expected = { a309 = #{ a308 = #{ a42 = 0.; b42 = 1. }; b308 = 2 } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a309 *)
  r.a309 <- next_r.a309;
  let r_expected = { r_expected with a309 = next_r.a309 } in
  mark_test_run 2312;
  let test = eq r r_expected in
  if not test then failwithf "test 2312 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a309 = #{ a308 = #{ a42; b42 }; b308 } } = r in
  let expected_b308 = 102 in
  mark_test_run 2313;
  let test = (fun a b -> Int.equal a b) expected_b308 b308 in
  if not test then failwithf "test 2313 failed";
  let expected_a42 = 100. in
  mark_test_run 2314;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a42 a42 in
  if not test then failwithf "test 2314 failed";
  let expected_b42 = 101. in
  mark_test_run 2315;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b42 b42 in
  if not test then failwithf "test 2315 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a309 } = r in
  let expected_a309 = #{ a308 = #{ a42 = 100.; b42 = 101. }; b308 = 102 } in
  mark_test_run 2316;
  let test = (fun #{ a308 = a3081; b308 = b3081 } #{ a308 = a3082; b308 = b3082 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) a3081 a3082 && (fun a b -> Int.equal a b) b3081 b3082) expected_a309 a309 in
  if not test then failwithf "test 2316 failed";

  (************************************************)
  (*   t311 = { #{ #{ float; float }; float } }   *)
  (************************************************)
  let r = { a311 = #{ a310 = #{ a42 = 0.; b42 = 1. }; b310 = 2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a311 *)
  let actual = r.a311 in
  let expected = #{ a310 = #{ a42 = 0.; b42 = 1. }; b310 = 2. } in
  mark_test_run 2317;
  let test = (fun #{ a310 = a3101; b310 = b3101 } #{ a310 = a3102; b310 = b3102 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) a3101 a3102 && (fun a b -> Float.equal (globalize a) (globalize b)) b3101 b3102) actual expected in
  if not test then failwithf "test 2317 failed";
  (* Paths of depth 2 *)
  (* .a311.#a310 *)
  let actual = r.a311.#a310 in
  let expected = #{ a42 = 0.; b42 = 1. } in
  mark_test_run 2318;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) actual expected in
  if not test then failwithf "test 2318 failed";
  (* .a311.#b310 *)
  let actual = r.a311.#b310 in
  let expected = 2. in
  mark_test_run 2319;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2319 failed";
  (* Paths of depth 3 *)
  (* .a311.#a310.#a42 *)
  let actual = r.a311.#a310.#a42 in
  let expected = 0. in
  mark_test_run 2320;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2320 failed";
  (* .a311.#a310.#b42 *)
  let actual = r.a311.#a310.#b42 in
  let expected = 1. in
  mark_test_run 2321;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2321 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a311 = a3111 } { a311 = a3112 } -> (fun #{ a310 = a3101; b310 = b3101 } #{ a310 = a3102; b310 = b3102 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) a3101 a3102 && (fun a b -> Float.equal (globalize a) (globalize b)) b3101 b3102) a3111 a3112) in
  let next_r = { a311 = #{ a310 = #{ a42 = 100.; b42 = 101. }; b310 = 102. } } in
  let r_expected = { a311 = #{ a310 = #{ a42 = 0.; b42 = 1. }; b310 = 2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a311 *)
  r.a311 <- next_r.a311;
  let r_expected = { r_expected with a311 = next_r.a311 } in
  mark_test_run 2322;
  let test = eq r r_expected in
  if not test then failwithf "test 2322 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a311 = #{ a310 = #{ a42; b42 }; b310 } } = r in
  let expected_b310 = 102. in
  mark_test_run 2323;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b310 b310 in
  if not test then failwithf "test 2323 failed";
  let expected_a42 = 100. in
  mark_test_run 2324;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a42 a42 in
  if not test then failwithf "test 2324 failed";
  let expected_b42 = 101. in
  mark_test_run 2325;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b42 b42 in
  if not test then failwithf "test 2325 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a311 } = r in
  let expected_a311 = #{ a310 = #{ a42 = 100.; b42 = 101. }; b310 = 102. } in
  mark_test_run 2326;
  let test = (fun #{ a310 = a3101; b310 = b3101 } #{ a310 = a3102; b310 = b3102 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) a3101 a3102 && (fun a b -> Float.equal (globalize a) (globalize b)) b3101 b3102) expected_a311 a311 in
  if not test then failwithf "test 2326 failed";

  (*************************************************)
  (*   t313 = { #{ #{ float; float }; float# } }   *)
  (*************************************************)
  let r = { a313 = #{ a312 = #{ a42 = 0.; b42 = 1. }; b312 = #2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a313 *)
  let actual = r.a313 in
  let expected = #{ a312 = #{ a42 = 0.; b42 = 1. }; b312 = #2. } in
  mark_test_run 2327;
  let test = (fun #{ a312 = a3121; b312 = b3121 } #{ a312 = a3122; b312 = b3122 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) a3121 a3122 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b3121 b3122) actual expected in
  if not test then failwithf "test 2327 failed";
  (* Paths of depth 2 *)
  (* .a313.#a312 *)
  let actual = r.a313.#a312 in
  let expected = #{ a42 = 0.; b42 = 1. } in
  mark_test_run 2328;
  let test = (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) actual expected in
  if not test then failwithf "test 2328 failed";
  (* .a313.#b312 *)
  let actual = r.a313.#b312 in
  let expected = #2. in
  mark_test_run 2329;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2329 failed";
  (* Paths of depth 3 *)
  (* .a313.#a312.#a42 *)
  let actual = r.a313.#a312.#a42 in
  let expected = 0. in
  mark_test_run 2330;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2330 failed";
  (* .a313.#a312.#b42 *)
  let actual = r.a313.#a312.#b42 in
  let expected = 1. in
  mark_test_run 2331;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2331 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a313 = a3131 } { a313 = a3132 } -> (fun #{ a312 = a3121; b312 = b3121 } #{ a312 = a3122; b312 = b3122 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) a3121 a3122 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b3121 b3122) a3131 a3132) in
  let next_r = { a313 = #{ a312 = #{ a42 = 100.; b42 = 101. }; b312 = #102. } } in
  let r_expected = { a313 = #{ a312 = #{ a42 = 0.; b42 = 1. }; b312 = #2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a313 *)
  r.a313 <- next_r.a313;
  let r_expected = { r_expected with a313 = next_r.a313 } in
  mark_test_run 2332;
  let test = eq r r_expected in
  if not test then failwithf "test 2332 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a313 = #{ a312 = #{ a42; b42 }; b312 } } = r in
  let expected_b312 = #102. in
  mark_test_run 2333;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b312 b312 in
  if not test then failwithf "test 2333 failed";
  let expected_a42 = 100. in
  mark_test_run 2334;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a42 a42 in
  if not test then failwithf "test 2334 failed";
  let expected_b42 = 101. in
  mark_test_run 2335;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b42 b42 in
  if not test then failwithf "test 2335 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a313 } = r in
  let expected_a313 = #{ a312 = #{ a42 = 100.; b42 = 101. }; b312 = #102. } in
  mark_test_run 2336;
  let test = (fun #{ a312 = a3121; b312 = b3121 } #{ a312 = a3122; b312 = b3122 } -> (fun #{ a42 = a421; b42 = b421 } #{ a42 = a422; b42 = b422 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a421 a422 && (fun a b -> Float.equal (globalize a) (globalize b)) b421 b422) a3121 a3122 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b3121 b3122) expected_a313 a313 in
  if not test then failwithf "test 2336 failed";

  (*************************************************)
  (*   t315 = { #{ #{ float; float# }; float } }   *)
  (*************************************************)
  let r = { a315 = #{ a314 = #{ a131 = 0.; b131 = #1. }; b314 = 2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a315 *)
  let actual = r.a315 in
  let expected = #{ a314 = #{ a131 = 0.; b131 = #1. }; b314 = 2. } in
  mark_test_run 2337;
  let test = (fun #{ a314 = a3141; b314 = b3141 } #{ a314 = a3142; b314 = b3142 } -> (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) a3141 a3142 && (fun a b -> Float.equal (globalize a) (globalize b)) b3141 b3142) actual expected in
  if not test then failwithf "test 2337 failed";
  (* Paths of depth 2 *)
  (* .a315.#a314 *)
  let actual = r.a315.#a314 in
  let expected = #{ a131 = 0.; b131 = #1. } in
  mark_test_run 2338;
  let test = (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) actual expected in
  if not test then failwithf "test 2338 failed";
  (* .a315.#b314 *)
  let actual = r.a315.#b314 in
  let expected = 2. in
  mark_test_run 2339;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2339 failed";
  (* Paths of depth 3 *)
  (* .a315.#a314.#a131 *)
  let actual = r.a315.#a314.#a131 in
  let expected = 0. in
  mark_test_run 2340;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2340 failed";
  (* .a315.#a314.#b131 *)
  let actual = r.a315.#a314.#b131 in
  let expected = #1. in
  mark_test_run 2341;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2341 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a315 = a3151 } { a315 = a3152 } -> (fun #{ a314 = a3141; b314 = b3141 } #{ a314 = a3142; b314 = b3142 } -> (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) a3141 a3142 && (fun a b -> Float.equal (globalize a) (globalize b)) b3141 b3142) a3151 a3152) in
  let next_r = { a315 = #{ a314 = #{ a131 = 100.; b131 = #101. }; b314 = 102. } } in
  let r_expected = { a315 = #{ a314 = #{ a131 = 0.; b131 = #1. }; b314 = 2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a315 *)
  r.a315 <- next_r.a315;
  let r_expected = { r_expected with a315 = next_r.a315 } in
  mark_test_run 2342;
  let test = eq r r_expected in
  if not test then failwithf "test 2342 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a315 = #{ a314 = #{ a131; b131 }; b314 } } = r in
  let expected_b314 = 102. in
  mark_test_run 2343;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b314 b314 in
  if not test then failwithf "test 2343 failed";
  let expected_a131 = 100. in
  mark_test_run 2344;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a131 a131 in
  if not test then failwithf "test 2344 failed";
  let expected_b131 = #101. in
  mark_test_run 2345;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b131 b131 in
  if not test then failwithf "test 2345 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a315 } = r in
  let expected_a315 = #{ a314 = #{ a131 = 100.; b131 = #101. }; b314 = 102. } in
  mark_test_run 2346;
  let test = (fun #{ a314 = a3141; b314 = b3141 } #{ a314 = a3142; b314 = b3142 } -> (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) a3141 a3142 && (fun a b -> Float.equal (globalize a) (globalize b)) b3141 b3142) expected_a315 a315 in
  if not test then failwithf "test 2346 failed";

  (**************************************************)
  (*   t317 = { #{ #{ float; float# }; float# } }   *)
  (**************************************************)
  let r = { a317 = #{ a316 = #{ a131 = 0.; b131 = #1. }; b316 = #2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a317 *)
  let actual = r.a317 in
  let expected = #{ a316 = #{ a131 = 0.; b131 = #1. }; b316 = #2. } in
  mark_test_run 2347;
  let test = (fun #{ a316 = a3161; b316 = b3161 } #{ a316 = a3162; b316 = b3162 } -> (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) a3161 a3162 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b3161 b3162) actual expected in
  if not test then failwithf "test 2347 failed";
  (* Paths of depth 2 *)
  (* .a317.#a316 *)
  let actual = r.a317.#a316 in
  let expected = #{ a131 = 0.; b131 = #1. } in
  mark_test_run 2348;
  let test = (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) actual expected in
  if not test then failwithf "test 2348 failed";
  (* .a317.#b316 *)
  let actual = r.a317.#b316 in
  let expected = #2. in
  mark_test_run 2349;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2349 failed";
  (* Paths of depth 3 *)
  (* .a317.#a316.#a131 *)
  let actual = r.a317.#a316.#a131 in
  let expected = 0. in
  mark_test_run 2350;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2350 failed";
  (* .a317.#a316.#b131 *)
  let actual = r.a317.#a316.#b131 in
  let expected = #1. in
  mark_test_run 2351;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2351 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a317 = a3171 } { a317 = a3172 } -> (fun #{ a316 = a3161; b316 = b3161 } #{ a316 = a3162; b316 = b3162 } -> (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) a3161 a3162 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b3161 b3162) a3171 a3172) in
  let next_r = { a317 = #{ a316 = #{ a131 = 100.; b131 = #101. }; b316 = #102. } } in
  let r_expected = { a317 = #{ a316 = #{ a131 = 0.; b131 = #1. }; b316 = #2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a317 *)
  r.a317 <- next_r.a317;
  let r_expected = { r_expected with a317 = next_r.a317 } in
  mark_test_run 2352;
  let test = eq r r_expected in
  if not test then failwithf "test 2352 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a317 = #{ a316 = #{ a131; b131 }; b316 } } = r in
  let expected_b316 = #102. in
  mark_test_run 2353;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b316 b316 in
  if not test then failwithf "test 2353 failed";
  let expected_a131 = 100. in
  mark_test_run 2354;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_a131 a131 in
  if not test then failwithf "test 2354 failed";
  let expected_b131 = #101. in
  mark_test_run 2355;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b131 b131 in
  if not test then failwithf "test 2355 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a317 } = r in
  let expected_a317 = #{ a316 = #{ a131 = 100.; b131 = #101. }; b316 = #102. } in
  mark_test_run 2356;
  let test = (fun #{ a316 = a3161; b316 = b3161 } #{ a316 = a3162; b316 = b3162 } -> (fun #{ a131 = a1311; b131 = b1311 } #{ a131 = a1312; b131 = b1312 } -> (fun a b -> Float.equal (globalize a) (globalize b)) a1311 a1312 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1311 b1312) a3161 a3162 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b3161 b3162) expected_a317 a317 in
  if not test then failwithf "test 2356 failed";

  (*************************************************)
  (*   t319 = { #{ #{ float#; float }; float } }   *)
  (*************************************************)
  let r = { a319 = #{ a318 = #{ a139 = #0.; b139 = 1. }; b318 = 2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a319 *)
  let actual = r.a319 in
  let expected = #{ a318 = #{ a139 = #0.; b139 = 1. }; b318 = 2. } in
  mark_test_run 2357;
  let test = (fun #{ a318 = a3181; b318 = b3181 } #{ a318 = a3182; b318 = b3182 } -> (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) a3181 a3182 && (fun a b -> Float.equal (globalize a) (globalize b)) b3181 b3182) actual expected in
  if not test then failwithf "test 2357 failed";
  (* Paths of depth 2 *)
  (* .a319.#a318 *)
  let actual = r.a319.#a318 in
  let expected = #{ a139 = #0.; b139 = 1. } in
  mark_test_run 2358;
  let test = (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) actual expected in
  if not test then failwithf "test 2358 failed";
  (* .a319.#b318 *)
  let actual = r.a319.#b318 in
  let expected = 2. in
  mark_test_run 2359;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2359 failed";
  (* Paths of depth 3 *)
  (* .a319.#a318.#a139 *)
  let actual = r.a319.#a318.#a139 in
  let expected = #0. in
  mark_test_run 2360;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2360 failed";
  (* .a319.#a318.#b139 *)
  let actual = r.a319.#a318.#b139 in
  let expected = 1. in
  mark_test_run 2361;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2361 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a319 = a3191 } { a319 = a3192 } -> (fun #{ a318 = a3181; b318 = b3181 } #{ a318 = a3182; b318 = b3182 } -> (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) a3181 a3182 && (fun a b -> Float.equal (globalize a) (globalize b)) b3181 b3182) a3191 a3192) in
  let next_r = { a319 = #{ a318 = #{ a139 = #100.; b139 = 101. }; b318 = 102. } } in
  let r_expected = { a319 = #{ a318 = #{ a139 = #0.; b139 = 1. }; b318 = 2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a319 *)
  r.a319 <- next_r.a319;
  let r_expected = { r_expected with a319 = next_r.a319 } in
  mark_test_run 2362;
  let test = eq r r_expected in
  if not test then failwithf "test 2362 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a319 = #{ a318 = #{ a139; b139 }; b318 } } = r in
  let expected_b318 = 102. in
  mark_test_run 2363;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b318 b318 in
  if not test then failwithf "test 2363 failed";
  let expected_a139 = #100. in
  mark_test_run 2364;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a139 a139 in
  if not test then failwithf "test 2364 failed";
  let expected_b139 = 101. in
  mark_test_run 2365;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b139 b139 in
  if not test then failwithf "test 2365 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a319 } = r in
  let expected_a319 = #{ a318 = #{ a139 = #100.; b139 = 101. }; b318 = 102. } in
  mark_test_run 2366;
  let test = (fun #{ a318 = a3181; b318 = b3181 } #{ a318 = a3182; b318 = b3182 } -> (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) a3181 a3182 && (fun a b -> Float.equal (globalize a) (globalize b)) b3181 b3182) expected_a319 a319 in
  if not test then failwithf "test 2366 failed";

  (**************************************************)
  (*   t321 = { #{ #{ float#; float }; float# } }   *)
  (**************************************************)
  let r = { a321 = #{ a320 = #{ a139 = #0.; b139 = 1. }; b320 = #2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a321 *)
  let actual = r.a321 in
  let expected = #{ a320 = #{ a139 = #0.; b139 = 1. }; b320 = #2. } in
  mark_test_run 2367;
  let test = (fun #{ a320 = a3201; b320 = b3201 } #{ a320 = a3202; b320 = b3202 } -> (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) a3201 a3202 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b3201 b3202) actual expected in
  if not test then failwithf "test 2367 failed";
  (* Paths of depth 2 *)
  (* .a321.#a320 *)
  let actual = r.a321.#a320 in
  let expected = #{ a139 = #0.; b139 = 1. } in
  mark_test_run 2368;
  let test = (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) actual expected in
  if not test then failwithf "test 2368 failed";
  (* .a321.#b320 *)
  let actual = r.a321.#b320 in
  let expected = #2. in
  mark_test_run 2369;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2369 failed";
  (* Paths of depth 3 *)
  (* .a321.#a320.#a139 *)
  let actual = r.a321.#a320.#a139 in
  let expected = #0. in
  mark_test_run 2370;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2370 failed";
  (* .a321.#a320.#b139 *)
  let actual = r.a321.#a320.#b139 in
  let expected = 1. in
  mark_test_run 2371;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2371 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a321 = a3211 } { a321 = a3212 } -> (fun #{ a320 = a3201; b320 = b3201 } #{ a320 = a3202; b320 = b3202 } -> (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) a3201 a3202 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b3201 b3202) a3211 a3212) in
  let next_r = { a321 = #{ a320 = #{ a139 = #100.; b139 = 101. }; b320 = #102. } } in
  let r_expected = { a321 = #{ a320 = #{ a139 = #0.; b139 = 1. }; b320 = #2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a321 *)
  r.a321 <- next_r.a321;
  let r_expected = { r_expected with a321 = next_r.a321 } in
  mark_test_run 2372;
  let test = eq r r_expected in
  if not test then failwithf "test 2372 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a321 = #{ a320 = #{ a139; b139 }; b320 } } = r in
  let expected_b320 = #102. in
  mark_test_run 2373;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b320 b320 in
  if not test then failwithf "test 2373 failed";
  let expected_a139 = #100. in
  mark_test_run 2374;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a139 a139 in
  if not test then failwithf "test 2374 failed";
  let expected_b139 = 101. in
  mark_test_run 2375;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b139 b139 in
  if not test then failwithf "test 2375 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a321 } = r in
  let expected_a321 = #{ a320 = #{ a139 = #100.; b139 = 101. }; b320 = #102. } in
  mark_test_run 2376;
  let test = (fun #{ a320 = a3201; b320 = b3201 } #{ a320 = a3202; b320 = b3202 } -> (fun #{ a139 = a1391; b139 = b1391 } #{ a139 = a1392; b139 = b1392 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1391 a1392 && (fun a b -> Float.equal (globalize a) (globalize b)) b1391 b1392) a3201 a3202 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b3201 b3202) expected_a321 a321 in
  if not test then failwithf "test 2376 failed";

  (**************************************************)
  (*   t323 = { #{ #{ float#; float# }; float } }   *)
  (**************************************************)
  let r = { a323 = #{ a322 = #{ a141 = #0.; b141 = #1. }; b322 = 2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a323 *)
  let actual = r.a323 in
  let expected = #{ a322 = #{ a141 = #0.; b141 = #1. }; b322 = 2. } in
  mark_test_run 2377;
  let test = (fun #{ a322 = a3221; b322 = b3221 } #{ a322 = a3222; b322 = b3222 } -> (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) a3221 a3222 && (fun a b -> Float.equal (globalize a) (globalize b)) b3221 b3222) actual expected in
  if not test then failwithf "test 2377 failed";
  (* Paths of depth 2 *)
  (* .a323.#a322 *)
  let actual = r.a323.#a322 in
  let expected = #{ a141 = #0.; b141 = #1. } in
  mark_test_run 2378;
  let test = (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) actual expected in
  if not test then failwithf "test 2378 failed";
  (* .a323.#b322 *)
  let actual = r.a323.#b322 in
  let expected = 2. in
  mark_test_run 2379;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) actual expected in
  if not test then failwithf "test 2379 failed";
  (* Paths of depth 3 *)
  (* .a323.#a322.#a141 *)
  let actual = r.a323.#a322.#a141 in
  let expected = #0. in
  mark_test_run 2380;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2380 failed";
  (* .a323.#a322.#b141 *)
  let actual = r.a323.#a322.#b141 in
  let expected = #1. in
  mark_test_run 2381;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2381 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a323 = a3231 } { a323 = a3232 } -> (fun #{ a322 = a3221; b322 = b3221 } #{ a322 = a3222; b322 = b3222 } -> (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) a3221 a3222 && (fun a b -> Float.equal (globalize a) (globalize b)) b3221 b3222) a3231 a3232) in
  let next_r = { a323 = #{ a322 = #{ a141 = #100.; b141 = #101. }; b322 = 102. } } in
  let r_expected = { a323 = #{ a322 = #{ a141 = #0.; b141 = #1. }; b322 = 2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a323 *)
  r.a323 <- next_r.a323;
  let r_expected = { r_expected with a323 = next_r.a323 } in
  mark_test_run 2382;
  let test = eq r r_expected in
  if not test then failwithf "test 2382 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a323 = #{ a322 = #{ a141; b141 }; b322 } } = r in
  let expected_b322 = 102. in
  mark_test_run 2383;
  let test = (fun a b -> Float.equal (globalize a) (globalize b)) expected_b322 b322 in
  if not test then failwithf "test 2383 failed";
  let expected_a141 = #100. in
  mark_test_run 2384;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a141 a141 in
  if not test then failwithf "test 2384 failed";
  let expected_b141 = #101. in
  mark_test_run 2385;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b141 b141 in
  if not test then failwithf "test 2385 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a323 } = r in
  let expected_a323 = #{ a322 = #{ a141 = #100.; b141 = #101. }; b322 = 102. } in
  mark_test_run 2386;
  let test = (fun #{ a322 = a3221; b322 = b3221 } #{ a322 = a3222; b322 = b3222 } -> (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) a3221 a3222 && (fun a b -> Float.equal (globalize a) (globalize b)) b3221 b3222) expected_a323 a323 in
  if not test then failwithf "test 2386 failed";

  (***************************************************)
  (*   t325 = { #{ #{ float#; float# }; float# } }   *)
  (***************************************************)
  let r = { a325 = #{ a324 = #{ a141 = #0.; b141 = #1. }; b324 = #2. } } in
  ref_to_force_heap_allocation := P r;
  (* 1. Test field get *)
  (* Paths of depth 1 *)
  (* .a325 *)
  let actual = r.a325 in
  let expected = #{ a324 = #{ a141 = #0.; b141 = #1. }; b324 = #2. } in
  mark_test_run 2387;
  let test = (fun #{ a324 = a3241; b324 = b3241 } #{ a324 = a3242; b324 = b3242 } -> (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) a3241 a3242 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b3241 b3242) actual expected in
  if not test then failwithf "test 2387 failed";
  (* Paths of depth 2 *)
  (* .a325.#a324 *)
  let actual = r.a325.#a324 in
  let expected = #{ a141 = #0.; b141 = #1. } in
  mark_test_run 2388;
  let test = (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) actual expected in
  if not test then failwithf "test 2388 failed";
  (* .a325.#b324 *)
  let actual = r.a325.#b324 in
  let expected = #2. in
  mark_test_run 2389;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2389 failed";
  (* Paths of depth 3 *)
  (* .a325.#a324.#a141 *)
  let actual = r.a325.#a324.#a141 in
  let expected = #0. in
  mark_test_run 2390;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2390 failed";
  (* .a325.#a324.#b141 *)
  let actual = r.a325.#a324.#b141 in
  let expected = #1. in
  mark_test_run 2391;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) actual expected in
  if not test then failwithf "test 2391 failed";
  Gc.compact ();
  (* 2. Test field set *)
  (* Change [r] to [next_r] one field at a time *)
  let eq = (fun { a325 = a3251 } { a325 = a3252 } -> (fun #{ a324 = a3241; b324 = b3241 } #{ a324 = a3242; b324 = b3242 } -> (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) a3241 a3242 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b3241 b3242) a3251 a3252) in
  let next_r = { a325 = #{ a324 = #{ a141 = #100.; b141 = #101. }; b324 = #102. } } in
  let r_expected = { a325 = #{ a324 = #{ a141 = #0.; b141 = #1. }; b324 = #2. } } in
  ref_to_force_heap_allocation := P next_r;
  ref_to_force_heap_allocation := P r_expected;
  (* .a325 *)
  r.a325 <- next_r.a325;
  let r_expected = { r_expected with a325 = next_r.a325 } in
  mark_test_run 2392;
  let test = eq r r_expected in
  if not test then failwithf "test 2392 failed";
  Gc.compact ();
  (* 3. Test deep matching *)
  let { a325 = #{ a324 = #{ a141; b141 }; b324 } } = r in
  let expected_b324 = #102. in
  mark_test_run 2393;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b324 b324 in
  if not test then failwithf "test 2393 failed";
  let expected_a141 = #100. in
  mark_test_run 2394;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_a141 a141 in
  if not test then failwithf "test 2394 failed";
  let expected_b141 = #101. in
  mark_test_run 2395;
  let test = (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) expected_b141 b141 in
  if not test then failwithf "test 2395 failed";
  Gc.compact ();
  (* 4. Test shallow matching *)
  let { a325 } = r in
  let expected_a325 = #{ a324 = #{ a141 = #100.; b141 = #101. }; b324 = #102. } in
  mark_test_run 2396;
  let test = (fun #{ a324 = a3241; b324 = b3241 } #{ a324 = a3242; b324 = b3242 } -> (fun #{ a141 = a1411; b141 = b1411 } #{ a141 = a1412; b141 = b1412 } -> (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) a1411 a1412 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b1411 b1412) a3241 a3242 && (fun a b -> Float_u.(equal (add #0. a) (add #0. b))) b3241 b3242) expected_a325 a325 in
  if not test then failwithf "test 2396 failed";

  ()
;;

for i = 1 to 2396 do
  if not (Int_set.mem i !tests_run) then failwithf "test %d not run" i
done;;
let () = Printf.printf "All tests passed.%!\n";;
