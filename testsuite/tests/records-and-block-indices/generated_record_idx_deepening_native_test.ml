(* TEST
 include stdlib_stable;
 include stdlib_upstream_compatible;
 modules = "stubs.c";
 flags = "-extension simd_beta -extension layouts_alpha";
 flambda2;
 stack-allocation;
 native;
*)
(** This is code generated by [test_generation.ml]. *)

[@@@warning "-23"]
external globalize : local_ 'a -> 'a = "%obj_dup";;
external box_int64x2 : int64x2# -> int64x2 = "%box_vec128"
external unbox_int64x2 : int64x2 -> int64x2# = "%unbox_vec128"
external interleave_low_64 : int64x2# -> int64x2# -> int64x2# = "caml_vec128_unreachable" "caml_simd_vec128_interleave_low_64" [@@unboxed] [@@builtin]
external interleave_high_64 : int64x2# -> int64x2# -> int64x2# = "caml_vec128_unreachable" "caml_simd_vec128_interleave_high_64" [@@unboxed] [@@builtin]
external int64x2_of_int64 : int64 -> int64x2# = "caml_vec128_unreachable" "caml_int64x2_low_of_int64" [@@unboxed] [@@builtin]
external int64_of_int64x2 : int64x2# -> int64 = "caml_vec128_unreachable" "caml_int64x2_low_to_int64" [@@unboxed] [@@builtin]

let int64x2_u_equal i1 i2 =
    let a1 = int64_of_int64x2 i1 in
    let b1 = int64_of_int64x2 (interleave_high_64 i1 i1) in
    let a2 = int64_of_int64x2 i2 in
    let b2 = int64_of_int64x2 (interleave_high_64 i2 i2) in
    Int64.equal a1 a2 && Int64.equal b1 b2

open Stdlib_upstream_compatible
open Stdlib_stable

external[@layout_poly] makearray_dynamic_local :
  ('a : any_non_null) . int -> 'a -> 'a array @ local =
  "%makearray_dynamic"

external[@layout_poly] makearray_dynamic :
  ('a : any_non_null) . int -> 'a -> 'a array =
  "%makearray_dynamic"

external[@layout_poly] get :
  ('a : any_non_null) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a =
  "%array_safe_get"

external[@layout_poly] set :
  ('a : any_non_null) . ('a array[@local_opt]) -> (int[@local_opt]) -> 'a -> unit =
  "%array_safe_set"

external[@layout_poly] get_idx_imm :
  'a ('b : any). ('a [@local_opt]) -> ('a, 'b) idx_imm -> ('b [@local_opt]) =
  "%unsafe_get_idx_imm"

external[@layout_poly] get_idx_mut :
  'a ('b : any). ('a [@local_opt]) -> ('a, 'b) idx_mut -> ('b [@local_opt]) =
  "%unsafe_get_idx"

external[@layout_poly] set_idx_mut :
  'a ('b : any).
    ('a [@local_opt]) -> ('a, 'b) idx_mut -> ('b [@local_opt]) -> unit =
  "%unsafe_set_idx"

module Idx_repr : sig
  type t
  val of_idx_imm : 'a ('b : any). ('a, 'b) idx_imm -> t
  val of_idx_mut : 'a ('b : any). ('a, 'b) idx_mut -> t
  val equal : t -> t -> bool
  val debug_string : t -> string
end = struct
  (* See Note [Representation of block indices] in [lambda/translcore.ml] *)
  type t =
    | Bytecode of { path : int list }
    | Native of { offset : int; gap : int }

  external magic_box_bits64 : ('a : bits64) 'b . 'a -> 'b =
    "%box_int64"
  external lessthan_if_bytecode : int -> int -> bool =
    "caml_lessthan" "caml_greaterthan"

  let of_idx idx =
    let is_bytecode = lessthan_if_bytecode 0 1 in
    if is_bytecode then
      let r = Obj.repr (magic_box_bits64 idx) in
      let nth_idx n : int = Obj.magic (Obj.field r n) in
      let path = List.init (Obj.size r) nth_idx in
      Bytecode { path }
    else
      let i : int64 = magic_box_bits64 idx in
      let offset =
        Int64.(logand (sub (shift_left one 48) one)) i
        |> Int64.to_int
      in
      let gap =
        Int64.shift_right i 48
        |> Int64.to_int
      in
      Native { offset; gap }

  let of_idx_imm = of_idx
  let of_idx_mut = of_idx

  let equal t1 t2 =
    match t1, t2 with
    | Bytecode { path = path1 }, Bytecode { path = path2 } ->
      List.equal Int.equal path1 path2
    | Native { gap = gap1; offset = offset1 },
      Native { gap = gap2; offset = offset2 } ->
      Int.equal gap1 gap2 && Int.equal offset1 offset2
    | Bytecode _, Native _ | Native _, Bytecode _ -> assert false

  let debug_string = function
    | Bytecode { path } ->
      Printf.sprintf "{ %s }"
        (String.concat "; " (List.map Int.to_string path))
    | Native { offset; gap } ->
      Printf.sprintf "offset %d; gap %d" offset gap
end

let failwithf fmt = Printf.ksprintf failwith fmt

(* Redefine iter to infer locality *)
let rec iter ~f = function
    [] -> ()
  | a::l -> f a; iter ~f l

module Int_set = Set.Make(Int)

let tests_run = ref Int_set.empty

let mark_test_run test_id =
  tests_run := Int_set.add test_id !tests_run

(* Various interesting values *)

let sizes = [ 0; 1; 2; 30 ]

let indices_in_deepening_tests = [0; 100_000]


type t0 = { mutable a0 : int }
type t1 = { mutable a1 : int; mutable b1 : int }
type t2 = { mutable a2 : int; mutable b2 : int; mutable c2 : int }
type t3 = { mutable a3 : int; mutable b3 : int; mutable c3 : int32# }
type t4 = { mutable a4 : int; mutable b4 : int; mutable c4 : float }
type t5 = { mutable a5 : int; mutable b5 : int; mutable c5 : int64x2# }
type t6 = { mutable a6 : int; mutable b6 : int64 }
type t7 = { mutable a7 : int; mutable b7 : int64# }
type t8 = { mutable a8 : int; mutable b8 : int32# }
type t9 = { mutable a9 : int; mutable b9 : int32#; mutable c9 : int }
type t10 = { mutable a10 : int; mutable b10 : int32#; mutable c10 : int32# }
type t11 = { mutable a11 : int; mutable b11 : nativeint# }
type t12 = { mutable a12 : int; mutable b12 : float }
type t13 = { mutable a13 : int; mutable b13 : float; mutable c13 : int }
type t14 = { mutable a14 : int; mutable b14 : float; mutable c14 : float }
type t15 = { mutable a15 : int; mutable b15 : int64x2# }
type t16 = { mutable a16 : int; mutable b16 : int64x2#; mutable c16 : int }
type t17 = { mutable a17 : int; mutable b17 : int64x2#; mutable c17 : int64x2# }
type t18 = #{ a18 : int }
type t19 = { mutable a19 : int; mutable b19 : t18 }
type t20 = #{ a20 : int; b20 : int }
type t21 = { mutable a21 : int; mutable b21 : t20 }
type t22 = #{ a22 : int; b22 : int32# }
type t23 = { mutable a23 : int; mutable b23 : t22 }
type t24 = #{ a24 : int; b24 : float }
type t25 = { mutable a25 : int; mutable b25 : t24 }
type t26 = #{ a26 : int; b26 : int64x2# }
type t27 = { mutable a27 : int; mutable b27 : t26 }
type t28 = #{ a28 : int32# }
type t29 = { mutable a29 : int; mutable b29 : t28 }
type t30 = #{ a30 : int32#; b30 : int }
type t31 = { mutable a31 : int; mutable b31 : t30 }
type t32 = #{ a32 : int32#; b32 : int32# }
type t33 = { mutable a33 : int; mutable b33 : t32 }
type t34 = #{ a34 : float }
type t35 = { mutable a35 : int; mutable b35 : t34 }
type t36 = #{ a36 : float; b36 : int }
type t37 = { mutable a37 : int; mutable b37 : t36 }
type t38 = #{ a38 : float; b38 : float }
type t39 = { mutable a39 : int; mutable b39 : t38 }
type t40 = #{ a40 : int64x2# }
type t41 = { mutable a41 : int; mutable b41 : t40 }
type t42 = #{ a42 : int64x2#; b42 : int }
type t43 = { mutable a43 : int; mutable b43 : t42 }
type t44 = #{ a44 : int64x2#; b44 : int64x2# }
type t45 = { mutable a45 : int; mutable b45 : t44 }
type t46 = { mutable a46 : int64 }
type t47 = { mutable a47 : int64; mutable b47 : int }
type t48 = { mutable a48 : int64; mutable b48 : int64 }
type t49 = { mutable a49 : int64; mutable b49 : int64# }
type t50 = { mutable a50 : int64; mutable b50 : int32# }
type t51 = { mutable a51 : int64; mutable b51 : nativeint# }
type t52 = { mutable a52 : int64; mutable b52 : float }
type t53 = { mutable a53 : int64# }
type t54 = { mutable a54 : int64#; mutable b54 : int }
type t55 = { mutable a55 : int64#; mutable b55 : int64 }
type t56 = { mutable a56 : int64#; mutable b56 : int64# }
type t57 = { mutable a57 : int64#; mutable b57 : int32# }
type t58 = { mutable a58 : int64#; mutable b58 : nativeint# }
type t59 = { mutable a59 : int64#; mutable b59 : float }
type t60 = { mutable a60 : int32# }
type t61 = { mutable a61 : int32#; mutable b61 : int }
type t62 = { mutable a62 : int32#; mutable b62 : int; mutable c62 : int }
type t63 = { mutable a63 : int32#; mutable b63 : int; mutable c63 : int32# }
type t64 = { mutable a64 : int32#; mutable b64 : int64 }
type t65 = { mutable a65 : int32#; mutable b65 : int64# }
type t66 = { mutable a66 : int32#; mutable b66 : int32# }
type t67 = { mutable a67 : int32#; mutable b67 : int32#; mutable c67 : int }
type t68 = { mutable a68 : int32#; mutable b68 : int32#; mutable c68 : int32# }
type t69 = { mutable a69 : int32#; mutable b69 : nativeint# }
type t70 = { mutable a70 : int32#; mutable b70 : float }
type t71 = { mutable a71 : int32#; mutable b71 : t18 }
type t72 = { mutable a72 : int32#; mutable b72 : t20 }
type t73 = { mutable a73 : int32#; mutable b73 : t22 }
type t74 = { mutable a74 : int32#; mutable b74 : t28 }
type t75 = { mutable a75 : int32#; mutable b75 : t30 }
type t76 = { mutable a76 : int32#; mutable b76 : t32 }
type t77 = { mutable a77 : nativeint# }
type t78 = { mutable a78 : nativeint#; mutable b78 : int }
type t79 = { mutable a79 : nativeint#; mutable b79 : int64 }
type t80 = { mutable a80 : nativeint#; mutable b80 : int64# }
type t81 = { mutable a81 : nativeint#; mutable b81 : int32# }
type t82 = { mutable a82 : nativeint#; mutable b82 : nativeint# }
type t83 = { mutable a83 : nativeint#; mutable b83 : float }
type t84 = { mutable a84 : float }
type t85 = { mutable a85 : float; mutable b85 : int }
type t86 = { mutable a86 : float; mutable b86 : int; mutable c86 : int }
type t87 = { mutable a87 : float; mutable b87 : int; mutable c87 : float }
type t88 = { mutable a88 : float; mutable b88 : int64 }
type t89 = { mutable a89 : float; mutable b89 : int64# }
type t90 = { mutable a90 : float; mutable b90 : int32# }
type t91 = { mutable a91 : float; mutable b91 : nativeint# }
type t92 = { mutable a92 : float; mutable b92 : float }
type t93 = { mutable a93 : float; mutable b93 : float; mutable c93 : int }
type t94 = { mutable a94 : float; mutable b94 : float; mutable c94 : float }
type t95 = { mutable a95 : float; mutable b95 : t18 }
type t96 = { mutable a96 : float; mutable b96 : t20 }
type t97 = { mutable a97 : float; mutable b97 : t24 }
type t98 = { mutable a98 : float; mutable b98 : t34 }
type t99 = { mutable a99 : float; mutable b99 : t36 }
type t100 = { mutable a100 : float; mutable b100 : t38 }
type t101 = { mutable a101 : int64x2# }
type t102 = { mutable a102 : int64x2#; mutable b102 : int }
type t103 = { mutable a103 : int64x2#; mutable b103 : int; mutable c103 : int }
type t104 = { mutable a104 : int64x2#; mutable b104 : int; mutable c104 : int64x2# }
type t105 = { mutable a105 : int64x2#; mutable b105 : int64x2# }
type t106 = { mutable a106 : int64x2#; mutable b106 : int64x2#; mutable c106 : int }
type t107 = { mutable a107 : int64x2#; mutable b107 : int64x2#; mutable c107 : int64x2# }
type t108 = { mutable a108 : int64x2#; mutable b108 : t18 }
type t109 = { mutable a109 : int64x2#; mutable b109 : t20 }
type t110 = { mutable a110 : int64x2#; mutable b110 : t26 }
type t111 = #{ a111 : string; b111 : float# }
type t112 = { mutable a112 : int64x2#; mutable b112 : t111 }
type t113 = { mutable a113 : int64x2#; mutable b113 : t40 }
type t114 = { mutable a114 : int64x2#; mutable b114 : t42 }
type t115 = { mutable a115 : int64x2#; mutable b115 : t44 }
type t116 = { mutable a116 : t18 }
type t117 = { mutable a117 : t18; mutable b117 : int }
type t118 = { mutable a118 : t18; mutable b118 : int32# }
type t119 = { mutable a119 : t18; mutable b119 : float }
type t120 = { mutable a120 : t18; mutable b120 : int64x2# }
type t121 = { mutable a121 : t20 }
type t122 = { mutable a122 : t20; mutable b122 : int }
type t123 = { mutable a123 : t20; mutable b123 : int32# }
type t124 = { mutable a124 : t20; mutable b124 : float }
type t125 = { mutable a125 : t20; mutable b125 : int64x2# }
type t126 = { mutable a126 : t22 }
type t127 = { mutable a127 : t22; mutable b127 : int }
type t128 = { mutable a128 : t22; mutable b128 : int32# }
type t129 = { mutable a129 : t24 }
type t130 = { mutable a130 : t24; mutable b130 : int }
type t131 = { mutable a131 : t24; mutable b131 : float }
type t132 = { mutable a132 : t26 }
type t133 = { mutable a133 : t26; mutable b133 : int }
type t134 = { mutable a134 : t26; mutable b134 : int64x2# }
type t135 = #{ a135 : int64; b135 : int64# }
type t136 = #{ a136 : int64#; b136 : float# }
type t137 = { mutable a137 : t135; mutable b137 : t136 }
type t138 = #{ a138 : int64; b138 : string }
type t139 = #{ a139 : int64#; b139 : string }
type t140 = { mutable a140 : t138; mutable b140 : t139 }
type t141 = #{ a141 : int64#; b141 : int64 }
type t142 = #{ a142 : int64; b142 : int64 }
type t143 = { mutable a143 : t141; mutable b143 : t142 }
type t144 = #{ a144 : float32#; b144 : float }
type t145 = { mutable a145 : t141; mutable b145 : t144 }
type t146 = { mutable a146 : t28 }
type t147 = { mutable a147 : t28; mutable b147 : int }
type t148 = { mutable a148 : t28; mutable b148 : int32# }
type t149 = { mutable a149 : t30 }
type t150 = { mutable a150 : t30; mutable b150 : int }
type t151 = { mutable a151 : t30; mutable b151 : int32# }
type t152 = { mutable a152 : t32 }
type t153 = { mutable a153 : t32; mutable b153 : int }
type t154 = { mutable a154 : t32; mutable b154 : int32# }
type t155 = { mutable a155 : t34 }
type t156 = { mutable a156 : t34; mutable b156 : int }
type t157 = { mutable a157 : t34; mutable b157 : float }
type t158 = { mutable a158 : t36 }
type t159 = { mutable a159 : t36; mutable b159 : int }
type t160 = { mutable a160 : t36; mutable b160 : float }
type t161 = { mutable a161 : t38 }
type t162 = { mutable a162 : t38; mutable b162 : int }
type t163 = { mutable a163 : t38; mutable b163 : float }
type t164 = #{ a164 : float32#; b164 : int64# }
type t165 = #{ a165 : string; b165 : int64# }
type t166 = { mutable a166 : t164; mutable b166 : t165 }
type t167 = { mutable a167 : t40 }
type t168 = { mutable a168 : t40; mutable b168 : int }
type t169 = { mutable a169 : t40; mutable b169 : int64x2# }
type t170 = { mutable a170 : t42 }
type t171 = { mutable a171 : t42; mutable b171 : int }
type t172 = { mutable a172 : t42; mutable b172 : int64x2# }
type t173 = #{ a173 : int64x2#; b173 : string }
type t174 = #{ a174 : int64; b174 : float# }
type t175 = { mutable a175 : t173; mutable b175 : t174 }
type t176 = { mutable a176 : t44 }
type t177 = { mutable a177 : t44; mutable b177 : int }
type t178 = { mutable a178 : t44; mutable b178 : int64x2# }

let () =
  (********************)
  (*   t0 = { int }   *)
  (********************)
  (*************************)
  (*   t1 = { int; int }   *)
  (*************************)
  (******************************)
  (*   t2 = { int; int; int }   *)
  (******************************)
  (*********************************)
  (*   t3 = { int; int; int32# }   *)
  (*********************************)
  (********************************)
  (*   t4 = { int; int; float }   *)
  (********************************)
  (***********************************)
  (*   t5 = { int; int; int64x2# }   *)
  (***********************************)
  (***************************)
  (*   t6 = { int; int64 }   *)
  (***************************)
  (****************************)
  (*   t7 = { int; int64# }   *)
  (****************************)
  (****************************)
  (*   t8 = { int; int32# }   *)
  (****************************)
  (*********************************)
  (*   t9 = { int; int32#; int }   *)
  (*********************************)
  (*************************************)
  (*   t10 = { int; int32#; int32# }   *)
  (*************************************)
  (*********************************)
  (*   t11 = { int; nativeint# }   *)
  (*********************************)
  (****************************)
  (*   t12 = { int; float }   *)
  (****************************)
  (*********************************)
  (*   t13 = { int; float; int }   *)
  (*********************************)
  (***********************************)
  (*   t14 = { int; float; float }   *)
  (***********************************)
  (*******************************)
  (*   t15 = { int; int64x2# }   *)
  (*******************************)
  (************************************)
  (*   t16 = { int; int64x2#; int }   *)
  (************************************)
  (*****************************************)
  (*   t17 = { int; int64x2#; int64x2# }   *)
  (*****************************************)
  (*******************************)
  (*   t19 = { int; #{ int } }   *)
  (*******************************)
  (************************************)
  (*   t21 = { int; #{ int; int } }   *)
  (************************************)
  (***************************************)
  (*   t23 = { int; #{ int; int32# } }   *)
  (***************************************)
  (**************************************)
  (*   t25 = { int; #{ int; float } }   *)
  (**************************************)
  (*****************************************)
  (*   t27 = { int; #{ int; int64x2# } }   *)
  (*****************************************)
  (**********************************)
  (*   t29 = { int; #{ int32# } }   *)
  (**********************************)
  (***************************************)
  (*   t31 = { int; #{ int32#; int } }   *)
  (***************************************)
  (******************************************)
  (*   t33 = { int; #{ int32#; int32# } }   *)
  (******************************************)
  (*********************************)
  (*   t35 = { int; #{ float } }   *)
  (*********************************)
  (**************************************)
  (*   t37 = { int; #{ float; int } }   *)
  (**************************************)
  (****************************************)
  (*   t39 = { int; #{ float; float } }   *)
  (****************************************)
  (************************************)
  (*   t41 = { int; #{ int64x2# } }   *)
  (************************************)
  (*****************************************)
  (*   t43 = { int; #{ int64x2#; int } }   *)
  (*****************************************)
  (**********************************************)
  (*   t45 = { int; #{ int64x2#; int64x2# } }   *)
  (**********************************************)
  (***********************)
  (*   t46 = { int64 }   *)
  (***********************)
  (****************************)
  (*   t47 = { int64; int }   *)
  (****************************)
  (******************************)
  (*   t48 = { int64; int64 }   *)
  (******************************)
  (*******************************)
  (*   t49 = { int64; int64# }   *)
  (*******************************)
  (*******************************)
  (*   t50 = { int64; int32# }   *)
  (*******************************)
  (***********************************)
  (*   t51 = { int64; nativeint# }   *)
  (***********************************)
  (******************************)
  (*   t52 = { int64; float }   *)
  (******************************)
  (************************)
  (*   t53 = { int64# }   *)
  (************************)
  (*****************************)
  (*   t54 = { int64#; int }   *)
  (*****************************)
  (*******************************)
  (*   t55 = { int64#; int64 }   *)
  (*******************************)
  (********************************)
  (*   t56 = { int64#; int64# }   *)
  (********************************)
  (********************************)
  (*   t57 = { int64#; int32# }   *)
  (********************************)
  (************************************)
  (*   t58 = { int64#; nativeint# }   *)
  (************************************)
  (*******************************)
  (*   t59 = { int64#; float }   *)
  (*******************************)
  (************************)
  (*   t60 = { int32# }   *)
  (************************)
  (*****************************)
  (*   t61 = { int32#; int }   *)
  (*****************************)
  (**********************************)
  (*   t62 = { int32#; int; int }   *)
  (**********************************)
  (*************************************)
  (*   t63 = { int32#; int; int32# }   *)
  (*************************************)
  (*******************************)
  (*   t64 = { int32#; int64 }   *)
  (*******************************)
  (********************************)
  (*   t65 = { int32#; int64# }   *)
  (********************************)
  (********************************)
  (*   t66 = { int32#; int32# }   *)
  (********************************)
  (*************************************)
  (*   t67 = { int32#; int32#; int }   *)
  (*************************************)
  (****************************************)
  (*   t68 = { int32#; int32#; int32# }   *)
  (****************************************)
  (************************************)
  (*   t69 = { int32#; nativeint# }   *)
  (************************************)
  (*******************************)
  (*   t70 = { int32#; float }   *)
  (*******************************)
  (**********************************)
  (*   t71 = { int32#; #{ int } }   *)
  (**********************************)
  (***************************************)
  (*   t72 = { int32#; #{ int; int } }   *)
  (***************************************)
  (******************************************)
  (*   t73 = { int32#; #{ int; int32# } }   *)
  (******************************************)
  (*************************************)
  (*   t74 = { int32#; #{ int32# } }   *)
  (*************************************)
  (******************************************)
  (*   t75 = { int32#; #{ int32#; int } }   *)
  (******************************************)
  (*********************************************)
  (*   t76 = { int32#; #{ int32#; int32# } }   *)
  (*********************************************)
  (****************************)
  (*   t77 = { nativeint# }   *)
  (****************************)
  (*********************************)
  (*   t78 = { nativeint#; int }   *)
  (*********************************)
  (***********************************)
  (*   t79 = { nativeint#; int64 }   *)
  (***********************************)
  (************************************)
  (*   t80 = { nativeint#; int64# }   *)
  (************************************)
  (************************************)
  (*   t81 = { nativeint#; int32# }   *)
  (************************************)
  (****************************************)
  (*   t82 = { nativeint#; nativeint# }   *)
  (****************************************)
  (***********************************)
  (*   t83 = { nativeint#; float }   *)
  (***********************************)
  (***********************)
  (*   t84 = { float }   *)
  (***********************)
  (****************************)
  (*   t85 = { float; int }   *)
  (****************************)
  (*********************************)
  (*   t86 = { float; int; int }   *)
  (*********************************)
  (***********************************)
  (*   t87 = { float; int; float }   *)
  (***********************************)
  (******************************)
  (*   t88 = { float; int64 }   *)
  (******************************)
  (*******************************)
  (*   t89 = { float; int64# }   *)
  (*******************************)
  (*******************************)
  (*   t90 = { float; int32# }   *)
  (*******************************)
  (***********************************)
  (*   t91 = { float; nativeint# }   *)
  (***********************************)
  (******************************)
  (*   t92 = { float; float }   *)
  (******************************)
  (***********************************)
  (*   t93 = { float; float; int }   *)
  (***********************************)
  (*************************************)
  (*   t94 = { float; float; float }   *)
  (*************************************)
  (*********************************)
  (*   t95 = { float; #{ int } }   *)
  (*********************************)
  (**************************************)
  (*   t96 = { float; #{ int; int } }   *)
  (**************************************)
  (****************************************)
  (*   t97 = { float; #{ int; float } }   *)
  (****************************************)
  (***********************************)
  (*   t98 = { float; #{ float } }   *)
  (***********************************)
  (****************************************)
  (*   t99 = { float; #{ float; int } }   *)
  (****************************************)
  (*******************************************)
  (*   t100 = { float; #{ float; float } }   *)
  (*******************************************)
  (***************************)
  (*   t101 = { int64x2# }   *)
  (***************************)
  (********************************)
  (*   t102 = { int64x2#; int }   *)
  (********************************)
  (*************************************)
  (*   t103 = { int64x2#; int; int }   *)
  (*************************************)
  (******************************************)
  (*   t104 = { int64x2#; int; int64x2# }   *)
  (******************************************)
  (*************************************)
  (*   t105 = { int64x2#; int64x2# }   *)
  (*************************************)
  (******************************************)
  (*   t106 = { int64x2#; int64x2#; int }   *)
  (******************************************)
  (***********************************************)
  (*   t107 = { int64x2#; int64x2#; int64x2# }   *)
  (***********************************************)
  (*************************************)
  (*   t108 = { int64x2#; #{ int } }   *)
  (*************************************)
  (******************************************)
  (*   t109 = { int64x2#; #{ int; int } }   *)
  (******************************************)
  (***********************************************)
  (*   t110 = { int64x2#; #{ int; int64x2# } }   *)
  (***********************************************)
  (************************************************)
  (*   t112 = { int64x2#; #{ string; float# } }   *)
  (************************************************)
  (******************************************)
  (*   t113 = { int64x2#; #{ int64x2# } }   *)
  (******************************************)
  (***********************************************)
  (*   t114 = { int64x2#; #{ int64x2#; int } }   *)
  (***********************************************)
  (****************************************************)
  (*   t115 = { int64x2#; #{ int64x2#; int64x2# } }   *)
  (****************************************************)
  (***************************)
  (*   t116 = { #{ int } }   *)
  (***************************)
  (********************************)
  (*   t117 = { #{ int }; int }   *)
  (********************************)
  (***********************************)
  (*   t118 = { #{ int }; int32# }   *)
  (***********************************)
  (**********************************)
  (*   t119 = { #{ int }; float }   *)
  (**********************************)
  (*************************************)
  (*   t120 = { #{ int }; int64x2# }   *)
  (*************************************)
  (********************************)
  (*   t121 = { #{ int; int } }   *)
  (********************************)
  (*************************************)
  (*   t122 = { #{ int; int }; int }   *)
  (*************************************)
  (****************************************)
  (*   t123 = { #{ int; int }; int32# }   *)
  (****************************************)
  (***************************************)
  (*   t124 = { #{ int; int }; float }   *)
  (***************************************)
  (******************************************)
  (*   t125 = { #{ int; int }; int64x2# }   *)
  (******************************************)
  (***********************************)
  (*   t126 = { #{ int; int32# } }   *)
  (***********************************)
  (****************************************)
  (*   t127 = { #{ int; int32# }; int }   *)
  (****************************************)
  (*******************************************)
  (*   t128 = { #{ int; int32# }; int32# }   *)
  (*******************************************)
  (**********************************)
  (*   t129 = { #{ int; float } }   *)
  (**********************************)
  (***************************************)
  (*   t130 = { #{ int; float }; int }   *)
  (***************************************)
  (*****************************************)
  (*   t131 = { #{ int; float }; float }   *)
  (*****************************************)
  (*************************************)
  (*   t132 = { #{ int; int64x2# } }   *)
  (*************************************)
  (******************************************)
  (*   t133 = { #{ int; int64x2# }; int }   *)
  (******************************************)
  (***********************************************)
  (*   t134 = { #{ int; int64x2# }; int64x2# }   *)
  (***********************************************)
  (**********************************************************)
  (*   t137 = { #{ int64; int64# }; #{ int64#; float# } }   *)
  (**********************************************************)
  (**********************************************************)
  (*   t140 = { #{ int64; string }; #{ int64#; string } }   *)
  (**********************************************************)
  (********************************************************)
  (*   t143 = { #{ int64#; int64 }; #{ int64; int64 } }   *)
  (********************************************************)
  (***********************************************************)
  (*   t145 = { #{ int64#; int64 }; #{ float32#; float } }   *)
  (***********************************************************)
  (******************************)
  (*   t146 = { #{ int32# } }   *)
  (******************************)
  (***********************************)
  (*   t147 = { #{ int32# }; int }   *)
  (***********************************)
  (**************************************)
  (*   t148 = { #{ int32# }; int32# }   *)
  (**************************************)
  (***********************************)
  (*   t149 = { #{ int32#; int } }   *)
  (***********************************)
  (****************************************)
  (*   t150 = { #{ int32#; int }; int }   *)
  (****************************************)
  (*******************************************)
  (*   t151 = { #{ int32#; int }; int32# }   *)
  (*******************************************)
  (**************************************)
  (*   t152 = { #{ int32#; int32# } }   *)
  (**************************************)
  (*******************************************)
  (*   t153 = { #{ int32#; int32# }; int }   *)
  (*******************************************)
  (**********************************************)
  (*   t154 = { #{ int32#; int32# }; int32# }   *)
  (**********************************************)
  (*****************************)
  (*   t155 = { #{ float } }   *)
  (*****************************)
  (**********************************)
  (*   t156 = { #{ float }; int }   *)
  (**********************************)
  (************************************)
  (*   t157 = { #{ float }; float }   *)
  (************************************)
  (**********************************)
  (*   t158 = { #{ float; int } }   *)
  (**********************************)
  (***************************************)
  (*   t159 = { #{ float; int }; int }   *)
  (***************************************)
  (*****************************************)
  (*   t160 = { #{ float; int }; float }   *)
  (*****************************************)
  (************************************)
  (*   t161 = { #{ float; float } }   *)
  (************************************)
  (*****************************************)
  (*   t162 = { #{ float; float }; int }   *)
  (*****************************************)
  (*******************************************)
  (*   t163 = { #{ float; float }; float }   *)
  (*******************************************)
  (*************************************************************)
  (*   t166 = { #{ float32#; int64# }; #{ string; int64# } }   *)
  (*************************************************************)
  (********************************)
  (*   t167 = { #{ int64x2# } }   *)
  (********************************)
  (*************************************)
  (*   t168 = { #{ int64x2# }; int }   *)
  (*************************************)
  (******************************************)
  (*   t169 = { #{ int64x2# }; int64x2# }   *)
  (******************************************)
  (*************************************)
  (*   t170 = { #{ int64x2#; int } }   *)
  (*************************************)
  (******************************************)
  (*   t171 = { #{ int64x2#; int }; int }   *)
  (******************************************)
  (***********************************************)
  (*   t172 = { #{ int64x2#; int }; int64x2# }   *)
  (***********************************************)
  (************************************************************)
  (*   t175 = { #{ int64x2#; string }; #{ int64; float# } }   *)
  (************************************************************)
  (******************************************)
  (*   t176 = { #{ int64x2#; int64x2# } }   *)
  (******************************************)
  (***********************************************)
  (*   t177 = { #{ int64x2#; int64x2# }; int }   *)
  (***********************************************)
  (****************************************************)
  (*   t178 = { #{ int64x2#; int64x2# }; int64x2# }   *)
  (****************************************************)
  ()
;;

for i = 1 to 0 do
  if not (Int_set.mem i !tests_run) then failwithf "test %d not run" i
done;;
let () = Printf.printf "All tests passed.%!\n";;
