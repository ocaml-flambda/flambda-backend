(* TEST
 include stdlib_stable;
 include stdlib_upstream_compatible;
 flags = "-extension layouts_beta";
 flambda2;
 {
   native;
 }
*)
(** This is code generated by [generate_array_reinterp_tests.ml]. *)

open Stdlib_upstream_compatible

external[@layout_poly] unsafe_set :
  ('a : any_non_null). 'a array -> int -> 'a -> unit
  = "%array_unsafe_set"

  external create_int64_array
    :  int -> int64# array
    = "caml_make_unboxed_int64_vect_bytecode" "caml_make_unboxed_int64_vect"

  let init_int64 len ~f =
    let r = create_int64_array len in
    for i = 0 to len - 1 do
      unsafe_set r i (f i)
    done;
    r



module Int64 = struct
  type elt = int64#
  type t = int64# array

  external[@layout_poly] reinterp_get :
    ('a : any). t -> int -> 'a = "%obj_reinterp_array_unsafe_get"

  external[@layout_poly] reinterp_set :
    ('a : any). t -> int -> 'a -> unit = "%obj_reinterp_array_unsafe_set"

  
  let a = init_int64 21 ~f:(fun i -> Int64_u.of_int i)

  let _ = begin
    let x0 : elt = reinterp_get a 0 in
    assert (Int64_u.equal x0 (Int64_u.of_int 0));
    let #(x1, x2) : #(elt * elt) = reinterp_get a 1 in
    assert (Int64_u.equal x1 (Int64_u.of_int 1));
    assert (Int64_u.equal x2 (Int64_u.of_int 2));
    let #(x2, x3, x4) : #(elt * elt * elt) = reinterp_get a 2 in
    assert (Int64_u.equal x2 (Int64_u.of_int 2));
    assert (Int64_u.equal x3 (Int64_u.of_int 3));
    assert (Int64_u.equal x4 (Int64_u.of_int 4));
    let #(x3, x4, x5, x6) : #(elt * elt * elt * elt) = reinterp_get a 3 in
    assert (Int64_u.equal x3 (Int64_u.of_int 3));
    assert (Int64_u.equal x4 (Int64_u.of_int 4));
    assert (Int64_u.equal x5 (Int64_u.of_int 5));
    assert (Int64_u.equal x6 (Int64_u.of_int 6));
    let #(x4, x5, x6, x7, x8) : #(elt * elt * elt * elt * elt) = reinterp_get a 4 in
    assert (Int64_u.equal x4 (Int64_u.of_int 4));
    assert (Int64_u.equal x5 (Int64_u.of_int 5));
    assert (Int64_u.equal x6 (Int64_u.of_int 6));
    assert (Int64_u.equal x7 (Int64_u.of_int 7));
    assert (Int64_u.equal x8 (Int64_u.of_int 8));
    let #(x5, x6, x7, x8, x9, x10) : #(elt * elt * elt * elt * elt * elt) = reinterp_get a 5 in
    assert (Int64_u.equal x5 (Int64_u.of_int 5));
    assert (Int64_u.equal x6 (Int64_u.of_int 6));
    assert (Int64_u.equal x7 (Int64_u.of_int 7));
    assert (Int64_u.equal x8 (Int64_u.of_int 8));
    assert (Int64_u.equal x9 (Int64_u.of_int 9));
    assert (Int64_u.equal x10 (Int64_u.of_int 10));
    let #(x6, x7, x8, x9, x10, x11, x12) : #(elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 6 in
    assert (Int64_u.equal x6 (Int64_u.of_int 6));
    assert (Int64_u.equal x7 (Int64_u.of_int 7));
    assert (Int64_u.equal x8 (Int64_u.of_int 8));
    assert (Int64_u.equal x9 (Int64_u.of_int 9));
    assert (Int64_u.equal x10 (Int64_u.of_int 10));
    assert (Int64_u.equal x11 (Int64_u.of_int 11));
    assert (Int64_u.equal x12 (Int64_u.of_int 12));
    let #(x7, x8, x9, x10, x11, x12, x13, x14) : #(elt * elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 7 in
    assert (Int64_u.equal x7 (Int64_u.of_int 7));
    assert (Int64_u.equal x8 (Int64_u.of_int 8));
    assert (Int64_u.equal x9 (Int64_u.of_int 9));
    assert (Int64_u.equal x10 (Int64_u.of_int 10));
    assert (Int64_u.equal x11 (Int64_u.of_int 11));
    assert (Int64_u.equal x12 (Int64_u.of_int 12));
    assert (Int64_u.equal x13 (Int64_u.of_int 13));
    assert (Int64_u.equal x14 (Int64_u.of_int 14));
    let #(x8, x9, x10, x11, x12, x13, x14, x15, x16) : #(elt * elt * elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 8 in
    assert (Int64_u.equal x8 (Int64_u.of_int 8));
    assert (Int64_u.equal x9 (Int64_u.of_int 9));
    assert (Int64_u.equal x10 (Int64_u.of_int 10));
    assert (Int64_u.equal x11 (Int64_u.of_int 11));
    assert (Int64_u.equal x12 (Int64_u.of_int 12));
    assert (Int64_u.equal x13 (Int64_u.of_int 13));
    assert (Int64_u.equal x14 (Int64_u.of_int 14));
    assert (Int64_u.equal x15 (Int64_u.of_int 15));
    assert (Int64_u.equal x16 (Int64_u.of_int 16));
    let #(x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) : #(elt * elt * elt * elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 9 in
    assert (Int64_u.equal x9 (Int64_u.of_int 9));
    assert (Int64_u.equal x10 (Int64_u.of_int 10));
    assert (Int64_u.equal x11 (Int64_u.of_int 11));
    assert (Int64_u.equal x12 (Int64_u.of_int 12));
    assert (Int64_u.equal x13 (Int64_u.of_int 13));
    assert (Int64_u.equal x14 (Int64_u.of_int 14));
    assert (Int64_u.equal x15 (Int64_u.of_int 15));
    assert (Int64_u.equal x16 (Int64_u.of_int 16));
    assert (Int64_u.equal x17 (Int64_u.of_int 17));
    assert (Int64_u.equal x18 (Int64_u.of_int 18));
    let #(x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) : #(elt * elt * elt * elt * elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 10 in
    assert (Int64_u.equal x10 (Int64_u.of_int 10));
    assert (Int64_u.equal x11 (Int64_u.of_int 11));
    assert (Int64_u.equal x12 (Int64_u.of_int 12));
    assert (Int64_u.equal x13 (Int64_u.of_int 13));
    assert (Int64_u.equal x14 (Int64_u.of_int 14));
    assert (Int64_u.equal x15 (Int64_u.of_int 15));
    assert (Int64_u.equal x16 (Int64_u.of_int 16));
    assert (Int64_u.equal x17 (Int64_u.of_int 17));
    assert (Int64_u.equal x18 (Int64_u.of_int 18));
    assert (Int64_u.equal x19 (Int64_u.of_int 19));
    assert (Int64_u.equal x20 (Int64_u.of_int 20));

    reinterp_set a 0 #(Int64_u.of_int 123456, Int64_u.of_int 123456, Int64_u.of_int 123456, Int64_u.of_int 1003);
    reinterp_set a 0 #(Int64_u.of_int 123456, Int64_u.of_int 123456, Int64_u.of_int 1002);
    reinterp_set a 0 #(Int64_u.of_int 123456, Int64_u.of_int 1001);
    reinterp_set a 0 (Int64_u.of_int 1000);
    reinterp_set a 10 #(Int64_u.of_int 123456, Int64_u.of_int 123456, Int64_u.of_int 123456, Int64_u.of_int 1013);
    reinterp_set a 10 #(Int64_u.of_int 123456, Int64_u.of_int 123456, Int64_u.of_int 1012);
    reinterp_set a 10 #(Int64_u.of_int 123456, Int64_u.of_int 1011);
    reinterp_set a 10 (Int64_u.of_int 1010);
    reinterp_set a 17 #(Int64_u.of_int 123456, Int64_u.of_int 123456, Int64_u.of_int 123456, Int64_u.of_int 1020);
    reinterp_set a 17 #(Int64_u.of_int 123456, Int64_u.of_int 123456, Int64_u.of_int 1019);
    reinterp_set a 17 #(Int64_u.of_int 123456, Int64_u.of_int 1018);
    reinterp_set a 17 (Int64_u.of_int 1017);

    let x0 : elt = reinterp_get a 0 in
    assert (Int64_u.equal x0 (Int64_u.of_int 1000));
    let #(x1, x2) : #(elt * elt) = reinterp_get a 1 in
    assert (Int64_u.equal x1 (Int64_u.of_int 1001));
    assert (Int64_u.equal x2 (Int64_u.of_int 1002));
    let #(x2, x3, x4) : #(elt * elt * elt) = reinterp_get a 2 in
    assert (Int64_u.equal x2 (Int64_u.of_int 1002));
    assert (Int64_u.equal x3 (Int64_u.of_int 1003));
    assert (Int64_u.equal x4 (Int64_u.of_int 4));
    let #(x3, x4, x5, x6) : #(elt * elt * elt * elt) = reinterp_get a 3 in
    assert (Int64_u.equal x3 (Int64_u.of_int 1003));
    assert (Int64_u.equal x4 (Int64_u.of_int 4));
    assert (Int64_u.equal x5 (Int64_u.of_int 5));
    assert (Int64_u.equal x6 (Int64_u.of_int 6));
    let #(x4, x5, x6, x7, x8) : #(elt * elt * elt * elt * elt) = reinterp_get a 4 in
    assert (Int64_u.equal x4 (Int64_u.of_int 4));
    assert (Int64_u.equal x5 (Int64_u.of_int 5));
    assert (Int64_u.equal x6 (Int64_u.of_int 6));
    assert (Int64_u.equal x7 (Int64_u.of_int 7));
    assert (Int64_u.equal x8 (Int64_u.of_int 8));
    let #(x5, x6, x7, x8, x9, x10) : #(elt * elt * elt * elt * elt * elt) = reinterp_get a 5 in
    assert (Int64_u.equal x5 (Int64_u.of_int 5));
    assert (Int64_u.equal x6 (Int64_u.of_int 6));
    assert (Int64_u.equal x7 (Int64_u.of_int 7));
    assert (Int64_u.equal x8 (Int64_u.of_int 8));
    assert (Int64_u.equal x9 (Int64_u.of_int 9));
    assert (Int64_u.equal x10 (Int64_u.of_int 1010));
    let #(x6, x7, x8, x9, x10, x11, x12) : #(elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 6 in
    assert (Int64_u.equal x6 (Int64_u.of_int 6));
    assert (Int64_u.equal x7 (Int64_u.of_int 7));
    assert (Int64_u.equal x8 (Int64_u.of_int 8));
    assert (Int64_u.equal x9 (Int64_u.of_int 9));
    assert (Int64_u.equal x10 (Int64_u.of_int 1010));
    assert (Int64_u.equal x11 (Int64_u.of_int 1011));
    assert (Int64_u.equal x12 (Int64_u.of_int 1012));
    let #(x7, x8, x9, x10, x11, x12, x13, x14) : #(elt * elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 7 in
    assert (Int64_u.equal x7 (Int64_u.of_int 7));
    assert (Int64_u.equal x8 (Int64_u.of_int 8));
    assert (Int64_u.equal x9 (Int64_u.of_int 9));
    assert (Int64_u.equal x10 (Int64_u.of_int 1010));
    assert (Int64_u.equal x11 (Int64_u.of_int 1011));
    assert (Int64_u.equal x12 (Int64_u.of_int 1012));
    assert (Int64_u.equal x13 (Int64_u.of_int 1013));
    assert (Int64_u.equal x14 (Int64_u.of_int 14));
    let #(x8, x9, x10, x11, x12, x13, x14, x15, x16) : #(elt * elt * elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 8 in
    assert (Int64_u.equal x8 (Int64_u.of_int 8));
    assert (Int64_u.equal x9 (Int64_u.of_int 9));
    assert (Int64_u.equal x10 (Int64_u.of_int 1010));
    assert (Int64_u.equal x11 (Int64_u.of_int 1011));
    assert (Int64_u.equal x12 (Int64_u.of_int 1012));
    assert (Int64_u.equal x13 (Int64_u.of_int 1013));
    assert (Int64_u.equal x14 (Int64_u.of_int 14));
    assert (Int64_u.equal x15 (Int64_u.of_int 15));
    assert (Int64_u.equal x16 (Int64_u.of_int 16));
    let #(x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) : #(elt * elt * elt * elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 9 in
    assert (Int64_u.equal x9 (Int64_u.of_int 9));
    assert (Int64_u.equal x10 (Int64_u.of_int 1010));
    assert (Int64_u.equal x11 (Int64_u.of_int 1011));
    assert (Int64_u.equal x12 (Int64_u.of_int 1012));
    assert (Int64_u.equal x13 (Int64_u.of_int 1013));
    assert (Int64_u.equal x14 (Int64_u.of_int 14));
    assert (Int64_u.equal x15 (Int64_u.of_int 15));
    assert (Int64_u.equal x16 (Int64_u.of_int 16));
    assert (Int64_u.equal x17 (Int64_u.of_int 1017));
    assert (Int64_u.equal x18 (Int64_u.of_int 1018));
    let #(x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) : #(elt * elt * elt * elt * elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 10 in
    assert (Int64_u.equal x10 (Int64_u.of_int 1010));
    assert (Int64_u.equal x11 (Int64_u.of_int 1011));
    assert (Int64_u.equal x12 (Int64_u.of_int 1012));
    assert (Int64_u.equal x13 (Int64_u.of_int 1013));
    assert (Int64_u.equal x14 (Int64_u.of_int 14));
    assert (Int64_u.equal x15 (Int64_u.of_int 15));
    assert (Int64_u.equal x16 (Int64_u.of_int 16));
    assert (Int64_u.equal x17 (Int64_u.of_int 1017));
    assert (Int64_u.equal x18 (Int64_u.of_int 1018));
    assert (Int64_u.equal x19 (Int64_u.of_int 1019));
    assert (Int64_u.equal x20 (Int64_u.of_int 1020));
  end
  end

module Float64 = struct
  type elt = float#
  type t = floatarray

  external[@layout_poly] reinterp_get :
    ('a : any). t -> int -> 'a = "%obj_reinterp_array_unsafe_get"

  external[@layout_poly] reinterp_set :
    ('a : any). t -> int -> 'a -> unit = "%obj_reinterp_array_unsafe_set"

  
  let a = Float.ArrayLabels.init 21 ~f:(fun i -> Float.of_int i)

  let _ = begin
    let x0 : elt = reinterp_get a 0 in
    assert (Float_u.equal x0 (Float_u.of_int 0));
    let #(x1, x2) : #(elt * elt) = reinterp_get a 1 in
    assert (Float_u.equal x1 (Float_u.of_int 1));
    assert (Float_u.equal x2 (Float_u.of_int 2));
    let #(x2, x3, x4) : #(elt * elt * elt) = reinterp_get a 2 in
    assert (Float_u.equal x2 (Float_u.of_int 2));
    assert (Float_u.equal x3 (Float_u.of_int 3));
    assert (Float_u.equal x4 (Float_u.of_int 4));
    let #(x3, x4, x5, x6) : #(elt * elt * elt * elt) = reinterp_get a 3 in
    assert (Float_u.equal x3 (Float_u.of_int 3));
    assert (Float_u.equal x4 (Float_u.of_int 4));
    assert (Float_u.equal x5 (Float_u.of_int 5));
    assert (Float_u.equal x6 (Float_u.of_int 6));
    let #(x4, x5, x6, x7, x8) : #(elt * elt * elt * elt * elt) = reinterp_get a 4 in
    assert (Float_u.equal x4 (Float_u.of_int 4));
    assert (Float_u.equal x5 (Float_u.of_int 5));
    assert (Float_u.equal x6 (Float_u.of_int 6));
    assert (Float_u.equal x7 (Float_u.of_int 7));
    assert (Float_u.equal x8 (Float_u.of_int 8));
    let #(x5, x6, x7, x8, x9, x10) : #(elt * elt * elt * elt * elt * elt) = reinterp_get a 5 in
    assert (Float_u.equal x5 (Float_u.of_int 5));
    assert (Float_u.equal x6 (Float_u.of_int 6));
    assert (Float_u.equal x7 (Float_u.of_int 7));
    assert (Float_u.equal x8 (Float_u.of_int 8));
    assert (Float_u.equal x9 (Float_u.of_int 9));
    assert (Float_u.equal x10 (Float_u.of_int 10));
    let #(x6, x7, x8, x9, x10, x11, x12) : #(elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 6 in
    assert (Float_u.equal x6 (Float_u.of_int 6));
    assert (Float_u.equal x7 (Float_u.of_int 7));
    assert (Float_u.equal x8 (Float_u.of_int 8));
    assert (Float_u.equal x9 (Float_u.of_int 9));
    assert (Float_u.equal x10 (Float_u.of_int 10));
    assert (Float_u.equal x11 (Float_u.of_int 11));
    assert (Float_u.equal x12 (Float_u.of_int 12));
    let #(x7, x8, x9, x10, x11, x12, x13, x14) : #(elt * elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 7 in
    assert (Float_u.equal x7 (Float_u.of_int 7));
    assert (Float_u.equal x8 (Float_u.of_int 8));
    assert (Float_u.equal x9 (Float_u.of_int 9));
    assert (Float_u.equal x10 (Float_u.of_int 10));
    assert (Float_u.equal x11 (Float_u.of_int 11));
    assert (Float_u.equal x12 (Float_u.of_int 12));
    assert (Float_u.equal x13 (Float_u.of_int 13));
    assert (Float_u.equal x14 (Float_u.of_int 14));
    let #(x8, x9, x10, x11, x12, x13, x14, x15, x16) : #(elt * elt * elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 8 in
    assert (Float_u.equal x8 (Float_u.of_int 8));
    assert (Float_u.equal x9 (Float_u.of_int 9));
    assert (Float_u.equal x10 (Float_u.of_int 10));
    assert (Float_u.equal x11 (Float_u.of_int 11));
    assert (Float_u.equal x12 (Float_u.of_int 12));
    assert (Float_u.equal x13 (Float_u.of_int 13));
    assert (Float_u.equal x14 (Float_u.of_int 14));
    assert (Float_u.equal x15 (Float_u.of_int 15));
    assert (Float_u.equal x16 (Float_u.of_int 16));
    let #(x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) : #(elt * elt * elt * elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 9 in
    assert (Float_u.equal x9 (Float_u.of_int 9));
    assert (Float_u.equal x10 (Float_u.of_int 10));
    assert (Float_u.equal x11 (Float_u.of_int 11));
    assert (Float_u.equal x12 (Float_u.of_int 12));
    assert (Float_u.equal x13 (Float_u.of_int 13));
    assert (Float_u.equal x14 (Float_u.of_int 14));
    assert (Float_u.equal x15 (Float_u.of_int 15));
    assert (Float_u.equal x16 (Float_u.of_int 16));
    assert (Float_u.equal x17 (Float_u.of_int 17));
    assert (Float_u.equal x18 (Float_u.of_int 18));
    let #(x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) : #(elt * elt * elt * elt * elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 10 in
    assert (Float_u.equal x10 (Float_u.of_int 10));
    assert (Float_u.equal x11 (Float_u.of_int 11));
    assert (Float_u.equal x12 (Float_u.of_int 12));
    assert (Float_u.equal x13 (Float_u.of_int 13));
    assert (Float_u.equal x14 (Float_u.of_int 14));
    assert (Float_u.equal x15 (Float_u.of_int 15));
    assert (Float_u.equal x16 (Float_u.of_int 16));
    assert (Float_u.equal x17 (Float_u.of_int 17));
    assert (Float_u.equal x18 (Float_u.of_int 18));
    assert (Float_u.equal x19 (Float_u.of_int 19));
    assert (Float_u.equal x20 (Float_u.of_int 20));

    reinterp_set a 0 #(Float_u.of_int 123456, Float_u.of_int 123456, Float_u.of_int 123456, Float_u.of_int 1003);
    reinterp_set a 0 #(Float_u.of_int 123456, Float_u.of_int 123456, Float_u.of_int 1002);
    reinterp_set a 0 #(Float_u.of_int 123456, Float_u.of_int 1001);
    reinterp_set a 0 (Float_u.of_int 1000);
    reinterp_set a 10 #(Float_u.of_int 123456, Float_u.of_int 123456, Float_u.of_int 123456, Float_u.of_int 1013);
    reinterp_set a 10 #(Float_u.of_int 123456, Float_u.of_int 123456, Float_u.of_int 1012);
    reinterp_set a 10 #(Float_u.of_int 123456, Float_u.of_int 1011);
    reinterp_set a 10 (Float_u.of_int 1010);
    reinterp_set a 17 #(Float_u.of_int 123456, Float_u.of_int 123456, Float_u.of_int 123456, Float_u.of_int 1020);
    reinterp_set a 17 #(Float_u.of_int 123456, Float_u.of_int 123456, Float_u.of_int 1019);
    reinterp_set a 17 #(Float_u.of_int 123456, Float_u.of_int 1018);
    reinterp_set a 17 (Float_u.of_int 1017);

    let x0 : elt = reinterp_get a 0 in
    assert (Float_u.equal x0 (Float_u.of_int 1000));
    let #(x1, x2) : #(elt * elt) = reinterp_get a 1 in
    assert (Float_u.equal x1 (Float_u.of_int 1001));
    assert (Float_u.equal x2 (Float_u.of_int 1002));
    let #(x2, x3, x4) : #(elt * elt * elt) = reinterp_get a 2 in
    assert (Float_u.equal x2 (Float_u.of_int 1002));
    assert (Float_u.equal x3 (Float_u.of_int 1003));
    assert (Float_u.equal x4 (Float_u.of_int 4));
    let #(x3, x4, x5, x6) : #(elt * elt * elt * elt) = reinterp_get a 3 in
    assert (Float_u.equal x3 (Float_u.of_int 1003));
    assert (Float_u.equal x4 (Float_u.of_int 4));
    assert (Float_u.equal x5 (Float_u.of_int 5));
    assert (Float_u.equal x6 (Float_u.of_int 6));
    let #(x4, x5, x6, x7, x8) : #(elt * elt * elt * elt * elt) = reinterp_get a 4 in
    assert (Float_u.equal x4 (Float_u.of_int 4));
    assert (Float_u.equal x5 (Float_u.of_int 5));
    assert (Float_u.equal x6 (Float_u.of_int 6));
    assert (Float_u.equal x7 (Float_u.of_int 7));
    assert (Float_u.equal x8 (Float_u.of_int 8));
    let #(x5, x6, x7, x8, x9, x10) : #(elt * elt * elt * elt * elt * elt) = reinterp_get a 5 in
    assert (Float_u.equal x5 (Float_u.of_int 5));
    assert (Float_u.equal x6 (Float_u.of_int 6));
    assert (Float_u.equal x7 (Float_u.of_int 7));
    assert (Float_u.equal x8 (Float_u.of_int 8));
    assert (Float_u.equal x9 (Float_u.of_int 9));
    assert (Float_u.equal x10 (Float_u.of_int 1010));
    let #(x6, x7, x8, x9, x10, x11, x12) : #(elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 6 in
    assert (Float_u.equal x6 (Float_u.of_int 6));
    assert (Float_u.equal x7 (Float_u.of_int 7));
    assert (Float_u.equal x8 (Float_u.of_int 8));
    assert (Float_u.equal x9 (Float_u.of_int 9));
    assert (Float_u.equal x10 (Float_u.of_int 1010));
    assert (Float_u.equal x11 (Float_u.of_int 1011));
    assert (Float_u.equal x12 (Float_u.of_int 1012));
    let #(x7, x8, x9, x10, x11, x12, x13, x14) : #(elt * elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 7 in
    assert (Float_u.equal x7 (Float_u.of_int 7));
    assert (Float_u.equal x8 (Float_u.of_int 8));
    assert (Float_u.equal x9 (Float_u.of_int 9));
    assert (Float_u.equal x10 (Float_u.of_int 1010));
    assert (Float_u.equal x11 (Float_u.of_int 1011));
    assert (Float_u.equal x12 (Float_u.of_int 1012));
    assert (Float_u.equal x13 (Float_u.of_int 1013));
    assert (Float_u.equal x14 (Float_u.of_int 14));
    let #(x8, x9, x10, x11, x12, x13, x14, x15, x16) : #(elt * elt * elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 8 in
    assert (Float_u.equal x8 (Float_u.of_int 8));
    assert (Float_u.equal x9 (Float_u.of_int 9));
    assert (Float_u.equal x10 (Float_u.of_int 1010));
    assert (Float_u.equal x11 (Float_u.of_int 1011));
    assert (Float_u.equal x12 (Float_u.of_int 1012));
    assert (Float_u.equal x13 (Float_u.of_int 1013));
    assert (Float_u.equal x14 (Float_u.of_int 14));
    assert (Float_u.equal x15 (Float_u.of_int 15));
    assert (Float_u.equal x16 (Float_u.of_int 16));
    let #(x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) : #(elt * elt * elt * elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 9 in
    assert (Float_u.equal x9 (Float_u.of_int 9));
    assert (Float_u.equal x10 (Float_u.of_int 1010));
    assert (Float_u.equal x11 (Float_u.of_int 1011));
    assert (Float_u.equal x12 (Float_u.of_int 1012));
    assert (Float_u.equal x13 (Float_u.of_int 1013));
    assert (Float_u.equal x14 (Float_u.of_int 14));
    assert (Float_u.equal x15 (Float_u.of_int 15));
    assert (Float_u.equal x16 (Float_u.of_int 16));
    assert (Float_u.equal x17 (Float_u.of_int 1017));
    assert (Float_u.equal x18 (Float_u.of_int 1018));
    let #(x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) : #(elt * elt * elt * elt * elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 10 in
    assert (Float_u.equal x10 (Float_u.of_int 1010));
    assert (Float_u.equal x11 (Float_u.of_int 1011));
    assert (Float_u.equal x12 (Float_u.of_int 1012));
    assert (Float_u.equal x13 (Float_u.of_int 1013));
    assert (Float_u.equal x14 (Float_u.of_int 14));
    assert (Float_u.equal x15 (Float_u.of_int 15));
    assert (Float_u.equal x16 (Float_u.of_int 16));
    assert (Float_u.equal x17 (Float_u.of_int 1017));
    assert (Float_u.equal x18 (Float_u.of_int 1018));
    assert (Float_u.equal x19 (Float_u.of_int 1019));
    assert (Float_u.equal x20 (Float_u.of_int 1020));
  end
  end

module Strings = struct
  type elt = string
  type t = string array

  external[@layout_poly] reinterp_get :
    ('a : any). t -> int -> 'a = "%obj_reinterp_array_unsafe_get"

  external[@layout_poly] reinterp_set :
    ('a : any). t -> int -> 'a -> unit = "%obj_reinterp_array_unsafe_set"

  
  let a = ArrayLabels.init 21 ~f:(fun i -> string_of_int i)

  let _ = begin
    let x0 : elt = reinterp_get a 0 in
    assert (String.equal x0 (string_of_int 0));
    let #(x1, x2) : #(elt * elt) = reinterp_get a 1 in
    assert (String.equal x1 (string_of_int 1));
    assert (String.equal x2 (string_of_int 2));
    let #(x2, x3, x4) : #(elt * elt * elt) = reinterp_get a 2 in
    assert (String.equal x2 (string_of_int 2));
    assert (String.equal x3 (string_of_int 3));
    assert (String.equal x4 (string_of_int 4));
    let #(x3, x4, x5, x6) : #(elt * elt * elt * elt) = reinterp_get a 3 in
    assert (String.equal x3 (string_of_int 3));
    assert (String.equal x4 (string_of_int 4));
    assert (String.equal x5 (string_of_int 5));
    assert (String.equal x6 (string_of_int 6));
    let #(x4, x5, x6, x7, x8) : #(elt * elt * elt * elt * elt) = reinterp_get a 4 in
    assert (String.equal x4 (string_of_int 4));
    assert (String.equal x5 (string_of_int 5));
    assert (String.equal x6 (string_of_int 6));
    assert (String.equal x7 (string_of_int 7));
    assert (String.equal x8 (string_of_int 8));
    let #(x5, x6, x7, x8, x9, x10) : #(elt * elt * elt * elt * elt * elt) = reinterp_get a 5 in
    assert (String.equal x5 (string_of_int 5));
    assert (String.equal x6 (string_of_int 6));
    assert (String.equal x7 (string_of_int 7));
    assert (String.equal x8 (string_of_int 8));
    assert (String.equal x9 (string_of_int 9));
    assert (String.equal x10 (string_of_int 10));
    let #(x6, x7, x8, x9, x10, x11, x12) : #(elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 6 in
    assert (String.equal x6 (string_of_int 6));
    assert (String.equal x7 (string_of_int 7));
    assert (String.equal x8 (string_of_int 8));
    assert (String.equal x9 (string_of_int 9));
    assert (String.equal x10 (string_of_int 10));
    assert (String.equal x11 (string_of_int 11));
    assert (String.equal x12 (string_of_int 12));
    let #(x7, x8, x9, x10, x11, x12, x13, x14) : #(elt * elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 7 in
    assert (String.equal x7 (string_of_int 7));
    assert (String.equal x8 (string_of_int 8));
    assert (String.equal x9 (string_of_int 9));
    assert (String.equal x10 (string_of_int 10));
    assert (String.equal x11 (string_of_int 11));
    assert (String.equal x12 (string_of_int 12));
    assert (String.equal x13 (string_of_int 13));
    assert (String.equal x14 (string_of_int 14));
    let #(x8, x9, x10, x11, x12, x13, x14, x15, x16) : #(elt * elt * elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 8 in
    assert (String.equal x8 (string_of_int 8));
    assert (String.equal x9 (string_of_int 9));
    assert (String.equal x10 (string_of_int 10));
    assert (String.equal x11 (string_of_int 11));
    assert (String.equal x12 (string_of_int 12));
    assert (String.equal x13 (string_of_int 13));
    assert (String.equal x14 (string_of_int 14));
    assert (String.equal x15 (string_of_int 15));
    assert (String.equal x16 (string_of_int 16));
    let #(x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) : #(elt * elt * elt * elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 9 in
    assert (String.equal x9 (string_of_int 9));
    assert (String.equal x10 (string_of_int 10));
    assert (String.equal x11 (string_of_int 11));
    assert (String.equal x12 (string_of_int 12));
    assert (String.equal x13 (string_of_int 13));
    assert (String.equal x14 (string_of_int 14));
    assert (String.equal x15 (string_of_int 15));
    assert (String.equal x16 (string_of_int 16));
    assert (String.equal x17 (string_of_int 17));
    assert (String.equal x18 (string_of_int 18));
    let #(x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) : #(elt * elt * elt * elt * elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 10 in
    assert (String.equal x10 (string_of_int 10));
    assert (String.equal x11 (string_of_int 11));
    assert (String.equal x12 (string_of_int 12));
    assert (String.equal x13 (string_of_int 13));
    assert (String.equal x14 (string_of_int 14));
    assert (String.equal x15 (string_of_int 15));
    assert (String.equal x16 (string_of_int 16));
    assert (String.equal x17 (string_of_int 17));
    assert (String.equal x18 (string_of_int 18));
    assert (String.equal x19 (string_of_int 19));
    assert (String.equal x20 (string_of_int 20));

    reinterp_set a 0 #(string_of_int 123456, string_of_int 123456, string_of_int 123456, string_of_int 1003);
    reinterp_set a 0 #(string_of_int 123456, string_of_int 123456, string_of_int 1002);
    reinterp_set a 0 #(string_of_int 123456, string_of_int 1001);
    reinterp_set a 0 (string_of_int 1000);
    reinterp_set a 10 #(string_of_int 123456, string_of_int 123456, string_of_int 123456, string_of_int 1013);
    reinterp_set a 10 #(string_of_int 123456, string_of_int 123456, string_of_int 1012);
    reinterp_set a 10 #(string_of_int 123456, string_of_int 1011);
    reinterp_set a 10 (string_of_int 1010);
    reinterp_set a 17 #(string_of_int 123456, string_of_int 123456, string_of_int 123456, string_of_int 1020);
    reinterp_set a 17 #(string_of_int 123456, string_of_int 123456, string_of_int 1019);
    reinterp_set a 17 #(string_of_int 123456, string_of_int 1018);
    reinterp_set a 17 (string_of_int 1017);

    let x0 : elt = reinterp_get a 0 in
    assert (String.equal x0 (string_of_int 1000));
    let #(x1, x2) : #(elt * elt) = reinterp_get a 1 in
    assert (String.equal x1 (string_of_int 1001));
    assert (String.equal x2 (string_of_int 1002));
    let #(x2, x3, x4) : #(elt * elt * elt) = reinterp_get a 2 in
    assert (String.equal x2 (string_of_int 1002));
    assert (String.equal x3 (string_of_int 1003));
    assert (String.equal x4 (string_of_int 4));
    let #(x3, x4, x5, x6) : #(elt * elt * elt * elt) = reinterp_get a 3 in
    assert (String.equal x3 (string_of_int 1003));
    assert (String.equal x4 (string_of_int 4));
    assert (String.equal x5 (string_of_int 5));
    assert (String.equal x6 (string_of_int 6));
    let #(x4, x5, x6, x7, x8) : #(elt * elt * elt * elt * elt) = reinterp_get a 4 in
    assert (String.equal x4 (string_of_int 4));
    assert (String.equal x5 (string_of_int 5));
    assert (String.equal x6 (string_of_int 6));
    assert (String.equal x7 (string_of_int 7));
    assert (String.equal x8 (string_of_int 8));
    let #(x5, x6, x7, x8, x9, x10) : #(elt * elt * elt * elt * elt * elt) = reinterp_get a 5 in
    assert (String.equal x5 (string_of_int 5));
    assert (String.equal x6 (string_of_int 6));
    assert (String.equal x7 (string_of_int 7));
    assert (String.equal x8 (string_of_int 8));
    assert (String.equal x9 (string_of_int 9));
    assert (String.equal x10 (string_of_int 1010));
    let #(x6, x7, x8, x9, x10, x11, x12) : #(elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 6 in
    assert (String.equal x6 (string_of_int 6));
    assert (String.equal x7 (string_of_int 7));
    assert (String.equal x8 (string_of_int 8));
    assert (String.equal x9 (string_of_int 9));
    assert (String.equal x10 (string_of_int 1010));
    assert (String.equal x11 (string_of_int 1011));
    assert (String.equal x12 (string_of_int 1012));
    let #(x7, x8, x9, x10, x11, x12, x13, x14) : #(elt * elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 7 in
    assert (String.equal x7 (string_of_int 7));
    assert (String.equal x8 (string_of_int 8));
    assert (String.equal x9 (string_of_int 9));
    assert (String.equal x10 (string_of_int 1010));
    assert (String.equal x11 (string_of_int 1011));
    assert (String.equal x12 (string_of_int 1012));
    assert (String.equal x13 (string_of_int 1013));
    assert (String.equal x14 (string_of_int 14));
    let #(x8, x9, x10, x11, x12, x13, x14, x15, x16) : #(elt * elt * elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 8 in
    assert (String.equal x8 (string_of_int 8));
    assert (String.equal x9 (string_of_int 9));
    assert (String.equal x10 (string_of_int 1010));
    assert (String.equal x11 (string_of_int 1011));
    assert (String.equal x12 (string_of_int 1012));
    assert (String.equal x13 (string_of_int 1013));
    assert (String.equal x14 (string_of_int 14));
    assert (String.equal x15 (string_of_int 15));
    assert (String.equal x16 (string_of_int 16));
    let #(x9, x10, x11, x12, x13, x14, x15, x16, x17, x18) : #(elt * elt * elt * elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 9 in
    assert (String.equal x9 (string_of_int 9));
    assert (String.equal x10 (string_of_int 1010));
    assert (String.equal x11 (string_of_int 1011));
    assert (String.equal x12 (string_of_int 1012));
    assert (String.equal x13 (string_of_int 1013));
    assert (String.equal x14 (string_of_int 14));
    assert (String.equal x15 (string_of_int 15));
    assert (String.equal x16 (string_of_int 16));
    assert (String.equal x17 (string_of_int 1017));
    assert (String.equal x18 (string_of_int 1018));
    let #(x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20) : #(elt * elt * elt * elt * elt * elt * elt * elt * elt * elt * elt) = reinterp_get a 10 in
    assert (String.equal x10 (string_of_int 1010));
    assert (String.equal x11 (string_of_int 1011));
    assert (String.equal x12 (string_of_int 1012));
    assert (String.equal x13 (string_of_int 1013));
    assert (String.equal x14 (string_of_int 14));
    assert (String.equal x15 (string_of_int 15));
    assert (String.equal x16 (string_of_int 16));
    assert (String.equal x17 (string_of_int 1017));
    assert (String.equal x18 (string_of_int 1018));
    assert (String.equal x19 (string_of_int 1019));
    assert (String.equal x20 (string_of_int 1020));
  end
  end
