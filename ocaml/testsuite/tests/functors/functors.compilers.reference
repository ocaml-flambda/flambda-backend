(setglobal Functors!
  (let
    (O =
       (module-defn(O) Functors functors.ml(12):187-282
         (function X is_a_functor always_inline never_loop
           (let
             (X =a X
              cow = (function x[int] : int (apply (field 0 X) x))
              sheep = (function x[int] : int (+ 1 (apply cow x))))
             (makeblock 0 cow sheep))))
     F =
       (module-defn(F) Functors functors.ml(17):284-395
         (function X Y is_a_functor always_inline never_loop
           (let
             (X =a X
              Y =a Y
              cow =
                (function x[int] : int
                  (apply (field 0 Y) (apply (field 0 X) x)))
              sheep = (function x[int] : int (+ 1 (apply cow x))))
             (makeblock 0 cow sheep))))
     F1 =
       (module-defn(F1) Functors functors.ml(31):519-635
         (function X Y is_a_functor always_inline never_loop
           (let
             (X =a X
              Y =a Y
              cow =
                (function x[int] : int
                  (apply (field 0 Y) (apply (field 0 X) x)))
              sheep = (function x[int] : int (+ 1 (apply cow x))))
             (makeblock 0 sheep))))
     F2 =
       (module-defn(F2) Functors functors.ml(36):637-787
         (function X Y is_a_functor always_inline never_loop
           (let
             (X =a (makeblock 0 (field 1 X))
              Y =a (makeblock 0 (field 1 Y))
              cow =
                (function x[int] : int
                  (apply (field 0 Y) (apply (field 0 X) x)))
              sheep = (function x[int] : int (+ 1 (apply cow x))))
             (makeblock 0 sheep))))
     M =
       (module-defn(M) Functors functors.ml(41):789-973
         (let
           (F =
              (module-defn(F) Functors.M functors.ml(44):852-969
                (function X Y is_a_functor always_inline never_loop
                  (let
                    (X =a X
                     Y =a Y
                     cow =
                       (function x[int] : int
                         (apply (field 0 Y) (apply (field 0 X) x)))
                     sheep = (function x[int] : int (+ 1 (apply cow x))))
                    (makeblock 0 cow sheep)))))
           (makeblock 0
             (function funarg funarg is_a_functor stub
               (let
                 (let =
                    (apply F (makeblock 0 (field 1 funarg))
                      (makeblock 0 (field 1 funarg))))
                 (makeblock 0 (field 1 let))))))))
    (makeblock 0 O F F1 F2 M)))
