##### All extensions enabled
--------------------------------

modality_record:
  struct
    type t =
      {
      global_ x: string ;
      global_ y:
        int @@ local many once shared unique portable nonportable contended uncontended
        ;
      z: bool @@ unique }
  end

modality_cstrarg:
  struct
    type t =
      | Foo of global_ string * global_ string @@ portable *
      string @@ portable 
    type u =
      | Foo: global_ string * global_ string -> u 
  end

modality_val:
  sig
    val t : string -> local_ string @@ foo bar
    include S @@ bar foo
    include functor S @@ foo foo
  end

local_exp: let x = foo (local_ x) in (local_ y)

stack_exp:
  let x = stack_ 42 in
  let y = stack_ (f x) in let z = foo (stack_ 42) in foo (stack_ (f x))

fun_with_modes_on_arg:
  let f (local_ a) ~b:(local_ b) ?c:(local_ c) ?d:(local_ d= 1) ~e:(local_ e)
    ?f:(local_ f= 2) () = () in
  f

longident: No.Longidents.Require.extensions

expression: [x for x = 1 to 10]

pattern: [:_:]

core_type: local_ ('a : value) -> unit

signature: include functor F

structure: include functor F

module_expr: struct include functor F end

toplevel_phrase: ;;#2.17

top_phrase: 
;;#2.17;;


class_field: initializer [x for x = 1 to 10]

class_type_field:
  constraint local_ ('a : value) -> unit = local_ ('a : value) -> unit

class_expr: [local_ ('a : value) -> unit] No.Longidents.Require.extensions

class_type: [local_ ('a : value) -> unit] No.Longidents.Require.extensions

module_type: sig include functor F end

structure_item: ;;[x for x = 1 to 10]

signature_item: module M : sig include functor F end

binding: [:_:] = [x for x = 1 to 10]

payload: include functor F

class_signature:
  object (local_ ('a : value) -> unit)
    constraint local_ ('a : value) -> unit = local_ ('a : value) -> unit
  end

type_declaration:  local_ ('a : value) -> unit

string_of_expression: [x for x = 1 to 10]

string_of_structure: include functor F

modal_kind_struct:
  struct
    type 'a list : immutable_data with 'a
    type ('a, 'b) either : immutable_data with ('a * 'b)
    type 'a gel : kind_of_ 'a mod global
    type 'a t : _
    kind_abbrev_ immediate = value mod global unique many sync uncontended
    kind_abbrev_ immutable_data = value mod sync uncontended many
    kind_abbrev_ immutable = value mod uncontended
    kind_abbrev_ data = value mod sync many
  end

modal_kind_sig:
  sig
    type 'a list : immutable_data with 'a
    type ('a, 'b) either : immutable_data with ('a * 'b)
    type 'a gel : kind_of_ 'a mod global
    type 'a t : _
    kind_abbrev_ immediate = value mod global unique many sync uncontended
    kind_abbrev_ immutable_data = value mod sync uncontended many
    kind_abbrev_ immutable = value mod uncontended
    kind_abbrev_ data = value mod sync many
  end

tyvar: 'no_tyvars_require_extensions

jkind: value with local_ ('a : value) -> unit

mode: global

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

##### Extensions disallowed
--------------------------------

modality_record:
  struct
    type t =
      {
      global_ x: string ;
      global_ y:
        int @@ local many once shared unique portable nonportable contended uncontended
        ;
      z: bool @@ unique }
  end

modality_cstrarg:
  struct
    type t =
      | Foo of global_ string * global_ string @@ portable *
      string @@ portable 
    type u =
      | Foo: global_ string * global_ string -> u 
  end

modality_val:
  sig
    val t : string -> local_ string @@ foo bar
    include S @@ bar foo
    include functor S @@ foo foo
  end

local_exp: let x = foo (local_ x) in (local_ y)

stack_exp:
  let x = stack_ 42 in
  let y = stack_ (f x) in let z = foo (stack_ 42) in foo (stack_ (f x))

fun_with_modes_on_arg:
  let f (local_ a) ~b:(local_ b) ?c:(local_ c) ?d:(local_ d= 1) ~e:(local_ e)
    ?f:(local_ f= 2) () = () in
  f

longident: No.Longidents.Require.extensions

expression: [x for x = 1 to 10]

pattern: [:_:]

core_type: local_ ('a : value) -> unit

signature: include functor F

structure: include functor F

module_expr: struct include functor F end

toplevel_phrase: ;;#2.17

top_phrase: 
;;#2.17;;


class_field: initializer [x for x = 1 to 10]

class_type_field:
  constraint local_ ('a : value) -> unit = local_ ('a : value) -> unit

class_expr: [local_ ('a : value) -> unit] No.Longidents.Require.extensions

class_type: [local_ ('a : value) -> unit] No.Longidents.Require.extensions

module_type: sig include functor F end

structure_item: ;;[x for x = 1 to 10]

signature_item: module M : sig include functor F end

binding: [:_:] = [x for x = 1 to 10]

payload: include functor F

class_signature:
  object (local_ ('a : value) -> unit)
    constraint local_ ('a : value) -> unit = local_ ('a : value) -> unit
  end

type_declaration:  local_ ('a : value) -> unit

string_of_expression: [x for x = 1 to 10]

string_of_structure: include functor F

modal_kind_struct:
  struct
    type 'a list : immutable_data with 'a
    type ('a, 'b) either : immutable_data with ('a * 'b)
    type 'a gel : kind_of_ 'a mod global
    type 'a t : _
    kind_abbrev_ immediate = value mod global unique many sync uncontended
    kind_abbrev_ immutable_data = value mod sync uncontended many
    kind_abbrev_ immutable = value mod uncontended
    kind_abbrev_ data = value mod sync many
  end

modal_kind_sig:
  sig
    type 'a list : immutable_data with 'a
    type ('a, 'b) either : immutable_data with ('a * 'b)
    type 'a gel : kind_of_ 'a mod global
    type 'a t : _
    kind_abbrev_ immediate = value mod global unique many sync uncontended
    kind_abbrev_ immutable_data = value mod sync uncontended many
    kind_abbrev_ immutable = value mod uncontended
    kind_abbrev_ data = value mod sync many
  end

tyvar: 'no_tyvars_require_extensions

jkind: value with local_ ('a : value) -> unit

mode: global

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

##### Calling [Language_extension.For_pprintast.make_printer_exporter ()]
--------------------------------

>> Fatal error: Only Pprintast may use [Language_extension.For_pprintast]
Correctly raised a fatal error
