;**************************************************************************
;*                                                                        *
;*                                 OCaml                                  *
;*                                                                        *
;*                Diana Kalinichenko, Jane Street, New York               *
;*                                                                        *
;*   Copyright 2024 Jane Street Group LLC                                 *
;*                                                                        *
;*   All rights reserved.  This file is distributed under the terms of    *
;*   the GNU Lesser General Public License version 2.1, with the          *
;*   special exception on linking described in the file LICENSE.          *
;*                                                                        *
;**************************************************************************

;; [upstream_compatible] was renamed to [stdlib_upstream_compatible].
;; This library clones [stdlib_upstream_compatible] until we move all
;; existing uses of [upstream_compatible] to [stdlib_upstream_compatible].

(library
 (name upstream_compatible)
 (public_name ocaml.upstream_compatible)
 (modes byte native)
 (flags
  (:standard
   -strict-sequence
   -absname
   -bin-annot
   -safe-string
   -strict-formats
   -extension-universe
   upstream_compatible))
 (ocamlopt_flags
  (:include %{project_root}/ocamlopt_flags.sexp))
 (library_flags
  (:standard -linkall)))

;; We clone files from [stdlib_upstream_compatible] instead of re-exporting the library
;; to avoid adding a new transitive dependency to builds.

(rule
 (deps
  (glob_files ../stdlib_upstream_compatible/*.{ml,mli}))
 (targets
  float_u.ml
  float_u.mli
  int32_u.ml
  int32_u.mli
  int64_u.ml
  int64_u.mli
  nativeint_u.ml
  nativeint_u.mli
  upstream_compatible.ml
  upstream_compatible.mli)
 (action
  (bash
   "cp ../stdlib_upstream_compatible/*.{ml,mli} .; mv stdlib_upstream_compatible.ml upstream_compatible.ml; mv stdlib_upstream_compatible.mli upstream_compatible.mli")))

(rule
 (deps
  (:first-dep ../to_install.sh)
  (glob_files *.mli))
 (action
  (with-stdout-to
   to_install.sexp
   (run "%{first-dep}" "upstream_compatible"))))
