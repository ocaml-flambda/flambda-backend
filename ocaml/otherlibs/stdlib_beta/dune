;**************************************************************************
;*                                                                        *
;*                                 OCaml                                  *
;*                                                                        *
;*                Diana Kalinichenko, Jane Street, New York               *
;*                                                                        *
;*   Copyright 2024 Jane Street Group LLC                                 *
;*                                                                        *
;*   All rights reserved.  This file is distributed under the terms of    *
;*   the GNU Lesser General Public License version 2.1, with the          *
;*   special exception on linking described in the file LICENSE.          *
;*                                                                        *
;**************************************************************************

(library
 (name stdlib_beta)
 (public_name ocaml.stdlib_beta)
 (modes byte native)
 (flags
  (:standard
   -strict-sequence
   -absname
   -bin-annot
   -safe-string
   -strict-formats
   -extension-universe
   beta))
 (ocamlopt_flags
  (:include %{project_root}/ocamlopt_flags.sexp))
 (library_flags
  (:standard -linkall)))

(rule
 (targets
  float32.ml
  float32.mli
  float32_u.ml
  float32_u.mli
  stdlib_beta.ml
  stdlib_beta.mli)
 (deps
  amd64/float32.ml
  amd64/float32.mli
  amd64/float32_u.ml
  amd64/float32_u.mli
  amd64/stdlib_beta.ml
  amd64/stdlib_beta.mli)
 (enabled_if
  (= %{architecture} "amd64"))
 (action
  (progn
   (copy amd64/float32.ml float32.ml)
   (copy amd64/float32.mli float32.mli)
   (copy amd64/float32_u.ml float32_u.ml)
   (copy amd64/float32_u.mli float32_u.mli)
   (copy amd64/stdlib_beta.ml stdlib_beta.ml)
   (copy amd64/stdlib_beta.mli stdlib_beta.mli))))

(rule
 (targets stdlib_beta.ml stdlib_beta.mli)
 (deps generic/stdlib_beta.ml generic/stdlib_beta.mli)
 (enabled_if
  (<> %{architecture} "amd64"))
 (action
  (progn
   (copy generic/stdlib_beta.ml stdlib_beta.ml)
   (copy generic/stdlib_beta.mli stdlib_beta.mli))))

(rule
 (deps
  (:first-dep ../to_install.sh)
  (source_tree .))
 (action
  (with-stdout-to
   to_install.sexp
   (run "%{first-dep}" "stdlib_beta"))))
