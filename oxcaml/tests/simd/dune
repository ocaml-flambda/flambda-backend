; Helpers

(library
 (name simd_test_helpers)
 (wrapped false)
 (modules test_helpers))

(rule
 (targets ops_u.ml)
 (deps unbox_types.ml ops.ml)
 (action
  (with-stdout-to
   ops_u.ml
   (cat "unbox_types.ml" "ops.ml"))))

; Stubs

(foreign_library
 (archive_name stubs)
 (language c)
 (names stubs stubs256)
 (flags
  (:standard -mavx2))
 (include_dirs "../../../%{env:RUNTIME_DIR=runtime-dir-env-var-not-set}"))

; Tests with external assembler

(executables
 (names
  basic
  basic_u
  basic256
  basic256_u
  ops
  ops_u
  arrays
  arrays_u
  scalar_ops
  consts
  consts_u
  callback
  callback256)
 (modules
  basic
  basic_u
  basic256
  basic256_u
  ops
  ops_u
  arrays
  arrays_u
  scalar_ops
  consts
  consts_u
  callback
  callback256)
 (libraries simd_test_helpers stdlib_stable stdlib_upstream_compatible)
 (foreign_archives stubs)
 (ocamlopt_flags
  (:standard -extension simd_beta)))

(rule
 (enabled_if
  (= %{context_name} "main"))
 (targets
  basic.out
  basic_u.out
  basic256.out
  basic256_u.out
  ops.out
  ops_u.out
  arrays.out
  arrays_u.out
  scalar_ops.out
  consts.out
  consts_u.out
  callback.out
  callback256.out)
 (deps
  basic.exe
  basic_u.exe
  basic256.exe
  basic256_u.exe
  ops.exe
  arrays.exe
  arrays_u.exe
  scalar_ops.exe
  consts.exe
  consts_u.exe
  callback.exe
  callback256.exe)
 (action
  (progn
   (with-outputs-to
    basic.out
    (run ./basic.exe))
   (with-outputs-to
    basic_u.out
    (run ./basic_u.exe))
   (with-outputs-to
    basic256.out
    (run ./basic256.exe))
   (with-outputs-to
    basic256_u.out
    (run ./basic256_u.exe))
   (with-outputs-to
    ops.out
    (run ./ops.exe))
   (with-outputs-to
    ops_u.out
    (run ./ops_u.exe))
   (with-outputs-to
    arrays.out
    (run ./arrays.exe))
   (with-outputs-to
    arrays_u.out
    (run ./arrays_u.exe))
   (with-outputs-to
    scalar_ops.out
    (run ./scalar_ops.exe))
   (with-outputs-to
    consts.out
    (run ./consts.exe))
   (with-outputs-to
    consts_u.out
    (run ./consts_u.exe))
   (with-outputs-to
    callback.out
    (run ./callback.exe))
   (with-outputs-to
    callback256.out
    (run ./callback256.exe)))))

(rule
 (alias runtest)
 (enabled_if
  (and
   (= %{context_name} "main")
   (= %{architecture} "amd64")))
 (action
  (progn
   (diff empty.expected basic.out)
   (diff empty.expected basic_u.out)
   (diff empty.expected basic256.out)
   (diff empty.expected basic256_u.out)
   (diff empty.expected ops.out)
   (diff empty.expected ops_u.out)
   (diff empty.expected arrays.out)
   (diff empty.expected arrays_u.out)
   (diff empty.expected scalar_ops.out)
   (diff empty.expected consts.out)
   (diff empty.expected consts_u.out)
   (diff empty.expected callback.out)
   (diff empty.expected callback256.out))))

; Tests with nodynlink

(rule
 (targets
  basic_nodynlink.ml
  basic_u_nodynlink.ml
  basic256_nodynlink.ml
  basic256_u_nodynlink.ml
  ops_nodynlink.ml
  ops_u_nodynlink.ml
  consts_nodynlink.ml
  consts_u_nodynlink.ml
  arrays_nodynlink.ml
  arrays_u_nodynlink.ml
  scalar_ops_nodynlink.ml
  callback_nodynlink.ml
  callback256_nodynlink.ml)
 (deps
  basic.ml
  basic_u.ml
  basic256.ml
  basic256_u.ml
  ops.ml
  ops_u.ml
  consts.ml
  consts_u.ml
  arrays.ml
  arrays_u.ml
  scalar_ops.ml
  callback.ml
  callback256.ml)
 (action
  (progn
   (copy basic.ml basic_nodynlink.ml)
   (copy basic_u.ml basic_u_nodynlink.ml)
   (copy basic256.ml basic256_nodynlink.ml)
   (copy basic256_u.ml basic256_u_nodynlink.ml)
   (copy ops.ml ops_nodynlink.ml)
   (copy ops_u.ml ops_u_nodynlink.ml)
   (copy consts.ml consts_nodynlink.ml)
   (copy consts_u.ml consts_u_nodynlink.ml)
   (copy arrays.ml arrays_nodynlink.ml)
   (copy arrays_u.ml arrays_u_nodynlink.ml)
   (copy scalar_ops.ml scalar_ops_nodynlink.ml)
   (copy callback.ml callback_nodynlink.ml)
   (copy callback256.ml callback256_nodynlink.ml))))

(executables
 (names
  basic_nodynlink
  basic_u_nodynlink
  basic256_nodynlink
  basic256_u_nodynlink
  ops_nodynlink
  ops_u_nodynlink
  consts_nodynlink
  consts_u_nodynlink
  arrays_nodynlink
  arrays_u_nodynlink
  scalar_ops_nodynlink
  callback_nodynlink
  callback256_nodynlink)
 (modules
  basic_nodynlink
  basic_u_nodynlink
  basic256_nodynlink
  basic256_u_nodynlink
  ops_nodynlink
  ops_u_nodynlink
  consts_nodynlink
  consts_u_nodynlink
  arrays_nodynlink
  arrays_u_nodynlink
  scalar_ops_nodynlink
  callback_nodynlink
  callback256_nodynlink)
 (libraries simd_test_helpers stdlib_stable stdlib_upstream_compatible)
 (foreign_archives stubs)
 (ocamlopt_flags
  (:standard -nodynlink -extension simd_beta)))

(rule
 (enabled_if
  (= %{context_name} "main"))
 (targets
  basic_nodynlink.out
  basic_u_nodynlink.out
  basic256_nodynlink.out
  basic256_u_nodynlink.out
  ops_nodynlink.out
  ops_u_nodynlink.out
  consts_nodynlink.out
  consts_u_nodynlink.out
  arrays_nodynlink.out
  arrays_u_nodynlink.out
  scalar_ops_nodynlink.out
  callback_nodynlink.out
  callback256_nodynlink.out)
 (deps
  basic_nodynlink.exe
  basic_u_nodynlink.exe
  basic256_nodynlink.exe
  basic256_u_nodynlink.exe
  ops_nodynlink.exe
  ops_u_nodynlink.exe
  consts_nodynlink.exe
  consts_u_nodynlink.exe
  arrays_nodynlink.exe
  arrays_u_nodynlink.exe
  scalar_ops_nodynlink.exe
  callback_nodynlink.exe
  callback256_nodynlink.exe)
 (action
  (progn
   (with-outputs-to
    basic_nodynlink.out
    (run ./basic_nodynlink.exe))
   (with-outputs-to
    basic_u_nodynlink.out
    (run ./basic_u_nodynlink.exe))
   (with-outputs-to
    basic256_nodynlink.out
    (run ./basic256_nodynlink.exe))
   (with-outputs-to
    basic256_u_nodynlink.out
    (run ./basic256_u_nodynlink.exe))
   (with-outputs-to
    ops_nodynlink.out
    (run ./ops_nodynlink.exe))
   (with-outputs-to
    ops_u_nodynlink.out
    (run ./ops_u_nodynlink.exe))
   (with-outputs-to
    arrays_nodynlink.out
    (run ./arrays_nodynlink.exe))
   (with-outputs-to
    arrays_u_nodynlink.out
    (run ./arrays_u_nodynlink.exe))
   (with-outputs-to
    scalar_ops_nodynlink.out
    (run ./scalar_ops_nodynlink.exe))
   (with-outputs-to
    consts_nodynlink.out
    (run ./consts_nodynlink.exe))
   (with-outputs-to
    consts_u_nodynlink.out
    (run ./consts_u_nodynlink.exe))
   (with-outputs-to
    callback_nodynlink.out
    (run ./callback_nodynlink.exe))
   (with-outputs-to
    callback256_nodynlink.out
    (run ./callback256_nodynlink.exe)))))

(rule
 (alias runtest)
 (enabled_if
  (and
   (= %{context_name} "main")
   (= %{architecture} "amd64")))
 (action
  (progn
   (diff empty.expected basic_nodynlink.out)
   (diff empty.expected basic_u_nodynlink.out)
   (diff empty.expected basic256_nodynlink.out)
   (diff empty.expected basic256_u_nodynlink.out)
   (diff empty.expected ops_nodynlink.out)
   (diff empty.expected ops_u_nodynlink.out)
   (diff empty.expected arrays_nodynlink.out)
   (diff empty.expected arrays_u_nodynlink.out)
   (diff empty.expected scalar_ops_nodynlink.out)
   (diff empty.expected consts_nodynlink.out)
   (diff empty.expected consts_u_nodynlink.out)
   (diff empty.expected callback_nodynlink.out)
   (diff empty.expected callback256_nodynlink.out))))

; Tests with probes / internal assembler - not supported on macOS

(executables
 (names probes probes256)
 (enabled_if
  (<> %{system} macosx))
 (modules probes probes256)
 (ocamlopt_flags
  (:standard -extension simd_beta))
 (foreign_archives stubs))

(rule
 (targets
  basic_internal.ml
  basic_u_internal.ml
  basic256_internal.ml
  basic256_u_internal.ml
  ops_internal.ml
  ops_u_internal.ml
  consts_internal.ml
  consts_u_internal.ml
  arrays_internal.ml
  arrays_u_internal.ml
  scalar_ops_internal.ml
  callback_internal.ml
  callback256_internal.ml)
 (deps
  basic.ml
  basic_u.ml
  basic256.ml
  basic256_u.ml
  ops.ml
  ops_u.ml
  consts.ml
  consts_u.ml
  scalar_ops.ml
  callback.ml
  callback256.ml)
 (action
  (progn
   (copy basic.ml basic_internal.ml)
   (copy basic_u.ml basic_u_internal.ml)
   (copy basic256.ml basic256_internal.ml)
   (copy basic256_u.ml basic256_u_internal.ml)
   (copy ops.ml ops_internal.ml)
   (copy ops_u.ml ops_u_internal.ml)
   (copy consts.ml consts_internal.ml)
   (copy consts_u.ml consts_u_internal.ml)
   (copy arrays.ml arrays_internal.ml)
   (copy arrays_u.ml arrays_u_internal.ml)
   (copy scalar_ops.ml scalar_ops_internal.ml)
   (copy callback.ml callback_internal.ml)
   (copy callback256.ml callback256_internal.ml))))

(executables
 (names
  basic_internal
  basic_u_internal
  basic256_internal
  basic256_u_internal
  ops_internal
  ops_u_internal
  consts_internal
  consts_u_internal
  arrays_internal
  arrays_u_internal
  scalar_ops_internal
  callback_internal
  callback256_internal)
 (modules
  basic_internal
  basic_u_internal
  basic256_internal
  basic256_u_internal
  ops_internal
  ops_u_internal
  consts_internal
  consts_u_internal
  arrays_internal
  arrays_u_internal
  scalar_ops_internal
  callback_internal
  callback256_internal)
 (libraries simd_test_helpers stdlib_stable stdlib_upstream_compatible)
 (enabled_if
  (<> %{system} macosx))
 (foreign_archives stubs)
 (ocamlopt_flags
  (:standard -internal-assembler -extension simd_beta)))

(rule
 (enabled_if
  (and
   (= %{context_name} "main")
   (<> %{system} macosx)))
 (targets
  probes.out
  probes256.out
  basic_internal.out
  basic_u_internal.out
  basic256_internal.out
  basic256_u_internal.out
  ops_internal.out
  ops_u_internal.out
  consts_internal.out
  consts_u_internal.out
  arrays_internal.out
  arrays_u_internal.out
  scalar_ops_internal.out
  callback_internal.out
  callback256_internal.out)
 (deps
  probes.exe
  probes256.exe
  basic_internal.exe
  basic_u_internal.exe
  basic256_internal.exe
  basic256_u_internal.exe
  ops_internal.exe
  ops_u_internal.exe
  consts_internal.exe
  consts_u_internal.exe
  arrays_internal.exe
  arrays_u_internal.exe
  scalar_ops_internal.exe
  callback_internal.exe
  callback256_internal.exe)
 (action
  (progn
   (with-outputs-to
    probes.out
    (run ./probes.exe))
   (with-outputs-to
    probes256.out
    (run ./probes256.exe))
   (with-outputs-to
    basic256_internal.out
    (run ./basic256_internal.exe))
   (with-outputs-to
    basic256_u_internal.out
    (run ./basic256_u_internal.exe))
   (with-outputs-to
    basic_internal.out
    (run ./basic_internal.exe))
   (with-outputs-to
    basic_u_internal.out
    (run ./basic_u_internal.exe))
   (with-outputs-to
    ops_internal.out
    (run ./ops_internal.exe))
   (with-outputs-to
    ops_u_internal.out
    (run ./ops_u_internal.exe))
   (with-outputs-to
    arrays_internal.out
    (run ./arrays_internal.exe))
   (with-outputs-to
    arrays_u_internal.out
    (run ./arrays_u_internal.exe))
   (with-outputs-to
    scalar_ops_internal.out
    (run ./scalar_ops_internal.exe))
   (with-outputs-to
    consts_internal.out
    (run ./consts_internal.exe))
   (with-outputs-to
    consts_u_internal.out
    (run ./consts_u_internal.exe))
   (with-outputs-to
    callback_internal.out
    (run ./callback_internal.exe))
   (with-outputs-to
    callback256_internal.out
    (run ./callback256_internal.exe)))))

(rule
 (alias runtest)
 (enabled_if
  (and
   (= %{context_name} "main")
   (= %{architecture} "amd64")
   (<> %{system} macosx)))
 (action
  (progn
   (diff empty.expected probes.out)
   (diff empty.expected probes256.out)
   (diff empty.expected basic_internal.out)
   (diff empty.expected basic_u_internal.out)
   (diff empty.expected basic256_internal.out)
   (diff empty.expected basic256_u_internal.out)
   (diff empty.expected ops_internal.out)
   (diff empty.expected ops_u_internal.out)
   (diff empty.expected arrays_internal.out)
   (diff empty.expected arrays_u_internal.out)
   (diff empty.expected scalar_ops_internal.out)
   (diff empty.expected consts_internal.out)
   (diff empty.expected consts_u_internal.out)
   (diff empty.expected callback_internal.out)
   (diff empty.expected callback256_internal.out))))
