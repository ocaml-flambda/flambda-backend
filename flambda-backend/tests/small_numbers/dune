; Stubs

(foreign_library
 (archive_name stubs)
 (language c)
 (names stubs)
 (flags -msse4.2)
 (include_dirs "../../../%{env:RUNTIME_DIR=runtime-dir-env-var-not-set}"))

; Tests with external assembler

(executables
 (names float32_builtin float32_lib float32_u_lib)
 (modules float32_builtin float32_lib float32_u_lib)
 (libraries stdlib_stable)
 (foreign_archives stubs))

(rule
 (enabled_if
  (= %{context_name} "main"))
 (targets float32_builtin.out float32_lib.out float32_u_lib.out)
 (deps float32_builtin.exe float32_lib.exe float32_u_lib.exe)
 (action
  (progn
   (with-outputs-to
    float32_builtin.out
    (run ./float32_builtin.exe))
   (with-outputs-to
    float32_lib.out
    (run ./float32_lib.exe))
   (with-outputs-to
    float32_u_lib.out
    (run ./float32_u_lib.exe)))))

(rule
 (alias runtest)
 (enabled_if
  (and
   (= %{context_name} "main")
   (= %{architecture} "amd64")))
 (action
  (progn
   (diff empty.expected float32_builtin.out)
   (diff empty.expected float32_lib.out)
   (diff empty.expected float32_u_lib.out))))

; Bytecode tests

(rule
 (targets
  stubs_bytecode.c
  float32_builtin_bytecode.ml
  float32_lib_bytecode.ml
  float32_u_lib_bytecode.ml)
 (deps stubs.c float32_builtin.ml float32_lib.ml float32_u_lib.ml)
 (action
  (progn
   (copy stubs.c stubs_bytecode.c)
   (copy float32_builtin.ml float32_builtin_bytecode.ml)
   (copy float32_lib.ml float32_lib_bytecode.ml)
   (copy float32_u_lib.ml float32_u_lib_bytecode.ml))))

(library
 (name stubs_bytecode)
 (modules)
 (foreign_stubs
  (language c)
  (names stubs_bytecode)))

(executables
 (names float32_builtin_bytecode float32_lib_bytecode float32_u_lib_bytecode)
 (modes
  (byte exe))
 (modules
  float32_builtin_bytecode
  float32_lib_bytecode
  float32_u_lib_bytecode)
 (libraries stdlib_stable stubs_bytecode)
 (ocamlc_flags
  (:standard -extension-universe beta)))

(rule
 (enabled_if
  (= %{context_name} "main"))
 (targets
  float32_builtin_bytecode.out
  float32_lib_bytecode.out
  float32_u_lib_bytecode.out)
 (deps
  float32_builtin_bytecode.exe
  float32_lib_bytecode.exe
  float32_u_lib_bytecode.exe)
 (action
  (progn
   (with-outputs-to
    float32_builtin_bytecode.out
    (run ./float32_builtin_bytecode.exe))
   (with-outputs-to
    float32_lib_bytecode.out
    (run ./float32_lib_bytecode.exe))
   (with-outputs-to
    float32_u_lib_bytecode.out
    (run ./float32_u_lib_bytecode.exe)))))

(rule
 (alias runtest)
 (enabled_if
  (and
   (= %{context_name} "main")
   (= %{architecture} "amd64")))
 (action
  (progn
   (diff empty.expected float32_builtin_bytecode.out)
   (diff empty.expected float32_lib_bytecode.out)
   (diff empty.expected float32_u_lib_bytecode.out))))

; Tests with nodynlink

(rule
 (targets
  float32_builtin_nodynlink.ml
  float32_lib_nodynlink.ml
  float32_u_lib_nodynlink.ml)
 (deps float32_builtin.ml float32_lib.ml float32_u_lib.ml)
 (action
  (progn
   (copy float32_builtin.ml float32_builtin_nodynlink.ml)
   (copy float32_lib.ml float32_lib_nodynlink.ml)
   (copy float32_u_lib.ml float32_u_lib_nodynlink.ml))))

(executables
 (names
  float32_builtin_nodynlink
  float32_lib_nodynlink
  float32_u_lib_nodynlink)
 (modules
  float32_builtin_nodynlink
  float32_lib_nodynlink
  float32_u_lib_nodynlink)
 (libraries stdlib_stable)
 (foreign_archives stubs)
 (ocamlopt_flags
  (:standard -nodynlink)))

(rule
 (enabled_if
  (= %{context_name} "main"))
 (targets
  float32_builtin_nodynlink.out
  float32_lib_nodynlink.out
  float32_u_lib_nodynlink.out)
 (deps
  float32_builtin_nodynlink.exe
  float32_lib_nodynlink.exe
  float32_u_lib_nodynlink.exe)
 (action
  (progn
   (with-outputs-to
    float32_builtin_nodynlink.out
    (run ./float32_builtin_nodynlink.exe))
   (with-outputs-to
    float32_lib_nodynlink.out
    (run ./float32_lib_nodynlink.exe))
   (with-outputs-to
    float32_u_lib_nodynlink.out
    (run ./float32_u_lib_nodynlink.exe)))))

(rule
 (alias runtest)
 (enabled_if
  (and
   (= %{context_name} "main")
   (= %{architecture} "amd64")))
 (action
  (progn
   (diff empty.expected float32_builtin_nodynlink.out)
   (diff empty.expected float32_lib_nodynlink.out)
   (diff empty.expected float32_u_lib_nodynlink.out))))

; Tests with internal assembler - not supported on macOS

(rule
 (targets
  float32_builtin_internal.ml
  float32_lib_internal.ml
  float32_u_lib_internal.ml)
 (deps float32_builtin.ml float32_lib.ml float32_u_lib.ml)
 (action
  (progn
   (copy float32_builtin.ml float32_builtin_internal.ml)
   (copy float32_lib.ml float32_lib_internal.ml)
   (copy float32_u_lib.ml float32_u_lib_internal.ml))))

(executables
 (names float32_builtin_internal float32_lib_internal float32_u_lib_internal)
 (modules
  float32_builtin_internal
  float32_lib_internal
  float32_u_lib_internal)
 (libraries stdlib_stable)
 (enabled_if
  (<> %{system} macosx))
 (foreign_archives stubs)
 (ocamlopt_flags
  (:standard -internal-assembler)))

(rule
 (enabled_if
  (and
   (= %{context_name} "main")
   (<> %{system} macosx)))
 (targets
  float32_builtin_internal.out
  float32_lib_internal.out
  float32_u_lib_internal.out)
 (deps
  float32_builtin_internal.exe
  float32_lib_internal.exe
  float32_u_lib_internal.exe)
 (action
  (progn
   (with-outputs-to
    float32_builtin_internal.out
    (run ./float32_builtin_internal.exe))
   (with-outputs-to
    float32_lib_internal.out
    (run ./float32_lib_internal.exe))
   (with-outputs-to
    float32_u_lib_internal.out
    (run ./float32_u_lib_internal.exe)))))

(rule
 (alias runtest)
 (enabled_if
  (and
   (= %{context_name} "main")
   (= %{architecture} "amd64")
   (<> %{system} macosx)))
 (action
  (progn
   (diff empty.expected float32_builtin_internal.out)
   (diff empty.expected float32_lib_internal.out)
   (diff empty.expected float32_u_lib_internal.out))))
